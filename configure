#!/bin/bash

# Help display function
function print_help ()
{
 echo ""
 echo "---------------------------------------------------------------------"
 echo "| Korali - High-performance framework for optimization, sampling    |"
 echo "|          and Bayesian uncertainty quantification of large scale   |"
 echo "|          computational models.                                    |"
 echo "| Authors: Georgios Arampatzis, Sergio Martin, Daniel Waelchli      |"
 echo "|          CSELab - ETH Zurich - Prof. Koumoutsakos                 |"
 echo "---------------------------------------------------------------------"
 echo ""
 echo "Configuration syntax:"
 echo "./configure"
 echo "   [--prefix=INSTALL_DIR]"
 echo ""
 echo "Where:"
 echo " INSTALL_DIR is the path where to install Korali."
 echo " --help Displays this help message."
}

PREFIX=$PWD/korali

for i in "$@"
do
case $i in
    --prefix=*)
    PREFIX="${i#*=}"
    shift 
    ;;
    --help)
    print_help
    exit 0 
    shift 
    ;;
    *)
    print_help
    echo ""
    echo "[Korali] Error: Unknown option $i."       
    exit 1
    ;;
esac
done

echo "[Korali] Configuring Korali..."

######## Checking Architecture ####

# Checking for architecture
arch="$(uname -s)"

# Linux Architecture is default
SHAREDLIB_FLAG="-shared"

if [ "$arch" == "Linux" ]; then
echo "[Korali] Linux System Detected..."
fi

# If using MacOs, change flags 
if [ "$arch" == "Darwin" ]; then
 echo "[Korali] MacOS (Darwin) System Detected..."
 SHAREDLIB_FLAG="-dynamiclib"
fi

######## Checking Compiler ########

$CXX --version > /dev/null 2>&1
DETECTED_CXX=$?
c++ --version > /dev/null 2>&1
DETECTED_CPLUSPLUS=$?
g++ --version > /dev/null 2>&1
DETECTED_GXX=$?
clang++ --version > /dev/null 2>&1
DETECTED_CLANG=$?
icpc --version > /dev/null 2>&1
DETECTED_ICPC=$?
 
USE_CXX=""
if [ $DETECTED_CPLUSPLUS -eq 0 ]; then USE_CXX=c++;     fi;
if [ $DETECTED_GXX       -eq 0 ]; then USE_CXX=g++;     fi;
if [ $DETECTED_ICPC      -eq 0 ]; then USE_CXX=icpc;    fi;
if [ $DETECTED_CLANG     -eq 0 ]; then USE_CXX=clang++; fi;
if [ $DETECTED_CXX       -eq 0 ]; then USE_CXX=$CXX;    fi;

######## Checking support for GNU Scientific Library ########

echo "[Korali] Looking for existing GNU Scientific Library (GSL)."

gslcfgFile=${PWD}/libs/gsl/bin/gsl-config
if [ ! -f "$gslcfgFile" ]; then
 gslcfgFile=gsl-config
fi

echo "[Korali] Running \"$gslcfgFile --version\"..."
gslver=`$gslcfgFile --version`
mingslver=2.5
if [  $? -eq 0 ]
then
 echo "[Korali] Found GSL version $gslver."
 cmpver=`printf "${gslver}\n${mingslver}" | sort -V | head -n 1`
 if [[ "$cmpver" != "$mingslver" ]]; then
   echo -e "[Korali] \e[31mError:\e[0m GSL Version found (${gslver}) is smaller than required (${mingslver})."
   echo -e "[Korali] \e[32mSolution:\e[0m Run ./tools/install-reqs gsl to install a local GSL automatically."
   exit -1
 fi
fi

######## Checking support for MPI ########

$MPICXX --version > /dev/null 2>&1
if [ ! $? -eq 0 ]
then
 echo "[Korali] No MPI compiler command found in \$MPICXX."
 echo "[Korali] Use 'export MPICXX=(path)' to enable MPI support."
 USE_MPI=0
else
 echo "[Korali] Found $MPICXX for MPI compiler/wrapper."
 echo "[Korali] Use 'export MPICXX=(path)' to use a different MPI wrapper."
 echo "[Korali] Configuring with support for the MPI Conduit"
 USE_CXX=$MPICXX
 USE_MPI=1
fi

######## Checking support for Python3 ########

echo "[Korali] Checking for Python3 support using \"python3 --version\"."
python3 --version > /dev/null 2>&1
if [ $? -eq 0 ]; then
  echo "[Korali] Checking for python3-config."
  python3-config --help > /dev/null 2>&1
  if [ $? -ne 0 ]; then
    echo "[Korali] Error: python3-config not found."
    echo "[Korali] Please make sure python3 is correctly installed."
    exit
  fi
else
  echo "[Korali] Error: Python3 not found."
  echo "[Korali] Please make sure the python3-config command is accesible in the PATH environment variable."
  exit
fi

######## Checking selected compiler #######

if [[ "$USE_CXX" == "" ]]
then
  echo "[Korali] Error: Did not found any valid C++ or MPI C++ compiler. Please define \$CXX."
  exit -1
fi

######## Determining Compilation Flags ########

CXXFLAGS="-I$PREFIX/include -I$PREFIX/lib/koraligsl/include/gsl --std=c++14 -Wno-unused -Wunused-result -Wno-unused-parameter -Wno-address -Wno-deprecated-declarations -Wall -Wfatal-errors -Wno-c++17-extensions"

######## Creating Config File ########

echo "PREFIX=$PREFIX" > korali.config
echo "CXX=$USE_CXX" >> korali.config
echo "CXXFLAGS=\"$CXXFLAGS"\" >> korali.config
echo "GSLCONFIG=$gslcfgFile" >> korali.config
echo "LDFLAGS=\"`python3-config --ldflags`\"" >> korali.config
echo "SHAREDLIB_FLAG=$SHAREDLIB_FLAG" >> korali.config
echo "USE_MPI=$USE_MPI" >> korali.config

echo "[Korali] ---------------------------------------------------"
echo "[Korali] Configuration was successful."
echo "[Korali] Install Path: $PREFIX"
echo "[Korali] Run 'make install' to install Korali."
