# This file is subject to the license agreement located in the file LICENSE
# and cannot be distributed without it. This notice cannot be removed or modified. 
#!/bin/bash

# Help display function
function print_help ()
{
 echo ""
 echo "---------------------------------------------------------------------"
 echo "| Korali - High-performance framework for optimization, sampling    |"
 echo "|          and Bayesian uncertainty quantification of large scale   |"
 echo "|          computational models.                                    |"
 echo "| Authors: Georgios Arampatzis, Sergio Martin, Daniel Waelchli      |"
 echo "|          CSELab - ETH Zurich - Prof. Koumoutsakos                 |"
 echo "---------------------------------------------------------------------"
 echo ""
 echo "Configuration syntax:"
 echo "./configure"
 echo "   [--prefix=INSTALL_DIR]"
 echo "   [--build=BUILD_DIR]"
 echo ""
 echo "Where:"
 echo " INSTALL_DIR is the path where to install Korali."
 echo " BUILD_DIR is the build path."
 echo " --help Displays this help message."
}


PREFIX=$PWD/korali
BUILD=$PWD/build

for i in "$@"
do
case $i in
    --prefix=*)
    PREFIX="${i#*=}"
    shift 
    ;;
    --prefix=*)
    BUILD="${i#*=}"
    shift 
    ;;
    --help)
    print_help
    exit 0 
    shift 
    ;;
    *)
    print_help
    echo ""
    echo "[Korali] Error: Unknown option $i."       
    exit 1
    ;;
esac
done

######## Checking compiler ########

$CXX --version > /dev/null 2>&1
if [ ! $? -eq 0 ]
then
 echo "[Korali] Error: No valid C++ compiler defined in \$CXX"
 exit -1
else
 echo "[Korali] Using \$CXX=$CXX as C++ compiler."
fi

######## Checking support for MPI ########

mpicxx --version > /dev/null 2>&1
if [ ! $? -eq 0 ]
then
 echo "[Korali] No mpicxx command found, disabling support for MPI."
 USE_MPI=0
else
 echo "[Korali] Configuring with support for the MPI Conduit"
 USE_MPI=1
fi

######## Checking support for UPC++ ########

upcxx --version > /dev/null 2>&1
if [ ! $? -eq 0 ]
then
 echo "[Korali] No upcxx command found, disabling support for UPCXX."
 USE_UPCXX=0
else
 upcxx-meta CPPFLAGS > /dev/null 2>&1
 if [ ! $? -eq 0 ]
 then
  echo "[Korali] No upcxx-meta command found, disabling support for UPCXX."
  USE_UPCXX=0
 else
  echo "[Korali] Configuring with support for the UPC++ Conduit."
  USE_UPCXX=1
 fi
fi

######## Checking support for POSIX Threads ########

$CXX -v 2>&1 > /dev/null | grep posix > /dev/null 2>&1
if [ ! $? -eq 0 ]
then
 echo "[Korali] No compiler support for POSIX Threads found."
 USE_MULTITHREAD=0
else
 echo "[Korali] Configuring with support for the Pthreads Conduit."
 USE_MULTITHREAD=1
fi

######## Checking support for Python3 ########

echo "[Korali] Detecting Python 3.x using \"pkg-config python3\"."
pkg-config python3 > /dev/null 2>&1
if [ $? -eq 0 ]; then
  echo "[Korali] Configuring with support for Python 3.x."
  USE_PYTHON=1
else
  echo "[Korali] Configuring without support for Python 3.x."
  USE_PYTHON=0
fi

######## Creating Config File ########

echo "[Korali] Creating korali.config..."
echo "BUILD=$BUILD" > korali.config
echo "PREFIX=$PREFIX" >> korali.config
echo "CXX=$CXX" >> korali.config
echo "USE_MPI=$USE_MPI" >> korali.config
echo "USE_UPCXX=$USE_UPCXX" >> korali.config
echo "USE_MULTITHREAD=$USE_MULTITHREAD" >> korali.config
echo "USE_PTHREADS=$USE_PTHREADS" >> korali.config
echo "USE_PYTHON=$USE_PYTHON" >> korali.config

echo "[Korali] Configuration was successful."
echo "[Korali] Build Path  : $BUILD"
echo "[Korali] Install Path: $PREFIX"
echo "[Korali] Run 'make install' to install Korali."
