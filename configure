#!/bin/bash

# Help display function
function print_help ()
{
 echo ""
 echo "---------------------------------------------------------------------"
 echo "| Korali - High-performance framework for optimization, sampling    |"
 echo "|          and Bayesian uncertainty quantification of large scale   |"
 echo "|          computational models.                                    |"
 echo "| Authors: Georgios Arampatzis, Sergio Martin, Daniel Waelchli      |"
 echo "|          CSELab - ETH Zurich - Prof. Koumoutsakos                 |"
 echo "---------------------------------------------------------------------"
 echo ""
 echo "Configuration syntax:"
 echo "./configure"
 echo "   [--prefix=INSTALL_DIR]"
 echo "   [--install-gsl]"
 echo "   [--help]"
 echo ""
 echo "Where:"
 echo " INSTALL_DIR is the path where to install Korali."
 echo " --install-gsl Automatically downloads and installs GSL if not found."
 echo " --help Displays this help message."
}

INSTALLGSL=0
PREFIX=$HOME/.local

for i in "$@"
do
case $i in
    --prefix=*)
    PREFIX="${i#*=}"
    shift 
    ;;
    --install-gsl)
    INSTALLGSL=1
    shift 
    ;;
    --help)
    print_help
    exit 0 
    shift 
    ;;
    *)
    print_help
    echo ""
    echo "[Korali] Error:  Unknown option $i."       
    exit 1
    ;;
esac
done

echo "[Korali] Configuring Korali..."

######## Checking Architecture ####

# Checking for architecture
arch="$(uname -s)"

# Linux Architecture is default
SHAREDLIB_FLAG="-shared"

if [ "$arch" == "Linux" ]; then
echo "[Korali] Linux System Detected."
fi

# If using MacOs, change flags 
if [ "$arch" == "Darwin" ]; then
 echo "[Korali] MacOS (Darwin) System Detected."
 SHAREDLIB_FLAG="-dynamiclib"
fi

######## Checking Compiler ########

$CXX --version > /dev/null 2>&1
DETECTED_CXX=$?
c++ --version > /dev/null 2>&1
DETECTED_CPLUSPLUS=$?
g++ --version > /dev/null 2>&1
DETECTED_GXX=$?
clang++ --version > /dev/null 2>&1
DETECTED_CLANG=$?
icpc --version > /dev/null 2>&1
DETECTED_ICPC=$?
 
USE_CXX=""
if [ $DETECTED_CPLUSPLUS -eq 0 ]; then USE_CXX=c++;     fi;
if [ $DETECTED_GXX       -eq 0 ]; then USE_CXX=g++;     fi;
if [ $DETECTED_ICPC      -eq 0 ]; then USE_CXX=icpc;    fi;
if [ $DETECTED_CLANG     -eq 0 ]; then USE_CXX=clang++; fi;
if [ $DETECTED_CXX       -eq 0 ]; then USE_CXX=$CXX;    fi;

######## Checking support for GNU Scientific Library ########

echo "[Korali] Looking for existing GNU Scientific Library (GSL)."

gslcfgFile=${PREFIX}/bin/gsl-config
if [ ! -f "$gslcfgFile" ]; then
 gslcfgFile=gsl-config
fi

echo "[Korali] Running \"$gslcfgFile --version\"..."
gslver=`$gslcfgFile --version`
mingslver=2.5
if [  $? -eq 0 ]
then
 echo "[Korali] Found GSL version $gslver."
 cmpver=`printf "${gslver}\n${mingslver}" | sort -V | head -n 1`
 if [[ "$cmpver" != "$mingslver" ]]; then
  if [ $INSTALLGSL -eq 0 ]; then
   echo "[Korali] Error: GSL Version found (${gslver}) is smaller than required (${mingslver})."
   echo "[Korali] Solution: Re-run ./configure with the --install-gsl option."
   exit -1
  else
   echo "[Korali] Downloading GNU Scientific Library... "
   mkdir -p $PREFIX
   CURDIR=$PWD
   rm -f gsl-2.5.tar.gz 
   wget "ftp://ftp.gnu.org/gnu/gsl/gsl-2.5.tar.gz" 
   tar -xzvf gsl-2.5.tar.gz > /dev/null 2>&1
   echo "[Korali] Configuring GNU Scientific Library... "
   cd gsl-2.5 
   ./configure --prefix=$PREFIX > /dev/null 2>&1 
   echo "[Korali] Compiling GNU Scientific Library... "
   make -j10 > /dev/null 2>&1
   echo "[Korali] Installing GNU Scientific Library... "
   make install > /dev/null 2>&1
   if [  $? -ne 0 ]; then
    echo -e "[Korali] \e[31mError: Failed GNU Scientific Library installation."
    exit -1
   fi
   cd .. 
   rm -rf gsl-2.5 gsl-2.5.tar.gz > /dev/null 2>&1
   echo "[Korali] Finished installing GNU Scientific Library. "
   gslcfgFile=${PREFIX}/bin/gsl-config
  fi
 fi
fi

######## Checking support for MPI ########

echo "[Korali] Checking for MPI support using \"$MPICXX --version\"..."
$MPICXX --version > /dev/null 2>&1
if [ ! $? -eq 0 ]
then
 echo "[Korali] Warning: No MPI compiler command found in \$MPICXX."
 echo "[Korali] Suggestion: Use 'export MPICXX=(path)' to enable MPI support."
 USE_MPI=0
else
 echo "[Korali] Found $MPICXX for MPI compiler/wrapper."
 echo "[Korali] Use 'export MPICXX=(path)' to use a different MPI wrapper."
 echo "[Korali] Configuring with support for the MPI Conduit"
 USE_CXX=$MPICXX
 USE_MPI=1
fi

######## Checking support for Python3 ########

echo "[Korali] Checking for Python3 support using \"python3 -m pybind11 -h\"..."
python3 -m pybind11 -h > /dev/null 2>&1
if [ $? -ne 0 ]; then
  echo "[Korali] Error: pybind11 not found."
  echo "[Korali] Solution: Install pybind11 with \"pip3 install --user pybind11\"."
  exit -1
fi
echo "[Korali] Pybind11 found."

######## Checking support for Pybind11 ########

echo "[Korali] Checking for Pybind11 support using \"python3 --version\"."
pyver=`python3 --version`
if [ $? -eq 0 ]; then
  echo "[Korali] Checking for python3-config."
  python3-config --help > /dev/null 2>&1
  if [ $? -ne 0 ]; then
    echo "[Korali] Error: python3-config not found."
    echo "[Korali] Solution: Please make sure python3 is correctly installed."
    exit
  fi
else
  echo "[Korali] Error: Python3 not found."
  echo "[Korali] Solution: Please make sure the python3-config command is accesible in the PATH environment variable."
  exit -1
fi
echo "[Korali] Python3 version $pyver found."

######## Checking selected compiler #######

if [[ "$USE_CXX" == "" ]]
then
  echo "[Korali] Error:  Did not found any valid C++ or MPI C++ compiler."
  echo "[Korali] Solution: Please define a valid C++ compiler in \$CXX."
  exit -1
fi

######## Creating Config File ########

echo "PREFIX=$PREFIX" > .korali.config
echo "CXX=$USE_CXX" >> .korali.config
echo "GSLCONFIG=$gslcfgFile" >> .korali.config
echo "SHAREDLIB_FLAG=$SHAREDLIB_FLAG" >> .korali.config
echo "USE_MPI=$USE_MPI" >> .korali.config

echo "[Korali] ---------------------------------------------------"
echo "[Korali] Configuration was successful."
echo "[Korali] Install Path: $PREFIX"
echo "[Korali] Run 'make install' to install Korali."
