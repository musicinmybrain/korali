#ifndef _KORALI_DISTRIBUTION_MULTIVARIATEHPP_
#define _KORALI_DISTRIBUTION_MULTIVARIATEHPP_

#include "modules/distribution/distribution.hpp"

namespace korali
{
namespace distribution
{
class Multivariate : public korali::Distribution
{
  public:
  /**
  * @brief Updates a specific property with a vector of values.
  * @param propertyName The name of the property to update
  * @param values double Numerical values to assign.
  */
  virtual void setProperty(const std::string &propertyName, const std::vector<double> &values) = 0;

  /**
 * @brief Gets the probability density of the distribution at points x.
 * @param x points to evaluate
 * @param result P(x) at the given points
 * @param n number of points
 */
  virtual void getDensity(double *x, double *result, const size_t n) = 0;

  /**
  * @brief Gets Log probability density of the distribution at points x.
  * @param x points to evaluate
  * @param result log(P(x)) at the given points
  * @param n number of points
  */
  virtual void getLogDensity(double *x, double *result, const size_t n) = 0;

  /**
  * @brief Draws and returns a random number vector from the distribution.
  * @param x Random real number vector.
  * @param n Vector size
  */
  virtual void getRandomVector(double *x, const size_t n) = 0;
};

} // namespace distribution
} // namespace korali

#endif // _KORALI_DISTRIBUTION_MULTIVARIATEHPP_
