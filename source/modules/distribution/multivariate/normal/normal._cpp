#include "modules/distribution/multivariate/normal/normal.hpp"
#include "modules/experiment/experiment.hpp"
#include <auxiliar/logger.hpp>

namespace korali
{
namespace distribution
{
namespace multivariate
{
void Normal::getDensity(double *x, double *result, const size_t n)
{
  if (_workVector.size() != n)
    KORALI_LOG_ERROR("multivariate::Normal::getDensity Error - requested %lu densities, but distribution is configured with %lu.\n", n, _workVector.size());

  gsl_vector_view _input_view = gsl_vector_view_array(x, n);

  gsl_ran_multivariate_gaussian_pdf(&_input_view.vector, &_mean_view.vector, &_sigma_view.matrix, result, &_work_view.vector);
}

void Normal::getLogDensity(double *x, double *result, const size_t n)
{
  gsl_vector_view _input_view = gsl_vector_view_array(x, n);

  gsl_ran_multivariate_gaussian_log_pdf(&_input_view.vector, &_mean_view.vector, &_sigma_view.matrix, result, &_work_view.vector);
}

void Normal::getRandomVector(double *x, const size_t n)
{
  gsl_vector_view _output_view = gsl_vector_view_array(x, n);

  gsl_ran_multivariate_gaussian(_range, &_mean_view.vector, &_sigma_view.matrix, &_output_view.vector);
}

void Normal::updateDistribution()
{
  size_t covarianceMatrixSize = _sigma.size();

  size_t sideSize = sqrt(covarianceMatrixSize);
  if ((sideSize * sideSize) != covarianceMatrixSize)
    KORALI_LOG_ERROR("Size of Multivariate Normal covariance matrix size (%lu) is not a perfect square number.\n", covarianceMatrixSize);

  size_t meanSize = _meanVector.size();
  if (sideSize != meanSize) KORALI_LOG_ERROR("Size of Multivariate Normal mean vector (%lu) is not the same as the side of covariance matrix (%lu).\n", meanSize, sideSize);

  _workVector.resize(meanSize);

  _sigma_view = gsl_matrix_view_array(_sigma.data(), sideSize, sideSize);
  _mean_view = gsl_vector_view_array(_meanVector.data(), meanSize);
  _work_view = gsl_vector_view_array(_workVector.data(), meanSize);
}

void Normal::setProperty(const std::string &propertyName, const std::vector<double> &values)
{
  bool recognizedProperty = false;
  if (propertyName == "Mean Vector")
  {
    _meanVector = values;
    recognizedProperty = true;
  }
  if (propertyName == "Sigma")
  {
    _sigma = values;
    recognizedProperty = true;
  }
  if (recognizedProperty == false) KORALI_LOG_ERROR("Unrecognized property: %s for the Multivariate Normal distribution", propertyName.c_str());
}

} // namespace multivariate

} // namespace distribution

} // namespace korali
