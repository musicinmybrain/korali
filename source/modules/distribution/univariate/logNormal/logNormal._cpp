#include "modules/distribution/univariate/logNormal/logNormal.hpp"
#include "modules/experiment/experiment.hpp"

namespace korali
{
namespace distribution
{
namespace univariate
{
double LogNormal::getDensity(const double x) const
{
  return gsl_ran_lognormal_pdf(x, _mu, _sigma);
}

double LogNormal::getLogDensity(const double x) const
{
  if (x < 0) return -INFINITY;
  double logx = gsl_sf_log(x);
  double d = (logx - _mu) / _sigma;
  return _aux - logx - 0.5 * d * d;
}

double LogNormal::getRandomNumber()
{
  return gsl_ran_lognormal(_range, _mu, _sigma);
}

void LogNormal::updateDistribution()
{
  if (_sigma <= 0.0) KORALI_LOG_ERROR("Incorrect Sigma parameter of LogNormal distribution: %f.\n", _sigma);

  _aux = -0.5 * gsl_sf_log(2 * M_PI) - gsl_sf_log(_sigma);
}

} // namespace univariate

} // namespace distribution

} // namespace korali
