#ifndef _KORALI_DISTRIBUTION_UNIVARIATE_LOGNORMAL_HPP_
#define _KORALI_DISTRIBUTION_UNIVARIATE_LOGNORMAL_HPP_

#include "modules/distribution/univariate/univariate.hpp"

namespace korali
{
namespace distribution
{
namespace univariate
{
class LogNormal : public korali::distribution::Univariate
{
  private:
  public:
  /*
  * @brief Updates distribution with new parameter (here sigma, the standard dev of a Normal distribution).
  */
  void updateDistribution() override;

  /**
 * @brief Gets the probability density of the distribution at point x.
 * @param x point to evaluate P(x)
 * @return Value of the probability density.
 */
  double getDensity(const double x) const override;

  /**
 * @brief Gets the Log probability density of the distribution at point x.
 * @param x point to evaluate log(P(x))
 * @return Log of probability density.
 */
  double getLogDensity(const double x) const override;

  /**
  * @brief Draws and returns a random number from the distribution.
  * @return Random real number.
  */
  double getRandomNumber() override;
};

} // namespace univariate
} // namespace distribution
} // namespace korali

#endif // _KORALI_DISTRIBUTION_UNIVARIATE_LOGNORMAL_HPP_
