#include "modules/distribution/univariate/gamma/gamma.hpp"
#include "modules/experiment/experiment.hpp"

double korali::distribution::univariate::Gamma::getDensity(double x)
{
  return gsl_ran_gamma_pdf(x, _shape, _scale);
}

double korali::distribution::univariate::Gamma::getLogDensity(double x)
{
  if (x < 0) return -INFINITY;
  return _aux + (_shape - 1) * log(x) - x / _scale;
}

double korali::distribution::univariate::Gamma::getRandomNumber()
{
  return gsl_ran_gamma(_range, _shape, _scale);
}

void korali::distribution::univariate::Gamma::updateDistribution()
{
  if (_shape <= 0.0) _k->_logger->logError("Incorrect Shape parameter of Gamma distribution: %f.\n", _shape);
  if (_scale <= 0.0) _k->_logger->logError("Incorrect Scale parameter of Gamma distribution: %f.\n", _scale);

  _aux = -gsl_sf_lngamma(_shape) - _shape * log(_scale);
}
