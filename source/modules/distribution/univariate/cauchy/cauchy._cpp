#include "modules/distribution/univariate/cauchy/cauchy.hpp"
#include "modules/experiment/experiment.hpp"

double korali::distribution::univariate::Cauchy::getDensity(double x)
{
  return gsl_ran_cauchy_pdf(x - _location, _scale);
}

double korali::distribution::univariate::Cauchy::getLogDensity(double x)
{
  return _aux - gsl_sf_log(1. + gsl_sf_pow_int((x - _location) / _scale, 2));
}

double korali::distribution::univariate::Cauchy::getRandomNumber()
{
  return _location + gsl_ran_cauchy(_range, _scale);
}

void korali::distribution::univariate::Cauchy::updateDistribution()
{
  if (_scale <= 0) _k->_logger->logError("Incorrect Scale parameter of Cauchy distribution: %f.\n", _scale);

  _aux = -gsl_sf_log(_scale * M_PI);
}
