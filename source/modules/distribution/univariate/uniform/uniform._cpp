#include "modules/distribution/univariate/uniform/uniform.hpp"
#include "modules/experiment/experiment.hpp"

namespace korali
{
namespace distribution
{
namespace univariate
{
double Uniform::getDensity(const double x) const
{
  if (_maximum - _minimum <= 0.0) return NaN;
  return gsl_ran_flat_pdf(x, _minimum, _maximum);
}

double Uniform::getLogDensity(const double x) const
{
  if (_maximum - _minimum <= 0.0) return NaN;

  if (x >= _minimum && x <= _maximum) return _aux;
  return -Inf;
}

double Uniform::getRandomNumber()
{
  if (_maximum - _minimum <= 0.0)
    KORALI_LOG_ERROR("Maximum (%f) bound must be higher than Minimum (%f) bound in a Uniform distribution in order to draw a random number.\n", _maximum, _minimum);

  return gsl_ran_flat(_range, _minimum, _maximum);
}

void Uniform::updateDistribution()
{
  if (_maximum - _minimum <= 0.0)
    _aux = NaN;
  else
    _aux = -gsl_sf_log(_maximum - _minimum);
}

} // namespace univariate

} // namespace distribution

} // namespace korali
