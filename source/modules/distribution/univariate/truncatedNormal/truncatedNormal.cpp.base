#include "modules/distribution/univariate/truncatedNormal/truncatedNormal.hpp"
#include "modules/experiment/experiment.hpp"
#include <gsl/gsl_sf.h>
#include <gsl/gsl_math.h>

#include "auxiliar/rtnorm/rtnorm.hpp"

using namespace Rtnorm;


@startNamespace

double @className::getDensity(const double x) const
{
  double d = (x - _mu) / _sigma;
  return gsl_sf_exp(-0.5 * d * d) / _normalization;
}

double @className::getLogDensity(const double x) const
{
  double d = (x - _mu) / _sigma;
  return _logNormalization - 0.5 * d * d;
}

double @className::getLogDensityGradient(const double x) const
{
  return (x - _mu) / (_sigma * _sigma);
}

double @className::getLogDensityHessian(const double x) const
{
  return 1. / (_sigma * _sigma);
}

double @className::getRandomNumber()
{
  std::pair<double, double> s = rtnorm(_range, _minimum, _maximum, _mu, _sigma);
  return s.first;
}

void @className::updateDistribution()
{
  if (_sigma <= 0.0) KORALI_LOG_ERROR("Incorrect Standard Deviation parameter of Truncated Normal distribution: %f.\n", _sigma);

  if (_maximum - _minimum <= 0.0)
    _aux = NaN;

  else
  {
    double a = (_minimum - _mu) / _sigma;
    double b = (_maximum - _mu) / _sigma;

    _normalization = 0.5 * M_SQRT2 * M_SQRTPI * _sigma * (gsl_sf_erf(b * M_SQRT1_2) - gsl_sf_erf(a * M_SQRT1_2));
    _logNormalization = gsl_sf_log(_normalization);
  }
}

@moduleAutoCode

@endNamespace
