#ifndef _KORALI_DISTRIBUTIONHPP_
#define _KORALI_DISTRIBUTIONHPP_

#include "modules/module.hpp"
#include <gsl/gsl_math.h>
#include <gsl/gsl_randist.h>
#include <gsl/gsl_rng.h>
#include <gsl/gsl_sf.h>
#include <map>

namespace korali
{
class Distribution : public Module
{
  public:
  /**
 * @brief Map to store the link between parameter names and their pointers.
 */
  std::map<std::string, double *> _conditionalsMap;

  /**
  * @brief Auxiliar variable to hold pre-calculated data to avoid re-processing information.
  */
  double _aux;

  /**
  * @brief Indicates whether or not this distribution contains conditional variables.
  */
  bool _hasConditionalVariables;

  /**
 * @brief Creates and sets the RNG range (state and seed) of the random distribution
 * @param rangeString The range to load, in string of hexadecimal values form
 * @return Pointer to the new range.
 */
  gsl_rng *setRange(const std::string rangeString);

  /**
 * @brief Gets a hexadecimal string from a given range's state and seed
 * @param range Range to read from
 * @return Hexadecimal string produced.
 */
  std::string getRange(gsl_rng *range) const;

  void initialize() override;

  /**
 * @brief Updates the parameters of the distribution based on conditional variables.
 */
  virtual void updateDistribution(){};

  /**
  * @brief Updates a specific property with a numeric value.
  * @param property The name of the property to update
  * @param value double Numerical value to assign.
  */
  virtual void updateProperty(std::string property, const double value){};

  /**
   * @brief Gets the pointer to a distribution property.
   * @param property The name of the property to update
   * @return Pointer to the property
   */
  virtual double *getPropertyPointer(const std::string &property) { return NULL; };
};

} // namespace korali

#endif // _KORALI_DISTRIBUTIONHPP_
