#include "auxiliar/fs.hpp"
#include "auxiliar/koraliJson.hpp"
#include "auxiliar/py2json.hpp"
#include "engine.hpp"
#include "modules/conduit/conduit.hpp"
#include "modules/conduit/distributed/distributed.hpp"
#include "modules/experiment/experiment.hpp"
#include "modules/problem/problem.hpp"
#include "modules/solver/solver.hpp"
#include <filesystem>
#include <chrono>
#include <cstdio>
#include <map>

/**
  * @brief Pointer to the current experiment in execution
 */
korali::Experiment *__expPointer;

namespace korali
{
/**
  * @brief Function for the initialization of new coroutine threads.
 */
void threadWrapper() { __expPointer->run(); }
} // namespace korali

void korali::Experiment::run()
{
  co_switch(_engine->_thread);

  auto t0 = std::chrono::system_clock::now();

  if (_currentGeneration == 0) saveState();

  _solver->getConfiguration(_js["Solver"]);
  _currentGeneration++;

  while (_solver->checkTermination() == false)
  {
    if (_consoleOutputFrequency > 0)
      if (_currentGeneration % _consoleOutputFrequency == 0)
      {
        _logger->logInfo("Minimal", "--------------------------------------------------------------------\n");
        _logger->logInfo("Minimal", "Current Generation: #%zu\n", _currentGeneration);
        _solver->printGenerationBefore();
      }

    // Cleaning sample information from previous generation
    _js["Samples"] = knlohmann::json();

    // Timing and Profiling Start
    auto t0 = std::chrono::system_clock::now();

    _solver->runGeneration();

    // Timing and Profiling End
    auto t1 = std::chrono::system_clock::now();

    if (_consoleOutputFrequency > 0)
      if (_currentGeneration % _consoleOutputFrequency == 0)
      {
        _solver->printGenerationAfter();
        _logger->logInfo("Detailed", "Experiment: %lu - Generation Time: %.3fs\n", _experimentId, std::chrono::duration<double>(t1 - t0).count());
      }

    if (_fileOutputFrequency > 0)
      if (_currentGeneration % _fileOutputFrequency == 0) saveState();

    _currentGeneration++;

    // Check for error signals from python
    if (korali::isPythonActive && PyErr_CheckSignals() != 0) KORALI_LOG_ERROR("User requested break.\n");
  }

  auto t1 = std::chrono::system_clock::now();

  // Saving last generation and final.json
  _currentGeneration--;
  _isFinished = true;
  _solver->finalize();
  saveState();

  _logger->logInfo("Minimal", "--------------------------------------------------------------------\n");
  _logger->logInfo("Minimal", "%s finished correctly.\n", _solver->getType().c_str());
  for (size_t i = 0; i < _solver->_terminationCriteria.size(); i++) _logger->logInfo("Normal", "Termination Criterion Met: %s\n", _solver->_terminationCriteria[i].c_str());
  _solver->finalize();
  _logger->logInfo("Normal", "Final Generation: %lu\n", _currentGeneration);
  _logger->logInfo("Normal", "Elapsed Time: %.3fs\n", std::chrono::duration<double>(t1 - t0).count());

  co_switch(_engine->_thread);
  KORALI_LOG_ERROR("Trying to continue finished Experiment thread.\n");
}

void korali::Experiment::saveState()
{
  char genFileName[256];
  sprintf(genFileName, "gen%08lu.json", _currentGeneration);

  // Getting configuration
  _timestamp = getTimestamp();
  knlohmann::json results = _js.getJson()["Results"];
  getConfiguration(_js.getJson());
  std::string fileName = "./" + _fileOutputPath + "/" + genFileName;
  std::string linkName = "./" + _fileOutputPath + "/latest";

  if (_storeSampleInformation == true) _js["Samples"] = _sampleInfo["Samples"];
  auto js = _js.getJson();
  js["Results"] = results;

  if (_fileOutputEnabled)
  {
    if (korali::saveJsonToFile(fileName.c_str(), js) != 0)
     KORALI_LOG_ERROR("Error trying to save result file: %s.\n", fileName.c_str());

    remove ( linkName.c_str() );

    if (symlink(genFileName, linkName.c_str()) != 0)
     KORALI_LOG_ERROR("Error trying to create symbolic link to latest result: %s.\n", linkName.c_str());
  }
}

korali::Experiment& korali::Experiment::loadExperimentFromFile(const std::string& path)
{
 auto e = std::unique_ptr<korali::Experiment>(new korali::Experiment());

 if (korali::loadJsonFromFile(e.get()->_js.getJson(), path.c_str()) != 0)
  KORALI_LOG_ERROR("Did not find path %s to load experiment from.", path.c_str());

 e.get()->initialize();

 return *(e.get());
}

korali::Experiment::Experiment()
{
  _runID = korali::getTimehash();
  _currentGeneration = 0;
  _k = this;
}

void korali::Experiment::initialize()
{
  try
  {
    _js["Samples"] = knlohmann::json();
    applyModuleDefaults(_js.getJson());
    setConfiguration(_js.getJson());
    getConfiguration(_js.getJson());
    __expPointer = this;
    _thread = co_create(1 << 20, korali::threadWrapper);
    co_switch(_thread);
  }
  catch (const std::exception &e)
  {
    KORALI_LOG_ERROR("Experiment could not be initialized. Reason:\n%s", e.what());
  }
}

void korali::Experiment::finalize()
{
  co_delete(_thread);
}

std::vector<std::vector<double>> korali::Experiment::test(const std::vector<std::vector<double>> &inputBatch)
{
  return _k->_solver->test(inputBatch);
}

knlohmann::json &korali::Experiment::operator[](const std::string &key) { return _js[key]; }
knlohmann::json &korali::Experiment::operator[](const unsigned long int &key) { return _js[key]; }
pybind11::object korali::Experiment::getItem(pybind11::object key) { return _js.getItem(key); }
void korali::Experiment::setItem(pybind11::object key, pybind11::object val) { _js.setItem(key, val); }
