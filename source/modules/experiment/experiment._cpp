#include "auxiliar/fs.hpp"
#include "auxiliar/koraliJson.hpp"
#include "auxiliar/py2json.hpp"
#include "engine.hpp"
#include "modules/conduit/conduit.hpp"
#include "modules/conduit/distributed/distributed.hpp"
#include "modules/experiment/experiment.hpp"
#include "modules/problem/problem.hpp"
#include "modules/solver/solver.hpp"
#include <chrono>
#include <cstdio>
#include <map>
#include <stdlib.h>

namespace korali
{
/**
  * @brief Pointer to the current experiment in execution
 */
Experiment *__expPointer;

/**
  * @brief Pointer to the calling thread
 */
cothread_t __returnThread;

/**
  * @brief Function for the initialization of new coroutine threads.
 */
void threadWrapper() { __expPointer->run(); }

void Experiment::run()
{
  co_switch(__returnThread);

  auto t0 = std::chrono::system_clock::now();

  // Saving initial configuration
  if (_currentGeneration == 0)
    if (_fileOutputEnabled)
    {
      _timestamp = getTimestamp();
      getConfiguration(_js.getJson());
      saveState();
    }

  _currentGeneration++;

  while (_solver->checkTermination() == false)
  {
    if (_consoleOutputFrequency > 0)
      if (_currentGeneration % _consoleOutputFrequency == 0)
      {
        _logger->logInfo("Minimal", "--------------------------------------------------------------------\n");
        _logger->logInfo("Minimal", "Current Generation: #%zu\n", _currentGeneration);
        _solver->printGenerationBefore();
      }

    // Cleaning sample information from previous generation
    _js["Samples"] = knlohmann::json();

    // Timing and Profiling Start
    auto t0 = std::chrono::system_clock::now();

    _solver->runGeneration();

    // Timing and Profiling End
    auto t1 = std::chrono::system_clock::now();

    // Printing results to console
    if (_consoleOutputFrequency > 0)
      if (_currentGeneration % _consoleOutputFrequency == 0)
      {
        _solver->printGenerationAfter();
        _logger->logInfo("Detailed", "Experiment: %lu - Generation Time: %.3fs\n", _experimentId, std::chrono::duration<double>(t1 - t0).count());
      }

    // Saving state to a file
    if (_fileOutputEnabled)
      if (_fileOutputFrequency > 0)
        if (_currentGeneration % _fileOutputFrequency == 0)
        {
          _timestamp = getTimestamp();
          getConfiguration(_js.getJson());
          saveState();
        }

    _currentGeneration++;

    // Check for error signals from python
    if (isPythonActive && PyErr_CheckSignals() != 0) KORALI_LOG_ERROR("User requested break.\n");
  }

  auto t1 = std::chrono::system_clock::now();

  // Finalizing experiment
  _currentGeneration--;
  _isFinished = true;
  _solver->finalize();

  // Saving last generation and final results
  _timestamp = getTimestamp();
  getConfiguration(_js.getJson());
  if (_fileOutputEnabled) saveState();

  _logger->logInfo("Minimal", "--------------------------------------------------------------------\n");
  _logger->logInfo("Minimal", "%s finished correctly.\n", _solver->getType().c_str());
  for (size_t i = 0; i < _solver->_terminationCriteria.size(); i++) _logger->logInfo("Normal", "Termination Criterion Met: %s\n", _solver->_terminationCriteria[i].c_str());
  _logger->logInfo("Normal", "Final Generation: %lu\n", _currentGeneration);
  _logger->logInfo("Normal", "Elapsed Time: %.3fs\n", std::chrono::duration<double>(t1 - t0).count());

  co_switch(_engine->_thread);
  KORALI_LOG_ERROR("Trying to continue finished Experiment thread.\n");
}

void Experiment::saveState()
{
  if (_storeSampleInformation == true) _js["Samples"] = _sampleInfo["Samples"];

  char genFileName[256];
  sprintf(genFileName, "gen%08lu.json", _currentGeneration);

  std::string fileName = "./" + _fileOutputPath + "/" + genFileName;
  std::string linkName = "./" + _fileOutputPath + "/latest";

  if (saveJsonToFile(fileName.c_str(), _js.getJson()) != 0)
    KORALI_LOG_ERROR("Error trying to save result file: %s.\n", fileName.c_str());

  remove(linkName.c_str());

  if (link(fileName.c_str(), linkName.c_str()) != 0)
    KORALI_LOG_ERROR("Could not create hard link to latest result.\n + Target: %s\n + Link: %s\n", fileName.c_str(), linkName.c_str());
}

bool Experiment::loadState(const std::string &path)
{
  if (loadJsonFromFile(_js.getJson(), path.c_str()))
  {
    initialize();
    return true;
  }
  return false;
}

Experiment::Experiment()
{
  _runID = getTimehash();
  _k = this;
}

void Experiment::initialize()
{
  // Clearning sample and previous result information
  _js["Results"] = knlohmann::json();
  _js["Samples"] = knlohmann::json();

  // Initializing Variables
  _variables.resize(_js["Variables"].size());
  for (size_t i = 0; i < _js["Variables"].size(); i++) _variables[i] = new Variable;

  applyModuleDefaults(_js.getJson());

  try
  {
    setConfiguration(_js.getJson());
  }
  catch (const std::exception &e)
  {
    KORALI_LOG_ERROR("Error parsing Experiment's configuration. Reason:\n%s", e.what());
  }

  getConfiguration(_js.getJson());
  __expPointer = this;
  _thread = co_create(1 << 20, threadWrapper);
  __returnThread = co_active();
  co_switch(_thread);
}

void Experiment::finalize()
{
  for (size_t i = 0; i < _variables.size(); i++) delete _variables[i];
  co_delete(_thread);
}

std::vector<std::vector<double>> Experiment::evaluate(const std::vector<std::vector<double>> &inputBatch)
{
  return _k->_solver->evaluate(inputBatch);
}

knlohmann::json &Experiment::operator[](const std::string &key) { return _js[key]; }
knlohmann::json &Experiment::operator[](const unsigned long int &key) { return _js[key]; }
pybind11::object Experiment::getItem(const pybind11::object key) { return _js.getItem(key); }
void Experiment::setItem(const pybind11::object key, const pybind11::object val) { _js.setItem(key, val); }

} // namespace korali
