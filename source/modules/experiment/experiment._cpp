#include "auxiliar/fs.hpp"
#include "auxiliar/koraliJson.hpp"
#include "auxiliar/py2json.hpp"
#include "engine.hpp"
#include "modules/conduit/conduit.hpp"
#include "modules/conduit/distributed/distributed.hpp"
#include "modules/experiment/experiment.hpp"
#include "modules/problem/problem.hpp"
#include "modules/solver/agent/agent.hpp"
#include "modules/solver/learner/learner.hpp"
#include "modules/solver/solver.hpp"
#include <chrono>
#include <cstdio>
#include <map>
#include <stdlib.h>

namespace korali
{
/**
  * @brief Pointer to the current experiment in execution
 */
Experiment *__expPointer;

/**
  * @brief Pointer to the calling thread
 */
cothread_t __returnThread;

/**
  * @brief Function for the initialization of new coroutine threads.
 */
void threadWrapper() { __expPointer->run(); }

void Experiment::run()
{
  co_switch(__returnThread);

  auto t0 = std::chrono::system_clock::now();

  // Saving initial configuration
  if (_currentGeneration == 0)
    if (_fileOutputEnabled)
    {
      _timestamp = getTimestamp();
      getConfiguration(_js.getJson());
      saveState();
    }

  _currentGeneration++;

  _solver->_terminationCriteria.clear();
  while (_solver->checkTermination() == false)
  {
    if (_consoleOutputFrequency > 0)
      if (_currentGeneration % _consoleOutputFrequency == 0)
      {
        _logger->logInfo("Minimal", "--------------------------------------------------------------------\n");
        _logger->logInfo("Minimal", "Current Generation: #%zu\n", _currentGeneration);
        _solver->printGenerationBefore();
      }

    // Cleaning sample information from previous generation
    _js["Samples"] = knlohmann::json();

    // Timing and Profiling Start
    auto t0 = std::chrono::system_clock::now();
    _solver->runGeneration();

    // Timing and Profiling End
    auto t1 = std::chrono::system_clock::now();

    // Printing results to console
    if (_consoleOutputFrequency > 0)
      if (_currentGeneration % _consoleOutputFrequency == 0)
      {
        _solver->printGenerationAfter();
        _logger->logInfo("Detailed", "Experiment: %lu - Generation Time: %.3fs\n", _experimentId, std::chrono::duration<double>(t1 - t0).count());
      }

    // Saving state to a file
    if (_fileOutputEnabled)
      if (_fileOutputFrequency > 0)
        if (_currentGeneration % _fileOutputFrequency == 0)
        {
          _timestamp = getTimestamp();
          getConfiguration(_js.getJson());
          saveState();
        }

    _currentGeneration++;

    // Check for error signals from python
    if (isPythonActive && PyErr_CheckSignals() != 0) KORALI_LOG_ERROR("User requested break.\n");
  }

  auto t1 = std::chrono::system_clock::now();

  // Finalizing experiment
  _currentGeneration--;
  _isFinished = true;
  _solver->finalize();

  // Saving last generation and final results
  _timestamp = getTimestamp();
  getConfiguration(_js.getJson());
  if (_fileOutputEnabled) saveState();

  _logger->logInfo("Minimal", "--------------------------------------------------------------------\n");
  _logger->logInfo("Minimal", "%s finished correctly.\n", _solver->getType().c_str());
  for (size_t i = 0; i < _solver->_terminationCriteria.size(); i++) _logger->logInfo("Normal", "Termination Criterion Met: %s\n", _solver->_terminationCriteria[i].c_str());
  _logger->logInfo("Normal", "Final Generation: %lu\n", _currentGeneration);
  _logger->logInfo("Normal", "Elapsed Time: %.3fs\n", std::chrono::duration<double>(t1 - t0).count());

  co_switch(_engine->_thread);
  KORALI_LOG_ERROR("Trying to continue finished Experiment thread.\n");
}

void Experiment::saveState()
{
  if (_storeSampleInformation == true) _js["Samples"] = _sampleInfo["Samples"];

  char genFileName[256];

  // Removing keys in the exclusion list
  for (size_t i = 0; i < _fileOutputExcludedKeys.size(); i++)
  {
    bool foundKey = true;
    auto currentJs = &_js.getJson();
    auto prevJs = currentJs;

    for (size_t j = 0; j < _fileOutputExcludedKeys[i].size(); j++)
    {
      if (isDefined(*currentJs, _fileOutputExcludedKeys[i][j]))
      {
        prevJs = currentJs;
        currentJs = &((*currentJs)[_fileOutputExcludedKeys[i][j]]);
      }
      else
      {
        foundKey = false;
        break;
      }
    }
    if (foundKey)
    {
      eraseValue(*prevJs, _fileOutputExcludedKeys[i][_fileOutputExcludedKeys[i].size() - 1]);
    }
  }

  // If filename not given, assign gen + genId
  if (_fileOutputName == "")
    sprintf(genFileName, "gen%08lu.json", _currentGeneration);
  else
    sprintf(genFileName, "%s", _fileOutputName.c_str());

  // If results directory doesn't exist, create it
  if (!dirExists(_fileOutputPath)) mkdir(_fileOutputPath);

  std::string filePath = "./" + _fileOutputPath + "/" + genFileName;
  std::string linkPath = "./" + _fileOutputPath + "/latest";

  if (saveJsonToFile(filePath.c_str(), _js.getJson()) != 0)
    KORALI_LOG_ERROR("Error trying to save result file: %s.\n", filePath.c_str());

  remove(linkPath.c_str());

  if (link(filePath.c_str(), linkPath.c_str()) != 0)
    KORALI_LOG_ERROR("Could not create hard link to latest result.\n + Target: %s\n + Link: %s\n", filePath.c_str(), linkPath.c_str());
}

bool Experiment::loadState(const std::string &path)
{
  if (loadJsonFromFile(_js.getJson(), path.c_str()))
  {
    initialize();
    return true;
  }
  return false;
}

Experiment::Experiment()
{
  _runID = getTimehash();
  _k = this;
  _isInitialized = false;
}

void Experiment::initialize()
{
  __expPointer = this;
  _thread = co_create(1 << 20, threadWrapper);
  __returnThread = co_active();
  co_switch(_thread);

  if (_isInitialized == false)
  {
    // Clearning sample and previous result information
    _js["Results"] = knlohmann::json();
    _js["Samples"] = knlohmann::json();

    // Initializing Variables
    if (isDefined(_js.getJson(), "Variables"))
    {
      _variables.resize(_js["Variables"].size());
      for (size_t i = 0; i < _js["Variables"].size(); i++) _variables[i] = new Variable;
    }

    applyModuleDefaults(_js.getJson());

    try
    {
      setConfiguration(_js.getJson());
    }
    catch (const std::exception &e)
    {
      KORALI_LOG_ERROR("Error parsing Experiment's configuration. Reason:\n%s", e.what());
    }

    getConfiguration(_js.getJson());

    _logger = new Logger(_consoleOutputVerbosity, stdout);

    _isInitialized = true;
  }

  if (isDefined(_js.getJson(), "Solver", "Termination Criteria", "Max Generations"))
    _solver->_maxGenerations = _js["Solver"]["Termination Criteria"]["Max Generations"].get<size_t>();
}

void Experiment::finalize()
{
  //for (size_t i = 0; i < _variables.size(); i++) delete _variables[i];
  co_delete(_thread);
}

std::vector<double> Experiment::getAction(const std::vector<double> &state)
{
  auto agent = dynamic_cast<solver::Agent *>(_k->_solver);
  if (agent != NULL)
    return agent->getAction(state);
  else
    KORALI_LOG_ERROR("This solver does not support getAction operations.\n");
}

std::vector<std::vector<double>> Experiment::getEvaluation(const std::vector<std::vector<double>> &inputBatch)
{
  auto learner = dynamic_cast<solver::Learner *>(_k->_solver);
  if (learner != NULL)
    return learner->getEvaluation(inputBatch);
  else
    KORALI_LOG_ERROR("This solver does not support evaluation operations.\n");
}

std::vector<std::vector<double>> Experiment::getGradients(const std::vector<std::vector<double>> &outputDiffs)
{
  auto learner = dynamic_cast<solver::Learner *>(_k->_solver);
  if (learner != NULL)
    return learner->getGradients(outputDiffs);
  else
    KORALI_LOG_ERROR("This solver does not provide gradients.\n");
}

knlohmann::json &Experiment::operator[](const std::string &key) { return _js[key]; }
knlohmann::json &Experiment::operator[](const unsigned long int &key) { return _js[key]; }
pybind11::object Experiment::getItem(const pybind11::object key) { return _js.getItem(key); }
void Experiment::setItem(const pybind11::object key, const pybind11::object val) { _js.setItem(key, val); }

} // namespace korali
