#ifndef _KORALI_ENGINE_HPP_
#define _KORALI_ENGINE_HPP_

#include <vector>
#include <functional>
#include <chrono>
#include "sample/sample.hpp"
#include "variable/variable.hpp"
#include "modules/module.hpp"
#include "auxiliar/koraliJson.hpp"

namespace korali
{
class Solver;
class Problem;

class Experiment : public korali::Module {

 public:

 Experiment();

 // Start functions
 void initialize() override;

 // JSON-based configuration
 korali::KoraliJson  _js;
 korali::KoraliJson  _sampleInfo;

 // Storing initial launch
 knlohmann::json  _initialConfig;

 // Logging and results
 FILE* _logFile;
 std::string _subDirPath;

 // Multiple Solver Variables/Functions
 size_t _experimentId;
 cothread_t _thread;

 pybind11::object getItem(pybind11::object key);
 void setItem(pybind11::object key, pybind11::object val);
 bool loadState(std::string path);
 bool loadState();
 void saveState();
 void run();


 knlohmann::json& operator[](const std::string& key);
 knlohmann::json& operator[](const unsigned long int& key);
};

extern std::vector<korali::Experiment*> _experimentVector;
extern korali::Experiment* _currentExperiment;
extern cothread_t _mainThread;

} // namespace korali

#endif // _KORALI_ENGINE_HPP_
