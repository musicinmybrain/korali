@startIncludeGuard

#include "config.hpp"
#include "auxiliar/koraliJson.hpp"
#include "auxiliar/libco/libco.h"
#include "modules/module.hpp"
#include "variable/variable.hpp"
#include <chrono>
#include <functional>
#include <vector>

@startNamespace

class Solver;
class Problem;
class Engine;

class @className: public @parentClassName
{
  public:
  Experiment();

  void initialize() override;
  void finalize() override;

  /**
  * @brief JSON object to store the experiment's configuration
  */
  KoraliJson _js;

  /**
  * @brief A pointer to the Experiment's logger object.
 */
  Logger *_logger;

  /**
 * @brief A pointer to the parent engine
 */
  Engine *_engine;

  /**
  * @brief JSON object to details of all the samples that have been executed, if requested by the user.
  */
  KoraliJson _sampleInfo;

  /**
  * @brief Experiment Identifier
  */
  size_t _experimentId;

  /**
  * @brief Experiment's coroutine (thread). It is swapped among other experiments, and sample threads.
  */
  cothread_t _thread;

  /**
  * @brief Flag to indicate that the experiment has been initialized to prevent it from re-initializing upon resuming
  */
  bool _isInitialized;

  /**
  * @brief [Profiling] Measures the amount of time taken by saving results
  */
  double _resultSavingTime;

  /**
  * @brief Gets an item from the JSON object at the current pointer position.
  * @param key A pybind11 object acting as JSON key (number or string).
  * @return A pybind11 object
 */
  pybind11::object getItem(const pybind11::object key);

  /**
  * @brief Sets an item on the JSON object at the current pointer position.
  * @param key A pybind11 object acting as JSON key (number or string).
  * @param val The value of the item to set.
 */
  void setItem(const pybind11::object key, const pybind11::object val);

  /**
  * @brief Load the state of an experiment from a Korali result file.
  * @param path Path from which to load the experiment state.
  * @return true, if file was found; false, otherwise
  */
  bool loadState(const std::string &path);

  /**
   * @brief Saves the state into the experiment's result path.
  */
  void saveState();

  /**
   * @brief Start the execution of the current experiment.
   */
  void run();

  /**
  * @brief C++ wrapper for the getItem operator.
  * @param key A C++ string acting as JSON key.
  * @return The referenced JSON object content.
 */
  knlohmann::json &operator[](const std::string &key);

  /**
  * @brief C++ wrapper for the getItem operator.
  * @param key A C++ integer acting as JSON key.
  * @return The referenced JSON object content.
 */
  knlohmann::json &operator[](const unsigned long int &key);

  /**
    * @brief For learner modules which have been trained, test returns an inferred output batch, from a batch of inputs to process.
    * @param inputBatch The inputs from which to infer outputs. Format: TxBxIC (T: Time steps, B: Batch Size, IC: Input channels)
    * @return The inferred outputs. Format: BxOC (Time steps, B: Batch Size, OC: Output channels)
   */
  std::vector<std::vector<float>> getEvaluation(const std::vector<std::vector<std::vector<float>>> &inputBatch);

  private:
  /**
   * @brief Initializes seed to a random value based on current time if not set by the user (i.e. Random Seed is 0).
   * @param js Json object onto which to store the Experiment data.
   */
  void setSeed(knlohmann::json &js);
};

@endNamespace

@endIncludeGuard