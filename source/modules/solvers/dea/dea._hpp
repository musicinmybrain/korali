#ifndef _KORALI_SOLVERS_DEA_HPP_
#define _KORALI_SOLVERS_DEA_HPP_

#include "modules/solvers/base.hpp"
#include "modules/distributions/normal/normal.hpp"
#include "modules/distributions/uniform/uniform.hpp"
#include <vector>

namespace Korali { namespace Solver {

class DEA : public Korali::Solver::Base
{
 private:

 Korali::Distribution::Base* _normalGenerator; /* Normal random number generator */
 Korali::Distribution::Base* _uniformGenerator; /* Uniform random number generator */

 void mutateSingle(size_t sampleIdx); /* sample individual */
 void fixInfeasible(size_t sampleIdx); /* force sample inside lower & upper bounds */
 void updateSolver(); /* update states of DEA */
 void evaluateSamples(); /* evaluate all samples until done */
 void initSamples();
 void prepareGeneration();

 public:

 void initialize() override;
 void finalize() override;
 void runGeneration() override;
 void processEvaluation(const double evaluation, const size_t sampleId) override;
 void printGeneration() override;
};

} } // namespace Korali::Solver

#endif // _KORALI_SOLVERS_DEA_HPP_
