#include "modules/solvers/mcmc/mcmc.hpp"
#include "modules/problems/base.hpp"
#include "modules/sample/sample.hpp"
#include "modules/engine/engine.hpp"

#include <numeric>
#include <limits>
#include <chrono>

#include <gsl/gsl_sort_vector.h>
#include <gsl/gsl_matrix.h>
#include <gsl/gsl_linalg.h>
#include <gsl/gsl_statistics.h>
#include <gsl/gsl_multimin.h>

Korali::Solver::MCMC::MCMC()
{
 _k->_consoleOutputFrequency = 500;
 _k->_resultsOutputFrequency = 500;
}

Korali::Solver::MCMC::~MCMC()
{
}

void Korali::Solver::MCMC::runGeneration()
{
 bool _sampleAccepted = false;

 for(size_t i = 0; i < _rejectionLevels && _sampleAccepted == false; i++)
 {
  generateCandidate(i);
  // SM: DW, what happens here if sample is infeasible?

  auto sample = Korali::Sample(_chainCandidate[i]);

  // Obtaining Result
  double evaluation = -Korali::Inf;
  if (_k->_problem->isSampleFeasible(sample))
  {
   sample.setSampleId(i);
   sample.start(Korali::Problem::Base::basicEvaluation);
   sample.wait();
   evaluation = sample.getResult()[0];
  }

  _chainCandidatesEvaluations[i] = evaluation;

  // Processing Result
  double denom;
  double _rejectionAlphas = recursiveAlpha(denom, _chainLeaderEvaluation, &_chainCandidatesEvaluations[0], i);
  if ( _rejectionAlphas == 1.0 || _rejectionAlphas > _uniformGenerator->getRandomNumber() )
  {
    _acceptanceCount++;
    _chainLeaderEvaluation = _chainCandidatesEvaluations[i];
    _chainLeader = _chainCandidate[i];
    _sampleAccepted = true;
  }

  if ( _chainLength >= _burnIn ) if ( (_sampleAccepted == true) || (i == _rejectionLevels-1) )
   updateDatabase(_chainLeader, _chainLeaderEvaluation);
 }

 _chainLength++;
 updateState();
}


void Korali::Solver::MCMC::initialize()
{
 // Initializing RNGs
 auto jsNormal = nlohmann::json();
 jsNormal["Type"] = "Normal";
 jsNormal["Mean"] = 0.0;
 jsNormal["Standard Deviation"] = 1.0;
 _normalGenerator = dynamic_cast<Korali::Distribution::Univariate::Normal*>(Korali::Base::getModule(jsNormal));
 _normalGenerator->initialize();

 auto jsUniform = nlohmann::json();
 jsUniform["Type"] = "Uniform";
 jsUniform["Minimum"] = 0.0;
 jsUniform["Maximum"] = 1.0;
 _uniformGenerator = dynamic_cast<Korali::Distribution::Univariate::Uniform*>(Korali::Base::getModule(jsUniform));
 _uniformGenerator->initialize();

 N = _k->_variables.size();

 if(_chainCovarianceScaling <= 0.0) Korali::logError("Chain Covariance Scaling must be larger 0.0 (is %lf).\n", _chainCovarianceScaling);

 // Allocating MCMC memory
 _chainCandidate.resize(_rejectionLevels);
 for(size_t i = 0; i < _rejectionLevels; i++) _chainCandidate[i].resize(N);

 _choleskyDecompositionCovariance.resize(N*N);
 _chainLeader.resize(N);
 _chainCandidatesEvaluations.resize(_rejectionLevels);
 _rejectionAlphas.resize(_rejectionLevels);
 _sampleDatabase.resize(N*_maxChainLength);
 _sampleEvaluationDatabase.resize(_maxChainLength);
 _chainMean.resize(N);
 _chainCovariancePlaceholder.resize(N*N);
 _chainCovariance.resize(N*N);
 _choleskyDecompositionChainCovariance.resize(N*N);

 if (_k->_currentGeneration > 0) return;

 std::fill(std::begin(_choleskyDecompositionCovariance), std::end(_choleskyDecompositionCovariance), 0.0);
 std::fill(std::begin(_choleskyDecompositionChainCovariance), std::end(_choleskyDecompositionChainCovariance), 0.0);

 for(size_t i = 0; i < N; i++) _chainLeader[i]  = _k->_variables[i]->_initialMean;
 for(size_t i = 0; i < N; i++) _choleskyDecompositionCovariance[i*N+i] = _k->_variables[i]->_initialStandardDeviation;

 // Init Generation
 _acceptanceCount = 0;
 _proposedSampleCount = 0;
 _chainLength = 0;
 _databaseEntryCount = 0;
 _chainLeaderEvaluation = -std::numeric_limits<double>::infinity();
 _acceptanceRate  = 1.0;
}

void Korali::Solver::MCMC::choleskyDecomp(const std::vector<double>& inC, std::vector<double>& outL) const
{
  gsl_matrix* A = gsl_matrix_alloc(N, N);

  for(size_t d = 0; d < N; ++d)  for(size_t e = 0; e < d; ++e)
  {
      gsl_matrix_set(A,d,e,inC[d*N+e]);
      gsl_matrix_set(A,e,d,inC[e*N+d]);
  }
  for(size_t d = 0; d < N; ++d) gsl_matrix_set(A,d,d,inC[d*N+d]);

  int err = gsl_linalg_cholesky_decomp1(A);

  for(size_t d = 0; d < N; ++d)  for(size_t e = 0; e < d; ++e)
  {
      outL[d*N+e] = gsl_matrix_get(A,d,e);
  }
  for(size_t d = 0; d < N; ++d) outL[d*N+d] = gsl_matrix_get(A,d,d);

  gsl_matrix_free(A);
}

double Korali::Solver::MCMC::recursiveAlpha(double& denom, const double llk0, const double* logliks, size_t N) const
{
 // recursive formula from Trias[2009]

 if(N==0)
 {
  denom = exp(llk0);
  return std::min(1.0, exp(logliks[0] - llk0));
 }
 else
 {
  // revert sample array
  double* revLlks = new double[N];
  for(size_t i = 0; i < N; ++i) revLlks[i] = logliks[N-1-i];
  
  // update numerator (w. recursive calls)
  double numerator = std::exp(logliks[N]);
  for(size_t i = 0; i < N; ++i)
  {
   double denom2;
   double recalpha2 = recursiveAlpha(denom2, logliks[N], revLlks, i);
   numerator *=  ( 1.0 - recalpha2 );
  }
  delete [] revLlks;

  if (numerator == 0.0) return 0.0;

  // update denomiator
  double denom1;
  double recalpha1 = recursiveAlpha(denom1, llk0, logliks, N-1);
  denom = denom1 * (1.0 - recalpha1);

  return std::min(1.0, numerator/denom);
 }
}


void Korali::Solver::MCMC::updateDatabase(std::vector<double>& point, double loglik)
{
 for (size_t d = 0; d < N; d++) _sampleDatabase[_databaseEntryCount*N + d] = point[d];
 _sampleEvaluationDatabase[_databaseEntryCount] = loglik;
 _databaseEntryCount++;
}


void Korali::Solver::MCMC::generateCandidate(size_t sampleIdx)
{  
 _proposedSampleCount++;

 for (size_t d = 0; d < N; ++d) _chainCandidate[sampleIdx][d] = 0.0;

 if ( (_useAdaptiveSampling == false) || (_databaseEntryCount <= _nonAdaptionPeriod + _burnIn))
     for (size_t d = 0; d < N; ++d) for (size_t e = 0; e < N; ++e) _chainCandidate[sampleIdx][d] += _choleskyDecompositionCovariance[d*N+e] * _normalGenerator->getRandomNumber();
 else
     for (size_t d = 0; d < N; ++d) for (size_t e = 0; e < N; ++e) _chainCandidate[sampleIdx][d] += _choleskyDecompositionChainCovariance[d*N+e] * _normalGenerator->getRandomNumber();

 _chainLeader = _chainCandidate[sampleIdx];
}

void Korali::Solver::MCMC::updateState()
{

 _acceptanceRate = ( (double)_acceptanceCount/ (double)_chainLength );

 if(_databaseEntryCount == 1) for (size_t d = 0; d < N; d++) _chainMean[d] = _chainLeader[d];
 if(_databaseEntryCount <= 1) return;
 
 for (size_t d = 0; d < N; d++) for (size_t e = 0; e < d; e++)
 {
   _chainCovariancePlaceholder[d*N+e] = (_chainMean[d] - _chainLeader[d]) * (_chainMean[e] - _chainLeader[e]);
   _chainCovariancePlaceholder[e*N+d] = (_chainMean[d] - _chainLeader[d]) * (_chainMean[e] - _chainLeader[e]);
 }
 for (size_t d = 0; d < N; d++) _chainCovariancePlaceholder[d*N+d] = (_chainMean[d] - _chainLeader[d]) * (_chainMean[d] - _chainLeader[d]);

 // Chain Mean
 for (size_t d = 0; d < N; d++) _chainMean[d] = (_chainMean[d] * (_databaseEntryCount-1) + _chainLeader[d]) / _databaseEntryCount;
 
 // Chain Covariance (upper and lower triangle)
 for (size_t d = 0; d < N; d++) for (size_t e = 0; e < d; e++)
 {
   _chainCovariance[d*N+e] = (_databaseEntryCount-2.0)/(_databaseEntryCount-1.0) * _chainCovariance[d*N+e] + (_chainCovarianceScaling/_databaseEntryCount)*_chainCovariancePlaceholder[d*N+e];
   _chainCovariance[e*N+d] = (_databaseEntryCount-2.0)/(_databaseEntryCount-1.0) * _chainCovariance[d*N+e] + (_chainCovarianceScaling/_databaseEntryCount)*_chainCovariancePlaceholder[d*N+e];
 }

 // Chain Covariance (diagonal)
 for (size_t d = 0; d < N; d++)
   _chainCovariance[d*N+d] = (_databaseEntryCount-2.0)/(_databaseEntryCount-1.0) * _chainCovariance[d*N+d] + (_chainCovarianceScaling/_databaseEntryCount)*_chainCovariancePlaceholder[d*N+d];

 choleskyDecomp(_chainCovariance, _choleskyDecompositionChainCovariance);
}

void Korali::Solver::MCMC::printGeneration()
{
 Korali::logInfo("Minimal", "Database Entries %ld\n", _databaseEntryCount);

 Korali::logInfo("Normal", "Accepted Samples: %zu\n", _acceptanceCount);
 Korali::logInfo("Normal", "Acceptance Rate Proposals: %.2f%%\n", 100*_acceptanceRate);

 Korali::logInfo("Detailed", "Variable = (Current Sample, Current Candidate):\n");
 for (size_t d = 0; d < N; d++)  Korali::logData("Detailed", "         %s = (%+6.3e, %+6.3e)\n", _k->_variables[d]->_name.c_str(), _chainLeader[d], _chainCandidate[0][d]);
 Korali::logInfo("Detailed", "Current Chain Mean:\n");
 for (size_t d = 0; d < N; d++) Korali::logData("Detailed", " %s = %+6.3e\n", _k->_variables[d]->_name.c_str(), _chainMean[d]);
 Korali::logInfo("Detailed", "Current Chain Covariance:\n");
 for (size_t d = 0; d < N; d++)
 {
  for (size_t e = 0; e <= d; e++) Korali::logData("Detailed", "   %+6.3e  ", _chainCovariance[d*N+e]);
  Korali::logInfo("Detailed", "\n");
 }
}

void Korali::Solver::MCMC::finalize()
{
 Korali::logInfo("Minimal", "Number of Generated Samples: %zu\n", _proposedSampleCount);
 Korali::logInfo("Minimal", "Acceptance Rate: %.2f%%\n", 100*_acceptanceRate);
 if (_maxChainLength == _chainLength) Korali::logInfo("Minimal", "Max Samples Reached.\n");
}
