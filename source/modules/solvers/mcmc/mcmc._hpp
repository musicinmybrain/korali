#ifndef _KORALI_SOLVER_MCMC_HPP_
#define _KORALI_SOLVER_MCMC_HPP_

#include "modules/solvers/base.hpp"
#include "modules/distributions/univariate/normal/normal.hpp"
#include "modules/distributions/univariate/uniform/uniform.hpp"
#include <vector>

namespace Korali { namespace Solver {

class MCMC : public Korali::Solver::Base
{
 private: 

 Korali::Distribution::Univariate::Normal* _normalGenerator; /* Normal random number generator */
 Korali::Distribution::Univariate::Uniform* _uniformGenerator; /* Uniform random number generator */

 double recursiveAlpha(double& D, const double llk0, const double* logliks, size_t N) const; /* calculate acceptance ratio alpha_N */
 void updateState();
 void generateCandidate(size_t sampleIdx);
 void updateDatabase(std::vector<double>&, double fitness);
 void choleskyDecomp(const std::vector<double>& inC, std::vector<double>& outL) const;
 void finishSample(size_t sampleId);

 public:

 MCMC();
 ~MCMC();

 void initialize() override;
 void finalize() override;
 void runGeneration() override;
 void printGeneration() override;
};

} } // namespace Korali::Solver

#endif // _KORALI_SOLVER_MCMC_HPP_
