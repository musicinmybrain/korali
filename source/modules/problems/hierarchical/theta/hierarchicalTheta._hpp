#ifndef _KORALI_PROBLEM_HIERARCHICALTHETA_HPP_
#define _KORALI_PROBLEM_HIERARCHICALTHETA_HPP_

#include "modules/problems/base.hpp"
#include "modules/problems/bayesian/bayesian.hpp"
#include "modules/problems/hierarchicalPsi/hierarchicalPsi.hpp"

namespace Korali { namespace Problem {

class HierarchicalTheta : public Korali::Problem::Base
{
 private:

 Korali::Problem::Bayesian _subProblemKorali;
 Korali::Problem::HierarchicalPsi _psiProblemKorali;

 std::vector<double> _sample;
 std::vector<double> _precomputedLogDenominator;

 public:

 double evaluateSampleLogPrior(double* sample);

 void runModel(std::vector<double> target, size_t targetId) override;
 bool isTargetFeasible(double* sample) override;
 double evaluateTarget() override;

 bool checkTermination() override;
 void initialize() override;
 void finalize() override;
 std::string getType() override;

 void getConfiguration(nlohmann::json&) override;
 void setConfiguration(nlohmann::json&) override;
};

} } // namespace Korali::Problem


#endif // _KORALI_PROBLEM_HIERARCHICALTHETA_HPP_
