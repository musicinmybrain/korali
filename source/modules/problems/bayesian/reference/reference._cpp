#include "modules/problems/bayesian/reference/reference.hpp"
#include "modules/conduits/base.hpp"
#include "modules/engine/engine.hpp"

void Korali::Problem::Bayesian::Reference::initialize()
{
  Korali::Problem::Bayesian::Base::initialize();

  bool recognizedModel = false;
  if (_likelihoodModel == "Additive Normal") recognizedModel = true;
  if (_likelihoodModel == "Multiplicative Normal") recognizedModel = true;
  if (_likelihoodModel == "Multiplicative Normal Data") recognizedModel = true;
  if (recognizedModel == false) Korali::logError("Incorrect or no Likelihood Model selected: %s.\n", _likelihoodModel.c_str());

  if (_referenceData.size() == 0) Korali::logError("Bayesian (%s) problems require defining reference data.\n", _likelihoodModel.c_str());
  if (_statisticalVariableIndices.size() != 1) Korali::logError("Bayesian (%s) problems require exactly 1 statistical parameter, provided: %lu.\n", _likelihoodModel.c_str(), _statisticalVariableIndices.size());
}

double Korali::Problem::Bayesian::Reference::evaluateLogLikelihood(Korali::Sample& sample)
{
  double fitness = 0.0;

  _k->_conduit->runModel(_computationalModel, sample);

  if (sample.getResult().size() != _referenceData.size())
    Korali::logError("This Bayesian (%s) problem requires a %lu-sized result array. Provided: %lu.\n", _likelihoodModel.c_str(), _referenceData.size(), sample.getResult().size());

  if (_likelihoodModel == "Additive Normal")            fitness = likelihoodNormalAdditive(sample);
  if (_likelihoodModel == "Multiplicative Normal")      fitness = likelihoodNormalMultiplicative(sample);
  if (_likelihoodModel == "Multiplicative Normal Data") fitness = likelihoodNormalMultiplicativeData(sample);

  return fitness;
}

double Korali::Problem::Bayesian::Reference::likelihoodNormalAdditive(Korali::Sample& sample)
{
  double sigma   = sample[_statisticalVariableIndices[0]];
  double sigma2  = sigma*sigma;
  double ssn     = 0.0;
  double fitness = 0.0;

  for(size_t i = 0; i < _referenceData.size(); i++)
  {
    if( !isfinite(sample.getResult()[i]) )
    {
      Korali::logWarning("Normal","Non-finite value detected in the results passed in the log-likelihood function.\n");
      return -Korali::Inf;
    }
    double diff = _referenceData[i] - sample.getResult()[i];
    ssn += diff*diff;
  }

  fitness = -0.5*( _referenceData.size()*log(2*M_PI) + ssn/sigma2) - _referenceData.size()*log(sigma);
  return fitness;
}

double Korali::Problem::Bayesian::Reference::likelihoodNormalMultiplicative(Korali::Sample& sample)
{
  double sigma    = sample[_statisticalVariableIndices[0]];
  double ssn      = 0.0;
  double fitness  = 0.0;
  double logSigma = 0.0;
  for(size_t i = 0; i < _referenceData.size(); i++)
  {
    if( !isfinite(sample.getResult()[i]) )
    {
      Korali::logWarning("Normal","Non-finite value detected in the results passed in the log-likelihood function.\n");
      return -Korali::Inf;
    }

    double diff   = _referenceData[i] - sample.getResult()[i];
    double denom  = sigma*sample.getResult()[i];
    ssn += diff*diff / (denom*denom);
    logSigma += log(denom);
  }

  fitness = -0.5*( _referenceData.size()*log(2*M_PI) + ssn) - _referenceData.size()*logSigma;
  return fitness;
}

double Korali::Problem::Bayesian::Reference::likelihoodNormalMultiplicativeData(Korali::Sample& sample)
{
  double sigma    = sample[_statisticalVariableIndices[0]];
  double ssn      = 0.0;
  double fitness  = 0.0;
  double logSigma = 0.0;
  for(size_t i = 0; i < _referenceData.size(); i++)
  {
    if( !isfinite(sample.getResult()[i]) )
    {
      Korali::logWarning("Normal","Non-finite value detected in the results passed in the log-likelihood function.\n");
      return -Korali::Inf;
    }

    double diff   = _referenceData[i] - sample.getResult()[i];
    double denom  = sigma*_referenceData[i];
    ssn += diff*diff / (denom*denom);
    logSigma += log(denom);
  }

  fitness = -0.5*( _referenceData.size()*log(2*M_PI) + ssn) - _referenceData.size()*logSigma;
  return fitness;
}
