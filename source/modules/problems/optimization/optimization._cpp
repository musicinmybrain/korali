#include "korali.hpp"

void Korali::Problem::Optimization::initialize()
{
 if (_variables.size() == 0) Korali::logError("Optimization problems require at least one variable.\n");
}

bool Korali::Problem::Bayesian::isTargetFeasible(double* target)
{
  for (size_t i = 0; i < _variables.size(); i++)
  {
    if (isfinite(target[i]) == false) return false;
    if (target[i] < _variables[i]._lowerBound) return false;
    if (target[i] > _variables[i]._upperBound) return false;
  }
  return true;
}

void Korali::Problem::Optimization::runModel(std::vector<double> target, size_t targetId)
{
 // Creating model data.
 _modelData.setSample(targetId, target);

 // Executing Model
 _objectiveFunction(_modelData);
}

double Korali::Problem::Optimization::evaluateTarget()
{
 double fitnessSign = _objective == "Maximize" ? 1.0 : -1.0;

 size_t resultSize = _modelData.getResultsSize();
 if (resultSize != 0) Korali::logError("Optimization problems require exactly 1 result. Provided: %lu.\n", resultSize);
 double result = _modelData.getResults()[0];

 return fitnessSign * result;
}

double Korali::Problem::Optimization::evaluateSampleLogPrior(double* sample)
{
  return 0.0;
}
