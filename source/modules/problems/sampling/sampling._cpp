#include "korali.hpp"

void Korali::Problem::Sampling::initialize()
{
 if (_variables.size() == 0) Korali::logError("Sampling problems require at least one variable.\n");
}

bool Korali::Problem::Bayesian::isTargetFeasible(double* target)
{
  for (size_t i = 0; i < _variables.size(); i++)
  {
    if (isfinite(target[i]) == false) return false;
    if (target[i] < _variables[i]._lowerBound) return false;
    if (target[i] > _variables[i]._upperBound) return false;
  }
  return true;
}

void Korali::Problem::Sampling::runModel(std::vector<double> target, size_t targetId)
{
 // Creating model data.
  _modelData.setSample(targetId, target);

  // Executing Model
  _objectiveFunction(_modelData);
}

double Korali::Problem::Sampling::evaluateTarget()
{
 size_t resultSize = _modelData.getResultsSize();
 if (resultSize != 0) Korali::logError("Sampling problems require exactly 1 result. Provided: %lu.\n", resultSize);
 return _modelData.getResults()[0];
}

double Korali::Problem::Sampling::evaluateSampleLogPrior(double* sample)
{
  return 0.0;
}
