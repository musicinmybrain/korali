#include "modules/neuralNetwork/layer/feedforward/feedforward.hpp"
#include "modules/neuralNetwork/neuralNetwork.hpp"

#ifdef _KORALI_USE_CUDNN
  #include "auxiliar/cudaUtils.hpp"
#endif

#ifdef _KORALI_USE_ONEDNN
  #include "auxiliar/dnnUtils.hpp"
using namespace dnnl;
#endif

#ifdef _KORALI_USE_EIGEN
  #include <Eigen/Dense>
using namespace Eigen;
#endif

namespace korali
{
namespace neuralNetwork
{
namespace layer
{

void FeedForward::initialize()
{
 // Checking Layer size
 if (_nodeCount == 0) KORALI_LOG_ERROR("Node count for layer (%lu) should be larger than zero.\n", _index);

 // Checking position
 if (_index == 0) KORALI_LOG_ERROR("Feed Forward layers cannot be the starting layer of the NN\n");
 if (_index == _nn->_layers.size()-1) KORALI_LOG_ERROR("Feed Forward layers cannot be the last layer of the NN\n");
}

std::vector<float> FeedForward::generateInitialHyperparameters()
{
  std::vector<float> hyperparameters;

  // If this is not the initial layer, calculate hyperparameters for weight and bias operation
  if (_prevLayer != NULL)
  {
    // Setting value for this layer's xavier constant
    float xavierConstant = (_weightScaling * sqrtf(6.0f)) / sqrt(_nodeCount + _prevLayer->_nodeCount);

    // Adding layer's weights hyperparameter values
    for (size_t i = 0; i < _nodeCount; i++)
      for (size_t j = 0; j < _prevLayer->_nodeCount; j++)
        hyperparameters.push_back(xavierConstant * _nn->_uniformGenerator->getRandomNumber());

    // Adding layer's bias hyperparameter values
    for (size_t i = 0; i < _nodeCount; i++)
      hyperparameters.push_back(0.0f);
  }

  return hyperparameters;
}

void FeedForward::createHyperparameterMemory()
{
  // Checking Layer sizes
  ssize_t OC = _nodeCount;
  ssize_t IC = _prevLayer->_nodeCount;

  // Setting hyperparameter count
  _hyperparameterCount = IC * OC + OC;

#ifdef _KORALI_USE_EIGEN
  if (_nn->_engine == "Korali")
  {
    _weightValues = (float *)malloc(IC * OC * sizeof(float));
    _weightGradient = (float *)malloc(IC * OC * sizeof(float));

    _biasValues = (float *)malloc(OC * sizeof(float));
    _biasGradient = (float *)malloc(OC * sizeof(float));
  }
#endif

#ifdef _KORALI_USE_ONEDNN
  if (_nn->_engine == "OneDNN")
  {
    memory::dims weightDims = {OC, IC};
    auto weightMemDesc = memory::desc(weightDims, memory::data_type::f32, memory::format_tag::ab);

    _weightsMem = memory(weightMemDesc, _engine);
    _weightsGradientMem = memory(_weightsMem.get_desc(), _engine);

    auto biasMemDesc = memory::desc({OC}, memory::data_type::f32, memory::format_tag::a);

    _biasMem = memory(biasMemDesc, _engine);
    _biasGradientMem = memory(_biasMem.get_desc(), _engine);
  }
#endif

#ifdef _KORALI_USE_CUDNN
  if (_nn->_engine == "CUDNN")
  {
    cudnnErrCheck(cudnnCreateFilterDescriptor(&_weightsFilterDesc));
    cudnnErrCheck(cudnnSetFilter4dDescriptor(_weightsFilterDesc, CUDNN_DATA_FLOAT, CUDNN_TENSOR_NCHW, OC, IC, 1, 1));

    cudaErrCheck(cudaMalloc((void **)&_weightsFilter, IC * OC * sizeof(float)));
    cudaErrCheck(cudaMalloc((void **)&_weightsGradientFilter, IC * OC * sizeof(float)));

    cudnnErrCheck(cudnnCreateTensorDescriptor(&_biasTensorDesc));
    cudnnErrCheck(cudnnSetTensor4dDescriptor(_biasTensorDesc, CUDNN_TENSOR_NCHW, CUDNN_DATA_FLOAT, 1, OC, 1, 1));

    cudaErrCheck(cudaMalloc((void **)&_biasTensor, OC * sizeof(float)));
    cudaErrCheck(cudaMalloc((void **)&_biasGradientTensor, OC * sizeof(float)));
  }
#endif
}

void FeedForward::createForwardPipeline()
{
  // Calling base layer function
  Layer::createForwardPipeline();

  // Obtaining batch size
  ssize_t N = _nn->_batchSize;
  ssize_t OC = _nodeCount;

#ifdef _KORALI_USE_ONEDNN
  if (_nn->_engine == "OneDNN")
  {
    // We create the inner product (Wx + b) operation
    auto inner_product_d = inner_product_forward::desc(prop_kind::forward_training, _prevLayer->_outputMem.get_desc(), _weightsMem.get_desc(), _biasMem.get_desc(), _outputMem.get_desc());

    // Create inner product primitive descriptor.
    dnnl::primitive_attr forwardPrimitiveAttributes;
    _forwardInnerProductPrimitiveDesc = inner_product_forward::primitive_desc(inner_product_d, forwardPrimitiveAttributes, _engine);

    // Create the weights+bias primitive.
    _forwardInnerProductPrimitive = inner_product_forward(_forwardInnerProductPrimitiveDesc);

    // Configuring inner product arguments
    _forwardInnerProductArgs[DNNL_ARG_SRC] = _prevLayer->_outputMem;
    _forwardInnerProductArgs[DNNL_ARG_WEIGHTS] = _weightsMem;
    _forwardInnerProductArgs[DNNL_ARG_BIAS] = _biasMem;
    _forwardInnerProductArgs[DNNL_ARG_DST] = _outputMem;
  }
#endif

#ifdef _KORALI_USE_CUDNN
  if (_nn->_engine == "CUDNN")
  {
    // Allocating memory for weight operation's output
    cudaErrCheck(cudaMalloc((void **)&_outputTensor, N * OC * sizeof(float)));

    // Creating convolution operator
    cudnnErrCheck(cudnnCreateConvolutionDescriptor(&_convolutionDesc));
    cudnnErrCheck(cudnnSetConvolution2dDescriptor(_convolutionDesc, 0, 0, 1, 1, 1, 1, CUDNN_CONVOLUTION, CUDNN_DATA_FLOAT));
    cudnnErrCheck(cudnnGetConvolutionForwardWorkspaceSize(_nn->_cuDNNHandle, _prevLayer->_outputTensorDesc, _weightsFilterDesc, _convolutionDesc, _outputTensorDesc, CUDNN_CONVOLUTION_FWD_ALGO_IMPLICIT_GEMM, &_convolutionWorkspaceSize));
    cudaErrCheck(cudaMalloc((void **)&_convolutionWorkspace, _convolutionWorkspaceSize * sizeof(float)));
  }
#endif
}

void FeedForward::createBackwardPipeline()
{
  /*********************************************************************************
  *  Initializing memory objects and primitives for BACKWARD propagation
  *********************************************************************************/

 // Calling base layer function
 Layer::createBackwardPipeline();

  size_t N = _nn->_batchSize;
  size_t OC = _nodeCount;

// Creating backward propagation primitives
#ifdef _KORALI_USE_ONEDNN
  if (_nn->_engine == "OneDNN")
  {
    auto backwardDataDesc = inner_product_backward_data::desc(
      _prevLayer->_outputMem.get_desc(),
      _weightsMem.get_desc(),
      _outputMem.get_desc());

    // Create the primitive.
    auto backwardDataPrimitiveDesc = inner_product_backward_data::primitive_desc(backwardDataDesc, _engine, _forwardInnerProductPrimitiveDesc);
    _backwardDataPrimitive = inner_product_backward_data(backwardDataPrimitiveDesc);

    _backwardDataArgs[DNNL_ARG_DIFF_DST] = _outputGradientMem;         // Input
    _backwardDataArgs[DNNL_ARG_WEIGHTS] = _weightsMem;                     // Input
    _backwardDataArgs[DNNL_ARG_DIFF_SRC] = _prevLayer->_outputGradientMem; // Output

    auto backwardWeightsDesc = inner_product_backward_weights::desc(
      _prevLayer->_outputMem.get_desc(),
      _weightsMem.get_desc(),
      _biasMem.get_desc(),
      _outputGradientMem.get_desc());

    // Create the primitive.
    auto backwardWeightsPrimitiveDesc = inner_product_backward_weights::primitive_desc(backwardWeightsDesc, _engine, _forwardInnerProductPrimitiveDesc);
    _backwardWeightsPrimitive = inner_product_backward_weights(backwardWeightsPrimitiveDesc);

    _backwardWeightsArgs[DNNL_ARG_SRC] = _prevLayer->_outputMem; // Input
    _backwardWeightsArgs[DNNL_ARG_DIFF_DST] = _outputGradientMem;          // Input
    _backwardWeightsArgs[DNNL_ARG_DIFF_WEIGHTS] = _weightsGradientMem;   // Output
    _backwardWeightsArgs[DNNL_ARG_DIFF_BIAS] = _biasGradientMem;         // Output
  }
#endif

#ifdef _KORALI_USE_CUDNN
  if (_nn->_engine == "CUDNN")
  {
   // Allocating gradient space for weight operation
   cudaErrCheck(cudaMalloc((void **)&_outputGradientTensor, N * OC * sizeof(float)));
  }
#endif
}

void FeedForward::forwardData()
{
   size_t N = _nn->_batchSize;
   size_t IC = _prevLayer->_nodeCount;
   size_t OC = _nodeCount;

#ifdef _KORALI_USE_EIGEN
   if (_nn->_engine == "Korali")
   {
     // Performing Wx computation
     Map<MatrixXf> matA(_weightValues, IC, OC);
     Map<MatrixXf> matB(_prevLayer->_outputValues, IC, N);
     Map<MatrixXf> matC(_outputValues, N, OC);

     matC = matA.transpose() * matB;

     // Adding Bias
     for (size_t i = 0; i < N; i++)
       for (size_t j = 0; j < OC; j++)
         _outputValues[i * OC + j] += _biasValues[j];
   }
#endif

#ifdef _KORALI_USE_ONEDNN
   if (_nn->_engine == "OneDNN")
   {
     _forwardInnerProductPrimitive.execute(_nn->_stream, _forwardInnerProductArgs);
   }
#endif

#ifdef _KORALI_USE_CUDNN
   if (_nn->_engine == "CUDNN")
   {
     float alpha1 = 1.0f;
     float alpha2 = 0.0f;
     cudnnErrCheck(cudnnConvolutionForward(
           _nn->_cuDNNHandle,
           &alpha1,
           _prevLayer->_outputTensorDesc,
           _prevLayer->_outputTensor,
           _weightsFilterDesc,
           _weightsFilter,
           _convolutionDesc,
           CUDNN_CONVOLUTION_FWD_ALGO_IMPLICIT_GEMM,
           _convolutionWorkspace,
           _convolutionWorkspaceSize,
           &alpha2,
           _outputTensorDesc,
           _outputTensor));

     float alpha = 1.0f;
     float beta = 1.0f;
     cudnnAddTensor(_nn->_cuDNNHandle, &alpha, _biasTensorDesc, _biasTensor, &beta, _outputTensorDesc, _outputTensor);
   }
#endif
}

void FeedForward::backwardData()
{
  int N = _nn->_batchSize;
  int IC = _prevLayer->_nodeCount;
  int OC = _nodeCount;

 #ifdef _KORALI_USE_EIGEN
   if (_nn->_engine == "Korali")
   {
     // Backward propagating Wx+b operation
     Map<MatrixXf> matA(_weightValues, IC, OC);
     Map<MatrixXf> matB(_outputGradient, OC, N);
     Map<MatrixXf> matC(_prevLayer->_outputGradient, N, IC);

     matC = matA * matB;
   }
 #endif

 #ifdef _KORALI_USE_ONEDNN
   if (_nn->_engine == "OneDNN")
   {
     _backwardDataPrimitive.execute(_nn->_stream, _backwardDataArgs);
   }
 #endif

 #ifdef _KORALI_USE_CUDNN
   if (_nn->_engine == "CUDNN")
   {
     float alpha = 1.0f;
     float beta = 0.0f;
     cudnnErrCheck(cudnnConvolutionBackwardData(
           _nn->_cuDNNHandle,
           &alpha,
           _weightsFilterDesc,
           _weightsFilter,
           _outputTensorDesc,
           _outputGradientTensor,
           _convolutionDesc,
           CUDNN_CONVOLUTION_BWD_DATA_ALGO_0,
           _convolutionWorkspace,
           _convolutionWorkspaceSize,
           &beta,
           _prevLayer->_outputTensorDesc,
           _prevLayer->_outputGradientTensor));
   }
 #endif
}

void FeedForward::backwardHyperparameters()
{
   int N = _nn->_batchSize;
   int IC = _prevLayer->_nodeCount;
   int OC = _nodeCount;

#ifdef _KORALI_USE_EIGEN
   if (_nn->_engine == "Korali")
   {
     // Performing Weight gradient calculation
     Map<MatrixXf> matA(_prevLayer->_outputValues, IC, N);
     Map<MatrixXf> matB(_outputGradient, OC, N);
     Map<MatrixXf> matC(_weightGradient, OC, IC);

     matC = matA * matB.transpose();

     // Setting the bias values to all minibatch inputs
     for (size_t j = 0; j < OC; j++) _biasGradient[j] = _outputGradient[0 * OC + j];
     for (size_t i = 1; i < N; i++)
       for (size_t j = 0; j < OC; j++) _biasGradient[j] += _outputGradient[i * OC + j];
   }
#endif

#ifdef _KORALI_USE_ONEDNN
   if (_nn->_engine == "OneDNN")
   {
     _backwardWeightsPrimitive.execute(_nn->_stream, _backwardWeightsArgs);
   }
#endif

#ifdef _KORALI_USE_CUDNN
   if (_nn->_engine == "CUDNN")
   {
     float alpha = 1.0f;
     float beta = 0.0f;

     cudnnErrCheck(cudnnConvolutionBackwardBias(
           _nn->_cuDNNHandle,
           &alpha,
           _outputTensorDesc,
           _outputGradientTensor,
           &beta,
           _biasTensorDesc,
           _biasGradientTensor));

     cudnnErrCheck(cudnnConvolutionBackwardFilter(
           _nn->_cuDNNHandle,
           &alpha,
           _prevLayer->_outputTensorDesc,
           _prevLayer->_outputTensor,
           _outputTensorDesc,
           _outputGradientTensor,
           _convolutionDesc,
           CUDNN_CONVOLUTION_BWD_FILTER_ALGO_0,
           _convolutionWorkspace,
           _convolutionWorkspaceSize,
           &beta,
           _weightsFilterDesc,
           _weightsGradientFilter));
   }
#endif
}

void FeedForward::setHyperparameters(float *hyperparameters)
{
  size_t IC = _prevLayer->_nodeCount;
  size_t OC = _nodeCount;

#ifdef _KORALI_USE_EIGEN
  if (_nn->_engine == "Korali")
  {
    memcpy(_weightValues, &hyperparameters[0], IC * OC * sizeof(float));
    memcpy(_biasValues, &hyperparameters[IC * OC], OC * sizeof(float));
  }
#endif

#ifdef _KORALI_USE_ONEDNN
  if (_nn->_engine == "OneDNN")
  {
    write_to_dnnl_memory(&hyperparameters[0], _weightsMem);
    write_to_dnnl_memory(&hyperparameters[IC * OC], _biasMem);
  }
#endif

#ifdef _KORALI_USE_CUDNN
  if (_nn->_engine == "CUDNN")
  {
    cudaErrCheck(cudaMemcpy(_weightsFilter, &hyperparameters[0], IC * OC * sizeof(float), cudaMemcpyHostToDevice));
    cudaErrCheck(cudaMemcpy(_biasTensor, &hyperparameters[IC * OC], OC * sizeof(float), cudaMemcpyHostToDevice));
  }
#endif
}

void FeedForward::getHyperparameters(float *hyperparameters)
{
  size_t IC = _prevLayer->_nodeCount;
  size_t OC = _nodeCount;

#ifdef _KORALI_USE_EIGEN
  if (_nn->_engine == "Korali")
  {
    memcpy(&hyperparameters[0], _weightValues, IC * OC * sizeof(float));
    memcpy(&hyperparameters[IC * OC], _biasValues, OC * sizeof(float));
  }
#endif

#ifdef _KORALI_USE_ONEDNN
  if (_nn->_engine == "OneDNN")
  {
    read_from_dnnl_memory(&hyperparameters[0], _weightsMem);
    read_from_dnnl_memory(&hyperparameters[IC * OC], _biasMem);
  }
#endif

#ifdef _KORALI_USE_CUDNN
  if (_nn->_engine == "CUDNN")
  {
    cudaErrCheck(cudaMemcpy(&hyperparameters[0], _weightsFilter, IC * OC * sizeof(float), cudaMemcpyDeviceToHost));
    cudaErrCheck(cudaMemcpy(&hyperparameters[IC * OC], _biasTensor, OC * sizeof(float), cudaMemcpyDeviceToHost));
  }
#endif
}

void FeedForward::getHyperparameterGradients(float *gradient)
{
  size_t IC = _prevLayer->_nodeCount;
  size_t OC = _nodeCount;

#ifdef _KORALI_USE_EIGEN
  if (_nn->_engine == "Korali")
  {
    memcpy(&gradient[0], _weightGradient, IC * OC * sizeof(float));
    memcpy(&gradient[IC * OC], _biasGradient, OC * sizeof(float));
  }
#endif

#ifdef _KORALI_USE_ONEDNN
  if (_nn->_engine == "OneDNN")
  {
    read_from_dnnl_memory(&gradient[0], _weightsGradientMem);
    read_from_dnnl_memory(&gradient[IC * OC], _biasGradientMem);
  }
#endif

#ifdef _KORALI_USE_CUDNN
  if (_nn->_engine == "CUDNN")
  {
    cudaErrCheck(cudaMemcpy(&gradient[0], _weightsGradientFilter, IC * OC * sizeof(float), cudaMemcpyDeviceToHost));
    cudaErrCheck(cudaMemcpy(&gradient[IC * OC], _biasGradientTensor, OC * sizeof(float), cudaMemcpyDeviceToHost));
  }
#endif
}

} // namespace layer

} // namespace neuralNetwork

} // namespace korali
