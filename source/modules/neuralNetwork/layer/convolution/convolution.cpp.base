#include "modules/neuralNetwork/layer/convolution/convolution.hpp"
#include "modules/neuralNetwork/neuralNetwork.hpp"

#ifdef _KORALI_USE_CUDNN
  #include "auxiliar/cudaUtils.hpp"
#endif

#ifdef _KORALI_USE_ONEDNN
  #include "auxiliar/dnnUtils.hpp"
using namespace dnnl;
#endif

#include <Eigen/Dense>
using namespace Eigen;

__startNamespace__;

void __className__::initialize()
{
  // Checking Layer size
  if (_outputChannels == 0) KORALI_LOG_ERROR("Node count for layer (%lu) should be larger than zero.\n", _index);

  // Checking position
  if (_index == 0) KORALI_LOG_ERROR("Convolutional layers cannot be the starting layer of the NN\n");
  if (_index == _nn->_layers.size() - 1) KORALI_LOG_ERROR("Convolutional layers cannot be the last layer of the NN\n");

  // Precalculating values for the convolution operation
  N = _batchSize;
  IH = _imageHeight;
  IW = _imageWidth;
  KH = _kernelHeight;
  KW = _kernelWidth;

  SV = _verticalStride;
  SH = _horizontalStride;
  PT = _paddingTop;
  PL = _paddingLeft;
  PB = _paddingBottom;
  PR = _paddingRight;

  // Check for non zeros
  if (IH <= 0) KORALI_LOG_ERROR("Image height must be larger than zero for convolutional layer.\n");
  if (IW <= 0) KORALI_LOG_ERROR("Image width must be larger than zero for convolutional layer.\n");
  if (KH <= 0) KORALI_LOG_ERROR("Kernel height must be larger than zero for convolutional layer.\n");
  if (KW <= 0) KORALI_LOG_ERROR("Kernel width must be larger than zero for convolutional layer.\n");
  if (SV <= 0) KORALI_LOG_ERROR("Vertical stride must be larger than zero for convolutional layer.\n");
  if (SH <= 0) KORALI_LOG_ERROR("Horizontal stride must be larger than zero for convolutional layer.\n");

  // Several sanity checks
  if (KH > IH + PR + PL) KORALI_LOG_ERROR("[Convolutional layer %zu] Kernel height cannot be larger than input image height plus padding.\n", _index-1);
  if (KW > IW + PT + PB) KORALI_LOG_ERROR("[Convolutional layer %zu] Kernel width cannot be larger than input image width plus padding.\n",_index-1);

  // Check whether the output channels of the previous layer is divided by the height and width
  if (_prevLayer->_outputChannels % (IH * IW) > 0) KORALI_LOG_ERROR("Previous layer %zu to convolutional layer %zu contains a number of channels (%lu) not divisible by the convolutional 2D HxW setup (%lux%lu).\n", _index-2, _index-1, _prevLayer->_outputChannels, IH, IW);
  IC = _prevLayer->_outputChannels / (IH * IW);

  // Deriving output height and width
  OH = (IH - KH + PT + PB) / SV + 1;
  OW = (IW - KW + PR + PL) / SH + 1;

  // Check whether the output channels of the previous layer is divided by the height and width
  if (_outputChannels % (OH * OW) > 0) KORALI_LOG_ERROR("[Convolutional layer %zu] Number of output channels (%lu) not divisible by the output image size (%lux%lu) given kernel (%lux%lu) size and padding/stride configuration.\n", _index-1, _outputChannels, OH, OW, KH, KW);
  OC = _outputChannels / (OH * OW);

#ifdef _KORALI_USE_CUDNN
    if (_nn->_engine == "CuDNN")
    {
      if (PT != PB)
        KORALI_LOG_ERROR("[Convolutional layer %zu] does not allow an symmetric top %zu and bottom %zu padding.\n", _index-1, PT, PB);
      if (PT != PB)
        KORALI_LOG_ERROR("[Convolutional layer %zu] does not allow an symmetric left %zu and right %zu padding.\n", _index-1, PL, PR);
    }
#endif
}

std::vector<float> __className__::generateInitialHyperparameters()
{
  std::vector<float> hyperparameters;
  size_t weightCount = OC * IC * KH * KW;
  size_t biasCount = OC;

  // If this is not the initial layer, calculate hyperparameters for weight and bias operation
  if (_prevLayer != nullptr)
  {
    // Setting value for this layer's xavier constant
    float xavierConstant = std::sqrt(6.0f) / std::sqrt(_outputChannels + _prevLayer->_outputChannels);

    // Adding layer's weights hyperparameter values
    for (size_t i = 0; i < weightCount; i++)
      hyperparameters.push_back(_weightScaling * xavierConstant * _nn->_uniformGenerator->getRandomNumber());

    // Adding layer's bias hyperparameter values
    for (size_t i = 0; i < biasCount; i++)
      hyperparameters.push_back(0.0f);
  }

  return hyperparameters;
}

void __className__::createHyperparameterMemory()
{
  // Setting hyperparameter count
  size_t weightCount = OC * IC * KH * KW;
  size_t biasCount = OC;

  _hyperparameterCount = weightCount + biasCount;

  std::exception_ptr eptr;
  try{
#ifdef _KORALI_USE_ONEDNN
    if (_nn->_engine == "OneDNN")
    {
      memory::dims weightDims = {OC, IC, KH, KW};
      auto weightMemDesc = memory::desc(weightDims, memory::data_type::f32, memory::format_tag::oihw);
      _weightsMem = memory(weightMemDesc, _nn->_dnnlEngine);

      auto biasMemDesc = memory::desc({OC}, memory::data_type::f32, memory::format_tag::a);
      _biasMem = memory(biasMemDesc, _nn->_dnnlEngine);
    }
#endif

#ifdef _KORALI_USE_CUDNN
    if (_nn->_engine == "CuDNN")
    {
      // Kernel/Filter Memory
      cudnnErrCheck(cudnnCreateFilterDescriptor(&_weightsFilterDesc));
      cudnnErrCheck(cudnnSetFilter4dDescriptor(_weightsFilterDesc,
                                            /*dataType=*/CUDNN_DATA_FLOAT,
                                               /*format=*/CUDNN_TENSOR_NCHW,
                                               /*out_channels=*/OC,
                                               /*in_channels=*/IC,
                                               /*kernel_height=*/KH,
                                               /*kernel_width=*/KW));
      // _weightsFilter.resize(_nn->_timestepCount);
      // for (size_t i = 0; i < _nn->_timestepCount; i++)
      cudaErrCheck(cudaMalloc((void **)&_weightsFilter, IC * KH * KW * OC * sizeof(float)));
      // Create Bias Tensors
      cudnnErrCheck(cudnnCreateTensorDescriptor(&_biasTensorDesc));
      cudnnErrCheck(cudnnSetTensor4dDescriptor(_biasTensorDesc, CUDNN_TENSOR_NCHW, CUDNN_DATA_FLOAT, 1, OC, 1, 1));
      cudaErrCheck(cudaMalloc((void **)&_biasTensor, OC * sizeof(float)));
    }
#endif
  } catch (...) {
    eptr = std::current_exception();
  }
  try{
    Layer::exceptionHandler(eptr);
  } catch(...){
    eptr = std::current_exception();
  }
  exceptionHandler(eptr);

}

void __className__::copyHyperparameterPointers(Layer *dstLayer)
{
  Convolution *dstPtr = dynamic_cast<Convolution *>(dstLayer);
  dstPtr->_hyperparameterCount = _hyperparameterCount;

#ifdef _KORALI_USE_ONEDNN
  if (_nn->_engine == "OneDNN")
  {
    dstPtr->_weightsMem = _weightsMem;
    dstPtr->_biasMem = _biasMem;
  }
#endif

#ifdef _KORALI_USE_CUDNN
  if (_nn->_engine == "CuDNN")
  {
    // copy kernel weights and bias
    dstPtr->_weightsFilterDesc = _weightsFilterDesc;
    dstPtr->_weightsFilter = _weightsFilter;
    dstPtr->_biasTensorDesc = _biasTensorDesc;
    dstPtr->_biasTensor = _biasTensor;
  }
#endif

}

void __className__::createForwardPipeline()
{
  // Calling base layer function
  /*
  ** - cuDNN: 1. sets _forwardMode
  **          2. set OC = _outputChannels (here _outputChannels / (OH * OW) )
  **          3. creates _outputTensorDesc of size N, OC, 1, 1
  **          4. creates _outputTensor of size N x OC of size float
  */
  Layer::createForwardPipeline();

  if (_nn->_engine == "Korali") KORALI_LOG_ERROR("Convolutional Layers still not supported in Korali's NN backend. Use OneDNN.\n");

  std::exception_ptr eptr;
  try{
#ifdef _KORALI_USE_ONEDNN
    if (_nn->_engine == "OneDNN")
    {
      // Creating memory descriptor mappings for input memory
      _srcMemDesc = memory::desc({N, IC, IH, IW}, memory::data_type::f32, memory::format_tag::nchw);
      _dstMemDesc = memory::desc({N, OC, OH, OW}, memory::data_type::f32, memory::format_tag::nchw);

      // Creating padding dims
      memory::dims ST = {SV, SH};  // Horizontal Vertical
      memory::dims PTL = {PT, PL}; // Top Left
      memory::dims PBR = {PB, PR}; // Bottom Right

      // We create the convolution operation
      auto convolution_d = convolution_forward::desc(_propKind, algorithm::convolution_auto, _srcMemDesc, _weightsMem.get_desc(), _biasMem.get_desc(), _dstMemDesc, ST, PTL, PBR);

      // Create inner product primitive descriptor.
      dnnl::primitive_attr convolutionPrimitiveAttributes;
      _forwardConvolutionPrimitiveDesc = convolution_forward::primitive_desc(convolution_d, convolutionPrimitiveAttributes, _nn->_dnnlEngine);

      // Create the weights+bias primitive.
      _forwardConvolutionPrimitive = convolution_forward(_forwardConvolutionPrimitiveDesc);
    }
#endif

#ifdef _KORALI_USE_CUDNN
    if (_nn->_engine == "CuDNN")
    {
      // Input Tensor
      cudnnErrCheck(cudnnCreateTensorDescriptor(&_inputDescriptor));
      cudnnErrCheck(cudnnSetTensor4dDescriptor(
                      /*Inp. Tensor Descr.=*/ _inputDescriptor,
                      /*format=*/CUDNN_TENSOR_NHWC,
                      /*dataType=*/CUDNN_DATA_FLOAT,
                      /*batch_size=*/1,
                      /*channels=*/IC,
                      /*image_height=*/IH,
                      /*image_width=*/IW));
      // Output Tensor
      cudnnErrCheck(cudnnCreateTensorDescriptor(&_outputDescriptor));
      cudnnErrCheck(cudnnSetTensor4dDescriptor(
                      /*Output. Tensor Descr.=*/ _outputDescriptor,
                      /*format=*/CUDNN_TENSOR_NHWC,
                      /*dataType=*/CUDNN_DATA_FLOAT,
                      /*batch_size=*/1,
                      /*channels=*/OC,
                      /*image_height=*/OH,
                      /*image_width=*/OW));
      // Concolution Descriptor
      cudnnErrCheck(cudnnCreateConvolutionDescriptor(&convolutionDescriptor));
      cudnnErrCheck(cudnnSetConvolution2dDescriptor(convolutionDescriptor,
                                                    /*pad_height=PB=*/PT,
                                                    /*pad_width=PL=*/PR,
                                                    /*vertical_stride=*/SV,
                                                    /*horizontal_stride=*/SH,
                                                    /*dilation_height=*/1,
                                                    /*dilation_width=*/1,
                                                    /*mode=*/CUDNN_CONVOLUTION,
                                                    /*computeType=*/CUDNN_DATA_FLOAT));
      // TODO: change this to cuDNN 8 API
      cudnnErrCheck(cudnnGetConvolutionForwardAlgorithm_v7(_nn->_cuDNNHandle,
                                                           _inputDescriptor,
                                                           _weightsFilterDesc,
                                                           _convolutionDescriptor,
                                                           _output_descriptor,
                                                           CUDNN_CONVOLUTION_FWD_PREFER_FASTEST,
                                                           /*memoryLimitInBytes=*/0,
                                                           &_convolutionAlgorithm));

      cudnnErrCheck(cudnnGetConvolutionForwardWorkspaceSize(_nn->_cuDNNHandle,
                                                         _inputDescriptor,
                                                         _kernelDescriptor,
                                                         _convolutionDescriptor,
                                                         _outputDescriptor,
                                                         _convolutionAlgorithm,
                                                         &_convolutionWorkspaceSize));

#ifdef DEBUG
      // TODO remove at some point
      _k->_logger->logInfo("Normal", "[Convolutional layer %zu] Allocating %f MB for cuDNN convolution workspace.\n", _index-1, _convolutionWorkspaceSize/(1024.0*1024.0));
#endif
      // Create workspace memory
      cudaErrCheck(cudaMalloc((void **)&_convolutionWorkspace, _convolutionWorkspaceSize * sizeof(float)));
#endif
  } catch (...) {
    eptr = std::current_exception();
  }
  exceptionHandler(eptr);
}

void __className__::createBackwardPipeline()
{
  //  Initializing memory objects and primitives for BACKWARD propagation

  // Calling base layer function
  Layer::createBackwardPipeline();

#ifdef _KORALI_USE_ONEDNN
  if (_nn->_engine == "OneDNN")
  {
    // Creating memory descriptor mappings for input memory
    _srcMemDesc = memory::desc({N, IC, IH, IW}, memory::data_type::f32, memory::format_tag::nchw);
    _dstMemDesc = memory::desc({N, OC, OH, OW}, memory::data_type::f32, memory::format_tag::nchw);

    // Creating padding dims
    memory::dims ST = {SV, SH};  // Horizontal Vertical
    memory::dims PTL = {PT, PL}; // Top Left
    memory::dims PBR = {PB, PR}; // Bottom Right

    // Setting strides and padding configuration
    _weightsGradientMem = memory(_weightsMem.get_desc(), _nn->_dnnlEngine);
    _biasGradientMem = memory(_biasMem.get_desc(), _nn->_dnnlEngine);

    auto backwardDataDesc = convolution_backward_data::desc(
      algorithm::convolution_auto,
      _srcMemDesc,
      _weightsMem.get_desc(),
      _dstMemDesc,
      ST,
      PTL,
      PBR);

    // Create the primitive.
    auto backwardDataPrimitiveDesc = convolution_backward_data::primitive_desc(backwardDataDesc, _nn->_dnnlEngine, _forwardConvolutionPrimitiveDesc);
    _backwardDataPrimitive = convolution_backward_data(backwardDataPrimitiveDesc);

    auto backwardWeightsDesc = convolution_backward_weights::desc(
      algorithm::convolution_auto,
      _srcMemDesc,
      _weightsMem.get_desc(),
      _biasMem.get_desc(),
      _dstMemDesc,
      ST,
      PTL,
      PBR);

    // Create the primitive.
    auto backwardWeightsPrimitiveDesc = convolution_backward_weights::primitive_desc(backwardWeightsDesc, _nn->_dnnlEngine, _forwardConvolutionPrimitiveDesc);
    _backwardWeightsPrimitive = convolution_backward_weights(backwardWeightsPrimitiveDesc);
  }
#endif

#ifdef _KORALI_USE_CUDNN
  // TODO
  if (_nn->_engine == "CuDNN")
  {
    cudaErrCheck(cudaMalloc((void **)&_weightsGradientFilter, IC * KH * KW * OC * sizeof(float)));
    cudaErrCheck(cudaMalloc((void **)&_biasGradientTensor, OC * sizeof(float)));

  //   v8: cudnnFindConvolutionBackwardFilterAlgorithm
  // TODO Either v7 API
  //   cudnnStatus_t cudnnGetConvolutionBackwardFilterAlgorithm_v7(
  //     cudnnHandle_t                          handle,
  //     const cudnnTensorDescriptor_t          xDesc,
  //     const cudnnTensorDescriptor_t          dyDesc,
  //     const cudnnConvolutionDescriptor_t     convDesc,
  //     const cudnnFilterDescriptor_t          dwDesc,
  //     const int                              requestedAlgoCount,
  //     int                                   *returnedAlgoCount,
  //     cudnnConvolutionBwdFilterAlgoPerf_t   *perfResults)
  //     }

  // v8: cudnnFindConvolutionBackwardDataAlgorithm()
  // cudnnStatus_t cudnnGetConvolutionBackwardDataAlgorithm_v7(
  //   cudnnHandle_t                          handle,
  //   const cudnnFilterDescriptor_t          wDesc,
  //   const cudnnTensorDescriptor_t          dyDesc,
  //   const cudnnConvolutionDescriptor_t     convDesc,
  //   const cudnnTensorDescriptor_t          dxDesc,
  //   const int                              requestedAlgoCount,
  //   int                                   *returnedAlgoCount,
  //   cudnnConvolutionBwdDataAlgoPerf_t     *perfResults)

#endif

}

void __className__::forwardData(const size_t t)
{
#ifdef _KORALI_USE_ONEDNN
  if (_nn->_engine == "OneDNN")
  {
    // Arguments to the inner product operation
    std::unordered_map<int, dnnl::memory> forwardConvolutionArgs;
    forwardConvolutionArgs[DNNL_ARG_SRC] = _prevLayer->_outputMem[t];
    forwardConvolutionArgs[DNNL_ARG_WEIGHTS] = _weightsMem;
    forwardConvolutionArgs[DNNL_ARG_BIAS] = _biasMem;
    forwardConvolutionArgs[DNNL_ARG_DST] = _outputMem[t];

    _forwardConvolutionPrimitive.execute(_nn->_dnnlStream, forwardConvolutionArgs);
  }
#endif

#ifdef _KORALI_USE_CUDNN
  if (_nn->_engine == "CuDNN")
  {
    float alpha1 = 1.0f;
    float alpha2 = 0.0f;
    cudnnErrCheck(cudnnConvolutionForward(_nn->_cuDNNHandle,
                                          /*alpha=*/&alpha1,
                                          _inputDescriptor,
                                          _prevLayer->_outputTensor[t],
                                          _weightsFilterDesc,
                                          _weightsFilter,
                                          _convolutionDescriptor,
                                          _convolutionAlgorithm,
                                          _convolutionWorkspace,
                                          _convolutionWorkspaceSize,
                                          /*beta=*/&alpha2,
                                          _outputDescriptor,
                                          _outputTensor[t]));
  }
  float alpha = 1.0f;
  float beta = 1.0f;
  cudnnAddTensor(_nn->_cuDNNHandle, &alpha, _biasTensorDesc, _biasTensor, &beta, _outputTensorDesc, _outputTensor[t]);
#endif
}

void __className__::backwardData(const size_t t)
{
  if (_nn->_mode == "Inference")
    KORALI_LOG_ERROR("Requesting Layer backward data propagation but NN was configured for inference only.\n");

#ifdef _KORALI_USE_ONEDNN
  if (_nn->_engine == "OneDNN")
  {
    _backwardDataArgs[DNNL_ARG_DIFF_DST] = _outputGradientMem[t];             // Input
    _backwardDataArgs[DNNL_ARG_WEIGHTS] = _weightsMem;                        // Input
    _backwardDataArgs[DNNL_ARG_DIFF_SRC] = _prevLayer->_outputGradientMem[t]; // Output

    _backwardDataPrimitive.execute(_nn->_dnnlStream, _backwardDataArgs);
  }
#endif

#ifdef _KORALI_USE_CUDNN
  if (_nn->_engine == "CuDNN")
  {
    float alpha = 1.0f;
    float beta = 0.0f;
    cudnnErrCheck(cudnnConvolutionBackwardData(
      _nn->_cuDNNHandle,
      &alpha,
      _weightsFilterDesc,
      _weightsFilter,
      /*TODO: check*/_outputDescriptor,
      _outputGradientTensor[t],
      _convolutionDesc,
      // TODO: change algorithm type
      CUDNN_CONVOLUTION_BWD_DATA_ALGO_0,
      _convolutionWorkspace[t],
      _convolutionWorkspaceSize,
      &beta,
      /*TODO: check*/_inputDescriptor,
      _prevLayer->_outputGradientTensor[t]));
  }
#endif

}

void __className__::backwardHyperparameters(size_t t)
{
  if (_nn->_mode == "Inference")
    KORALI_LOG_ERROR("Requesting Layer hyperparameter gradient propagation but NN was configured for inference only.\n");

#ifdef _KORALI_USE_ONEDNN
  if (_nn->_engine == "OneDNN")
  {
    // Arguments for the backward propagation of the gradient wrt Weights and Biases
    std::unordered_map<int, dnnl::memory> backwardWeightsArgs;
    backwardWeightsArgs[DNNL_ARG_SRC] = _prevLayer->_outputMem[t];    // Input
    backwardWeightsArgs[DNNL_ARG_DIFF_DST] = _outputGradientMem[t];   // Input
    backwardWeightsArgs[DNNL_ARG_DIFF_WEIGHTS] = _weightsGradientMem; // Output
    backwardWeightsArgs[DNNL_ARG_DIFF_BIAS] = _biasGradientMem;       // Output

    _backwardWeightsPrimitive.execute(_nn->_dnnlStream, backwardWeightsArgs);
  }
#endif

#ifdef _KORALI_USE_CUDNN
  if (_nn->_engine == "CuDNN")
  {
    float alpha = 1.0f;
    float beta = 0.0f;

    cudnnErrCheck(cudnnConvolutionBackwardBias(
                    _nn->_cuDNNHandle,
                    &alpha,
                    /*TODO: check*/_outputDescriptor,
                    _outputGradientTensor[t],
                    &beta,
                    _biasTensorDesc,
                    _biasGradientTensor));

    cudnnErrCheck(cudnnConvolutionBackwardFilter(
                    _nn->_cuDNNHandle,
                    &alpha,
                    /*TODO: check*/_inputDescriptor,
                    _prevLayer->_outputTensor[t],
                    /*TODO: check*/_outputDescriptor,
                    _outputGradientTensor[t],
                    _convolutionDesc,
                    // TODO: change algorithm type
                    CUDNN_CONVOLUTION_BWD_FILTER_ALGO_0,
                    _convolutionWorkspace[t],
                    _convolutionWorkspaceSize,
                    &beta,
                    _weightsFilterDesc,
                    _weightsGradientFilter));
  }
#endif

}

void __className__::setHyperparameters(const float *hyperparameters)
{
#ifdef _KORALI_USE_ONEDNN
  if (_nn->_engine == "OneDNN")
  {
    write_to_dnnl_memory(&hyperparameters[0], _weightsMem);
    write_to_dnnl_memory(&hyperparameters[OC * IC * KH * KW], _biasMem);
  }
#endif
}

void __className__::getHyperparameters(float *hyperparameters)
{
#ifdef _KORALI_USE_ONEDNN
  if (_nn->_engine == "OneDNN")
  {
    read_from_dnnl_memory(&hyperparameters[0], _weightsMem);
    read_from_dnnl_memory(&hyperparameters[OC * IC * KH * KW], _biasMem);
  }
#endif
}

void __className__::getHyperparameterGradients(float *gradient)
{
#ifdef _KORALI_USE_ONEDNN
  if (_nn->_engine == "OneDNN")
  {
    read_from_dnnl_memory(&gradient[0], _weightsGradientMem);
    read_from_dnnl_memory(&gradient[OC * IC * KH * KW], _biasGradientMem);
  }
#endif
}

__moduleAutoCode__;

__endNamespace__;
