#ifndef _KORALI_LAYER_HPP_
#define _KORALI_LAYER_HPP_

#include "modules/distribution/univariate/uniform/uniform.hpp"
#include "modules/module.hpp"

#ifdef _KORALI_USE_ONEDNN
  #include "dnnl.hpp"
#endif

#ifdef _KORALI_USE_CUDNN
  #include <cuda.h>
  #include <cudnn.h>
#endif

namespace korali
{
class NeuralNetwork;

namespace neuralNetwork
{
class Layer : public Module
{
  public:
  /**
   * @brief Index of the current layer within the NN
  */
  size_t _index;

  /**
   * @brief Pointer to the parent neural network
   */
  NeuralNetwork *_nn;

  /**
  * @brief Pointer to previous layer, NULL if this is the first layer
  */
  Layer *_prevLayer;

  /**
   * @brief Pointer to next layer, NULL if this is the last layer
   */
  Layer *_nextLayer;

  /**
  * @brief Number of NN hyperparameters (weights/bias)
  */
  size_t _hyperparameterCount;

  // Input/output memory elements

  #ifdef _KORALI_USE_EIGEN

  /**
 * @brief Contains the input values to the layer
 */
  float *_inputValues;

  /**
 * @brief Contains the gradients of the inputs to the layer
 */
  float *_inputGradient;

  /**
 * @brief Contains the output values of the layer
 */
  float *_outputValues;

  /**
 * @brief Contains the gradients of the outputs of the layer
 */
  float *_outputGradient;

  #endif

  #ifdef _KORALI_USE_ONEDNN

  /**
  * @brief oneDNN Memory object descriptor to contain the input values to the layer
  */
  dnnl::memory _inputMem;

  /**
  * @brief oneDNN Memory object descriptor to contain the output result of the layer
  */
  dnnl::memory _outputMem;

  /**
  * @brief oneDNN Gradient of the data at the inner product (Wx+b) stage
  */
  dnnl::memory _intputGradientMem;

  /*
 * @brief oneDNN Gradients of the operation wrt to activation function
 */
  dnnl::memory _outputGradientMem;

  #endif

  #ifdef _KORALI_USE_CUDNN

  /**
  * @brief cuDNN Descriptor for the node (layer) tensor memory
  */
  cudnnTensorDescriptor_t _layerTensorDesc;

  /**
  * @brief cuDNN Device memory pointer for the input data tensor
  */
  void *_inputTensor;

  /**
  * @brief cuDNN Device memory pointer for the input data gradients tensor
  */
  void *_inputGradientTensor;

  /**
  * @brief cuDNN Device memory pointer for the output tensor
  */
  void *_outputTensor;

  /**
  * @brief cuDNN Device memory pointer for the output gradients tensor
  */
  void *_outputGradientTensor;

  #endif

  /**
   * @brief Generates the initial weight/bias hyperparameters for the layer
   * @return The initial hyperparameters
   */
  virtual std::vector<float> generateInitialHyperparameters() = 0;

  /**
  * @brief  Initializes the layer's internal memory structures for hyperparameter storage
  */
  virtual void createHyperparameterMemory() = 0;

  /**
   * @brief Initializes the layer's internal memory structures for the forward pipeline
   */
  virtual void createForwardPipeline() = 0;

  /**
  * @brief Initializes the internal memory structures for the backward pipeline
  */
  virtual void createBackwardPipeline() = 0;

  /**
  * @brief Performs the forward propagation of the Wx+b operations
  */
  virtual void forwardData() = 0;

  /**
   * @brief Sets the gradients at the output nodes of the layer
   * @param gradient (Input) pointer containing the gradients to set.
   */
  virtual void setOutputGradients(float *gradient) = 0;

  /**
   * @brief Gets the values at the output nodes of the layer
   * @param output (Output) Pointer to write the output values to.
   */
  virtual void getOutputValues(float *output) = 0;

  /**
   * @brief Sets the values at the input nodes of the layer
   * @param input (Input) pointer containing the values to set.
   */
  virtual void setInputValues(float *input) = 0;

  /**
   * @brief Gets the gradients at the input nodes of the layer
   * @param gradient (Output) Pointer to write the input gradients to.
   */
  virtual void getInputGradients(float *gradient) = 0;

  /**
   * @brief Updates layer's hyperparameters (e.g., weights and biases)
   * @param hyperparameters (Input) Pointer to read the hyperparameters from.
   */
  virtual void setHyperparameters(float *hyperparameters) = 0;

  /**
   * @brief Gets layer's hyperparameters (e.g., weights and biases)
   * @param hyperparameters (Output) Pointer to write the hyperparameters to.
   */
  virtual void getHyperparameters(float *hyperparameters) = 0;

  /**
   * @brief Gets the gradients of the layer's output wrt to is hyperparameters (e.g., weights and biases)
   * @param gradient (Output) Pointer to write the hyperparameter gradients to.
   */
  virtual void getHyperparameterGradients(float *gradient) = 0;

  /**
   * @brief Performs the backward propagation of the data
   */
  virtual void backwardData() = 0;

  /**
  * @brief Calculates the gradients of layer hyperparameters
  */
  virtual void backwardHyperparameters() = 0;
};

} // namespace neuralNetwork

} // namespace korali

#endif // _KORALI_LAYER_HPP_
