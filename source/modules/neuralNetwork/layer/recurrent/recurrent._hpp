#ifndef _KORALI_LAYER_RECURRENT_HPP_
#define _KORALI_LAYER_RECURRENT_HPP_

#include "modules/neuralNetwork/layer/layer.hpp"

namespace korali
{
namespace neuralNetwork
{
namespace layer
{
class Recurrent : public Layer
{
  public:

  /**
   * @brief cuDNN Counts the size of all linear layer weights
   */
  std::vector<size_t> _linearLayerWeightSizes;

  /**
   * @brief cuDNN Counts the size of all linear layer biases
   */
  std::vector<size_t> _linearLayerBiasSizes;

  #ifdef _KORALI_USE_CUDNN

  /**
  * @brief cuDNN Device memory pointers for each internal layer's hidden state
  */
  void *_hStateTensor;

  /**
  * @brief cuDNN Device memory pointers for each internal layer's candidate (LSTM) state
  */
  void *_cStateTensor;

  /**
  * @brief cuDNN Device memory pointers for each internal layer's hidden state gradients
  */
  void *_hStateGradientTensor;

  /**
  * @brief cuDNN Device memory pointers for each internal layer's candidate (LSTM) state gradients
  */
  void *_cStateGradientTensor;

  /**
  * @brief cuDNN descriptor for the dropout operator
  */
  cudnnDropoutDescriptor_t _dropoutDesc;

  /**
   * @brief cuDNN descriptor for the RNN operator
   */
  cudnnRNNDescriptor_t _rnnDesc;

  /**
   * @brief cuDNN Selector for the RNN mode
   */
  cudnnRNNMode_t _rnnMode;

  /**
   * @brief cuDNN Remembers the number of internal linear layers
   */
  size_t _linearLayerCount;

  /**
  * @brief cuDNN Device memory pointers for layer's weights
  */
  void *_weightsTensor;

  /**
  * @brief cuDNN Device memory pointers for layer's weight gradients
  */
  void *_weightsGradientTensor;

  /**
  * @brief cuDNN Device RNN data descriptor for the input
  */
  cudnnRNNDataDescriptor_t _inputRNNDataDesc;

  /**
  * @brief cuDNN Device RNN data descriptor for the output
  */
  cudnnRNNDataDescriptor_t _outputRNNDataDesc;

  /**
  * @brief cuDNN Device memory pointer to of all linear layer weights
  */
  std::vector<void*> _linearLayerWeightTensors;

  /**
   * @brief cuDNN Device memory pointer to of all linear layer biases
   */
  std::vector<void*> _linearLayerBiasTensors;

  /**
   * @brief cuDNN Weights size
   */
  size_t _weightsSize;

  /**
   * @brief cuDNN Workspace size
   */
  size_t _workSpaceSize;

  /**
   * @brief cuDNN reserve space size
   */
  size_t _reserveSpaceSize;

  /**
  * @brief cuDNN Device memory pointers for workspace tensor
  */
  void *_workSpaceTensor;

  /**
   * @brief cuDNN Device memory pointers for reserve space tensor
   */
  void *_reserveSpaceTensor;

  /**
   * @brief cuDNN Device memory for sequence lenght array
   */
  int *_devSequenceLengths;

  #endif

  std::vector<float> generateInitialHyperparameters() override;
  void createHyperparameterMemory() override;
  void createForwardPipeline() override;
  void createBackwardPipeline() override;
  void forwardData() override;
  void setHyperparameters(float *hyperparameters) override;
  void getHyperparameters(float *hyperparameters) override;
  void getHyperparameterGradients(float *gradient) override;
  void backwardData() override;
  void backwardHyperparameters() override;
};

} // namespace layer

} // namespace neuralNetwork

} // namespace korali

#endif // _KORALI_LAYER_RECURRENT_HPP_
