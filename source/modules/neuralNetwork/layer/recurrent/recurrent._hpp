#ifndef _KORALI_LAYER_RECURRENT_HPP_
#define _KORALI_LAYER_RECURRENT_HPP_

#include "modules/neuralNetwork/layer/layer.hpp"

namespace korali
{
namespace neuralNetwork
{
namespace layer
{
class Recurrent : public Layer
{
  public:
  std::vector<float> generateInitialHyperparameters() override;
  void createHyperparameterMemory() override;
  void createForwardPipeline() override;
  void createBackwardPipeline() override;
  void forwardData() override;
  void setOutputGradients(float *gradient) override;
  void getOutputValues(float *output) override;
  void setInputValues(float *input) override;
  void getInputGradients(float *gradient) override;
  void setHyperparameters(float *hyperparameters) override;
  void getHyperparameters(float *hyperparameters) override;
  void getHyperparameterGradients(float *gradient) override;
  void backwardData() override;
  void backwardHyperparameters() override;
};

} // namespace layer

} // namespace neuralNetwork

} // namespace korali

#endif // _KORALI_LAYER_RECURRENT_HPP_
