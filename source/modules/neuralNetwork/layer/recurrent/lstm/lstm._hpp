#ifndef _KORALI_LAYER_RECURRENT_LSTM_HPP_
#define _KORALI_LAYER_RECURRENT_LSTM_HPP_

#include "modules/neuralNetwork/layer/recurrent/recurrent.hpp"

namespace korali
{
namespace neuralNetwork
{
namespace layer
{
namespace recurrent
{
class LSTM : public Recurrent
{
  public:

#ifdef _KORALI_USE_CUDNN

  /**
  * @brief cuDNN Descriptor for the cell state tensor memory
  */
  cudnnTensorDescriptor_t _cTensorDesc;

  /**
  * @brief cuDNN Device memory pointers for the internal layer's cell (LSTM) state input
  */
  std::vector<void *> _cStateTensor;

  /**
   * @brief cuDNN Device memory pointers for the internal layer's cell (LSTM) state input gradients
   */
  std::vector<void *> _cGradientTensor;

#endif

  std::vector<float> generateInitialHyperparameters() override;
  void createHyperparameterMemory() override;
  void createForwardPipeline() override;
  void createBackwardPipeline() override;
  void forwardData() override;
  void setHyperparameters(float *hyperparameters) override;
  void getHyperparameters(float *hyperparameters) override;
  void getHyperparameterGradients(float *gradient) override;
  void backwardData() override;
  void backwardHyperparameters() override;
};

} // namespace recurrent
} // namespace layer
} // namespace neuralNetwork
} // namespace korali

#endif // _KORALI_LAYER_RECURRENT_LSTM_HPP_
