#pragma once

#include "modules/neuralNetwork/layer/layer.hpp"

__startNamespace__;

/**
* @brief This enumerator details all possible transformations. It is used in lieu of string comparison to accelerate the application of this layer
*/
enum transformation_t
{
  /**
  * @brief No transformation
  */
  t_identity = 0,

  /**
   * @brief Apply absolute mask
   */
  t_absolute = 1,

  /**
   * @brief Apply softplus mask
   */
  t_softplus = 2,

  /**
   * @brief Apply tanh mask
   */
  t_tanh = 3,

  /**
   * @brief Apply sigmoid mask
   */
  t_sigmoid = 4
};

/**
   * @brief Transformation interface to transform the output of a neural network.
*/
struct Transformation
{
  /**
   * @brief Virtual mask function
   */
   virtual float transform(float x) const = 0;
 
   /**
   * @brief Virtual gradient of mask
   */
   virtual float gradient(float x) const = 0;

   /**
   * @brief Virtual destructor to guarantee correct cleanup
   */
   virtual ~Transformation() {};
};

struct identity : public Transformation
{
    float transform(float x) const { return x; }
    float gradient(float x) const { return 1.; }
};

struct tanh : public Transformation
{
    float transform(float x) const { return std::tanh(x); }
    float gradient(float x) const { return 1.0f - x * x; }
};

struct sigmoid : public Transformation
{
    float transform(float x) const { return 1. / (1. + std::exp(-x)); }
    float gradient(float x) const { return x * (1. - x); }
};
 
struct softplus : public Transformation
{
    float transform(float x) const { return 0.5 * (x + std::sqrt(1. + x * x)); }
    float gradient(float x) const { float nnx = x - 0.25 / x; return 0.5 * (1. + nnx / std::sqrt(nnx * nnx + 1)); }
};
 

class __className__ : public __parentClassName__
{
  public:
  /**
 * @brief Contains the original output, before preprocessing
 */
  float *_srcOutputValues;

  /**
 * @brief Contains the postprocessed gradients
 */
  float *_dstOutputGradients;

  /**
   * @brief Contains the description of the transformation to apply to each output element
   */
  std::vector<transformation_t> _transformationVector;

  void initialize() override;
  void createForwardPipeline() override;
  void createBackwardPipeline() override;
  void forwardData(const size_t t) override;
  void backwardData(const size_t t) override;
};

__endNamespace__;
