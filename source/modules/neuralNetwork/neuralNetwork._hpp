#ifndef _KORALI_NEURAL_NETWORK_HPP_
#define _KORALI_NEURAL_NETWORK_HPP_

#include "modules/experiment/experiment.hpp"
#include "modules/module.hpp"
#include "modules/neuralNetwork/layer/layer.hpp"
#include "modules/solver/solver.hpp"

#ifdef _KORALI_USE_ONEDNN
  #include "dnnl.hpp"
#endif

#ifdef _KORALI_USE_CUDNN
  #include <cuda.h>
  #include <cudnn.h>
#endif

namespace korali
{
#ifdef _KORALI_USE_ONEDNN
extern dnnl::engine _dnnlEngine;
#endif

class NeuralNetwork : public Module
{
  public:
#ifdef _KORALI_USE_ONEDNN

  /**
   * @brief oneDNN Stream to run operations
   */
  dnnl::stream _stream;

#endif

#ifdef _KORALI_USE_CUDNN

  cudnnHandle_t _cuDNNHandle;

#endif

  /**
   * @brief Flag to make sure the NN is initialized before creating
   */
  bool _isInitialized;

  /**
   * @brief Number of NN hyperparameters (weights/bias)
   */
  size_t _hyperparameterCount;

  /**
   * @brief Raw data for the NN input values. Format: TxNxIC (T: Time steps, N: Mini-batch size, IC: Input channels).
   */
  std::vector<float> _rawInputValues;

  /**
   * @brief Raw data for the NN input gradients. Format: TxNxIC (T: Time steps, N: Mini-batch size, IC: Input channels).
   */
  std::vector<float> _rawInputGradients;

  /**
   * @brief Formatted data for the NN input gradients. Format: NxIC (N: Mini-batch size, IC: Input channels).
   */
  std::vector<std::vector<float>> _inputGradients;

  /**
   * @brief Raw data for the NN output values. Format: NxOC (N: Mini-batch size, OC: Output channels).
   */
  std::vector<float> _rawOutputValues;

  /**
   * @brief Raw data for the NN output gradients. Format: NxOC (N: Mini-batch size, OC: Output channels).
   */
  std::vector<float> _rawOutputGradients;

  /**
   * @brief Formatted data for the NN output values. Format: NxOC (N: Mini-batch size, OC: Output channels).
   */
  std::vector<std::vector<float>> _outputValues;

  /**
   * @brief F data for the NN hyperparameter gradients. Format: H (H: Hyperparameter count).
   */
   std::vector<float> _hyperparameterGradients;

  /**
   * @brief Remembers the position of the last timestep provided as input
   */
  std::vector<size_t> _inputBatchLastStep;

  /**
   * @brief Keeps track of the current timestep
   */
   size_t _currentTimestep;

  void initialize() override;

  /**
   * @brief Generates the initial values for the hyperparameters
   * @return The initial hyperparameters
   */
  std::vector<float> generateInitialHyperparameters();

  /**
   * @brief Updates the values of weights, biases configuration to the NN
   * @param hyperparameters The input hyperparameters
   */
  void setHyperparameters(const std::vector<float> &hyperparameters);

  /**
   * @brief Gets the values of weights and biases configuration to the NN
   * @return The hyperparameters of the NN
   */
  std::vector<float> getHyperparameters();

  /**
   * @brief Forward-propagates the input values through the network.
   * @param inputValues The input values.  Format: TxNxIC (T: Time steps, N: Mini-batch, IC: Input channels).
  */
  void forward(const std::vector<std::vector<std::vector<float>>>& inputValues);

  /**
   * @brief Backward-propagates the gradients through the network.
   * @param outputGradients Output gradients. Format: NxOC (N: Mini-batch size, OC: Output channels).
  */
  void backward(const std::vector<std::vector<float>>& outputGradients);

  /**
   * @brief Creator that sets initialized flag to false
   */
  NeuralNetwork();
};

} // namespace korali

#endif // _KORALI_SOLVER_NEURAL_NETWORK_HPP_
