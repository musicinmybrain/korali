#ifndef _KORALI_NEURAL_NETWORK_HPP_
#define _KORALI_NEURAL_NETWORK_HPP_

#include "engine.hpp"
#include "modules/distribution/univariate/uniform/uniform.hpp"
#include "modules/experiment/experiment.hpp"
#include "modules/layer/layer.hpp"
#include "modules/module.hpp"
#include "modules/solver/solver.hpp"

#ifdef _KORALI_USE_ONEDNN
  #include "dnnl.hpp"
#endif

namespace korali
{
class NeuralNetwork : public Module
{
  public:

#ifdef _KORALI_USE_ONEDNN
  /**
   * @brief oneDNN Engine
   */
  dnnl::engine _engine;

  /**
   * @brief oneDNN Stream to run operations
   */
  dnnl::stream _stream;

  /**
   * @brief Flag to make sure the NN is initialized before creating
   */
  bool _isInitialized;

#endif

  void initialize() override;

  /**
   * @brief Initializes the internal memory structures, with regards to the layer configuration of the network
   */
  void create();

  /**
   * @brief Updates the values of weights, biases, and inputs to the NN
   */
  void updateWeightsAndBias();

  /**
   * @brief Forward-propagates the input batch data through the network.
  */
  void forward();

  /**
   * @brief Backward-propagates to find out the gradients of the weights and biases.
   * @param outputDifferential The differential of the output wrt the solution
  */
  void backwardWeightsAndBias(std::vector<float>& outputDifferential);

  /**
   * @brief Backward-propagates to find out the gradients of the input data.
   * @param outputDifferential The differential of the output wrt the solution
  */
  void backwardData(std::vector<float>& outputDifferential);

  /**
   * @brief Creator that sets initialized flag to false
   */
  NeuralNetwork();
};

} // namespace korali

#endif // _KORALI_SOLVER_NEURAL_NETWORK_HPP_
