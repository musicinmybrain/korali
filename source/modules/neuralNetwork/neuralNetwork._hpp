#ifndef _KORALI_NEURAL_NETWORK_HPP_
#define _KORALI_NEURAL_NETWORK_HPP_

#include "modules/experiment/experiment.hpp"
#include "modules/module.hpp"
#include "modules/neuralNetwork/layer/layer.hpp"
#include "modules/solver/solver.hpp"

#ifdef _KORALI_USE_ONEDNN
  #include "dnnl.hpp"
#endif

#ifdef _KORALI_USE_CUDNN
  #include <cuda.h>
  #include <cudnn.h>
#endif

namespace korali
{
#ifdef _KORALI_USE_ONEDNN
extern dnnl::engine _engine;
#endif

class NeuralNetwork : public Module
{
  public:
#ifdef _KORALI_USE_ONEDNN

  /**
   * @brief oneDNN Stream to run operations
   */
  dnnl::stream _stream;

#endif

#ifdef _KORALI_USE_CUDNN

  cudnnHandle_t _cuDNNHandle;

#endif

  /**
   * @brief Flag to make sure the NN is initialized before creating
   */
  bool _isInitialized;

  /**
   * @brief Number of NN hyperparameters (weights/bias/normalization shift/scale/mean/variance)
   */
  size_t _hyperparameterCount;

  /**
   * @brief Number of weight/bias parameters (weights/bias/normalization shift/scale)
   */
  size_t _weightParameterCount;

  /**
   * @brief Number of normalization parameters (mean/variance)
   */
  size_t _normalizationParameterCount;

  void initialize() override;

  /**
   * @brief Generates the initial values for the hyperparameters
   * @return The initial hyperparameters
   */
  std::vector<float> generateInitialHyperparameters();

  /**
   * @brief Updates the internal values of the NN inputs
   * @param input The input batch
   */
  void setInput(const std::vector<std::vector<float>> &input);

  /**
   * @brief Updates the values of weights, biases, and normalization scale/shift/mean/variances configuration to the NN
   * @param hyperparameters The input hyperparameters
   */
  void setHyperparameters(const std::vector<float> &hyperparameters);

  /**
   * @brief Gets the values of weights, biases, and normalization scale/shift/mean/variances configuration to the NN
   * @return The hyperparameters of the NN
   */
  std::vector<float> getHyperparameters();

  /**
  * @brief Normalizes neural network batch normalization mean and variances
  * @param minibatches The set of mini batches for the neural network to normalize with
  */
  void normalize(const std::vector<std::vector<std::vector<float>>> &minibatches);

  /**
   * @brief Gets the values of the weights and biases of the network
   * @return The weights and biases of the network
   */
  std::vector<float> getWeightsAndBiases();

  /**
  * @brief Updates the values of the weights and biases of the network
  * @param weights The weights and biases to set
  */
  void setWeightsAndBiases(const std::vector<float> &weights);

  /**
   * @brief Gets the values of batch normalization means
   * @return The batch normalization means
   */
  std::vector<float> getNormalizationMeans();

  /**
  * @brief Updates the values of batch normalization means
  * @param normalizationMeans The batch normalization means
  */
  void setNormalizationMeans(const std::vector<float> &normalizationMeans);

  /**
   * @brief Gets the values of normalization mean variance
   * @return The batch normalization variances
   */
  std::vector<float> getNormalizationVariances();

  /**
  * @brief Updates the values of batch normalization variances
  * @param normalizationVariances The batch normalization variances
  */
  void setNormalizationVariances(const std::vector<float> &normalizationVariances);

  /**
   * @brief Forward-propagates the input batch data through the network.
  */
  void forward();

  /**
   * @brief Backward-propagates the gradients data through the network.
   * @param gradients Output differentials
  */
  void backward(const std::vector<std::vector<float>> &gradients);

  /**
  * @brief Runs the backward propagation procedure and returns the gradients of the weights and biases with respect to the output
  * @return The calculated gradients
  */
  std::vector<float> getWeightAndBiasesGradients();

  /**
   * @brief Backward-propagates to find out the gradients of the input data.
   * @return The gradients of the input data wrt to the output data
  */
  std::vector<float> getDataGradients();

  /**
   * @brief Creator that sets initialized flag to false
   */
  NeuralNetwork();
};

} // namespace korali

#endif // _KORALI_SOLVER_NEURAL_NETWORK_HPP_
