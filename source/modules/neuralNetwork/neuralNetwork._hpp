#ifndef _KORALI_NEURAL_NETWORK_HPP_
#define _KORALI_NEURAL_NETWORK_HPP_

#include "modules/distribution/univariate/uniform/uniform.hpp"
#include "modules/layer/layer.hpp"
#include "modules/module.hpp"

#ifdef _KORALI_USE_ONEDNN
  #include "dnnl.hpp"
#endif

namespace korali
{
class NeuralNetwork : public korali::Module
{
  public:
  /**
  * @brief Flag that indicates whether the oneDNN structures have been initialized
  */
  bool _isInitialized;

#ifdef _KORALI_USE_ONEDNN
  /**
   * @brief oneDNN Engine
   */
  dnnl::engine _engine;

  /**
   * @brief oneDNN Stream to run operations
   */
  dnnl::stream _stream;

#endif

  void initialize() override;

  /**
   * @brief Updates the internal memory structures, with regards to the layer configuration of the network
   */
  void update();

  /**
   * @brief Forward-propagates the input batch data through the network.
  */
  void forward();
};

} // namespace korali

#endif // _KORALI_SOLVER_NEURAL_NETWORK_HPP_
