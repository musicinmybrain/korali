#include "modules/experiment/experiment.hpp"
#include "modules/neuralNetwork/neuralNetwork.hpp"

namespace korali
{
NeuralNetwork::NeuralNetwork()
{
  _isInitialized = false;
  _batchSize = 0;
}

void NeuralNetwork::initialize()
{
  if (_engine == "OneDNN")
  {
#ifdef _KORALI_USE_ONEDNN

    _stream = dnnl::stream(korali::_engine);

#else

    fprintf(stderr, "[Korali] Warning: Neural Network's engine set to OneDNN, but Korali was installed without support for OneDNN. Using Korali's default NN Engine\n");
    _engine = "Korali";

#endif
  }

  if (_engine == "CuDNN")
  {
#ifdef _KORALI_USE_CUDNN

    if (cudnnCreate(&_cuDNNHandle) != CUDNN_STATUS_SUCCESS) KORALI_LOG_ERROR("Error initializing CUDNN Handle\n");

#else

    fprintf(stderr, "[Korali] Warning: Neural Network's engine set to OneDNN, but Korali was installed without support for OneDNN. Using Korali's default NN Engine\n");
    _engine = "Korali";
#endif
  }

  if (_isInitialized) KORALI_LOG_ERROR("Neural Network has already been initialized!.\n");

  if (_engine == "Korali")
  {
#ifdef _KORALI_USE_EIGEN

#else

    KORALI_LOG_ERROR("Neural Network's engine set to Korali, but Korali was installed without support for Eigen3.\n");

#endif
  }

  // Assigning relevant metadata to all the layers
  size_t layerCount = _layers.size();
  for (size_t i = 0; i < layerCount; i++)
  {
    _layers[i]->_prevLayer = i > 0 ? _layers[i - 1] : NULL;
    _layers[i]->_nextLayer = i < layerCount - 1 ? _layers[i + 1] : NULL;
    _layers[i]->_index = i;
    _layers[i]->_nn = this;
  }

  // Initialize layers
  for (size_t i = 0; i < layerCount; i++) _layers[i]->initialize();

  // Creating forward and backward-propagation pipeline
  for (size_t i = 0; i < layerCount; i++) _layers[i]->createHyperparameterMemory();

  // Getting normalization and weight/bias parameter counts
  _hyperparameterCount = 0;
  for (size_t i = 0; i < layerCount; i++) _hyperparameterCount += _layers[i]->_hyperparameterCount;

  // Making sure we do not re-initialize
  _isInitialized = true;
}

std::vector<float> NeuralNetwork::generateInitialHyperparameters()
{
  // Setting initial values for hyperparameters
  std::vector<float> initialHyperparameters;

  for (size_t i = 0; i < _layers.size(); i++)
  {
    auto layerParameters = _layers[i]->generateInitialHyperparameters();
    initialHyperparameters.insert(initialHyperparameters.end(), layerParameters.begin(), layerParameters.end());
  }

  return initialHyperparameters;
}

void NeuralNetwork::setInput(const std::vector<std::vector<float>> &input)
{
  // Getting batch dimensions
  size_t N = input.size();
  size_t layerCount = _layers.size();
  size_t IC = _layers[0]->_nodeCount;
  size_t OC = _layers[layerCount-1]->_nodeCount;

  // If batchsize is different than existing one, re-create pipelines
  if (_batchSize != N)
  {
    _batchSize = N;
    for (size_t i = 0; i < layerCount; i++) _layers[i]->createForwardPipeline();
    for (size_t i = 0; i < layerCount; i++) _layers[i]->createBackwardPipeline();
  }

  // Resizing buffers
  _batchInputData.resize(N * IC);
  _batchInputGradients.resize(N * IC);
  _batchOutputData.resize(N * OC);
  _batchOutputGradients.resize(N * OC);

  for (size_t i = 0; i < input.size(); i++)
    if (input[i].size() != IC)
      KORALI_LOG_ERROR("Input data set %lu has a different number of elements (%lu) than the input layer node count (%lu).\n", i, input[i].size(), IC);

  // Setting NN input data
  for (size_t i = 0; i < N; i++)
    for (size_t j = 0; j < IC; j++)
     _batchInputData[i * IC + j] = input[i][j];
}

void NeuralNetwork::forward()
{
  size_t layerCount = _layers.size();

  // forward propagating neural network
  for (size_t i = 0; i < layerCount; i++)  _layers[i]->forwardData();

  // Restoring the output later node values
  size_t lastLayer = layerCount - 1;
  size_t nodeCount = _layers[lastLayer]->_nodeCount;

  // Copying NN output to class output
  _outputValues.resize(_batchSize);
  for (size_t i = 0; i < _batchSize; i++) _outputValues[i].resize(nodeCount);

  for (size_t i = 0; i < _batchSize; i++)
    for (size_t j = 0; j < nodeCount; j++)
      _outputValues[i][j] = _batchOutputData[i * nodeCount + j];
}

void NeuralNetwork::backward(const std::vector<std::vector<float>> &gradients)
{
  // Getting batch dimensions
  size_t batchSize = gradients.size();

  // If gradients batch size is different than forwarding batch size, fail with error
  if (batchSize != _batchSize)
    KORALI_LOG_ERROR("Wrong batch size passed for backward propagation. Expected: %lu, provided: %lu.\n", _batchSize, batchSize);

  // Running backward propagation
  size_t layerCount = _layers.size();
  size_t lastLayer = layerCount - 1;
  size_t outputSize = _layers[lastLayer]->_nodeCount;

  for (size_t i = 0; i < _batchSize; i++)
    for (size_t j = 0; j < outputSize; j++)
     _batchOutputGradients[i*outputSize + j] = gradients[i][j];

  // Backward propagating neural network
  for (ssize_t i = lastLayer; i >= 0; i--)
  {
   // Running backward data propagation
   _layers[i]->backwardData();

   // Calculating hyperparamter gradients
   _layers[i]->backwardHyperparameters();
  }
}

std::vector<float> NeuralNetwork::getHyperparameters()
{
  auto params = std::vector<float>(_hyperparameterCount);

  size_t layerCount = _layers.size();
  size_t currPos = 0;
  for (size_t i = 0; i < layerCount; i++)
  {
    _layers[i]->getHyperparameters(&params[currPos]);
    currPos += _layers[i]->_hyperparameterCount;
  }

  return params;
}

void NeuralNetwork::setHyperparameters(const std::vector<float> &hyperparameters)
{
  if (hyperparameters.size() != _hyperparameterCount)
    KORALI_LOG_ERROR("Wrong number of hyperparameters passed to the neural network. Expected: %lu, provided: %lu.\n", _hyperparameterCount, hyperparameters.size());

  auto params = std::vector<float>(hyperparameters.begin(), hyperparameters.end());

  size_t layerCount = _layers.size();
  size_t currPos = 0;
  for (size_t i = 0; i < layerCount; i++)
  {
    _layers[i]->setHyperparameters(&params[currPos]);
    currPos += _layers[i]->_hyperparameterCount;
  }
}

std::vector<float> NeuralNetwork::getHyperparameterGradients()
{
  auto gradients = std::vector<float>(_hyperparameterCount);

  size_t layerCount = _layers.size();
  size_t currPos = 0;
  for (size_t i = 0; i < layerCount; i++)
  {
    _layers[i]->getHyperparameterGradients(&gradients[currPos]);
    currPos += _layers[i]->_hyperparameterCount;
  }

  return gradients;
}

std::vector<float> NeuralNetwork::getDataGradients()
{
  return _batchInputGradients;
}

} // namespace korali
