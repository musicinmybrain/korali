#include "modules/experiment/experiment.hpp"
#include "modules/neuralNetwork/neuralNetwork.hpp"

#ifdef _KORALI_USE_ONEDNN
  #include "auxiliar/dnnUtils.hpp"
using namespace dnnl;
#endif

/********************************************
 * Pending Performance Improvements
 * - Make sure all operations are made on memory objects with format_tag::any, reordered by oneDNN during creation.
 *   This guarantees that the best memory landscape is selected for all these operations
 * - Do not reserve memory nor create/execute primitives for differentiation when just inferring
 * - Use prop_kind::forward_inference always when inferring
 * - Some memory structures can be re-used (instead of having a separate diff vector, reuse the data vector)
 ********************************************/

namespace korali
{
NeuralNetwork::NeuralNetwork()
{
  _isInitialized = false;
}

void NeuralNetwork::initialize()
{
#ifndef _KORALI_USE_ONEDNN

  KORALI_LOG_ERROR("OneDNN has not been properly installed to support NN operations.\n");

#endif

  if (_isInitialized)
    KORALI_LOG_ERROR("Neural Network has already been initialized!.\n");

#ifdef _KORALI_USE_ONEDNN

  // Initializing Engine and stream

  if (_engineKind == "CPU") _engine = engine(engine::kind::cpu, 0);
  if (_engineKind == "GPU") _engine = engine(engine::kind::gpu, 0);

  _stream = stream(_engine);

#endif

  // Checking if batch size if correct
  if (_batchSize == 0) KORALI_LOG_ERROR("You should provide an input batch size larger than zero.\n");

  // Assigning relevant metadata to all the layers
  size_t layerCount = _layers.size();
  for (size_t i = 0; i < layerCount; i++)
  {
    _layers[i]->_prevLayer = i > 0 ? _layers[i - 1] : NULL;
    _layers[i]->_nextLayer = i < layerCount - 1 ? _layers[i + 1] : NULL;
    _layers[i]->_index = i;
    _layers[i]->_nn = this;
  }

  // Creating forward and backward-propagation pipeline
  for (size_t i = 0; i < layerCount; i++) _layers[i]->createForwardPipeline();
  for (size_t i = 0; i < layerCount; i++) _layers[i]->createBackwardPipeline();

  // Getting hyperparameter and normalization parameter counts
  _hyperparameterCount = 0;
  _normalizationParameterCount = 0;

  for (size_t i = 0; i < layerCount; i++) _hyperparameterCount += _layers[i]->_hyperparameterCount;
  for (size_t i = 0; i < layerCount; i++) _normalizationParameterCount += _layers[i]->_normalizationParameterCount;

  // If we use batch normalization, we set mean and variances to neutral values
  std::vector<double> meanData(_normalizationParameterCount, 0.0);
  std::vector<double> varianceData(_normalizationParameterCount, 1.0);

  setNormalizationMeans(meanData);
  setNormalizationVariances(varianceData);

  // Check output scaling configuration
  if (_outputScaling.empty() == false)
    if (_outputScaling.size() != _layers[layerCount - 1]->_nodeCount)
      KORALI_LOG_ERROR("Wrong number of output scaling factors passed to the neural network. Expected: %lu, provided: %lu.\n", _layers[layerCount - 1]->_nodeCount, _outputScaling.size());

  // Making sure we do not re-initialize
  _isInitialized = true;
}

std::vector<double> NeuralNetwork::generateInitialHyperparameters()
{
  // Setting initial values for hyperparameters
  std::vector<double> initialHyperparameters;

  for (size_t i = 0; i < _layers.size(); i++)
  {
    auto layerParameters = _layers[i]->generateInitialHyperparameters();
    initialHyperparameters.insert(initialHyperparameters.begin(), layerParameters.begin(), layerParameters.end());
  }

  return initialHyperparameters;
}

void NeuralNetwork::setInput(const std::vector<std::vector<double>> &input)
{
  size_t inputSize = _layers[0]->_nodeCount;

  // Checking input
  if (input.size() != _batchSize)
    KORALI_LOG_ERROR("Input data set has a different batch size (%lu) than the one for which the NN was created for (%lu).\n", input.size(), _batchSize);

  for (size_t i = 0; i < input.size(); i++)
    if (input[i].size() != inputSize)
      KORALI_LOG_ERROR("Input data set %lu has a different number of elements (%lu) than the input layer node count (%lu).\n", i, input[i].size(), inputSize);

  // Copying input data to first layer
  std::vector<float> batchInput(_batchSize * inputSize);
  for (size_t i = 0; i < _batchSize; i++)
    for (size_t j = 0; j < inputSize; j++)
      batchInput[i * inputSize + j] = input[i][j];

  write_to_dnnl_memory(batchInput.data(), _layers[0]->_nodeMem);
}

void NeuralNetwork::setHyperparameters(const std::vector<double> &hyperparameters)
{
#ifdef _KORALI_USE_ONEDNN

  if (hyperparameters.size() != _hyperparameterCount)
    KORALI_LOG_ERROR("Wrong number of hyperparameters passed to the neural network. Expected: %lu, provided: %lu.\n", _hyperparameterCount, hyperparameters.size());

  // Creating single precision floating-point version of the hyperparameters
  auto fParams = std::vector<float>(hyperparameters.begin(), hyperparameters.end());

  size_t layerCount = _layers.size();
  size_t currPos = 0;
  for (size_t i = 0; i < layerCount; i++)
  {
    const memory::dim IC = _layers[i - 1]->_nodeCount;
    const memory::dim OC = _layers[i]->_nodeCount;

    if (i > 0)
    {
      // Setting weight data to the layer's weight memory
      write_to_dnnl_memory(&fParams[currPos], _layers[i]->_weightsMem);
      currPos += IC * OC;

      // Copying weight mem to weight work mem, if they are not the same
      if (_layers[i]->_weightsMem.get_desc() != _layers[i]->_weightsWorkMem.get_desc())
        reorder(_layers[i]->_weightsMem, _layers[i]->_weightsWorkMem).execute(_stream, _layers[i]->_weightsMem, _layers[i]->_weightsWorkMem);

      // Setting weight data to the layer's weight memory, only if batch normalization is not being used
      if (_layers[i]->_batchNormalizationEnabled == false)
      {
        write_to_dnnl_memory(&fParams[currPos], _layers[i]->_biasMem);
        currPos += OC;
      }
    }

    // If layer normalization is enabled, we fill in scale/shift data
    if (_layers[i]->_batchNormalizationEnabled == true)
    {
      write_to_dnnl_memory(&fParams[currPos], _layers[i]->_batchNormalizationScaleShiftMem);
      currPos += 2 * OC;
    }
  }

#endif
}

std::vector<double> NeuralNetwork::getHyperparameters()
{
  // Creating single precision floating-point version of the hyperparameters
  auto fParams = std::vector<float>(_hyperparameterCount);

#ifdef _KORALI_USE_ONEDNN

  size_t layerCount = _layers.size();
  size_t currPos = 0;
  for (size_t i = 0; i < layerCount; i++)
  {
    const memory::dim IC = _layers[i - 1]->_nodeCount;
    const memory::dim OC = _layers[i]->_nodeCount;

    // Setting weight data to the layer's weight memory
    if (i > 0)
    {
      read_from_dnnl_memory(&fParams[currPos], _layers[i]->_weightsMem);
      currPos += IC * OC;

      // Setting weight data to the layer's weight memory, only if batch normalization is not being used
      if (_layers[i]->_batchNormalizationEnabled == false)
      {
        read_from_dnnl_memory(&fParams[currPos], _layers[i]->_biasMem);
        currPos += OC;
      }
    }

    // If layer normalization is enabled, we fill in scale/shift data
    if (_layers[i]->_batchNormalizationEnabled == true)
    {
      read_from_dnnl_memory(&fParams[currPos], _layers[i]->_batchNormalizationScaleShiftMem);
      currPos += 2 * OC;
    }
  }

#endif

  // Returning the hyperparameters converted to double-precision
  return std::vector<double>(fParams.begin(), fParams.end());
}

void NeuralNetwork::backward(const std::vector<double> &outputDifferential)
{
  // Running backward propagation
  size_t layerCount = _layers.size();
  size_t lastLayer = layerCount - 1;

  // Writing to last layers differential information wrt data
  std::vector<float> floatDiffs(outputDifferential.begin(), outputDifferential.end());

  // If we  use scaling, then apply the scaling factors gradient now
  if (_outputScaling.size() > 0)
    for (size_t i = 0; i < _outputScaling.size(); i++) floatDiffs[i] /= _outputScaling[i];

  write_to_dnnl_memory(floatDiffs.data(), _layers[lastLayer]->_activationDiffMem);

  // Backward propagating neural network
  for (ssize_t i = lastLayer; i >= 0; i--)
  {
    _layers[i]->_backwardActivationPrimitive.execute(_stream, _layers[i]->_backwardActivationArgs);
    if (_layers[i]->_batchNormalizationEnabled) _layers[i]->_backwardNormalizationPrimitive.execute(_stream, _layers[i]->_backwardNormalizationArgs);

    if (i > 0)
    {
      _layers[i]->_backwardDataPrimitive.execute(_stream, _layers[i]->_backwardDataArgs);
      _layers[i]->_backwardWeightsPrimitive.execute(_stream, _layers[i]->_backwardWeightsArgs);
    }
  }

  // Wait for the computation to finalize.
  _stream.wait();
}

std::vector<double> NeuralNetwork::getNormalizationMeans()
{
  // Creating single precision floating-point version of the hyperparameters
  auto fParams = std::vector<float>(_normalizationParameterCount);

#ifdef _KORALI_USE_ONEDNN

  size_t layerCount = _layers.size();
  size_t currPos = 0;
  for (size_t i = 0; i < layerCount; i++)
    if (_layers[i]->_batchNormalizationEnabled == true)
    {
      const memory::dim OC = _layers[i]->_nodeCount;
      read_from_dnnl_memory(&fParams[currPos], _layers[i]->_batchNormalizationMeanMem);
      currPos += OC;
    }

#endif

  // Returning the hyperparameters converted to double-precision
  return std::vector<double>(fParams.begin(), fParams.end());
}

void NeuralNetwork::setNormalizationMeans(const std::vector<double> &normalizationMeans)
{
#ifdef _KORALI_USE_ONEDNN

  if (normalizationMeans.size() != _normalizationParameterCount)
    KORALI_LOG_ERROR("Wrong number of normalization parameters passed to the neural network. Expected: %lu, provided: %lu.\n", _normalizationParameterCount, normalizationMeans.size());

  // Creating single precision floating-point version of the normalization parameters
  auto fParams = std::vector<float>(normalizationMeans.begin(), normalizationMeans.end());

  size_t layerCount = _layers.size();
  size_t currPos = 0;
  for (size_t i = 0; i < layerCount; i++)
    if (_layers[i]->_batchNormalizationEnabled == true)
    {
      const memory::dim OC = _layers[i]->_nodeCount;
      write_to_dnnl_memory(&fParams[currPos], _layers[i]->_batchNormalizationMeanMem);
      currPos += OC;
    }

#endif
}

void NeuralNetwork::normalize(const std::vector<std::vector<std::vector<double>>>& miniBatches)
{
  std::vector<double> newMeans(_normalizationParameterCount, 0.0);
  std::vector<double> newVariances(_normalizationParameterCount, 0.0);

  for (size_t step = 0; step < miniBatches.size(); step++)
  {
    setInput(miniBatches[step]);
    forward();

    // Getting this mini-batch's normalization means and variances
    auto newMeans = getNormalizationMeans();
    auto newVariances = getNormalizationVariances();

    // Accuulating their values into the new vector
    for (size_t i = 0; i < _normalizationParameterCount; i++) newMeans[i] += newMeans[i];
    for (size_t i = 0; i < _normalizationParameterCount; i++) newVariances[i] += newVariances[i];
  }

  // Calculating the actual mean and variance averages
  for (size_t i = 0; i < _normalizationParameterCount; i++)
  {
    newMeans[i] = newMeans[i] / (double)miniBatches.size();
    newVariances[i] = newVariances[i] / (double)(miniBatches.size() - 1.0);
  }

  // Setting the new adjusted means and variances
  setNormalizationMeans(newMeans);
  setNormalizationVariances(newVariances);
}

std::vector<double> NeuralNetwork::getNormalizationVariances()
{
  // Creating single precision floating-point version of the hyperparameters
  auto fParams = std::vector<float>(_normalizationParameterCount);

#ifdef _KORALI_USE_ONEDNN

  size_t layerCount = _layers.size();
  size_t currPos = 0;
  for (size_t i = 0; i < layerCount; i++)
    if (_layers[i]->_batchNormalizationEnabled == true)
    {
      const memory::dim OC = _layers[i]->_nodeCount;
      read_from_dnnl_memory(&fParams[currPos], _layers[i]->_batchNormalizationVarianceMem);
      currPos += OC;
    }

#endif

  // Returning the hyperparameters converted to double-precision
  return std::vector<double>(fParams.begin(), fParams.end());
}

void NeuralNetwork::setNormalizationVariances(const std::vector<double> &normalizationVariances)
{
#ifdef _KORALI_USE_ONEDNN

  if (normalizationVariances.size() != _normalizationParameterCount)
    KORALI_LOG_ERROR("Wrong number of normalization parameters passed to the neural network. Expected: %lu, provided: %lu.\n", _normalizationParameterCount, normalizationVariances.size());

  // Creating single precision floating-point version of the normalization parameters
  auto fParams = std::vector<float>(normalizationVariances.begin(), normalizationVariances.end());

  size_t layerCount = _layers.size();
  size_t currPos = 0;
  for (size_t i = 0; i < layerCount; i++)
    if (_layers[i]->_batchNormalizationEnabled == true)
    {
      const memory::dim OC = _layers[i]->_nodeCount;
      write_to_dnnl_memory(&fParams[currPos], _layers[i]->_batchNormalizationVarianceMem);
      currPos += OC;
    }

#endif
}

void NeuralNetwork::forward()
{
#ifdef _KORALI_USE_ONEDNN

  size_t layerCount = _layers.size();

  // forward propagating neural network
  for (size_t i = 0; i < layerCount; i++)
  {
    if (i > 0) _layers[i]->_forwardInnerProductPrimitive.execute(_stream, _layers[i]->_forwardInnerProductArgs);
    if (_layers[i]->_batchNormalizationEnabled) _layers[i]->_forwardNormalizationPrimitive.execute(_stream, _layers[i]->_forwardNormalizationArgs);
    _layers[i]->_forwardActivationPrimitive.execute(_stream, _layers[i]->_forwardActivationArgs);
  }

  // Wait for the computation to finalize.
  _stream.wait();

  // Restoring the output later node values
  size_t lastLayer = layerCount - 1;
  size_t nodeCount = _layers[lastLayer]->_nodeCount;
  std::vector<float> resultData(_batchSize * nodeCount);
  read_from_dnnl_memory(resultData.data(), _layers[lastLayer]->_activationMem);

  _outputValues.resize(_batchSize);
  for (size_t i = 0; i < _batchSize; i++)
  {
    _outputValues[i].resize(nodeCount);
    for (size_t j = 0; j < nodeCount; j++) _outputValues[i][j] = resultData[i * nodeCount + j];

    // If we  use scaling, then apply the scaling factors now
    if (_outputScaling.size() > 0)
      for (size_t j = 0; j < nodeCount; j++) _outputValues[i][j] *= _outputScaling[j];
  }

#endif
}

std::vector<double> NeuralNetwork::getHyperparameterGradients()
{
  // Copying back the gradients and biases back
  std::vector<float> gradientVectorFloat(_hyperparameterCount);

  // Retrieving hyperparameter gradients
  size_t currPos = 0;
  size_t layerCount = _layers.size();

  for (size_t i = 0; i < layerCount; i++)
  {
    const memory::dim IC = _layers[i - 1]->_nodeCount;
    const memory::dim OC = _layers[i]->_nodeCount;

    if (i > 0)
    {
      // Reading weight gradients
      read_from_dnnl_memory(&gradientVectorFloat[currPos], _layers[i]->_weightsDiffMem);
      currPos += OC * IC;

      // If not using layer normalization, we get the bias gradients
      if (_layers[i]->_batchNormalizationEnabled == false)
      {
        read_from_dnnl_memory(&gradientVectorFloat[currPos], _layers[i]->_biasDiffMem);
        currPos += OC;
      }
    }

    // If using layer normalization, we get normalization gradients
    if (_layers[i]->_batchNormalizationEnabled == true)
    {
      read_from_dnnl_memory(&gradientVectorFloat[currPos], _layers[i]->_batchNormalizationScaleShiftDiffMem);
      currPos += 2 * OC;
    }
  }

  // Getting the double version of the gradient vector
  std::vector<double> gradientVector(gradientVectorFloat.begin(), gradientVectorFloat.end());

  return gradientVector;
}

std::vector<double> NeuralNetwork::getDataGradients()
{
#ifdef _KORALI_USE_ONEDNN

  // Retreiving gradient of the input
  size_t inputSize = _layers[0]->_nodeCount;
  std::vector<float> dataDiff(_batchSize * inputSize);

  if (_layers[0]->_batchNormalizationEnabled)
    read_from_dnnl_memory(dataDiff.data(), _layers[0]->_batchNormalizationDiffMem);
  else
    read_from_dnnl_memory(dataDiff.data(), _layers[0]->_nodeDiffMem);

  // Getting the double version of the gradient vector
  std::vector<double> gradientVector(dataDiff.begin(), dataDiff.end());

  return gradientVector;

#endif
}

} // namespace korali
