#include "modules/experiment/experiment.hpp"
#include "modules/neuralNetwork/neuralNetwork.hpp"

#ifdef _KORALI_USE_ONEDNN
  #include "auxiliar/dnnUtils.hpp"
using namespace dnnl;
#endif

#ifdef _KORALI_USE_CUDNN
  #include <cuda.h>
  #include <cudnn.h>
#endif

namespace korali
{
NeuralNetwork::NeuralNetwork()
{
  _isInitialized = false;
}

void NeuralNetwork::initialize()
{
#ifdef _KORALI_USE_NO_NN

  KORALI_LOG_ERROR("Korali was installed without support NN operations. Change installation configuration to select a NN framework and re-build Korali.\n");

#endif

  if (_isInitialized)
    KORALI_LOG_ERROR("Neural Network has already been initialized!.\n");

#ifdef _KORALI_USE_ONEDNN

  _stream = stream(_engine);

#endif

#ifdef _KORALI_USE_CUDNN

  if (cudnnCreate(&_cuDNNHandle) != CUDNN_STATUS_SUCCESS) KORALI_LOG_ERROR("Error initializing CUDNN Handle\n");

#endif

  // Assigning relevant metadata to all the layers
  size_t layerCount = _layers.size();
  for (size_t i = 0; i < layerCount; i++)
  {
    _layers[i]->_prevLayer = i > 0 ? _layers[i - 1] : NULL;
    _layers[i]->_nextLayer = i < layerCount - 1 ? _layers[i + 1] : NULL;
    _layers[i]->_index = i;
    _layers[i]->_nn = this;
  }

  // Creating forward and backward-propagation pipeline
  for (size_t i = 0; i < layerCount; i++) _layers[i]->createHyperparameterMemory();

  // Getting normalization and weight/bias parameter counts
  _hyperparameterCount = 0;
  for (size_t i = 0; i < layerCount; i++) _hyperparameterCount += _layers[i]->_hyperparameterCount;

  // Check output scaling configuration
  size_t outputSize = _layers[layerCount - 1]->_nodeCount;

  if (_outputScale.empty() == false)
    if (_outputScale.size() != outputSize)
      KORALI_LOG_ERROR("Wrong number of output scaling factors passed to the neural network. Expected: %lu, provided: %lu.\n", outputSize, _outputScale.size());

  // Check output shifting configuration
  if (_outputShift.empty() == false)
    if (_outputShift.size() != outputSize)
      KORALI_LOG_ERROR("Wrong number of output shift factors passed to the neural network. Expected: %lu, provided: %lu.\n", outputSize, _outputShift.size());

  // Check output absolute mask configuration
  if (_outputAbsoluteMask.empty() == false)
    if (_outputAbsoluteMask.size() != outputSize)
      KORALI_LOG_ERROR("Wrong size of output absolute mask passed to the neural network. Expected: %lu, provided: %lu.\n", outputSize, _outputAbsoluteMask.size());

  // Check output tanh mask configuration
  if (_outputTanhMask.empty() == false)
    if (_outputTanhMask.size() != outputSize)
      KORALI_LOG_ERROR("Wrong size of output Tanh mask passed to the neural network. Expected: %lu, provided: %lu.\n", outputSize, _outputTanhMask.size());

  // Check output SoftPlus mask configuration
  if (_outputSoftplusMask.empty() == false)
  {
    if (_outputSoftplusMask.size() != outputSize)
      KORALI_LOG_ERROR("Wrong size of output SoftPlus mask passed to the neural network. Expected: %lu, provided: %lu.\n", outputSize, _outputSoftplusMask.size());
  }

  // Making sure we do not re-initialize
  _isInitialized = true;
}

std::vector<float> NeuralNetwork::generateInitialHyperparameters()
{
  // Setting initial values for hyperparameters
  std::vector<float> initialHyperparameters;

  for (size_t i = 0; i < _layers.size(); i++)
  {
    auto layerParameters = _layers[i]->generateInitialHyperparameters();
    // tmp fix (DW)
    if (i == _layers.size() - 1)
      for (size_t j = 0; j < layerParameters.size(); ++j)
        layerParameters[j] *= 0.1;
    initialHyperparameters.insert(initialHyperparameters.end(), layerParameters.begin(), layerParameters.end());
  }

  return initialHyperparameters;
}

void NeuralNetwork::setInput(const std::vector<std::vector<float>> &input)
{
  // Getting batch dimensions
  size_t batchSize = input.size();
  size_t inputSize = _layers[0]->_nodeCount;
  size_t layerCount = _layers.size();

  // If batchsize is different than existing one, re-create pipelines
  if (batchSize != _batchSize)
  {
    _batchSize = batchSize;
    for (size_t i = 0; i < layerCount; i++) _layers[i]->createForwardPipeline();
    for (size_t i = 0; i < layerCount; i++) _layers[i]->createBackwardPipeline();
  }

  for (size_t i = 0; i < input.size(); i++)
    if (input[i].size() != inputSize)
      KORALI_LOG_ERROR("Input data set %lu has a different number of elements (%lu) than the input layer node count (%lu).\n", i, input[i].size(), inputSize);

  // Copying input data to first layer
  std::vector<float> batchInput(_batchSize * inputSize);
  for (size_t i = 0; i < _batchSize; i++)
    for (size_t j = 0; j < inputSize; j++)
      batchInput[i * inputSize + j] = input[i][j];

// Writing input to the NN
#ifdef _KORALI_USE_ONEDNN
  write_to_dnnl_memory(batchInput.data(), _layers[0]->_nodeMem);
#endif

#ifdef _KORALI_USE_CUDNN
  if (cudaMemcpy(_layers[0]->_nodeTensor, batchInput.data(), batchInput.size() * sizeof(float), cudaMemcpyHostToDevice) != cudaSuccess) KORALI_LOG_ERROR("Error copying bias memory to device");
#endif
}

void NeuralNetwork::forward()
{
  size_t layerCount = _layers.size();

  // forward propagating neural network
  for (size_t i = 0; i < layerCount; i++)
  {
    // Applying convolution filter (weights)
    if (i > 0)
    {
#ifdef _KORALI_USE_ONEDNN
      _layers[i]->_forwardInnerProductPrimitive.execute(_stream, _layers[i]->_forwardInnerProductArgs);
#endif

#ifdef _KORALI_USE_CUDNN

      float alpha1 = 1.0f;
      float alpha2 = 0.0f;
      if (cudnnConvolutionForward(
            _cuDNNHandle,
            &alpha1,
            _layers[i - 1]->_nodeTensorDesc,
            _layers[i - 1]->_activationTensor,
            _layers[i]->_weightsFilterDesc,
            _layers[i]->_weightsFilter,
            _layers[i]->_convolutionDesc,
            CUDNN_CONVOLUTION_FWD_ALGO_IMPLICIT_GEMM,
            _layers[i]->_convolutionWorkspace,
            _layers[i]->_convolutionWorkspaceSize,
            &alpha2,
            _layers[i]->_nodeTensorDesc,
            _layers[i]->_nodeTensor) != CUDNN_STATUS_SUCCESS) KORALI_LOG_ERROR("Error running convolution operation");

      float alpha = 1.0f;
      float beta = 1.0f;
      cudnnAddTensor(_cuDNNHandle, &alpha, _layers[i]->_biasTensorDesc, _layers[i]->_biasTensor, &beta, _layers[i]->_nodeTensorDesc, _layers[i]->_nodeTensor);

#endif
    }

    // Applying activation function

#ifdef _KORALI_USE_ONEDNN
    _layers[i]->_forwardActivationPrimitive.execute(_stream, _layers[i]->_forwardActivationArgs);
#endif

#ifdef _KORALI_USE_CUDNN

    if (_layers[i]->_activationFunctionType == "Elementwise/Linear")
    {
      if (cudaMemcpy(
            _layers[i]->_activationTensor,
            _layers[i]->_batchNormalizationEnabled ? _layers[i]->_batchNormalizationTensor : _layers[i]->_nodeTensor,
            _batchSize * _layers[i]->_nodeCount * sizeof(float),
            cudaMemcpyDeviceToDevice) != cudaSuccess) KORALI_LOG_ERROR("Error copying memory (activation = linear)");
    }
    else if (_layers[i]->_activationFunctionType == "Softmax")
    {
      float alpha = 1.0f;
      float beta = 0.0f;
      if (cudnnSoftmaxForward(
            _cuDNNHandle,
            CUDNN_SOFTMAX_LOG,
            CUDNN_SOFTMAX_MODE_CHANNEL,
            &alpha,
            _layers[i]->_nodeTensorDesc,
            _layers[i]->_nodeTensor,
            &beta,
            _layers[i]->_nodeTensorDesc,
            _layers[i]->_activationTensor) != CUDNN_STATUS_SUCCESS) KORALI_LOG_ERROR("Error running softmax forward propagation\n");
    }
    else
    {
      float alpha = 1.0f;
      float beta = 0.0f;
      if (cudnnActivationForward(
            _cuDNNHandle,
            _layers[i]->_activationDesc,
            &alpha,
            _layers[i]->_nodeTensorDesc,
            _layers[i]->_nodeTensor,
            &beta,
            _layers[i]->_nodeTensorDesc,
            _layers[i]->_activationTensor) != CUDNN_STATUS_SUCCESS) KORALI_LOG_ERROR("Error running activation function\n");
    }

#endif
  }

// Waiting for oneDNN computation to finalize.
#ifdef _KORALI_USE_ONEDNN
  _stream.wait();
#endif

#ifdef _KORALI_USE_CUDNN
  cudaDeviceSynchronize();
#endif

  // Restoring the output later node values
  size_t lastLayer = layerCount - 1;
  size_t nodeCount = _layers[lastLayer]->_nodeCount;
  std::vector<float> resultData(_batchSize * nodeCount);

#ifdef _KORALI_USE_ONEDNN
  read_from_dnnl_memory(resultData.data(), _layers[lastLayer]->_activationMem);
#endif

#ifdef _KORALI_USE_CUDNN
  if (cudaMemcpy(resultData.data(), _layers[lastLayer]->_activationTensor, resultData.size() * sizeof(float), cudaMemcpyDeviceToHost) != cudaSuccess) KORALI_LOG_ERROR("Error copying bias memory to device");
#endif

  // Copying NN output to class output
  _outputValues.resize(_batchSize);
  for (size_t i = 0; i < _batchSize; i++) _outputValues[i].resize(nodeCount);

  // Creating storage for output value sign, if using absolute mask
  if (_outputAbsoluteMask.size() > 0)
  {
    _outputSign.resize(_batchSize);
    for (size_t i = 0; i < _batchSize; i++) _outputSign[i].resize(nodeCount);
  }

  for (size_t i = 0; i < _batchSize; i++)
    for (size_t j = 0; j < nodeCount; j++)
    {
      auto x = resultData[i * nodeCount + j];

      // If we use a softplus mask, then apply the mask now
      if (_outputSoftplusMask.size() > 0)
        if (_outputSoftplusMask[j] == true)
          x = 0.5 * (x + std::sqrt(1. + x * x));

      // If we use a tanh mask, then apply the mask now
      if (_outputTanhMask.size() > 0)
        if (_outputTanhMask[j] == true)
          x = std::tanh(x);

      // If we use an absolute mask, then apply the mask now
      if (_outputAbsoluteMask.size() > 0)
      {
        // Storing original sign bit
        _outputSign[i][j] = std::signbit(x);

        // Using an absolute function to remove sign from number
        if (_outputAbsoluteMask[j] == true)
          x = std::fabs(x);
      }

      // If we  use scaling, then apply the scaling factors now
      if (_outputScale.size() > 0) x *= _outputScale[j];

      // If we  use shifting, then apply the scaling factors now
      if (_outputShift.size() > 0) x += _outputShift[j];

      _outputValues[i][j] = x;
    }
}

void NeuralNetwork::backward(const std::vector<std::vector<float>> &gradients)
{
  // Getting batch dimensions
  size_t batchSize = gradients.size();

  // If gradients batch size is different than forwarding batch size, fail with error
  if (batchSize != _batchSize)
    KORALI_LOG_ERROR("Wrong batch size passed for backward propagation. Expected: %lu, provided: %lu.\n", _batchSize, batchSize);

  // Running backward propagation
  size_t layerCount = _layers.size();
  size_t lastLayer = layerCount - 1;
  size_t outputSize = _layers[lastLayer]->_nodeCount;

  // Copying incoming gradients to a contiguous vector
  std::vector<float> floatDiffs(_batchSize * outputSize);
  for (size_t i = 0; i < _batchSize; i++)
    for (size_t j = 0; j < outputSize; j++)
    {
      // Getting forward propagation output and passed gradients
      float x = _outputValues[i][j];
      float g = gradients[i][j];

      // If we use shift, then apply the inverse shift to the forward output
      if (_outputShift.size() > 0)
        x = x - _outputShift[j];

      // If we use scaling, then apply the inverse scaling factors gradient now
      if (_outputScale.size() > 0)
      {
        x = x / _outputScale[j];
        g = g * _outputScale[j];
      }

      // If we use an absolute mask, then restore the corresponding sign now
      if (_outputAbsoluteMask.size() > 0)
        if (_outputAbsoluteMask[j] == true)
          if (_outputSign[i][j])
            g = -g;

      // If we use an tanh mask, then apply its derivative
      if (_outputTanhMask.size() > 0)
        if (_outputTanhMask[j] == true)
        {
          g = g * (1.0f - x * x); // x is still tanh(x)
        }

      // If we use a softplus  mask, then apply its derivative
      if (_outputSoftplusMask.size() > 0)
        if (_outputSoftplusMask[j] == true)
        {
          //float nnx = resultData[i * nodeCount + j];
          float nnx = x - 0.25 / x; // Approximation
          g = g * 0.5 * (nnx / std::sqrt(nnx * nnx + 1) + 1);
        }

      floatDiffs[i * outputSize + j] = g;
    }

// Copying gradients to the output end of the NN
#ifdef _KORALI_USE_ONEDNN
  write_to_dnnl_memory(floatDiffs.data(), _layers[lastLayer]->_activationDiffMem);
#endif

#ifdef _KORALI_USE_CUDNN
  if (cudaMemcpy(_layers[lastLayer]->_activationDiffTensor, floatDiffs.data(), floatDiffs.size() * sizeof(float), cudaMemcpyHostToDevice) != cudaSuccess) KORALI_LOG_ERROR("Error copying bias memory to device");
#endif

  // Backward propagating neural network
  for (ssize_t i = lastLayer; i >= 0; i--)
  {
#ifdef _KORALI_USE_ONEDNN

    _layers[i]->_backwardActivationPrimitive.execute(_stream, _layers[i]->_backwardActivationArgs);

#endif

#ifdef _KORALI_USE_CUDNN

    if (_layers[i]->_activationFunctionType == "Elementwise/Linear")
    {
      if (
        cudaMemcpy(
          _layers[i]->_nodeDiffTensor,
          _layers[i]->_activationDiffTensor,
          _batchSize * _layers[i]->_nodeCount * sizeof(float),
          cudaMemcpyDeviceToDevice) != cudaSuccess) KORALI_LOG_ERROR("Error copying memory (backprop activation)");
    }
    else if (_layers[i]->_activationFunctionType == "Softmax")
    {
      float alpha = 1.0f;
      float beta = 0.0f;
      if (cudnnSoftmaxBackward(
            _cuDNNHandle,
            CUDNN_SOFTMAX_LOG,
            CUDNN_SOFTMAX_MODE_CHANNEL,
            &alpha,
            _layers[i]->_nodeTensorDesc,
            _layers[i]->_activationTensor,
            _layers[i]->_nodeTensorDesc,
            _layers[i]->_activationDiffTensor,
            &beta,
            _layers[i]->_nodeTensorDesc,
            _layers[i]->_nodeDiffTensor) != CUDNN_STATUS_SUCCESS) KORALI_LOG_ERROR("Error running softmax backward data propagation\n");
    }
    else
    {
      float alpha = 1.0f;
      float beta = 0.0f;
      if (cudnnActivationBackward(
            _cuDNNHandle,
            _layers[i]->_activationDesc,
            &alpha,
            _layers[i]->_nodeTensorDesc,
            _layers[i]->_activationTensor,
            _layers[i]->_nodeTensorDesc,
            _layers[i]->_activationDiffTensor,
            _layers[i]->_nodeTensorDesc,
            _layers[i]->_nodeTensor,
            &beta,
            _layers[i]->_nodeTensorDesc,
            _layers[i]->_nodeDiffTensor) != CUDNN_STATUS_SUCCESS) KORALI_LOG_ERROR("Error running activation backward data propagation\n");
    }

#endif

    if (i > 0)
    {
      // Running backward data propagation

#ifdef _KORALI_USE_ONEDNN

      _layers[i]->_backwardDataPrimitive.execute(_stream, _layers[i]->_backwardDataArgs);

#endif

#ifdef _KORALI_USE_CUDNN

      float alpha = 1.0f;
      float beta = 0.0f;
      if (cudnnConvolutionBackwardData(
            _cuDNNHandle,
            &alpha,
            _layers[i]->_weightsFilterDesc,
            _layers[i]->_weightsFilter,
            _layers[i]->_nodeTensorDesc,
            _layers[i]->_nodeDiffTensor,
            _layers[i]->_convolutionDesc,
            CUDNN_CONVOLUTION_BWD_DATA_ALGO_0,
            _layers[i]->_convolutionWorkspace,
            _layers[i]->_convolutionWorkspaceSize,
            &beta,
            _layers[i - 1]->_nodeTensorDesc,
            _layers[i - 1]->_activationDiffTensor) != CUDNN_STATUS_SUCCESS) KORALI_LOG_ERROR("Error running filter backward data propagation\n");

#endif

        // Running backward weight+bias propagation

#ifdef _KORALI_USE_ONEDNN

      _layers[i]->_backwardWeightsPrimitive.execute(_stream, _layers[i]->_backwardWeightsArgs);

#endif

#ifdef _KORALI_USE_CUDNN

      if (cudnnConvolutionBackwardBias(
            _cuDNNHandle,
            &alpha,
            _layers[i]->_nodeTensorDesc,
            _layers[i]->_nodeDiffTensor,
            &beta,
            _layers[i]->_biasTensorDesc,
            _layers[i]->_biasDiffTensor) != CUDNN_STATUS_SUCCESS) KORALI_LOG_ERROR("Error running filter backward bias propagation\n");

      if (cudnnConvolutionBackwardFilter(
            _cuDNNHandle,
            &alpha,
            _layers[i - 1]->_nodeTensorDesc,
            _layers[i - 1]->_activationTensor,
            _layers[i]->_nodeTensorDesc,
            _layers[i]->_nodeDiffTensor,
            _layers[i]->_convolutionDesc,
            CUDNN_CONVOLUTION_BWD_FILTER_ALGO_0,
            _layers[i]->_convolutionWorkspace,
            _layers[i]->_convolutionWorkspaceSize,
            &beta,
            _layers[i]->_weightsFilterDesc,
            _layers[i]->_weightsDiffFilter) != CUDNN_STATUS_SUCCESS) KORALI_LOG_ERROR("Error running filter backward filter propagation\n");

#endif
    }
  }

// Wait for oneDNN computation to finalize.
#ifdef _KORALI_USE_ONEDNN
  _stream.wait();
#endif
}

std::vector<float> NeuralNetwork::getHyperparameters()
{
  // Creating single precision floating-point version of the hyperparameters
  auto params = std::vector<float>(_hyperparameterCount);

  size_t layerCount = _layers.size();
  size_t currPos = 0;
  for (size_t i = 0; i < layerCount; i++)
  {
    size_t OC = _layers[i]->_nodeCount;

    // Setting weight data to the layer's weight memory
    if (i > 0)
    {
      size_t IC = _layers[i - 1]->_nodeCount;

#ifdef _KORALI_USE_ONEDNN
      read_from_dnnl_memory(&params[currPos], _layers[i]->_weightsMem);
#endif

#ifdef _KORALI_USE_CUDNN
      if (cudaMemcpy(&params[currPos], _layers[i]->_weightsFilter, IC * OC * sizeof(float), cudaMemcpyDeviceToHost) != cudaSuccess) KORALI_LOG_ERROR("Error copying memory");
#endif

      currPos += IC * OC;

      // Setting weight data to the layer's weight memory
#ifdef _KORALI_USE_ONEDNN
        read_from_dnnl_memory(&params[currPos], _layers[i]->_biasMem);
#endif

#ifdef _KORALI_USE_CUDNN
        if (cudaMemcpy(&params[currPos], _layers[i]->_biasTensor, OC * sizeof(float), cudaMemcpyDeviceToHost) != cudaSuccess) KORALI_LOG_ERROR("Error copying memory");
#endif
        currPos += OC;
    }
  }

  // Returning the hyperparameters converted to float-precision
  return params;
}

void NeuralNetwork::setHyperparameters(const std::vector<float> &hyperparameters)
{
  if (hyperparameters.size() != _hyperparameterCount)
    KORALI_LOG_ERROR("Wrong number of hyperparameters passed to the neural network. Expected: %lu, provided: %lu.\n", _hyperparameterCount, hyperparameters.size());

  // Creating single precision floating-point version of the hyperparameters
  auto params = std::vector<float>(hyperparameters.begin(), hyperparameters.end());

  size_t layerCount = _layers.size();
  size_t currPos = 0;
  for (size_t i = 0; i < layerCount; i++)
  {
    size_t OC = _layers[i]->_nodeCount;

    if (i > 0)
    {
      size_t IC = _layers[i - 1]->_nodeCount;

// Setting weight data to the layer's weight memory
#ifdef _KORALI_USE_ONEDNN
      write_to_dnnl_memory(&params[currPos], _layers[i]->_weightsMem);
#endif

#ifdef _KORALI_USE_CUDNN
      if (cudaMemcpy(_layers[i]->_weightsFilter, &params[currPos], IC * OC * sizeof(float), cudaMemcpyHostToDevice) != cudaSuccess) KORALI_LOG_ERROR("Error copying weights memory to device");
#endif

      currPos += IC * OC;

      // Setting weight data to the layer's weight memory
#ifdef _KORALI_USE_ONEDNN
        write_to_dnnl_memory(&params[currPos], _layers[i]->_biasMem);
#endif

#ifdef _KORALI_USE_CUDNN
        if (cudaMemcpy(_layers[i]->_biasTensor, &params[currPos], OC * sizeof(float), cudaMemcpyHostToDevice) != cudaSuccess) KORALI_LOG_ERROR("Error copying bias memory to device");
#endif

        currPos += OC;
    }
  }
}

std::vector<float> NeuralNetwork::getHyperparameterGradients()
{
  // Copying back the gradients and biases back
  std::vector<float> gradientVector(_hyperparameterCount);

  // Retrieving hyperparameter gradients
  size_t currPos = 0;
  size_t layerCount = _layers.size();

  for (size_t i = 0; i < layerCount; i++)
  {
    size_t OC = _layers[i]->_nodeCount;

    if (i > 0)
    {
      size_t IC = _layers[i - 1]->_nodeCount;

      // Reading weight gradients

#ifdef _KORALI_USE_ONEDNN
      read_from_dnnl_memory(&gradientVector[currPos], _layers[i]->_weightsDiffMem);
#endif

#ifdef _KORALI_USE_CUDNN
      if (cudaMemcpy(&gradientVector[currPos], _layers[i]->_weightsDiffFilter, IC * OC * sizeof(float), cudaMemcpyDeviceToHost) != cudaSuccess) KORALI_LOG_ERROR("Error copying memory");
#endif
      currPos += OC * IC;

      // If not using layer normalization, we get the bias gradients
#ifdef _KORALI_USE_ONEDNN
        read_from_dnnl_memory(&gradientVector[currPos], _layers[i]->_biasDiffMem);
#endif

#ifdef _KORALI_USE_CUDNN
        if (cudaMemcpy(&gradientVector[currPos], _layers[i]->_biasDiffTensor, OC * sizeof(float), cudaMemcpyDeviceToHost) != cudaSuccess) KORALI_LOG_ERROR("Error copying memory");
#endif
        currPos += OC;
    }
  }

  return gradientVector;
}

std::vector<float> NeuralNetwork::getDataGradients()
{
  // Retreiving gradient of the input
  size_t inputSize = _layers[0]->_nodeCount;
  std::vector<float> dataDiff(_batchSize * inputSize);

#ifdef _KORALI_USE_ONEDNN
    read_from_dnnl_memory(dataDiff.data(), _layers[0]->_nodeDiffMem);
#endif

#ifdef _KORALI_USE_CUDNN
    size_t OC = _layers[0]->_nodeCount;
    if (cudaMemcpy(dataDiff.data(), _layers[0]->_nodeDiffTensor, OC * sizeof(float), cudaMemcpyDeviceToHost) != cudaSuccess) KORALI_LOG_ERROR("Error copying memory");
#endif

  return dataDiff;
}

} // namespace korali
