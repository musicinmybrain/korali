#ifndef _KORALI_MODULE_HPP_
#define _KORALI_MODULE_HPP_

#include "auxiliar/koraliJson.hpp"
#include "auxiliar/logger.hpp"
#include "auxiliar/math.hpp"
#include <chrono>

/*! \namespace Korali
    \brief The Korali namespace includes all Korali-specific functions, variables, and modules.
*/
namespace korali {

class Experiment;

/*! \class Module
    \brief Represents the basic building block of all Korali modules.
*/
class Module
{
 public:

  std::string _type;
  std::vector<std::string> _terminationCriteria;
  korali::Experiment* _k;


  Module* getModule(knlohmann::json& js);

  virtual void initialize() { }
  virtual void finalize() { }

  virtual std::string getType() { return _type; };
  virtual bool checkTermination() { return false; };
  virtual void getConfiguration(knlohmann::json& js) {};
  virtual void setConfiguration(knlohmann::json& js) {};
  virtual void applyModuleDefaults(knlohmann::json& js) {};
  virtual void applyVariableDefaults() {};
};

extern knlohmann::json __profiler;
extern std::chrono::time_point<std::chrono::high_resolution_clock> _startTime;
extern std::chrono::time_point<std::chrono::high_resolution_clock> _endTime;
extern double _cumulativeTime;

} // namespace korali

#endif // _KORALI_MODULE_HPP_

