#ifndef _KORALI_CONDUIT_SEQUENTIAL_HPP_
#define _KORALI_CONDUIT_SEQUENTIAL_HPP_

#include "libco.h"
#include "modules/conduit/conduit.hpp"
#include <chrono>
#include <map>
#include <queue>
#include <vector>

namespace korali
{
namespace conduit
{
class Sequential : public Conduit
{
  public:
  /**
  * @brief User-Level thread (coroutine) containing the CPU execution state of the single worker.
  */
  cothread_t _workerThread;

  /**
  * @brief Queue to keep outgoing messages for the (only) worker
  */
  std::queue<knlohmann::json> _outputMessageQueue;

  /**
  * @brief Queue to keep incoming messages for the (only) worker
  */
  std::queue<knlohmann::json> _inputMessageQueue;

  bool isRoot() override;
  void initServer() override;
  void initialize() override;
  void finalize() override;

  void stackEngine(Engine *engine) override;
  void popEngine() override;

  void broadcastMessageToWorkers(knlohmann::json &message) override;
  void sendMessageToEngine(knlohmann::json &message) override;
  knlohmann::json recvMessageFromEngine() override;
  knlohmann::json recvMessageFromSample(Sample &sample) override;
  void sendMessageToSample(Sample &sample, knlohmann::json &message) override;
};

} // namespace conduit
} // namespace korali

#endif // _KORALI_CONDUIT_SEQUENTIAL_HPP_
