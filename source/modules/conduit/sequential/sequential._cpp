#include "modules/conduit/sequential/sequential.hpp"
#include "modules/engine/engine.hpp"
#include "modules/experiment/experiment.hpp"
#include "modules/problem/problem.hpp"
#include "modules/solver/solver.hpp"

void korali::conduit::Sequential::processSample(korali::Sample& sample)
{
 auto js = knlohmann::json();
 js["Start Time"] = std::chrono::duration<double>(std::chrono::high_resolution_clock::now()-_startTime).count() + _cumulativeTime;

 size_t experimentId = sample["Experiment Id"];
 _engine->_experimentVector[experimentId]->_problem->runOperation(sample["Operation"], sample);

 js["End Time"] = std::chrono::duration<double>(std::chrono::high_resolution_clock::now()-_startTime).count() + _cumulativeTime;
 js["Current Generation"] = _currentExperiment->_currentGeneration;
 js["Solver Id"] = _currentExperiment->_experimentId;
 __profiler["Timelines"]["Worker 0"] += js;
}

