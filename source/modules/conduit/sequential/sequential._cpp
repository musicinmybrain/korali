#include "engine.hpp"
#include "modules/conduit/sequential/sequential.hpp"
#include "modules/experiment/experiment.hpp"
#include "modules/problem/problem.hpp"
#include "modules/solver/solver.hpp"

void korali::conduit::Sequential::initialize()
{
  // Instantiating Engine logger.
  _logger = new korali::Logger();
}

void korali::conduit::Sequential::processSample(korali::Sample &sample)
{
  korali::Engine *engine = _engineStack.top();

  auto js = knlohmann::json();
  js["Start Time"] = std::chrono::duration<double>(std::chrono::high_resolution_clock::now() - _startTime).count() + _cumulativeTime;

  engine->_engineSample = &sample;
  initiateSample(sample._js.getJson());

  js["End Time"] = std::chrono::duration<double>(std::chrono::high_resolution_clock::now() - _startTime).count() + _cumulativeTime;
  js["Current Generation"] = engine->_currentExperiment->_currentGeneration;
  js["Solver Id"] = engine->_currentExperiment->_experimentId;
  __profiler["Timelines"]["Worker 0"] += js;
}

void korali::conduit::Sequential::stackEngine(korali::Engine *engine)
{
  _engineStack.push(engine);
}

void korali::conduit::Sequential::popEngine()
{
  _engineStack.pop();
}

void korali::conduit::Sequential::update(korali::Sample &sample)
{
  korali::Engine *engine = _engineStack.top();
  engine->_engineSample->_js.getJson() = sample._js.getJson();
}

void korali::conduit::Sequential::initServer()
{
}

size_t korali::conduit::Sequential::maxConcurrency()
{
  return 1;
}
