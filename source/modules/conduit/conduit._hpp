@startIncludeGuard

#include "modules/module.hpp"
#include <queue>
#include <vector>

@startNamespace

class Engine;

class @className : public @parentClassName
{
  public:
  /**
 * @brief Lifetime function for korali workers.
 */
  void worker();

  /**
  * @brief Queue to store idle workers to assign samples to
  */
  std::queue<size_t> _workerQueue;

  /**
  * @brief Map that links workers to their currently-executing sample
  */
  std::map<size_t, Sample *> _workerToSampleMap;

  /**
 * @brief Determines whether the caller rank/thread/process is root.
 * @return True, if it is root; false, otherwise.
 */
  virtual bool isRoot() { return true; }

  /**
 * @brief broadcast global information for all workers to have when processing a sample. Useful for Korali-in-Korali solvers.
 * @param key Key onto which to save the global information
 * @param globalsJs JSON object with information to broadcast
 */
  void updateGlobals(std::string key, knlohmann::json &globalsJs);

  /**
 * @brief  (Worker Side) Starts the processing of a sample at the worker side
 * @param js Contains sample's input data and metadata
 */
  void workerProcessSample(const knlohmann::json &js);

  /**
   * @brief (Worker Side) Accepts an incoming broadcast message containing global variables
   * @param js Contains global data
   */
  void workerBroadcastGlobals(const knlohmann::json &js);

  /**
  * @brief (Worker Side) Accepts and stacks an incoming Korali engine from the main process
  * @param js Contains Engine's input data and metadata
  */
  void workerStackEngine(const knlohmann::json &js);

  /**
   * @brief (Worker Side) Pops the top of the engine stack
   */
  void workerPopEngine();

  /**
 * @brief Aborts execution for all ranks/threads/processes.
 */
  virtual void abort() { exit(-1); }

  /**
 * @brief Starts the execution of the sample.
 * @param sample A Korali sample
 */
  void start(Sample &sample);

  /**
  * @brief Waits for a given sample to finish. The experiment will not continue until the sample has been evaluated.
  * @param sample A Korali sample
  */
  void wait(Sample &sample);

  /**
   * @brief Waits for a set of sample to finish. The experiment will not continue until all samples have been evaluated.
   * @param samples A list of Korali samples
   */
  void waitAll(std::vector<Sample> &samples);

  /**
  * @brief Waits for a set of sample to finish. The experiment will not continue until at least one of the samples have been evaluated.
  * @param samples A list of Korali samples
  * @return Position in the vector of the sample that has finished.
  */
  size_t waitAny(std::vector<Sample> &samples);

  /**
  * @brief Stacks a new Engine into the engine stack
  * @param engine A Korali Engine
  */
  virtual void stackEngine(Engine *engine) = 0;

  /**
  * @brief Pops the current Engine from the engine stack
  */
  virtual void popEngine() = 0;

  /**
   * @brief Starts the execution of a sample, given an Engine
   * @param sample the sample to execute
   * @param engine The Korali engine to use for its execution
   */
  void runSample(Sample *sample, Engine *engine);

  /**
  * @brief Wrapper function for the sample coroutine
  */
  static void coroutineWrapper();

  /**
  * @brief Initializes the worker/server bifurcation in the conduit
  */
  virtual void initServer() = 0;

  /**
  * @brief (Engine -> Worker) Broadcasts a message to all workers
  * @param message JSON object with information to broadcast
  */
  virtual void broadcastMessageToWorkers(knlohmann::json &message) = 0;

  /**
   * @brief (Engine <- Worker) Receives all pending incoming messages and stores them into the corresponding sample's message queue.
   */
  virtual void listenWorkers() = 0;

  /**
   * @brief Start pending samples and retrieve any pending messages for them
   * @param samples The set of samples
   */
  void listen(std::vector<Sample> &samples);

  /**
  * @brief (Sample -> Engine) Sends an update to the engine to provide partial information while the sample is still active
  * @param message Message to send to engine
  */
  virtual void sendMessageToEngine(knlohmann::json &message) = 0;

  /**
  * @brief (Sample <- Engine) Blocking call that waits until any message incoming from the engine.
  * @return message from the engine.
  */
  virtual knlohmann::json recvMessageFromEngine() = 0;

  /**
  * @brief (Engine -> Sample) Sends an update to a still active sample
  * @param sample The sample from which to receive an update
  * @param message Message to send to the sample.
  */
  virtual void sendMessageToSample(Sample &sample, knlohmann::json &message) = 0;

  /**
   * @brief Returns the identifier corresponding to the executing process (to differentiate their random seeds)
   * @return The executing process id
   */
  virtual size_t getProcessId() = 0;
};

@endNamespace

@endIncludeGuard
