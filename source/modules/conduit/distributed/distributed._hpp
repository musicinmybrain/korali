#ifndef _KORALI_CONDUIT_MPI_HPP_
#define _KORALI_CONDUIT_MPI_HPP_

#include "modules/conduit/conduit.hpp"
#include <map>
#include <queue>
#include <vector>

#ifdef _KORALI_USE_MPI
  #include "mpi.h"
#endif

namespace korali
{
#ifdef _KORALI_USE_MPI
/**
 * @brief Communicator storage for the current Korali Team
 */
extern MPI_Comm __KoraliTeamComm;

/**
  * @brief Returns Communicator for the current Korali Team
  * @return An MPI Communicator
  */
extern MPI_Comm getKoraliMPIComm();

/**
  * @brief Returns Communicator for the current Korali Team
  * @return An MPI Communicator (in the form of a long integer, for Python compatibility)
  */
extern long int getKoraliMPICommPointer();
#endif

namespace conduit
{
class Distributed : public Conduit
{
  public:
#ifdef _KORALI_USE_MPI

  /**
  * @brief Actual MPI communicator for internal use.
  */
  MPI_Comm _mpiCommunicator;

  /**
  * @brief ID of the current rank.
  */
  size_t _rankId;

  /**
   * @brief Total number of ranks in execution
   */
  size_t _rankCount;

  /**
  * @brief Number of Korali Teams in execution
  */
  size_t _teamCount;

  /**
  * @brief Signals whether the worker has been assigned a team
  */
  size_t _teamIdSet;

  /**
 * @brief Local ID the rank within its Korali Team
 */
  size_t _localRankId;

  /**
  * @brief Map between worker ID and its processes
  */
  std::map<int, std::vector<size_t>> _workerProcesses;

  /**
  * @brief Flag to mark termination for Korali teams.
  */
  bool _continueEvaluations;
#endif

  void initServer() override;
  void initialize() override;
  void finalize() override;

  void stackEngine(Engine *engine) override;
  void popEngine() override;

  std::vector<knlohmann::json> gatherMessagesFromSamples() override;
  void broadcastMessageToWorkers(knlohmann::json &message) override;
  void sendMessageToEngine(knlohmann::json &message) override;
  knlohmann::json recvMessageFromEngine() override;
  knlohmann::json recvMessageFromSample(Sample &sample) override;
  void sendMessageToSample(Sample &sample, knlohmann::json &message) override;
  /**
  * @brief Determines which rank is the root.
  * @return The rank id of the root rank.
  */
  size_t getRootRank();
  bool isRoot() override;
  void abort() override;
};

} // namespace conduit
} // namespace korali

#endif // _KORALI_CONDUIT_MPI_HPP_
