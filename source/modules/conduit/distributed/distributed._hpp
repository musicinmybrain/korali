@startIncludeGuard

#include "modules/conduit/conduit.hpp"
#include <map>
#include <queue>
#include <vector>

#ifdef _KORALI_USE_MPI
  #include "mpi.h"
#endif

@startNamespace0

#ifdef _KORALI_USE_MPI
  /**
   * @brief Communicator storage for the current Korali Worker
   */
  extern MPI_Comm __KoraliTeamComm;

  /**
    * @brief Returns Communicator for the current Korali Worker
    * @return An MPI Communicator
    */
  extern MPI_Comm getKoraliMPIComm();

  /**
    * @brief Returns Communicator for the current Korali Worker
    * @return An MPI Communicator (in the form of a long integer, for Python compatibility)
    */
  extern long int getKoraliMPICommPointer();
#endif

@startNamespace1

class @className : public @parentClassName
{
  public:
#ifdef _KORALI_USE_MPI

  /**
  * @brief Actual MPI communicator for internal use.
  */
  MPI_Comm _mpiCommunicator;
#endif

  /**
  * @brief ID of the current rank.
  */
  int _rankId;

  /**
   * @brief Total number of ranks in execution
   */
  int _rankCount;

  /**
  * @brief Number of Korali Teams in execution
  */
  int _workerCount;

  /**
  * @brief Signals whether the worker has been assigned a team
  */
  int _workerIdSet;

  /**
 * @brief Local ID the rank within its Korali Worker
 */
  int _localRankId;

  /**
  * @brief Storage that contains the rank teams for each worker
  */
  std::vector<std::vector<int>> _workerTeams;

  /**
  * @brief Map that indicates to which worker does the current rank correspond to
  */
  std::vector<int> _rankToWorkerMap;

  /**
  * @brief Flag to mark termination for Korali teams.
  */
  bool _continueEvaluations;

  void initServer() override;
  void initialize() override;
  void finalize() override;

  void stackEngine(Engine *engine) override;
  void popEngine() override;
  void listenWorkers() override;
  void broadcastMessageToWorkers(knlohmann::json &message) override;
  void sendMessageToEngine(knlohmann::json &message) override;
  knlohmann::json recvMessageFromEngine() override;
  void sendMessageToSample(Sample &sample, knlohmann::json &message) override;
  size_t getProcessId() override;

  /**
  * @brief Determines which rank is the root.
  * @return The rank id of the root rank.
  */
  int getRootRank();
  bool isRoot() override;
  void abort() override;
};

@endNamespace1

@endNamespace0

@endIncludeGuard