#pragma once

#include "auxiliar/MPIUtils.hpp"
#include "config.hpp"
#include "modules/conduit/conduit.hpp"
#include <map>
#include <queue>
#include <vector>

__startNamespace__;

class __className__ : public __parentClassName__
{
  public:
  /**
  * @brief ID of the current rank.
  */
  int _rankId;

  /**
   * @brief Total number of ranks in execution
   */
  int _rankCount;

  /**
  * @brief Number of Korali Teams in execution
  */
  int _workerCount;

  /**
  * @brief Signals whether the worker has been assigned a team
  */
  int _workerIdSet;

  /**
 * @brief Local ID the rank within its Korali Worker
 */
  int _localRankId;

  /**
  * @brief Storage that contains the rank teams for each worker
  */
  std::vector<std::vector<int>> _workerTeams;

  /**
  * @brief Map that indicates to which worker does the current rank correspond to
  */
  std::vector<int> _rankToWorkerMap;

  /**
   * @brief Checks whether the number of MPI workers satisfies the requirement
   */
  void checkRankCount();

  void initServer() override;
  void initialize() override;
  void terminateServer() override;

  void stackEngine(Engine *engine) override;
  void popEngine() override;
  void listenWorkers() override;
  void broadcastMessageToWorkers(knlohmann::json &message) override;
  void sendMessageToEngine(knlohmann::json &message) override;
  knlohmann::json recvMessageFromEngine() override;
  void sendMessageToSample(Sample &sample, knlohmann::json &message) override;
  size_t getProcessId() override;

  /**
  * @brief Determines which rank is the root.
  * @return The rank id of the root rank.
  */
  int getRootRank();
  bool isRoot() override;
};

__endNamespace__;


