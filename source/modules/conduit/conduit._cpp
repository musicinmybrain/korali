#include "engine.hpp"
#include "modules/conduit/conduit.hpp"

using namespace std;

namespace korali
{
Conduit *_conduit = NULL;

/***********************************
 * Engine-Side Operations
 **********************************/

void Conduit::coroutineWrapper()
{
  Engine *engine = _engineStack.top();
  Sample *currentSample = engine->_engineSample;
  co_switch(engine->_currentExperiment->_thread);
  (*currentSample)["Experiment Id"] = engine->_currentExperiment->_experimentId;
  (*currentSample)["Current Generation"] = engine->_currentExperiment->_currentGeneration;

  _conduit->processSample(*currentSample);

  currentSample->_state = SampleState::finished;
  co_switch(engine->_currentExperiment->_thread);

  if (currentSample->_state != SampleState::uninitialized) KORALI_LOG_ERROR("Resuming a finished sample\n");
}

void Conduit::start(Sample &sample)
{
  Engine *engine = _engineStack.top();

  // Checking if sample id was defined
  KORALI_GET(size_t, sample, "Sample Id");

  if (sample._state != SampleState::uninitialized) KORALI_LOG_ERROR("Sample has already been initialized.\n");

  if (sample._isAllocated == false)
    sample._sampleThread = co_create(1 << 28, Conduit::coroutineWrapper);
  else
    KORALI_LOG_ERROR("Sample thread is already allocated; has it executed before being re-started?\n");

  sample._state = SampleState::initialized;
  engine->_engineSample = &sample;

  co_switch(sample._sampleThread);
}

void Conduit::wait(Sample &sample)
{
  Engine *engine = _engineStack.top();

  while (sample._state == SampleState::waiting || sample._state == SampleState::initialized)
  {
    // Check for error signals from python
    if (isPythonActive && PyErr_CheckSignals() != 0) KORALI_LOG_ERROR("User requested break.\n");

    sample._state = SampleState::running;
    co_switch(sample._sampleThread);

    if (sample._state == SampleState::waiting || sample._state == SampleState::initialized) co_switch(engine->_thread);
  }

  size_t sampleId = KORALI_GET(size_t, sample, "Sample Id");

  engine->_currentExperiment->_sampleInfo["Samples"][sampleId] = sample._js.getJson();
  if (sample._isAllocated == true)
  {
    free(sample._sampleThread);
    sample._isAllocated = false;
  }
  sample._state = SampleState::uninitialized;
  co_delete(sample._sampleThread);
}

size_t Conduit::waitAny(vector<Sample> &samples)
{
  Engine *engine = _engineStack.top();
  bool isFinished = false;
  size_t currentSample;

  while (isFinished == false)
  {
    // Check for error signals from python
    if (isPythonActive && PyErr_CheckSignals() != 0) throw pybind11::error_already_set();

    for (currentSample = 0; currentSample < samples.size(); currentSample++)
    {
      if (samples[currentSample]._state == SampleState::waiting || samples[currentSample]._state == SampleState::initialized)
      {
        samples[currentSample]._state = SampleState::running;
        co_switch(samples[currentSample]._sampleThread);
      }

      if (samples[currentSample]._state == SampleState::finished)
      {
        auto sampleId = KORALI_GET(size_t, samples[currentSample], "Sample Id");

        engine->_currentExperiment->_sampleInfo["Samples"][sampleId] = samples[currentSample]._js.getJson();
        if (samples[currentSample]._isAllocated == true)
        {
          free(samples[currentSample]._sampleThread);
          samples[currentSample]._isAllocated = false;
        }
        samples[currentSample]._state = SampleState::uninitialized;
        co_delete(samples[currentSample]._sampleThread);
        isFinished = true;
        break;
      }
    }

    if (isFinished == false) co_switch(engine->_thread);
  }

  return currentSample;
}

void Conduit::waitAll(vector<Sample> &samples)
{
  Engine *engine = _engineStack.top();
  bool isFinished = false;

  while (isFinished == false)
  {
    // Check for error signals from python
    if (isPythonActive && PyErr_CheckSignals() != 0) KORALI_LOG_ERROR("User requested break.\n");

    isFinished = true;

    for (size_t i = 0; i < samples.size(); i++)
      if (samples[i]._state == SampleState::waiting || samples[i]._state == SampleState::initialized)
      {
        isFinished = false;
        samples[i]._state = SampleState::running;
        co_switch(samples[i]._sampleThread);
      }

    if (isFinished == false) co_switch(engine->_thread);
  }

  for (size_t i = 0; i < samples.size(); i++)
  {
    auto sampleId = KORALI_GET(size_t, samples[i], "Sample Id");

    engine->_currentExperiment->_sampleInfo["Samples"][sampleId] = samples[i]._js.getJson();
    if (samples[i]._isAllocated == true)
    {
      free(samples[i]._sampleThread);
      samples[i]._isAllocated = false;
    }
    samples[i]._state = SampleState::uninitialized;
    co_delete(samples[i]._sampleThread);
  }
}

} // namespace korali
