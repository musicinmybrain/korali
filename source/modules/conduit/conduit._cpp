#include "engine.hpp"
#include "modules/conduit/conduit.hpp"

korali::Conduit* korali::_conduit;

void korali::Conduit::coroutineWrapper()
{
 korali::Engine* engine = _engineStack.top();
 korali::Sample* currentSample = _conduit->_currentSample;
 co_switch(engine->_currentExperiment->_thread);
 (*currentSample)["Experiment Id"] = engine->_currentExperiment->_experimentId;
 (*currentSample)["Current Generation"] = engine->_currentExperiment->_currentGeneration;

 _conduit->processSample(*currentSample);

 currentSample->_state = SampleState::finished;
 co_switch(engine->_currentExperiment->_thread);

 if (currentSample->_state != SampleState::uninitialized) _conduit->_logger->logError("Resuming a finished sample\n");
}

void korali::Conduit::start(korali::Sample& sample)
{
 korali::Engine* engine = _engineStack.top();

 if (sample._state != SampleState::uninitialized) _logger->logError("Sample has already been initialized.\n");

 if (sample._isAllocated == false)
  sample._sampleThread = co_create(8192*sizeof(void*), korali::Conduit::coroutineWrapper);
 else
  _logger->logError("Sample thread is already allocated; has it executed before being re-started?\n");

 sample._state = SampleState::initialized;
 _currentSample = &sample;

 co_switch(sample._sampleThread);
}

void korali::Conduit::wait(korali::Sample& sample)
{
 korali::Engine* engine = _engineStack.top();

 while(sample._state == SampleState::waiting || sample._state == SampleState::initialized)
 {
  sample._state = SampleState::running;
  co_switch(sample._sampleThread);

  if (sample._state == SampleState::waiting || sample._state == SampleState::initialized) co_switch(engine->_thread);
 }

 size_t sampleId = sample["Sample Id"];
 engine->_currentExperiment->_sampleInfo["Samples"][sampleId] = sample._js.getJson();
 if (sample._isAllocated == true) { free(sample._sampleThread); sample._isAllocated = false; }
 sample._state = SampleState::uninitialized;

}

size_t korali::Conduit::waitAny(std::vector<korali::Sample>& samples)
{
 korali::Engine* engine = _engineStack.top();
 bool isFinished = false;
 size_t currentSample;

 while (isFinished == false)
 {
  for (currentSample = 0; currentSample < samples.size(); currentSample++)
  {
   if (samples[currentSample]._state == SampleState::waiting || samples[currentSample]._state == SampleState::initialized)
   {
    samples[currentSample]._state = SampleState::running;
    co_switch(samples[currentSample]._sampleThread);
   }

   if (samples[currentSample]._state == SampleState::finished)
   {
    size_t sampleId = samples[currentSample]["Sample Id"];
    engine->_currentExperiment->_sampleInfo["Samples"][sampleId] = samples[currentSample]._js.getJson();
    if (samples[currentSample]._isAllocated == true) { free(samples[currentSample]._sampleThread); samples[currentSample]._isAllocated = false; }
    samples[currentSample]._state = SampleState::uninitialized;
    isFinished = true;
    break;
   }
  }

  if (isFinished == false) co_switch(engine->_thread);
 }

 return currentSample;
}

void korali::Conduit::waitAll(std::vector<korali::Sample>& samples)
{
 korali::Engine* engine = _engineStack.top();
 bool isFinished = false;

 while (isFinished == false)
 {
  isFinished = true;

  for (size_t i = 0; i < samples.size(); i++)
   if (samples[i]._state == SampleState::waiting || samples[i]._state == SampleState::initialized)
   {
    isFinished = false;
    samples[i]._state = SampleState::running;
    co_switch(samples[i]._sampleThread);
   }

  if (isFinished == false) co_switch(engine->_thread);
 }

 for (size_t i = 0; i < samples.size(); i++)
 {
  size_t sampleId = samples[i]["Sample Id"];
  engine->_currentExperiment->_sampleInfo["Samples"][sampleId] = samples[i]._js.getJson();
  if (samples[i]._isAllocated == true) { free(samples[i]._sampleThread); samples[i]._isAllocated = false; }
  samples[i]._state = SampleState::uninitialized;
 }

}
