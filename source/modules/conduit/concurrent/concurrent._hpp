#ifndef _KORALI_CONDUIT_EXTERNAL_HPP_
#define _KORALI_CONDUIT_EXTERNAL_HPP_

#include "modules/conduit/conduit.hpp"
#include <sys/types.h>
#include <unistd.h>
#include <queue>
#include <chrono>
#include <vector>
#include <map>

namespace korali { namespace conduit {

class Concurrent : public korali::Conduit {

 private:

 void worker(int workerId);

 public:

 /**
   * @brief PID of worker processes
   */
 std::vector<pid_t> _workerPids;

 /**
   * @brief OS Pipe to handle result communication coming from worker processes
   */
 std::vector<std::vector<int>> _resultPipe;

 /**
  * @brief OS Pipe to handle sample parameter communication to worker processes
  */
 std::vector<std::vector<int>> _inputsPipe;

 /**
  * @brief Queue with free worker threads
  */
 std::queue<int> _launcherQueue;

 void initServer() override;
 void processSample(korali::Sample& sample) override;
 void initialize() override;
 void stackEngine(korali::Engine*) override;
 void popEngine() override;
 void finalize() override;

};

} } // namespace korali::conduit

#endif // _KORALI_CONDUIT_EXTERNAL_HPP_
