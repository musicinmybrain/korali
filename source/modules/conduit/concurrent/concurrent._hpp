#ifndef _KORALI_CONDUIT_EXTERNAL_HPP_
#define _KORALI_CONDUIT_EXTERNAL_HPP_

#include "modules/conduit/conduit.hpp"
#include <chrono>
#include <map>
#include <queue>
#include <vector>

namespace korali
{
namespace conduit
{
class Concurrent : public Conduit
{
  private:
  void worker(int workerId);

  public:
  /**
   * @brief PID of worker processes
   */
  std::vector<pid_t> _workerPids;

  /**
   * @brief Worker Id for current workers - 0 for the master process
   */
  int _workerId;

  /**
   * @brief OS Pipe to handle result contents communication coming from worker processes
   */
  std::vector<std::vector<int>> _resultContentPipe;

  /**
   * @brief OS Pipe to handle result size communication coming from worker processes
   */
  std::vector<std::vector<int>> _resultSizePipe;

  /**
  * @brief OS Pipe to handle sample parameter communication to worker processes
  */
  std::vector<std::vector<int>> _inputsPipe;

  /**
  * @brief Queue with free worker threads
  */
  std::queue<int> _launcherQueue;

  bool isRoot() override;
  void initServer() override;
  void sendUpdate(knlohmann::json& update) override;
  void checkUpdates() override;
  void broadcastGlobals(std::string key, knlohmann::json &sampleJs) override;
  void processSample(Sample &sample) override;
  void initialize() override;
  void finalize() override;
  void stackEngine(Engine *) override;
  void popEngine() override;
};

} // namespace conduit
} // namespace korali

#endif // _KORALI_CONDUIT_EXTERNAL_HPP_
