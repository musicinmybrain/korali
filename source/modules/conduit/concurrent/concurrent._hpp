#ifndef _KORALI_CONDUIT_EXTERNAL_HPP_
#define _KORALI_CONDUIT_EXTERNAL_HPP_

#include "modules/conduit/conduit.hpp"
#include <chrono>
#include <map>
#include <vector>

namespace korali
{
namespace conduit
{
class Concurrent : public Conduit
{
  public:
  /**
   * @brief PID of worker processes
   */
  std::vector<pid_t> _workerPids;

  /**
   * @brief Worker Id for current workers - 0 for the master process
   */
  int _workerId;

  /**
   * @brief OS Pipe to handle result contents communication coming from worker processes
   */
  std::vector<std::vector<int>> _resultContentPipe;

  /**
   * @brief OS Pipe to handle result size communication coming from worker processes
   */
  std::vector<std::vector<int>> _resultSizePipe;

  /**
  * @brief OS Pipe to handle sample parameter communication to worker processes
  */
  std::vector<std::vector<int>> _inputsPipe;

  bool isRoot() override;
  void initServer() override;
  void initialize() override;
  void finalize() override;

  void stackEngine(Engine *engine) override;
  void popEngine() override;

  std::vector<knlohmann::json> gatherMessagesFromSamples() override;
  void broadcastMessageToWorkers(knlohmann::json &message) override;
  void sendMessageToEngine(knlohmann::json &message) override;
  knlohmann::json recvMessageFromEngine() override;
  knlohmann::json recvMessageFromSample(Sample &sample) override;
  void sendMessageToSample(Sample &sample, knlohmann::json &message) override;
};

} // namespace conduit
} // namespace korali

#endif // _KORALI_CONDUIT_EXTERNAL_HPP_
