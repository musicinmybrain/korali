#include "engine.hpp"
#include "modules/conduit/concurrent/concurrent.hpp"
#include "modules/experiment/experiment.hpp"
#include "modules/problem/problem.hpp"
#include "modules/solver/solver.hpp"
#include "sample/sample.hpp"
#include <fcntl.h>
#include <sched.h>
#include <sys/types.h>
#include <sys/wait.h>

#define BUFFERSIZE 4096

using namespace std;

namespace korali
{
namespace conduit
{
void Concurrent::initialize()
{
  // Setting workerId to -1 to identify master process
  _workerId = -1;

  if (_concurrentJobs < 1) KORALI_LOG_ERROR("You need to define at least 1 concurrent job(s) for external models \n");
  _resultSizePipe.clear();
  _resultContentPipe.clear();
  _inputsPipe.clear();
  while (!_workerQueue.empty()) _workerQueue.pop();

  for (size_t i = 0; i < _concurrentJobs; i++) _resultSizePipe.push_back(vector<int>(2));
  for (size_t i = 0; i < _concurrentJobs; i++) _resultContentPipe.push_back(vector<int>(2));
  for (size_t i = 0; i < _concurrentJobs; i++) _inputsPipe.push_back(vector<int>(2));
  for (size_t i = 0; i < _concurrentJobs; i++) _workerQueue.push(i);

  // Opening Inter-process communicator pipes
  for (size_t i = 0; i < _concurrentJobs; i++)
  {
    if (pipe(_inputsPipe[i].data()) == -1) KORALI_LOG_ERROR("Unable to create inter-process pipe. \n");
    if (pipe(_resultSizePipe[i].data()) == -1) KORALI_LOG_ERROR("Unable to create inter-process pipe. \n");
    if (pipe(_resultContentPipe[i].data()) == -1) KORALI_LOG_ERROR("Unable to create inter-process pipe. \n");
    fcntl(_resultSizePipe[i][0], F_SETFL, fcntl(_resultSizePipe[i][0], F_GETFL) | O_NONBLOCK);
    fcntl(_resultSizePipe[i][1], F_SETFL, fcntl(_resultSizePipe[i][1], F_GETFL) | O_NONBLOCK);
    fcntl(_resultContentPipe[i][0], F_SETFL, fcntl(_resultContentPipe[i][0], F_GETFL));
    fcntl(_resultContentPipe[i][1], F_SETFL, fcntl(_resultContentPipe[i][1], F_GETFL));
  }
}

void Concurrent::finalize()
{
  auto terminationJs = knlohmann::json();
  terminationJs["Conduit Action"] = "Terminate";

  string terminationString = terminationJs.dump();
  size_t terminationStringSize = terminationString.size();

  for (size_t i = 0; i < _concurrentJobs; i++)
  {
    write(_inputsPipe[i][1], &terminationStringSize, sizeof(size_t));
    write(_inputsPipe[i][1], terminationString.c_str(), terminationStringSize * sizeof(char));
  }

  for (size_t i = 0; i < _concurrentJobs; i++)
  {
    int status;
    ::wait(&status);
  }

  for (size_t i = 0; i < _concurrentJobs; i++)
  {
    close(_resultContentPipe[i][1]); // Closing pipes
    close(_resultContentPipe[i][0]); // Closing pipes
    close(_resultSizePipe[i][1]);    // Closing pipes
    close(_resultSizePipe[i][0]);    // Closing pipes
    close(_inputsPipe[i][1]);        // Closing pipes
    close(_inputsPipe[i][0]);        // Closing pipes
  }

  Conduit::finalize();
}

void Concurrent::initServer()
{
  for (size_t i = 0; i < _concurrentJobs; i++)
  {
    pid_t processId = fork();
    if (processId == 0)
    {
     _workerId = i;
     worker();
    }
    _workerPids.push_back(processId);
  }
}

void Concurrent::worker()
{
  while (true)
  {
    auto actionJs = recvMessageFromEngine();

    if (actionJs["Conduit Action"] == "Terminate") exit(0);
    if (actionJs["Conduit Action"] == "Process Sample")
    {
      Engine *engine = _engineStack.top();
      auto expId = actionJs["Experiment Id"];
      Sample s;
      s._globals = &engine->_experimentVector[expId]->_globals;
      s._js.getJson() = actionJs;
      s.sampleLauncher();

      sendMessageToEngine(s._js.getJson());
    }
    if (actionJs["Conduit Action"] == "Broadcast Globals")
    {
      Engine *engine = _engineStack.top();
      auto expId = actionJs["Experiment Id"];
      auto key = actionJs["Globals"]["Key"].get<std::string>();
      engine->_experimentVector[expId]->_globals[key] = actionJs["Globals"]["Values"];
    }

    if (actionJs["Conduit Action"] == "Stack Engine") _engineStack.push(Engine::deserialize(actionJs["Engine"]));
    if (actionJs["Conduit Action"] == "Pop Engine") _engineStack.pop();
  }
}

void Concurrent::processSample(Sample &sample)
{
  Engine *engine = _engineStack.top();

  while (_workerQueue.empty())
  {
    sample._state = SampleState::waiting;
    co_switch(engine->_currentExperiment->_thread);
  }
  sample._workerId = _workerQueue.front();
  _workerQueue.pop();

  auto js = knlohmann::json();
  js["Start Time"] = chrono::duration<double>(chrono::high_resolution_clock::now() - _startTime).count() + _cumulativeTime;

  auto sampleJs = sample._js.getJson();
  sampleJs["Conduit Action"] = "Process Sample";
  sendMessageToSample(sample, sampleJs);

  sample._js.getJson() = recvMessageFromSample(sample);
  _workerQueue.push(sample._workerId);

  js["End Time"] = chrono::duration<double>(chrono::high_resolution_clock::now() - _startTime).count() + _cumulativeTime;
  js["Solver Id"] = engine->_currentExperiment->_experimentId;
  js["Current Generation"] = engine->_currentExperiment->_currentGeneration;
  __profiler["Timelines"]["Worker " + to_string(sample._workerId)] += js;
}

void Concurrent::broadcastMessageToWorkers(knlohmann::json& message)
{
 string messageString = message.dump();
 size_t messageStringSize = messageString.size();

 for (size_t i = 0; i < _concurrentJobs; i++)
 {
   write(_inputsPipe[i][1], &messageStringSize, sizeof(size_t));

   size_t curPos = 0;
   while (curPos < messageStringSize)
   {
     size_t bufSize = BUFFERSIZE;
     if (curPos + bufSize > messageStringSize) bufSize = messageStringSize - curPos;
     write(_inputsPipe[i][1], messageString.c_str() + curPos, bufSize * sizeof(char));
     curPos += bufSize;
   }
 }
}

void Concurrent::sendMessageToEngine(knlohmann::json& message)
{
 string messageString = message.dump();
 size_t messageSize = messageString.size();

 write(_resultSizePipe[_workerId][1], &messageSize, sizeof(size_t));

 size_t curPos = 0;
 while (curPos < messageSize)
 {
   size_t bufSize = BUFFERSIZE;
   if (curPos + bufSize > messageSize) bufSize = messageSize - curPos;
   write(_resultContentPipe[_workerId][1], messageString.c_str() + curPos, bufSize * sizeof(char));
   curPos += bufSize;
 }
}

knlohmann::json Concurrent::recvMessageFromEngine()
{
 size_t inputStringSize;
 read(_inputsPipe[_workerId][0], &inputStringSize, sizeof(size_t));

 char inputString[inputStringSize + BUFFERSIZE];

 size_t curPos = 0;
 while (curPos < inputStringSize)
 {
   size_t bufSize = BUFFERSIZE;
   if (curPos + bufSize > inputStringSize) bufSize = inputStringSize - curPos;
   read(_inputsPipe[_workerId][0], inputString + curPos, bufSize * sizeof(char));
   curPos += bufSize;
   sched_yield(); // Guarantees MacOs finishes the pipe reading
 }
 inputString[inputStringSize] = '\0';

 auto message = knlohmann::json::parse(inputString);

 return message;
}

knlohmann::json Concurrent::recvMessageFromSample(Sample& sample)
{
 Engine *engine = _engineStack.top();
 knlohmann::json message;

 int readBytes = -1;
 while (readBytes < 0)
 {
   // Check for child defunction
   for (size_t i = 0; i < _workerPids.size(); i++)
   {
     int status;
     pid_t result = waitpid(_workerPids[i], &status, WNOHANG);
     if (result != 0) KORALI_LOG_ERROR("Worker %i (Pid: %d) exited unexpectedly.\n", i, _workerPids[i]);
   }

   size_t resultStringSize;
   readBytes = read(_resultSizePipe[sample._workerId][0], &resultStringSize, sizeof(size_t));

   if (readBytes > 0)
   {
     char resultString[resultStringSize + BUFFERSIZE];

     size_t curPos = 0;
     while (curPos < resultStringSize)
     {
       size_t bufSize = BUFFERSIZE;
       if (curPos + bufSize > resultStringSize) bufSize = resultStringSize - curPos;
       read(_resultContentPipe[sample._workerId][0], resultString + curPos, bufSize * sizeof(char));
       curPos += bufSize;
       //sched_yield(); // Guarantees MacOs finishes the pipe reading
     }
     resultString[resultStringSize] = '\0';

     message = knlohmann::json::parse(resultString);
   }
   else
   {
     sample._state = SampleState::waiting;
     co_switch(engine->_currentExperiment->_thread);
   }
 }

 return message;
}

void Concurrent::sendMessageToSample(Sample& sample, knlohmann::json& message)
{
 string messageString = message.dump();
 size_t messageStringSize = messageString.size();

 write(_inputsPipe[sample._workerId][1], &messageStringSize, sizeof(size_t));
 write(_inputsPipe[sample._workerId][1], messageString.c_str(), messageStringSize * sizeof(char));
}

bool Concurrent::isRoot()
{
  return _workerId == -1;
}

} // namespace conduit

} // namespace korali
