#include "engine.hpp"
#include "modules/conduit/concurrent/concurrent.hpp"
#include "modules/experiment/experiment.hpp"
#include "modules/problem/problem.hpp"
#include "modules/solver/solver.hpp"
#include <fcntl.h>
#include <sched.h>
#include <sys/types.h>
#include <sys/wait.h>

#define BUFFERSIZE 4096

using namespace std;

namespace korali
{
namespace conduit
{
void Concurrent::initialize()
{
  if (_concurrentJobs < 1) KORALI_LOG_ERROR("You need to define at least 1 concurrent job(s) for external models \n");
  _resultPipe.clear();
  _inputsPipe.clear();
  while (!_launcherQueue.empty()) _launcherQueue.pop();

  for (size_t i = 0; i < _concurrentJobs; i++) _resultPipe.push_back(vector<int>(2));
  for (size_t i = 0; i < _concurrentJobs; i++) _inputsPipe.push_back(vector<int>(2));
  for (size_t i = 0; i < _concurrentJobs; i++) _launcherQueue.push(i);

  // Opening Inter-process communicator pipes
  for (size_t i = 0; i < _concurrentJobs; i++)
  {
    if (pipe(_inputsPipe[i].data()) == -1) KORALI_LOG_ERROR("Unable to create inter-process pipe. \n");
    if (pipe(_resultPipe[i].data()) == -1) KORALI_LOG_ERROR("Unable to create inter-process pipe. \n");
    fcntl(_resultPipe[i][0], F_SETFL, fcntl(_resultPipe[i][0], F_GETFL) | O_NONBLOCK);
    fcntl(_resultPipe[i][1], F_SETFL, fcntl(_resultPipe[i][1], F_GETFL) | O_NONBLOCK);
  }
}

void Concurrent::finalize()
{
  auto terminationJs = knlohmann::json();
  terminationJs["Conduit Action"] = "Terminate";

  string terminationString = terminationJs.dump();
  size_t terminationStringSize = terminationString.size();

  for (size_t i = 0; i < _concurrentJobs; i++)
  {
    write(_inputsPipe[i][1], &terminationStringSize, sizeof(size_t));
    write(_inputsPipe[i][1], terminationString.c_str(), terminationStringSize * sizeof(char));
  }

  for (size_t i = 0; i < _concurrentJobs; i++)
  {
    int status;
    ::wait(&status);
  }

  for (size_t i = 0; i < _concurrentJobs; i++)
  {
    close(_resultPipe[i][1]); // Closing pipes
    close(_resultPipe[i][0]); // Closing pipes
    close(_inputsPipe[i][1]); // Closing pipes
    close(_inputsPipe[i][0]); // Closing pipes
  }

  Conduit::finalize();
}

void Concurrent::initServer()
{
  for (size_t i = 0; i < _concurrentJobs; i++)
  {
    pid_t processId = fork();
    if (processId == 0) worker(i);
    _workerPids.push_back(processId);
  }
}

void Concurrent::worker(int workerId)
{
  _workerId = workerId;

  while (true)
  {
    size_t inputStringSize;
    read(_inputsPipe[workerId][0], &inputStringSize, sizeof(size_t));

    char inputString[inputStringSize + BUFFERSIZE];

    size_t curPos = 0;
    while (curPos < inputStringSize)
    {
      size_t bufSize = BUFFERSIZE;
      if (curPos + bufSize > inputStringSize) bufSize = inputStringSize - curPos;
      read(_inputsPipe[workerId][0], inputString + curPos, bufSize * sizeof(char));
      curPos += bufSize;
      sched_yield(); // Guarantees MacOs finishes the pipe reading
    }
    inputString[inputStringSize] = '\0';

    auto actionJs = knlohmann::json::parse(inputString);

    if (actionJs["Conduit Action"] == "Terminate") exit(0);
    if (actionJs["Conduit Action"] == "Process Sample")
    {
      Sample s;
      s._globals = &_globals;
      s._js.getJson() = actionJs;
      s.sampleLauncher();

      string resultString = s._js.getJson().dump();
      size_t resultStringSize = resultString.size();

      write(_resultPipe[_workerId][1], &resultStringSize, sizeof(size_t));
      write(_resultPipe[_workerId][1], resultString.c_str(), resultStringSize * sizeof(char));
    }
    if (actionJs["Conduit Action"] == "Broadcast Globals") _globals = actionJs;
    if (actionJs["Conduit Action"] == "Stack Engine") _engineStack.push(Engine::deserialize(actionJs["Engine"]));
    if (actionJs["Conduit Action"] == "Pop Engine") _engineStack.pop();
  }
}

void Concurrent::processSample(Sample &sample)
{
  Engine *engine = _engineStack.top();

  int launcherId = -1;

  while (_launcherQueue.empty())
  {
    sample._state = SampleState::waiting;
    co_switch(engine->_currentExperiment->_thread);
  }
  launcherId = _launcherQueue.front();
  _launcherQueue.pop();

  auto js = knlohmann::json();
  js["Start Time"] = chrono::duration<double>(chrono::high_resolution_clock::now() - _startTime).count() + _cumulativeTime;

  auto sampleJs = sample._js.getJson();
  sampleJs["Conduit Action"] = "Process Sample";

  string inputString = sampleJs.dump();
  size_t inputStringSize = inputString.size();

  write(_inputsPipe[launcherId][1], &inputStringSize, sizeof(size_t));
  write(_inputsPipe[launcherId][1], inputString.c_str(), inputStringSize * sizeof(char));

  int readBytes = -1;
  while (readBytes < 0)
  {
    // Check for child defunction
    for (size_t i = 0; i < _workerPids.size(); i++)
    {
      int status;
      pid_t result = waitpid(_workerPids[i], &status, WNOHANG);
      if (result != 0) KORALI_LOG_ERROR("Worker %i (Pid: %d) exited unexpectedly.\n", i, _workerPids[i]);
    }

    size_t resultStringSize;
    readBytes = read(_resultPipe[launcherId][0], &resultStringSize, sizeof(size_t));

    if (readBytes > 0)
    {
      char resultString[resultStringSize + 1];
      while (read(_resultPipe[launcherId][0], resultString, resultStringSize * sizeof(char)) < 0)
        ;

      resultString[resultStringSize] = '\0';
      sample._js.getJson() = knlohmann::json::parse(resultString);

      _launcherQueue.push(launcherId);
    }
    else
    {
      sample._state = SampleState::waiting;
      co_switch(engine->_currentExperiment->_thread);
    }
  }

  js["End Time"] = chrono::duration<double>(chrono::high_resolution_clock::now() - _startTime).count() + _cumulativeTime;
  js["Solver Id"] = engine->_currentExperiment->_experimentId;
  js["Current Generation"] = engine->_currentExperiment->_currentGeneration;
  __profiler["Timelines"]["Worker " + to_string(launcherId)] += js;
}

void Concurrent::stackEngine(Engine *engine)
{
  knlohmann::json engineJs;
  engineJs["Conduit Action"] = "Stack Engine";
  engine->serialize(engineJs["Engine"]);

  string engineString = engineJs.dump();
  size_t engineStringSize = engineString.size();

  for (size_t i = 0; i < _concurrentJobs; i++)
  {
    write(_inputsPipe[i][1], &engineStringSize, sizeof(size_t));

    size_t curPos = 0;
    while (curPos < engineStringSize)
    {
      size_t bufSize = BUFFERSIZE;
      if (curPos + bufSize > engineStringSize) bufSize = engineStringSize - curPos;
      write(_inputsPipe[i][1], engineString.c_str() + curPos, bufSize * sizeof(char));
      curPos += bufSize;
    }
  }
}

void Concurrent::popEngine()
{
  auto popJs = knlohmann::json();
  popJs["Conduit Action"] = "Pop Engine";

  string popString = popJs.dump();
  size_t popStringSize = popString.size();

  for (size_t i = 0; i < _concurrentJobs; i++)
  {
    write(_inputsPipe[i][1], &popStringSize, sizeof(size_t));
    write(_inputsPipe[i][1], popString.c_str(), popStringSize * sizeof(char));
  }
}

void Concurrent::broadcastGlobals(knlohmann::json &globalsJs)
{
  globalsJs["Conduit Action"] = "Broadcast Globals";
  string globalsString = globalsJs.dump();
  size_t globalsStringSize = globalsString.size();

  for (size_t i = 0; i < _concurrentJobs; i++)
  {
    write(_inputsPipe[i][1], &globalsStringSize, sizeof(size_t));

    size_t curPos = 0;
    while (curPos < globalsStringSize)
    {
      size_t bufSize = BUFFERSIZE;
      if (curPos + bufSize > globalsStringSize) bufSize = globalsStringSize - curPos;
      write(_inputsPipe[i][1], globalsString.c_str() + curPos, bufSize * sizeof(char));
      curPos += bufSize;
    }
  }
}

} // namespace conduit

} // namespace korali
