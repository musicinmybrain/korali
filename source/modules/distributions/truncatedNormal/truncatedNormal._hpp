#ifndef _KORALI_DISTRIBUTION_TRUNCATEDNORMAL_HPP_
#define _KORALI_DISTRIBUTION_TRUNCATEDNORMAL_HPP_

#include "modules/distributions/base.hpp"

namespace Korali { namespace Distribution {

class TruncatedNormal : public Korali::Distribution::Base {

 private:

   double _normalization;
   double _logNormalization;

 public:

 TruncatedNormal();

 void updateConditionals(const std::vector<std::string>& propertyNames, const std::vector<double>& propertyValues) override;
 void updateDistribution() override;

 void setProperty(std::string propertyName, double value) override;
 double getDensity(double x) override;
 double getLogDensity(double x) override;
 double getRandomNumber() override;

 void initialize() override;
 void finalize() override;
 void setConfiguration(nlohmann::json& js) override;
 void getConfiguration(nlohmann::json& js) override;
};

} } // namespace Korali::Distribution

#endif // _KORALI_DISTRIBUTION_TRUNCATEDNORMAL_HPP_
