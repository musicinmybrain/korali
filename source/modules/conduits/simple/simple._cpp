#include "korali.hpp"

void Korali::Conduit::Simple::initialize()
{

}

void Korali::Conduit::Simple::finalize()
{

}

void Korali::Conduit::Simple::evaluateSample(double* sampleArray, size_t sampleId)
{
 std::vector<double> sampleVector;
 for (size_t i = 0; i < _k->_problem->getVariableCount(); i++)
  sampleVector.push_back(sampleArray[i]);

 _k->_problem->runModel(sampleVector, sampleId);
 double fitness = _k->_problem->evaluateSampleFitness();

 _k->_modelEvaluationCount++;
 _k->_solver->processSample(sampleId, fitness);
}

void Korali::Conduit::Simple::checkProgress()
{

}

bool Korali::Conduit::Simple::isRoot()
{
 return true;
}

void Korali::Conduit::Simple::abort()
{
 exit(-1);
}
