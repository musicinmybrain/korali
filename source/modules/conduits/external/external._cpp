#include "korali.hpp"
#include <sys/wait.h>

void Korali::Conduit::External::initialize()
{
 if (_concurrentJobs < 1) Korali::logError("You need to define at least 1 concurrent job(s) for external models \n");
 for (int i = 0; i < _concurrentJobs; i++) _pipeDescriptors.push_back(std::vector<int>(2));
 for (int i = 0; i < _concurrentJobs; i++) _launcherQueue.push(i);
}

void Korali::Conduit::External::requestEvaluation(double* target, size_t targetId)
{
 while (_launcherQueue.empty()) checkProgress();

 int launcherId = _launcherQueue.front(); _launcherQueue.pop();

 // Opening Inter-process communicator pipes
 if (pipe(_pipeDescriptors[launcherId].data()) == -1) Korali::logError("Unable to create inter-process pipe. \n");

 pid_t processId = fork();

 _launcherIdToSamplerIdMap[launcherId] = targetId;
 _launcherIdToProcessIdMap[launcherId] = processId;
 _processIdMapToLauncherIdMap[processId] = launcherId;

 if (processId == 0)
 {
  std::vector<double> sampleVector;
  for (size_t i = 0; i < _k->_problem->getVariableCount(); i++)
   sampleVector.push_back(target[i]);

  _k->_problem->runModel(sampleVector, targetId);
  double evaluation = _k->_problem->getTargetEvaluation());

  write(_pipeDescriptors[launcherId][1], &evaluation, sizeof(double));
  exit(0);
 }

 _k->_modelEvaluationCount++;

}

void Korali::Conduit::External::checkProgress()
{
 int status;
 pid_t processId;

 processId = wait(&status);
 if (processId > 0)
 {
  int launcherId = _processIdMapToLauncherIdMap[processId];
  double evaluation = 0.0;
  size_t targetId = _launcherIdToSamplerIdMap[launcherId];
  read(_pipeDescriptors[launcherId][0], &evaluation, sizeof(double));
  _k->_solver->processEvaluation(targetId, evaluation);
  close(_pipeDescriptors[launcherId][1]); // Closing pipes
  close(_pipeDescriptors[launcherId][0]); // Closing pipes
  _launcherQueue.push(launcherId);
 }

}
