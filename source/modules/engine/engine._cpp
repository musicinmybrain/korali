#include "modules/engine/engine.hpp"
#include "modules/conduits/base.hpp"
#include "modules/solvers/base.hpp"
#include "modules/problems/base.hpp"
#include "auxiliars/koralimath.hpp"
#include <chrono>
#include <sys/types.h>
#include <sys/stat.h>
#include <cstdio>

Korali::Engine* Korali::_k;
std::vector<std::function<void(Korali::Sample&)>> Korali::__korali_models;

void Korali::Engine::start(bool isDryRun)
{
 _k = this;

 // Setting Run ID
 _runID = Korali::getTimehash();

 // Setting Configuration
 setConfiguration(_js);

 // Initializing Korali and its modules
 initialize();

 // If this is a worker process (not root), there's nothing else to do
 if (_conduit->isRoot() == false) return;

 // If this is a dry run and configuration succeeded, print sucess and return
 if (isDryRun)
 {
  saveState("dry.json");
  Korali::logInfo("Minimal",  "--------------------------------------------------------------------\n");
  Korali::logInfo("Minimal",  "Dry Run Successful.\n", _currentGeneration);
  Korali::logInfo("Minimal",  "--------------------------------------------------------------------\n");
  return;
 }

 // Saving initial state
 saveState("initial.json");

 auto startTime = std::chrono::system_clock::now();

 // Running Solver by generations until at least one termination criterion is satisfied
 while(_solver->checkTermination() == false)
 {
  auto t0 = std::chrono::system_clock::now();

  _currentGeneration++;
  _solver->runGeneration();

  auto t1 = std::chrono::system_clock::now();

  if (_currentGeneration % _consoleOutputFrequency == 0)
  {
   Korali::logInfo("Minimal",  "--------------------------------------------------------------------\n");
   Korali::logInfo("Minimal",  "Generation: #%zu\n", _currentGeneration);
   Korali::logInfo("Detailed", "Generation Time: %.3fs\n", std::chrono::duration<double>(t1-t0).count());
   _solver->printGeneration();
  }

  if (_currentGeneration % _resultsOutputFrequency == 0) saveState(_currentGeneration);
 }

 // Saving last generation and final.json
 saveState(_currentGeneration);
 saveState("final.json");

 auto endTime = std::chrono::system_clock::now();

 Korali::logInfo("Minimal", "--------------------------------------------------------------------\n");
 Korali::logInfo("Minimal", "%s finished correctly.\n", _solver->getType().c_str(), _currentGeneration);

 _solver->finalize();
 _problem->finalize();
 _conduit->finalize();

 Korali::logInfo("Minimal", "--------------------------------------------------------------------\n");
 Korali::logInfo("Minimal", "Total Generations: %lu\n", _currentGeneration);
 Korali::logInfo("Minimal", "Total Computational Model Evaluations: %lu\n", _modelEvaluationCount);
 Korali::logInfo("Minimal", "Elapsed Time: %.3fs\n", std::chrono::duration<double>(endTime-startTime).count());
 Korali::logInfo("Minimal", "Results saved to folder: '%s'\n", _resultsOutputPath.c_str());
}

void Korali::Engine::initialize()
{
 // Initializing Verbosity
 bool verbosityDefined = false;
 if (_consoleOutputVerbosity == "Silent")   verbosityDefined = true;
 if (_consoleOutputVerbosity == "Minimal")  verbosityDefined = true;
 if (_consoleOutputVerbosity == "Normal")   verbosityDefined = true;
 if (_consoleOutputVerbosity == "Detailed") verbosityDefined = true;
 if (verbosityDefined == false) Korali::logError("Incorrect or undefined Verbosity Level '%s'\n.", _consoleOutputVerbosity.c_str());

 Korali::setVerbosityLevel(_consoleOutputVerbosity);

 // Creating Results directory
 mkdir(_resultsOutputPath.c_str(), S_IRWXU | S_IRWXG | S_IROTH | S_IXOTH);

 // Initializing Modules
 _problem->initialize();
 _solver->initialize();
 _conduit->initialize();
}

void Korali::Engine::saveState(std::string fileName)
{
 // Updating run timestamp
 _timestamp = Korali::getTimestamp();

 // Getting configuration
 auto js = nlohmann::json();
 this->getConfiguration(js);

 // Only the root rank saves files
 if (!_conduit->isRoot()) return;
 fileName = "./" + _resultsOutputPath + "/" + fileName;
 saveJsonToFile(fileName.c_str(), js);
}

void Korali::Engine::saveState(int fileId)
{
 if (!_conduit->isRoot()) return;

 char fileName[256];

 sprintf(fileName, "s%05d.json", fileId);

 saveState(fileName);
}

void Korali::Engine::loadState(std::string fileName)
{
 _js = loadJsonFromFile(fileName.c_str());
}
