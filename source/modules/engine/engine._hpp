#ifndef _KORALI_ENGINE_HPP_
#define _KORALI_ENGINE_HPP_

#include <vector>
#include <functional>
#include "auxiliars/koralijson.hpp"
#include "modules/problems/base.hpp"
#include "modules/solvers/base.hpp"
#include "modules/conduits/base.hpp"

namespace Korali
{

class Engine : public Korali::Base {

 public:

 // Start functions
 void initialize();
 void start(bool isDryRun);
 void run() { start(false); }
 void dry() { start(true);  }

 // Python and Json Configuration Binding Methods
 nlohmann::json  _js;
 nlohmann::json& operator[](std::string key) { return _js[key]; }

 KoraliJsonWrapper _wr;
 KoraliJsonWrapper& getItem(const std::string& key)           { _wr._js = &(_js[key]); return _wr;}
 KoraliJsonWrapper& getItem(const unsigned long int& key)     { _wr._js = &(_js[key]); return _wr;}
 void setItem(const std::string& key, const std::string& val) { _js[key] = val; }
 void setItem(const std::string& key, const double& val)      { _js[key] = val; }
 void setItem(const std::string& key, const int& val)         { if(_js[key].is_boolean()) _js[key] = val == true; else _js[key] = val; }
 void setItem(const std::string& key, const bool& val)        { _js[key] = val; }

 // State save/load methods
 void loadState(std::string fileName);
 void saveState(std::string fileName);
 void saveState(int fileId);
};

extern Engine* _k;
extern std::vector<std::function<void(Korali::Model&)>> __korali_models;

} // namespace Korali

#endif // _KORALI_ENGINE_HPP_
