#include "modules/problem/sampling/sampling.hpp"

void korali::problem::Sampling::initialize()
{
  if (_k->_variables.size() == 0) korali::Logger::logError(__FILE__, __LINE__, "Sampling Evaluation problems require at least one variable.\n");
}

void korali::problem::Sampling::evaluate(korali::Sample &sample)
{
  sample.run(_probabilityFunction);

  double evaluation = sample.get<double>({"P(x)"}, __FILE__, __LINE__);

  // TODO: Check 0 <= P(x) <= 1
  // TODO: Use Lognormalization

  // If result is not a finite number, objective function evaluates to -Infinity
  if (std::isnan(evaluation))
    sample["P(x)"] = -korali::Inf;
  else
    sample["P(x)"] = evaluation;

  sample["F(x)"] = sample["P(x)"];
}
