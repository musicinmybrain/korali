#include "modules/problem/sampling/sampling.hpp"
#include "sample/sample.hpp"

namespace korali
{
namespace problem
{
void Sampling::initialize()
{
  if (_k->_variables.size() == 0) KORALI_LOG_ERROR("Sampling Evaluation problems require at least one variable.\n");
}

// TODO: clean up namings logP(x), F(x), .. (D.W.)
void Sampling::evaluate(Sample &sample)
{
  sample.run(_probabilityFunction);

  auto evaluation = KORALI_GET(double, sample, "logP(x)");

  // If result is not a finite number, objective function evaluates to -Infinity
  if (std::isnan(evaluation))
    sample["logP(x)"] = -Inf;
  else
    sample["logP(x)"] = evaluation;

  sample["F(x)"] = sample["logP(x)"];
}

void Sampling::evaluateGradient(korali::Sample &sample)
{
  sample.run(_probabilityFunction);

  auto evaluation = KORALI_GET(std::vector<double>, sample, "grad(logP(x))");
}

void Sampling::evaluateHessian(korali::Sample &sample)
{
  sample.run(_probabilityFunction);

  auto evaluation = KORALI_GET(std::vector<std::vector<double>>, sample, "H(logP(x))");
}

} // namespace problem

} // namespace korali
