#include "modules/problem/sampling/sampling.hpp"
#include "sample/sample.hpp"

__startNamespace__;

void __className__::initialize()
{
  if (_k->_variables.size() == 0) KORALI_LOG_ERROR("Sampling Evaluation problems require at least one variable.\n");
}

void __className__::evaluate(Sample &sample)
{
  sample.run(_probabilityFunction);

  const auto evaluation = KORALI_GET(double, sample, "logP(x)");

  sample["logP(x)"] = evaluation;
  sample["F(x)"] = evaluation;
}

void __className__::evaluateGradient(korali::Sample &sample)
{
  const size_t Nth = _k->_variables.size();
  const auto gradient = KORALI_GET(std::vector<double>, sample, "grad(logP(x))");
  if (gradient.size() != Nth)
    KORALI_LOG_ERROR("Dimension of Gradient must be %zu (is %zu).\n", Nth, gradient.size());
}

void __className__::evaluateHessian(korali::Sample &sample)
{
  const size_t Nth = _k->_variables.size();
  const auto hessian = KORALI_GET(std::vector<std::vector<double>>, sample, "H(logP(x))");

  if (hessian.size() != Nth)
    KORALI_LOG_ERROR("Outer dimension of Hessian matrix must be %zu (is %zu).\n", Nth, hessian.size());

  std::vector<double> flat_hessian(0);
  auto it = flat_hessian.begin();
  for (size_t i = 0; i < Nth; ++i)
  {
    if (hessian[i].size() != Nth)
      KORALI_LOG_ERROR("Inner dimension of Hessian matrix must be %zu (is %zu).\n", Nth, hessian[i].size());
    flat_hessian.insert(it, std::cbegin(hessian[i]), std::cend(hessian[i]));
    it = flat_hessian.end();
  }
  sample["H(logP(x))"] = flat_hessian;
}

__moduleAutoCode__;

__endNamespace__;
