#include "modules/problem/sampling/sampling.hpp"
#include "sample/sample.hpp"

@startNamespace

void @className::initialize()
{
  if (_k->_variables.size() == 0) KORALI_LOG_ERROR("Sampling Evaluation problems require at least one variable.\n");
}

void @className::evaluate(Sample &sample)
{
  sample.run(_probabilityFunction);

  auto evaluation = KORALI_GET(double, sample, "logP(x)");

  if (std::isnan(evaluation))
    sample["logP(x)"] = -Inf;
  else
    sample["logP(x)"] = evaluation;

  sample["F(x)"] = sample["logP(x)"];
}

void @className::evaluateGradient(korali::Sample &sample)
{
  size_t Nth = _k->_variables.size();
  auto gradient = KORALI_GET(std::vector<double>, sample, "grad(logP(x))");
  if (gradient.size() != Nth)
    KORALI_LOG_ERROR("Dimension of Gradient must be %zu (is %zu).\n", Nth, gradient.size());
}

void @className::evaluateHessian(korali::Sample &sample)
{
  size_t Nth = _k->_variables.size();
  auto hessian = KORALI_GET(std::vector<std::vector<double>>, sample, "H(logP(x))");

  if (hessian.size() != Nth)
    KORALI_LOG_ERROR("Outer dimension of Hessian matrix must be %zu (is %zu).\n", Nth, hessian.size());

  std::vector<double> flat_hessian(0);
  auto it = flat_hessian.begin();
  for (size_t i = 0; i < Nth; ++i)
  {
    if (hessian[i].size() != Nth)
      KORALI_LOG_ERROR("Inner dimension of Hessian matrix must be %zu (is %zu).\n", Nth, hessian[i].size());
    flat_hessian.insert(it, std::cbegin(hessian[i]), std::cend(hessian[i]));
    it = flat_hessian.end();
  }
  sample["H(logP(x))"] = flat_hessian;
}

@moduleAutoCode

@endNamespace
