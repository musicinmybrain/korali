#include "modules/problem/integration/integration.hpp"

void korali::problem::Integration::initialize()
{
  if (_k->_variables.size() == 0) _k->_logger->logError("Integration problems require at least one variable.\n");

  for (size_t i = 0; i < _k->_variables.size(); i++)
  {
    if (_k->_variables[i]->_numberOfGridpoints <= 0) _k->_logger->logError("'Number Of Gridpoints' for variable %s must be a strictly positive integer", _k->_variables[i]->_name.c_str());

    if (_k->_variables[i]->_upperBound <= _k->_variables[i]->_lowerBound) _k->_logger->logError("'Upper Bound' is not strictly bigger then 'Lower Bound' for variable %s.\n", _k->_variables[i]->_name.c_str());
    double intervalSize = _k->_variables[i]->_upperBound - _k->_variables[i]->_lowerBound;
    double deltaX = intervalSize / (_k->_variables[i]->_numberOfGridpoints - 1);

    if (_integrationMethod == "Monte Carlo")
    {
      bool foundDistribution = false;
      // Validate the _samplingDistribution names
      for (size_t j = 0; j < _k->_distributions.size(); j++)
        if (_k->_variables[i]->_samplingDistribution == _k->_distributions[j]->_name)
        {
          foundDistribution = true;
          _k->_variables[i]->_distributionIndex = j;
        }

      if (_k->_variables[i]->_samplingDistribution == " ")
        _k->_logger->logError("Please specify distribution to sample for variable %s\n", _k->_variables[i]->_name.c_str());
      else if (foundDistribution == false)
        _k->_logger->logError("Did not find distribution %s, specified by variable %s\n", _k->_variables[i]->_samplingDistribution.c_str(), _k->_variables[i]->_name.c_str());

      _k->_variables[i]->_quadratureWeights.resize(1);
      _k->_variables[i]->_quadratureWeights[0] = intervalSize / _k->_variables[i]->_numberOfGridpoints;
    }
    else if (_integrationMethod == "Custom")
    {
      if (_k->_variables[i]->_samplePoints.size() != _k->_variables[i]->_quadratureWeights.size()) _k->_logger->logError("Number of 'Sample Points' is not equal to number of 'Quadrature Points' provided for variable %s\n", _k->_variables[i]->_name.c_str());
    }
    else
    {
      _k->_variables[i]->_samplePoints.resize(_k->_variables[i]->_numberOfGridpoints);
      for (size_t j = 0; j < _k->_variables[i]->_numberOfGridpoints; j++)
        _k->_variables[i]->_samplePoints[j] = _k->_variables[i]->_lowerBound + j * deltaX;

      _k->_variables[i]->_quadratureWeights.resize(_k->_variables[i]->_numberOfGridpoints);
      if (_integrationMethod == "Rectangle")
      {
        for (size_t j = 0; j < _k->_variables[i]->_numberOfGridpoints; j++)
          _k->_variables[i]->_quadratureWeights[j] = deltaX;
      }
      else if (_integrationMethod == "Trapezoidal")
      {
        for (size_t j = 0; j < _k->_variables[i]->_numberOfGridpoints; j++)
          if (j > 0 && j < _k->_variables[i]->_numberOfGridpoints - 1)
            _k->_variables[i]->_quadratureWeights[j] = deltaX;
          else
            _k->_variables[i]->_quadratureWeights[j] = deltaX / 2.;
      }
      else if (_integrationMethod == "Simpson")
      {
        for (size_t j = 0; j < _k->_variables[i]->_numberOfGridpoints; j++)
          if (j > 0 && j < _k->_variables[i]->_numberOfGridpoints - 1)
          {
            if (j % 2 == 0)
              _k->_variables[i]->_quadratureWeights[j] = 2. * deltaX / 3.;
            else
              _k->_variables[i]->_quadratureWeights[j] = 4. * deltaX / 3.;
          }
          else
            _k->_variables[i]->_quadratureWeights[j] = deltaX / 3.;
      }
    }
  }
}

void korali::problem::Integration::execute(korali::Sample &sample)
{
  // Evaluating Sample
  sample.run(_integrand);

  std::string sampleString = "['Evaluation']";

  if (korali::JsonInterface::isDefined(sample._js.getJson(), sampleString) == false)
    _k->_logger->logError("The %s problem needs a function evaluation. Be sure that you assign a value to the %s attribute in the model definition.\n", _k->_problem->getType().c_str(), sampleString.c_str());

  double evaluation = sample["Evaluation"];
  if (std::isnan(evaluation)) _k->_logger->logError("The function evaluation returned NaN.\n");
}
