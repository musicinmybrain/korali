#include "modules/conduit/conduit.hpp"
#include "modules/problem/hierarchical/theta/theta.hpp"

void korali::problem::hierarchical::Theta::initialize()
{
  // Loading Psi-problem Experiment from path
  if (_psiProblemEngine.loadState(_psiProblemPath) == false) _k->_logger->logError("Error loading psi problem results from: %s...\n", _psiProblemPath.c_str());
  _psiProblemEngine._engine = _k->_engine;
  _psiProblemEngine.initialize();

  if (_thetaProblemEngine.loadState(_thetaProblemPath) == false) _k->_logger->logError("Error loading theta problem results from: %s...\n", _thetaProblemPath.c_str());
  _thetaProblemEngine._engine = _k->_engine;
  _thetaProblemEngine.initialize();

  // Sub-problem correctness checks
  std::string problemName = _thetaProblemEngine["Problem"]["Type"];
  if (problemName.rfind("Bayesian", 0) != 0)
    _k->_logger->logError("The Hierarchical Bayesian (Theta) can only accept sub-problems of type 'Bayesian' but is of type: '%s'.\n", _thetaProblemEngine["Problem"]["Type"].get<std::string>().c_str());

  if (_thetaProblemEngine["Is Finished"] == false)
    _k->_logger->logError("The Hierarchical Bayesian (Theta) requires that the theta problem has run completely, but this one has not.\n");

  // Psi-problem correctness checks
  std::string psiProblemType = _psiProblemEngine["Problem"]["Type"];
  if (psiProblemType != "Hierarchical/Psi")
    _k->_logger->logError("The Hierarchical Bayesian (Theta) can only accept a psi-problem of type 'Bayesian/Hierarchical/Psi' but psi-Problem is of type: '%s'.\n", psiProblemType.c_str());

  // Cross-checks
  if (_psiProblemEngine["Problem"]["Conditional Priors"].size() != _thetaProblemEngine["Variables"].size())
    _k->_logger->logError("Sub-problem contains a different number of variables (%lu) than conditional priors in the Bayesian/Hierarchical/Psi problem (%lu).\n", _thetaProblemEngine["Variables"].size(), _psiProblemEngine["Problem"]["Conditional Priors"].size());

  // Now inheriting Sub problem's variables
  _k->_distributions = _thetaProblemEngine._distributions;
  _k->_variables = _thetaProblemEngine._variables;

  _thetaVariableCount = _thetaProblemEngine._variables.size();
  _psiVariableCount = _psiProblemEngine._variables.size();

  // Loading Psi problem results
  _psiProblemSampleCount = _psiProblemEngine["Solver"]["Chain Leaders LogLikelihoods"].size();
  _psiProblemSampleLogLikelihoods = _psiProblemEngine["Solver"]["Sample LogLikelihood Database"].get<std::vector<double>>();
  _psiProblemSampleLogPriors = _psiProblemEngine["Solver"]["Sample LogPrior Database"].get<std::vector<double>>();
  _psiProblemSampleCoordinates = _psiProblemEngine["Solver"]["Sample Database"].get<std::vector<std::vector<double>>>();

  for (size_t i = 0; i < _psiProblemSampleLogPriors.size(); i++)
  {
    double expPrior = exp(_psiProblemSampleLogPriors[i]);
    if (std::isfinite(expPrior) == false)
      _k->_logger->logError("Non finite (%lf) prior has been detected at sample %zu in Psi problem.\n", expPrior, i);
  }

  // Loading Theta problem results
  _thetaProblemSampleCount = _thetaProblemEngine["Solver"]["Chain Leaders LogLikelihoods"].size();
  _thetaProblemSampleLogLikelihoods = _thetaProblemEngine["Solver"]["Sample LogLikelihood Database"].get<std::vector<double>>();
  _thetaProblemSampleLogPriors = _thetaProblemEngine["Solver"]["Sample LogPrior Database"].get<std::vector<double>>();
  _thetaProblemSampleCoordinates = _thetaProblemEngine["Solver"]["Sample Database"].get<std::vector<std::vector<double>>>();

  for (size_t i = 0; i < _thetaProblemSampleLogPriors.size(); i++)
  {
    double expPrior = exp(_thetaProblemSampleLogPriors[i]);
    if (std::isfinite(expPrior) == false)
      _k->_logger->logError("Non finite (%lf) prior has been detected at sample %zu in Theta problem.\n", expPrior, i);
  }

  std::vector<double> logValues;
  logValues.resize(_thetaProblemSampleCount);

  _psiProblem = dynamic_cast<korali::problem::hierarchical::Psi *>(_psiProblemEngine._problem);

  for (size_t i = 0; i < _psiProblemSampleCount; i++)
  {
    korali::Sample psiSample;
    psiSample["Parameters"] = _psiProblemSampleCoordinates[i];

    _psiProblem->updateConditionalPriors(psiSample);

    for (size_t j = 0; j < _thetaProblemSampleCount; j++)
    {
      double logConditionalPrior = 0;
      for (size_t k = 0; k < _thetaVariableCount; k++)
        logConditionalPrior += _psiProblemEngine._distributions[_psiProblem->_conditionalPriorIndexes[k]]->getLogDensity(_thetaProblemSampleCoordinates[j][k]);

      logValues[j] = logConditionalPrior - _thetaProblemSampleLogPriors[j];
    }

    double localSum = -log(_thetaProblemSampleCount) + logSumExp(logValues);

    _precomputedLogDenominator.push_back(localSum);
  }

  korali::problem::Hierarchical::initialize();
}

void korali::problem::hierarchical::Theta::evaluateLogLikelihood(korali::Sample &sample)
{
  double logLikelihood = 0.0;

  std::vector<double> logValues;
  logValues.resize(_psiProblemSampleCount);

  for (size_t i = 0; i < _psiProblemSampleCount; i++)
  {
    korali::Sample psiSample;
    psiSample["Parameters"] = _psiProblemSampleCoordinates[i];

    _psiProblem->updateConditionalPriors(psiSample);

    double logConditionalPrior = 0.;
    for (size_t k = 0; k < _thetaVariableCount; k++)
      logConditionalPrior += _psiProblemEngine._distributions[_psiProblem->_conditionalPriorIndexes[k]]->getLogDensity(sample["Parameters"][k]);

    logValues[i] = logConditionalPrior - _precomputedLogDenominator[i];
  }

  sample["logLikelihood"] = -log(_psiProblemSampleCount) + logSumExp(logValues);
}
