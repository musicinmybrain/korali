#include "modules/conduit/conduit.hpp"
#include "modules/problem/hierarchical/thetaNew/thetaNew.hpp"

void korali::problem::hierarchical::ThetaNew::initialize()
{
  korali::problem::Hierarchical::initialize();

  // Loading Psi-problem Experiment from path
  /// TO REPLACE // if (_psiProblemExperiment.loadState(_psiProblemPath) == false) KORALI_LOG_ERROR("Error loading psi problem results from: %s...\n", _psiProblemPath.c_str());
  _psiProblemExperiment._engine = _k->_engine;
  _psiProblemExperiment.initialize();

  // Psi-problem correctness checks
  std::string psiProblemType = _psiProblemExperiment["Problem"]["Type"];
  if (psiProblemType != "Hierarchical/Psi")
    KORALI_LOG_ERROR("The Hierarchical Bayesian (Theta) can only accept a psi-problem of type 'Hierarchical/Psi' but psi-Problem is of type: '%s'.\n", psiProblemType.c_str());

  if (_psiProblemExperiment["Is Finished"] == false)
    KORALI_LOG_ERROR("The Hierarchical Bayesian (Theta New) requires that the psi-problem has run completely, but it has not.\n");

  // Cross-checks
  if (_psiProblemExperiment["Problem"]["Conditional Priors"].size() != _k->_variables.size())
    KORALI_LOG_ERROR("The problem contains a different number of variables (%lu) than conditional priors in the Hierarchical/Psi problem (%lu).\n", _k->_variables.size(), _psiProblemExperiment["Problem"]["Conditional Priors"].size());

  // Loading Psi problem results
  _psiProblemSampleCount = _psiProblemExperiment["Solver"]["Chain Leaders LogLikelihoods"].size();
  _psiProblemSampleLogLikelihoods = _psiProblemExperiment["Solver"]["Sample LogLikelihood Database"].get<std::vector<double>>();
  _psiProblemSampleLogPriors = _psiProblemExperiment["Solver"]["Sample LogPrior Database"].get<std::vector<double>>();
  _psiProblemSampleCoordinates = _psiProblemExperiment["Solver"]["Sample Database"].get<std::vector<std::vector<double>>>();

  for (size_t i = 0; i < _psiProblemSampleLogPriors.size(); i++)
  {
    double expPrior = exp(_psiProblemSampleLogPriors[i]);
    if (std::isfinite(expPrior) == false)
      KORALI_LOG_ERROR("Non finite (%lf) prior has been detected at sample %zu in subproblem.\n", expPrior, i);
  }
}

void korali::problem::hierarchical::ThetaNew::evaluateLogLikelihood(korali::Sample &sample)
{
  auto _psiProblem = dynamic_cast<korali::problem::hierarchical::Psi *>(_psiProblemExperiment._problem);

  size_t Ntheta = _k->_variables.size();
  std::vector<double> logValues(_psiProblemSampleCount, 0.0);

  for (size_t i = 0; i < _psiProblemSampleCount; i++)
  {
    korali::Sample psiSample;
    psiSample["Parameters"] = _psiProblemSampleCoordinates[i];
    _psiProblem->updateConditionalPriors(psiSample);

    logValues[i] = 0.;
    for (size_t k = 0; k < Ntheta; k++)
      logValues[i] += _psiProblemExperiment._distributions[_psiProblem->_conditionalPriorIndexes[k]]->getLogDensity(sample["Parameters"][k]);
  }

  sample["logLikelihood"] = -log(_psiProblemSampleCount) + logSumExp(logValues);
}
