{

   "Results":
 [
   {
    "Name": [ "Sample Database" ],
    "Type": "std::vector<std::vector<double>>",
    "Description": "Collection of samples describing the probability distribution.",
    "Produced By": [ "SAEM" ]
   }
 ],


 "Available Operations":
 [
  {
   "Name": "Evaluate",
   "Description": "Evaluates a sample, given the problem description.",
   "Function": "evaluate"
  },
  {
   "Name": "Evaluate S",
   "Description": "Evaluates the S function, given the problem description, and specified latent variables.",
   "Function": "evaluateS"
  },
  {
   "Name": "Evaluate Phi",
   "Description": "Evaluates the phi function, given the problem description, and specified latent variables.",
   "Function": "evaluatePhi"
  },
  {
   "Name": "Evaluate Zeta",
   "Description": "Evaluates the zeta function, given the problem description, and specified latent variables.",
   "Function": "evaluateZeta"
  },
  {
   "Name": "Sample Latent Variables",
   "Description": "This might be confusing. Generate a number of samples of the latent variables, from the distribution represented by this latent problem, conditional on specific hyperparameters. The sample *object* should contain values for hyperparamters, and will contain the 'Samples' when the function returns.",
   "Function": "sampleLatent"
  },
  {
   "Name": "Evaluate logPrior",
   "Function": "evaluateLogPrior",
   "Description": "Evaluates the logPrior of the sample.",
   "Results": [ { "Name": "logPrior", "Description": "Contains a single number with the log prior evaluation of the sample." } ]
  },
  {
   "Name": "Evaluate logLikelihood",
   "Function": "evaluateLoglikelihood",
   "Description": "Evaluates the logLikelihood of the sample.",
   "Results": [ { "Name": "logLikelihood", "Description": "Contains a single number with the log likelihood evaluation of the sample." } ]
  },
  {
   "Name": "Evaluate logPosterior",
   "Function": "evaluateLogPosterior",
   "Description": "Evaluates the logLikelihood of the sample.",
   "Results": [ { "Name": "logPosterior", "Description": "Contains a single number with the log posterior evaluation of the sample." } ]
  }
 ],

  "Configuration Settings":
 [
   {
    "Name": [ "S Of Likelihood Model" ],
    "Type": "std::function<void(korali::Sample&)>",
    "Description": "Utilizes parameters set for the sample: 'Latent Variables'. Needs to set parameter: 'S'.  Note for the following: The Latent problem does not know about 'data'; any data needs to be inserted into S beforehand. -- Functions S, zeta and phi together compose the user-defined log-likelihood model, as p(data, psi | theta) = exp{ -zeta(theta) + < S(data, psi), phi(theta) > }, where <., .> is the Euclidean scalar product. (We require a distribution from the exponential family.) The distribution can be unnormalized. It should return the value of the Log Likelihood of a given data sample, given latent variables psi and hyperparameters theta."

   },
   {
    "Name": [ "Zeta Of Likelihood Model" ],
    "Type": "std::function<void(korali::Sample&)>",
     "Description": "Utilizes parameters set for the sample: 'Hyperparameters'. Needs to set parameter: 'zeta'. Functions S, zeta and phi together compose the user-defined log-likelihood model, as p(data, psi | theta) = exp{ -zeta(theta) + < S(data, psi), phi(theta) > }, where <., .> is the Euclidean scalar product. (We require a distribution from the exponential family.) The distribution can be unnormalized. It should return the value of the Log Likelihood of a given data sample and given latent variables psi."
  },
   {
    "Name": [ "Phi Of Likelihood Model" ],
    "Type": "std::function<void(korali::Sample&)>",
    "Description": "Utilizes parameters set for the sample:  'Hyperparameters'. Needs to set parameter: 'phi'. Functions S, zeta and phi together compose the user-defined log-likelihood model, as p(data, psi | theta) = exp{ -zeta(theta) + < S(data, psi), phi(theta) > }, where <., .> is the Euclidean scalar product. (We require a distribution from the exponential family.) The distribution can be unnormalized. It should return the value of the Log Likelihood of a given data sample and given latent variables psi."
 },
      {
     "Name": ["S Dimension"],
     "Type": "size_t",
     "Description": "Dimensionality of the vectors S and phi."
   },
      {
    "Name": [ "Latent Variable Sampler" ],
    "Type": "std::function<void(korali::Sample&)>",
    "Description": "Stores a user-defined sampler. Needed for running SAEM on this problem. The sampler should store samples of the latent variables in the 'sample' object, as sample['Samples'] = ..., given a value for the parameters of the distribution (any datapoints need to be stored/processed internally). (Input: a korali::Sample object, with a list of hyperparameters that can be accessed as sample['Hyperparameters'][0], etc. and number of samples sample['Number Samples']; can also access sample['Number Of Latent Variables']. Sets: vector<vector<double>> (one vector per sample). )"
   }
 ],

 "Variables Configuration":
 [
   {
    "Name": [ "Bayesian Type" ],
    "Type": "std::string",
    "Options": [
                { "Value": "Latent", "Description": "The variable is part of the sample processed by the model, but we are not given values for it." },
                { "Value": "Hyperparameter", "Description": "The variable is used by the likelihood model as statistical parameter." }
               ],
    "Description": "Specifies the purpose of the variable for the bayesian model."
   },
   {
     "Name": ["Upper Bound"],
     "Type": "double",
     "Description": "Upper limit for this variable; only needed for Hyperparameters. Used when optimizing for psi (the hyperparameters) in the M-step."
   },
   {
     "Name": ["Lower Bound"],
     "Type": "double",
     "Description": "Lower limit for this variable; only needed for Hyperparameters. Used when optimizing for psi (the hyperparameters) in the M-step."
   }
 ],

   "Internal Settings":
 [
   {
     "Name": "Latent Variable Indices",
     "Type": "std::vector<size_t>",
     "Description": "Indices to find the latent variables among all variables"
   },
   {
     "Name": "Hyperparameter Variable Indices",
     "Type": "std::vector<size_t>",
     "Description": "Indices to find the hyperparameters among all variables"
   }
 ],

 "Module Defaults":
 {
    "Latent Variable Sampler": "nullptr"
 },

 "Variable Defaults":
 {
  "Lower Bound": -1.0,
  "Upper Bound": -1.0
 }


}
