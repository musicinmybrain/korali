#include "modules/problem/bayesian/latent/exponentialLatent/exponentialLatent.hpp"
#include <vector>

/*! @brief The problem initialization; here, remember indices of latent vs. hyperparameters for easy access later on */
void korali::problem::bayesian::latent::ExponentialLatent::initialize()
{
  korali::problem::Bayesian::initialize();

  _latentVariableIndices.clear();
  _hyperparameterVariableIndices.clear();

  for (size_t i = 0; i < _k->_variables.size(); i++)
  {
    std::string typeString = _k->_variables[i]->_bayesianType;
    bool recognizedType = false;
    if (typeString == "Hyperparameter")
    {
      _hyperparameterVariableIndices.push_back(i);
      recognizedType = true;
    }
    if (typeString == "Latent")
    {
      _latentVariableIndices.push_back(i);
      recognizedType = true;
    }
    if (recognizedType == false) KORALI_LOG_ERROR("Incorrect Bayesian variable type selected: %s.\n", typeString.c_str());
  }
}

/*! @brief Given 'Hyperparameters' and 'Latent Variables' (parameters the sample is expected to have), calculate
          the total log probability.
*/
void korali::problem::bayesian::latent::ExponentialLatent::evaluateLogPosterior(korali::Sample &sample)
{
  // Evaluate the user-given probability distribution for latent- and hyperparameter values given in the sample
  sample.run(_sOfLikelihoodModel);
  sample.run(_zetaOfLikelihoodModel);
  sample.run(_phiOfLikelihoodModel);
  // -> Assume these set: sample["S"], sample["zeta"] and sample["phi"]

  if (!sample.contains("S")) KORALI_LOG_ERROR("The specified likelihood model did not assign the value: 'S' to the sample.\n");
  if (!sample.contains("zeta")) KORALI_LOG_ERROR("The specified likelihood model did not assign the value: 'zeta' to the sample.\n");
  if (!sample.contains("phi")) KORALI_LOG_ERROR("The specified likelihood model did not assign the value: 'phi' to the sample.\n");

  auto zetaValue = KORALI_GET(double, sample, "zeta");
  auto sValues = KORALI_GET(std::vector<double>, sample, "S");
  auto phiValues = KORALI_GET(std::vector<double>, sample, "phi");

  sample["Log Posterior"] = -zetaValue + std::inner_product(std::begin(sValues), std::end(sValues), std::begin(phiValues), 0.0);
}

/*! @brief run the user defined sampler.
    Input sample needs to contain:
      - sample["Hyperparameters"]
      - sample["Number Samples"]

    Values that will be set:
      - sample["Samples"]
 */
void korali::problem::bayesian::latent::ExponentialLatent::sampleLatent(korali::Sample &sample)
{
  sample["Number Of Latent Variables"] = _latentVariableIndices.size();
  sample.run(_latentVariableSampler);
}

/*! @brief Evaluate the user-defined 'S' function (the sufficient statistics of the distribution).
          sample is expected to contain parameter 'Latent Variables' */
void korali::problem::bayesian::latent::ExponentialLatent::evaluateS(korali::Sample &sample)
{
  sample.run(_sOfLikelihoodModel);
}

/*! @brief Evaluate the user-defined 'phi' function (log-llh = -zeta + <S, phi>).
          sample is expected to contain parameter 'Hyperparameters' */
void korali::problem::bayesian::latent::ExponentialLatent::evaluatePhi(korali::Sample &sample)
{
  sample.run(_phiOfLikelihoodModel);
}

/*! @brief Evaluate the user-defined 'zeta' function (~ the log-normalization constant of the distribution).
          sample is expected to contain parameter 'Hyperparameters' */
void korali::problem::bayesian::latent::ExponentialLatent::evaluateZeta(korali::Sample &sample)
{
  sample.run(_zetaOfLikelihoodModel);
}
