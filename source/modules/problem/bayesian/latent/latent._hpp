#ifndef _KORALI_PROBLEM_BAYESIAN_LATENT_HPP_
#define _KORALI_PROBLEM_BAYESIAN_LATENT_HPP_

#include "modules/problem/bayesian/bayesian.hpp"

namespace korali
{
namespace problem
{
namespace bayesian
{
class Latent : public korali::problem::Bayesian
{
  public:
  /**
  * @brief [Missing Description]
  * @param sample [Missing Description]
  */
  void evaluateLoglikelihood(korali::Sample &sample) override;

  /**
  * @brief [Missing Description]
  * @param sample [Missing Description]
  */
  void evaluateFisherInformation(korali::Sample &sample) override;

  /**
   * @brief [Missing Description]
   * @param sample [Missing Description]
   */
  void sampleLatent(korali::Sample &sample);

  /**
   * @brief [Missing Description]
   * @param sample [Missing Description]
   */
  void evaluateS(korali::Sample &sample);

  /**
   * @brief [Missing Description]
   * @param sample [Missing Description]
   */
  void evaluatePhi(korali::Sample &sample);

  /**
   * @brief [Missing Description]
   * @param sample [Missing Description]
   */
  void evaluateZeta(korali::Sample &sample);

  /**
   * @brief [Missing Description]
   * @param sample [Missing Description]
   */
  void evaluateLoglikelihoodGradient(korali::Sample &sample) override;

  void initialize() override;
};

} // namespace bayesian
} // namespace problem
} // namespace korali

#endif // _KORALI_PROBLEM_BAYESIAN_LATENT_HPP_
