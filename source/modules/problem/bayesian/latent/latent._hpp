#ifndef _KORALI_PROBLEM_BAYESIAN_LATENT_HPP_
#define _KORALI_PROBLEM_BAYESIAN_LATENT_HPP_

#include "modules/problem/bayesian/bayesian.hpp"

namespace korali { namespace problem { namespace bayesian {

/*! @brief (Will become abstract) class for problems of type 'latent', which come with observed and latent variables, and hyperparameters. */
class Latent : public korali::problem::Bayesian
{
 public:
//  std::vector<size_t> _latentVariableIndices;
//  std::vector<size_t> _hyperparameterVariableIndices;


 void evaluateLogLikelihood(korali::Sample& sample) override;
 void evaluateFisherInformation(korali::Sample& sample) override;
 void sampleLatent(korali::Sample& sample);
 void evaluateS(korali::Sample& sample);
 void evaluatePhi(korali::Sample& sample);
 void evaluateZeta(korali::Sample& sample);
 void evaluateLogLikelihoodGradient(korali::Sample& sample) override;
 // void evaluateLogPrior(korali::Sample& sample) override;
 // void evaluateLogPosterior(korali::Sample& sample) override;
 void initialize() override;

};

} } } // namespace korali::problem::evaluation::bayesian::Inference


#endif // _KORALI_PROBLEM_BAYESIAN_LATENT_HPP_
