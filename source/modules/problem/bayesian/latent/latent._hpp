#ifndef _KORALI_PROBLEM_BAYESIAN_LATENT_HPP_
#define _KORALI_PROBLEM_BAYESIAN_LATENT_HPP_

#include "modules/problem/bayesian/bayesian.hpp"

namespace korali
{
namespace problem
{
namespace bayesian
{
class Latent : public korali::problem::Bayesian
{
  public:
  /** @brief Class considered abstract; do not use.
        @param sample : A sample.*/
  virtual void evaluateLoglikelihood(korali::Sample &sample) override;
  /**
   * @brief Class considered abstract; do not use.
   * @param sample : A sample.
   */
  virtual void evaluateLogPrior(korali::Sample &sample); // override / hide bayesian's function
  /**
   * @brief Class considered abstract; do not use.
   * @param sample: A sample.
   */
  virtual void evaluateLogPosterior(korali::Sample &sample); // override / hide bayesian's function

  /** @brief The problem initialization; just calls the initialization from Bayesian. */
  virtual void initialize() override;
};

} // namespace bayesian
} // namespace problem
} // namespace korali

#endif // _KORALI_PROBLEM_BAYESIAN_LATENT_HPP_
