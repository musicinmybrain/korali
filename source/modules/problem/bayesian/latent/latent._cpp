#include "modules/problem/bayesian/latent/latent.hpp"

#include <vector>

void korali::problem::bayesian::Latent::initialize()
{

  korali::problem::Bayesian::initialize();

 _latentVariableIndices.clear();
 _hyperparameterVariableIndices.clear();


 for (size_t i = 0; i < _k->_variables.size(); i++)
 {
  std::string typeString = _k->_variables[i]->_bayesianType;
  bool recognizedType = false;
  if (typeString == "Hyperparameter")   { _hyperparameterVariableIndices.push_back(i);   recognizedType = true; }
  if (typeString == "Latent")   { _latentVariableIndices.push_back(i);   recognizedType = true; }
  if (recognizedType == false) korali::logError("Incorrect Bayesian variable type selected: %s.\n", typeString.c_str());
 }

}

void korali::problem::bayesian::Latent::evaluateLogLikelihood(korali::Sample& sample){
    //TODO does it work?
    // Evaluate the user-given probability distribution for latent- and hyperparameter values given in the sample
  sample.run(_sOfLikelihoodModel);
  sample.run(_zetaOfLikelihoodModel);
  sample.run(_phiOfLikelihoodModel);
  // -> Assume these set: sample["S"], sample["zeta"] and sample["phi"]

  if (! sample.contains("S")) korali::logError("The specified likelihood model did not assign the value: 'S' to the sample.\n");
  if (! sample.contains("zeta")) korali::logError("The specified likelihood model did not assign the value: 'zeta' to the sample.\n");
  if (! sample.contains("phi")) korali::logError("The specified likelihood model did not assign the value: 'phi' to the sample.\n");

  double _zetaValue = sample["zeta"].get<double>();
  std::vector<double> _sValues = sample["S"].get<std::vector<double>>();
  std::vector<double> _phiValues = sample["phi"].get<std::vector<double>>();



  sample["logLikelihood"] = - _zetaValue + std::inner_product(std::begin(_sValues), std::end(_sValues),
                                                                                    std::begin(_phiValues), 0.0);

}

//void korali::problem::bayesian::Latent::evaluateLogPrior(korali::Sample& sample){
//   //Already covered in parent classes
//
//}

//void korali::problem::bayesian::Latent::evaluateLogPosterior(korali::Sample& sample){
//    //Already covered in parent classes
//
//}