#ifndef _KORALI_PROBLEM_BAYESIAN_APPROXIMATE_HPP_
#define _KORALI_PROBLEM_BAYESIAN_APPROXIMATE_HPP_

#include "modules/problem/bayesian/bayesian.hpp"

namespace korali
{
namespace problem
{
namespace bayesian
{
class Approximate : public korali::problem::Bayesian
{
  private:
  /**
 * @brief Index of the Experiment variable containing the lower bound of the Truncated Normal distribution.
 */
  size_t lowerBoundVariableIndex;

  /**
  * @brief Index of the Experiment variable containing the upper bound of the Truncated Normal distribution.
  */
  size_t upperBoundVariableIndex;

  /**
  * @brief Index of the Experiment variable containing the mean of the Normal distribution.
  */
  size_t meanVariableIndex;

  /**
 * @brief Index of the Experiment variable containing the sigma of the Normal distribution.
 */
  size_t sigmaVariableIndex;

  /**
  * @brief Calculates the likelihood approximating it to a Truncated Normal distribution based on the reference data
  * @param sample A Korali Sample
  */
  void likelihoodTruncatedNormal(korali::Sample &sample);

  /**
  * @brief Calculates the likelihood approximating it to a Normal distribution based on the reference data
  * @param sample A Korali Sample
  */
  void likelihoodNormal(korali::Sample &sample);

  public:
  void evaluateLoglikelihood(korali::Sample &sample) override;
  void evaluateLoglikelihoodGradient(korali::Sample &sample) override;
  void evaluateFisherInformation(korali::Sample &sample) override;
  void initialize() override;
};

} // namespace bayesian
} // namespace problem
} // namespace korali

#endif // _KORALI_PROBLEM_BAYESIAN_APPROXIMATE_HPP_
