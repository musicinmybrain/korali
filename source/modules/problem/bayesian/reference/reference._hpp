#ifndef _KORALI_PROBLEM_BAYESIAN_REFERENCE_HPP_
#define _KORALI_PROBLEM_BAYESIAN_REFERENCE_HPP_

#include "modules/problem/bayesian/bayesian.hpp"
#include <vector>

namespace korali { namespace problem { namespace bayesian {

class Reference : public korali::problem::Bayesian
{
 private:

 const double _log2pi = 1.83787706640934533908193770912476;

 size_t sigmaVariableIndex;

 /**
  * @brief Precomputes the square distance between two vectors of the same size
  * @param x Vector x
  * @param y Vector y
  * @return Square distance of the vectors
  */
 double compute_sse( std::vector<double> x, std::vector<double> y );

 /**
  * @brief Precomputes the square distance between two vectors of the same size normalized by a third vector
  * @param f Vector f
  * @param g Vector g, the normalization vector
  * @param y Vector y
  * @return Normalized square distance of the vectors
  */
 double compute_normalized_sse( std::vector<double> f, std::vector<double> g, std::vector<double> y );

 /**
 * @brief Additive normal approach to calculate the logLikelihood of the sample
 * @param sample A Korali Sample
 */
 void loglikelihoodNormalAdditive(korali::Sample& sample);

 /**
  * @brief Additive normal approach (for variance) to calculate the logLikelihood of the sample
  * @param sample A Korali Sample
  */
 void loglikelihoodNormalAdditiveVariance(korali::Sample& sample);

 /**
 * @brief Additive multiplicative approach to calculate the logLikelihood of the sample
 * @param sample A Korali Sample
 */
 void loglikelihoodNormalMultiplicative(korali::Sample& sample);

 /**
  * @brief Additive multiplicative approach (based on data) to calculate the logLikelihood of the sample
  * @param sample A Korali Sample
  */
 void loglikelihoodNormalMultiplicativeData(korali::Sample& sample);

 /**
  * @brief A general implementation of additive likelihood of the for y = f + g \epsilon, where f ang g are provided by the user.
  * @param sample A Korali Sample
  */
 void loglikelihoodNormalGeneral(korali::Sample& sample);

 /**
  * @brief A general implementation of the negative Binomial. 
  * @param sample A Korali Sample
  */
 void loglikelihoodNegativeBinomialGeneral(korali::Sample& sample);


 public:

 void evaluateLogLikelihood(korali::Sample& sample) override;
 void initialize() override;
};

} } } // namespace korali::problem::bayesian


#endif // _KORALI_PROBLEM_BAYESIAN_REFERENCE_HPP_
