#ifndef _KORALI_PROBLEM_BAYESIAN_REFERENCE_HPP_
#define _KORALI_PROBLEM_BAYESIAN_REFERENCE_HPP_

#include "modules/problem/bayesian/bayesian.hpp"
#include <vector>

namespace korali
{
namespace problem
{
namespace bayesian
{
class Reference : public korali::problem::Bayesian
{
  private:
  const double _log2pi = 1.83787706640934533908193770912476;

  size_t statisticalVariableIndex;

  /**
  * @brief Precomputes the square distance between two vectors (f and y) of the same size normalized by a third vector (g)
  * @param f Vector f
  * @param g Vector g, the normalization vector
  * @param y Vector y
  * @return Normalized square distance of the vectors
  */
  double compute_normalized_sse(std::vector<double> f, std::vector<double> g, std::vector<double> y);

  /**
  * @brief An implementation of the normal likelihood y~N(f,g), where f ang g are provided by the user.
  * @param sample A Korali Sample
  */
  void loglikelihoodNormal(korali::Sample &sample);

  /**
  * @brief An implementation of the normal likelihood y~N(f,g) truncated at zero, where f ang g are provided by the user.
  * @param sample A Korali Sample
  */
  void loglikelihoodPositiveNormal(korali::Sample &sample);

  /**
  * @brief Negative Binomial likelihood parametrized by mean and dispersion.
  * @param sample A Korali Sample
  */
  void loglikelihoodNegativeBinomial(korali::Sample &sample);

  /**
  * @brief Calculates the gradient of the Normal loglikelihood model.
  * @param sample A Korali Sample
  */
  void gradientLoglikelihoodNormal(korali::Sample &sample);

  /**
  * @brief Calculates the gradient of the Negative Binomial loglikelihood model.
  * @param sample A Korali Sample
  */
  void gradientLoglikelihoodNegativeBinomial(korali::Sample &sample);

  /**
  * @brief Calculates the Fisher information of the Normal likelihood model.
  * @param sample A Korali Sample
  */
  void fisherInformationLoglikelihoodNormal(korali::Sample &sample);

  public:
  void evaluateLoglikelihood(korali::Sample &sample) override;
  void evaluateLoglikelihoodGradient(korali::Sample &sample) override;
  void evaluateFisherInformation(korali::Sample &sample) override;
  void initialize() override;
};

} // namespace bayesian
} // namespace problem
} // namespace korali

#endif // _KORALI_PROBLEM_BAYESIAN_REFERENCE_HPP_
