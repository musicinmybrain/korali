#include "modules/problem/execution/GaussianProcess/GaussianProcess.hpp"
#include "modules/conduit/conduit.hpp"

void korali::problem::execution::GaussianProcess::initialize()
{
  auto _gpJson = nlohmann::json();
  if (korali::JsonInterface::loadJsonFromFile(_gpJson, _gaussianProcessJsonFile.c_str() ) == false)
   korali::logError("Could not load Gaussian Process Json file.\n");

  // Create the Gaussian Process
  std::string covarianceFunction = _gpJson["Problem"]["Covariance Function"];

  std::vector< std::vector< double >> xTrainData = _gpJson["Problem"]["X Data"].get<std::vector<std::vector<double>>>();
  std::vector< double >               yTrainData = _gpJson["Problem"]["Y Data"].get<std::vector<double>>();

  size_t dataSize = xTrainData.size();
  size_t dataDimension = xTrainData[0].size();

  _gp = new libgp::GaussianProcess( dataDimension, covarianceFunction );

  size_t parameterDimension = _gp->covf().get_param_dim();
  Eigen::VectorXd eParameters( parameterDimension );
  for( size_t i=0; i<parameterDimension; i++) eParameters[i] = _gpJson["Solver"]["Internal"]["Best X"][i];
  _gp->covf().set_loghyper(eParameters);

  for(size_t i=0; i<dataSize; ++i) _gp->add_pattern( xTrainData[i].data(), yTrainData[i]);

  // Create the parameters
  std::vector<korali::Variable*> variables;
  for (size_t i= 0; i<dataDimension; i++)
    _k->_variables.push_back(new korali::Variable);

  for (size_t i=0; i<_xData[0].size(); i++){
    _k->_variables[i]->_name = "X" + std::to_string(i);
    for (size_t j=0; j<_xData.size(); j++){
      _k->_variables[i]->_loadedValues.push_back(_xData[j][i]);
    }
  }

  size_t loadedValuesSize = _k->_variables[0]->_loadedValues.size();
  _gaussianProcessEvaluation.resize( loadedValuesSize );
  _gaussianProcessVariance.resize( loadedValuesSize );
}


void korali::problem::execution::GaussianProcess::execute(korali::Sample& sample)
{
  std::vector<double> p=sample["Parameters"];
  size_t index = sample["Sample Id"];
  _gaussianProcessEvaluation[index] = _gp->f(p.data());
  _gaussianProcessVariance[index]   = _gp->var(p.data());
}


void korali::problem::execution::GaussianProcess::finalize()
{
  if( _yData.size() == _gaussianProcessEvaluation.size() ){
    double error = korali::vectorDistance(_yData,_gaussianProcessEvaluation);
    korali::logInfo("Normal","Gaussian Process L2 error in the test set: %e\n",error);
  }
}
