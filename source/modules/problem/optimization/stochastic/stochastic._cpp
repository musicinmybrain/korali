#include "modules/problem/optimization/stochastic/stochastic.hpp"

void korali::problem::optimization::Stochastic::evaluate(korali::Sample &sample)
{
  sample.run(_objectiveFunction);

  std::string sampleString = "['F(x)']";

  if (korali::JsonInterface::isDefined(sample._js.getJson(), sampleString) == false)
    korali::Logger::logError("The %s problem needs a function evaluation. Be sure that you assign a value to the %s attribute in the model definition.\n", _k->_problem->getType().c_str(), sampleString.c_str());

  double evaluation = -korali::Inf;
  try
  {
    evaluation = sample["F(x)"];
  }
  catch (const std::exception &e)
  {
    korali::Logger::logError("Missing or incorrect value of 'F(x)' returned by the sample evaluation. \n   + Solution: Make sure your model is storing its Evaluation value, e.g., sample[\"F(x)\"] = value(s).\n   + Cause: %s\n", e.what());
  }

  // If result is not a finite number, objective function evaluates to -Infinity
  if (std::isnan(evaluation))
    sample["F(x)"] = -korali::Inf;
  else
    sample["F(x)"] = evaluation;
}
