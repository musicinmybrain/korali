#include "modules/problem/optimization/optimization.hpp"

namespace korali
{
namespace problem
{
void Optimization::initialize()
{
  if (_k->_variables.size() == 0) KORALI_LOG_ERROR("Optimization Evaluation problems require at least one variable.\n");

  /* check _granularity for discrete variables */
  for (size_t i = 0; i < _k->_variables.size(); i++)
  {
    if (_k->_variables[i]->_granularity < 0.0) KORALI_LOG_ERROR("Negative granularity for variable \'%s\'.\n", _k->_variables[i]->_name.c_str());
    if (_k->_variables[i]->_granularity > 0.0) _hasDiscreteVariables = true;
  }
}

void Optimization::evaluateConstraints(Sample &sample)
{
  for (size_t i = 0; i < _constraints.size(); i++)
  {
    sample.run(_constraints[i]);

    auto evaluation = KORALI_GET(double, sample, "F(x)");

    // If constraint is not a finite number, constraint is set to +Infinity
    if (std::isnan(evaluation))
      sample["Constraint Evaluations"][i] = Inf;
    else
      sample["Constraint Evaluations"][i] = evaluation;
  }
}

void Optimization::evaluate(Sample &sample)
{
  sample.run(_objectiveFunction);

  auto evaluation = KORALI_GET(double, sample, "F(x)");

  // If result is not a finite number, objective function evaluates to -Infinity
  if (std::isnan(evaluation))
    sample["F(x)"] = -Inf;
  else
    sample["F(x)"] = evaluation;
}

void Optimization::evaluateWithGradients(Sample &sample)
{
  sample.run(_objectiveFunction);

  auto evaluation = KORALI_GET(double, sample, "F(x)");

  // If result is not a finite number, objective function evaluates to -Infinity
  if (std::isnan(evaluation))
    sample["F(x)"] = -Inf;
  else
    sample["F(x)"] = evaluation;

  auto gradient = KORALI_GET(std::vector<double>, sample, "Gradient");

  if (gradient.size() != _k->_variables.size())
    KORALI_LOG_ERROR("Size of sample's gradient evaluations vector (%lu) is different from the number of problem variables defined (%lu).\n", gradient.size(), _k->_variables.size());

  // If result is not a finite number, gradient is set to zero
  if (std::isnan(evaluation) || isanynan(gradient))
    for (size_t i = 0; i < sample["Gradient"].size(); i++) sample["Gradient"][i] = 0.;
  else
    for (size_t i = 0; i < sample["Gradient"].size(); i++) sample["Gradient"][i] = gradient[i];
}

} // namespace problem

} // namespace korali
