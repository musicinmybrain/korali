#include "auxiliar/math.hpp"
#include "modules/conduit/conduit.hpp"
#include "modules/problem/optimization/gradient/gradient.hpp"

void korali::problem::optimization::Gradient::evaluate(korali::Sample &sample)
{
  sample.run(_objectiveFunction);

  auto evaluation = KORALI_GET(double, sample, {"F(x)"});

  // If result is not a finite number, objective function evaluates to -Infinity
  if (std::isnan(evaluation))
    sample["F(x)"] = -korali::Inf;
  else
    sample["F(x)"] = evaluation;

  auto gradient = KORALI_GET(std::vector<double>, sample, {"Gradient"});

  if (gradient.size() != _k->_variables.size())
    KORALI_LOG_ERROR("Size of sample's gradient evaluations vector (%lu) is different from the number of problem variables defined (%lu).\n", gradient.size(), _k->_variables.size());

  // If result is not a finite number, gradient is set to zero
  if (std::isnan(evaluation) || korali::isanynan(gradient))
    for (size_t i = 0; i < sample["Gradient"].size(); i++) sample["Gradient"][i] = 0.;
  else
    for (size_t i = 0; i < sample["Gradient"].size(); i++) sample["Gradient"][i] = gradient[i];
}
