#include "auxiliar/math.hpp"
#include "modules/conduit/conduit.hpp"
#include "modules/problem/optimization/gradient/gradient.hpp"

void korali::problem::optimization::Gradient::evaluate(korali::Sample &sample)
{
  sample.run(_objectiveFunction);

  std::string sampleString = "['F(x)']";

  if (korali::JsonInterface::isDefined(sample._js.getJson(), sampleString) == false)
    korali::Logger::logError("The %s problem needs a function evaluation. Be sure that you assign a value to the %s attribute in the model definition.\n", _k->_problem->getType().c_str(), sampleString.c_str());

  double evaluation = -korali::Inf;
  try
  {
    evaluation = sample["F(x)"];
  }
  catch (const std::exception &e)
  {
    korali::Logger::logError("Missing or incorrect value of 'F(x)' returned by the sample evaluation. \n   + Solution: Make sure your model is storing its Evaluation value, e.g., sample[\"F(x)\"] = value(s).\n   + Cause: %s\n", e.what());
  }

  // If result is not a finite number, objective function evaluates to -Infinity
  if (std::isnan(evaluation))
    sample["F(x)"] = -korali::Inf;
  else
    sample["F(x)"] = evaluation;

  if (korali::JsonInterface::isDefined(sample._js.getJson(), "Gradient") == false)
    korali::Logger::logError("The %s problem needs a gradient evaluation. Be sure that you assign a value to the ['Gradient'] attribute in the model definition.\n", _k->_problem->getType().c_str());

  if (sample["Gradient"].size() != sample["Parameters"].size())
    korali::Logger::logError("The size of the gradient (%zu) is not equal to the size of parameters (%zu).", sample["Gradient"].size(), sample["Parameters"].size());

  std::vector<double> gradient;
  try
  {
    gradient = sample["Gradient"].get<std::vector<double>>();
  }
  catch (const std::exception &e)
  {
    korali::Logger::logError("Missing or incorrect value of 'Gradient' returned by the sample evaluation. \n   + Solution: Make sure your model is storing its Gradient evaluation, e.g., sample[\"Gradient\"] = value(s).\n   + Cause: %s\n", e.what());
  }

  // If result is not a finite number, gradient is set to zero
  if (std::isnan(evaluation) || korali::isanynan(gradient))
  {
    for (size_t i = 0; i < sample["Gradient"].size(); i++) sample["Gradient"][i] = 0.;
  }
  else
  {
    for (size_t i = 0; i < sample["Gradient"].size(); i++) sample["Gradient"][i] = gradient[i];
  }
}
