#ifndef _KORALI_PROBLEM_OPTIMIZATION_HPP_
#define _KORALI_PROBLEM_OPTIMIZATION_HPP_

#include "modules/problem/problem.hpp"

namespace korali { namespace problem {

class Optimization : public korali::Problem
{
 private:

 public:


 void initialize() override;

 /**
  * @brief Checks whether the proposed sample can be optimized
  * @param sample A Korali Sample
  * @return True, if feasible; false, otherwise.
 */
 bool isSampleFeasible(korali::Sample& sample);

 /**
  * @brief Evaluates the values of a sample, given a set of parameters.
  * @param sample A sample to process
  */
 virtual void evaluate(korali::Sample& sample) = 0;

};

} } // namespace korali::problem


#endif // _KORALI_PROBLEM_OPTIMIZATION_HPP_
