#ifndef _KORALI_PROBLEM_OPTIMIZATION_HPP_
#define _KORALI_PROBLEM_OPTIMIZATION_HPP_

#include "modules/problem/problem.hpp"

namespace korali
{
namespace problem
{
class Optimization : public korali::Problem
{
  private:
  public:
  void initialize() override;

  /**
  * @brief Evaluates the values of a sample, given a set of parameters.
  * @param sample A sample to process
  */
  void evaluate(korali::Sample &sample);

  /**
    * @brief Evaluates whether at least one of constraints have been met.
    * @param sample A Korali Sample
   */
  void evaluateConstraints(korali::Sample &sample);

  /**
   * @brief Evaluates the F(x) and Gradient(x) of a sample, given a set of parameters.
   * @param sample A sample to process
   */
  void evaluateWithGradients(korali::Sample &sample);
};

} // namespace problem
} // namespace korali

#endif // _KORALI_PROBLEM_OPTIMIZATION_HPP_
