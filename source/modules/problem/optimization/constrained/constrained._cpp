#include "modules/problem/optimization/constrained/constrained.hpp"

void korali::problem::optimization::Constrained::evaluate(korali::Sample &sample)
{
  sample.run(_objectiveFunction);

  double evaluation = sample.get<double>({"F(x)"}, __FILE__, __LINE__);

  // If result is not a finite number, objective function evaluates to -Infinity
  if (std::isnan(evaluation))
    sample["F(x)"] = -korali::Inf;
  else
    sample["F(x)"] = evaluation;
}

void korali::problem::optimization::Constrained::evaluateConstraints(korali::Sample &sample)
{
  for (size_t i = 0; i < _constraints.size(); i++)
  {
    sample.run(_constraints[i]);

    double evaluation = sample.get<double>({"F(x)"}, __FILE__, __LINE__);

    // If constraint is not a finite number, constraint is set to +Infinity
    if (std::isnan(evaluation))
      sample["Constraint Evaluations"][i] = korali::Inf;
    else
      sample["Constraint Evaluations"][i] = evaluation;
  }
}
