#include "engine.hpp"
#include "modules/problem/reinforcementLearning/reinforcementLearning.hpp"
#include "modules/solver/agent/agent.hpp"
#include "sample/sample.hpp"

@startNamespace

void @className::initialize()
{
  // Processing state/action variable configuration
  _stateVectorIndexes.clear();
  _actionVectorIndexes.clear();
  for (size_t i = 0; i < _k->_variables.size(); i++)
  {
    if (_k->_variables[i]->_type == "State") _stateVectorIndexes.push_back(i);
    if (_k->_variables[i]->_type == "Action") _actionVectorIndexes.push_back(i);
  }

  _actionVectorSize = _actionVectorIndexes.size();
  _stateVectorSize = _stateVectorIndexes.size();

  if (_actionVectorSize == 0) KORALI_LOG_ERROR("No action variables have been defined.\n");
  if (_stateVectorSize == 0) KORALI_LOG_ERROR("No state variables have been defined.\n");
}

/**
 * @brief Pointer to the current agent, it is immediately copied as to avoid concurrency problems
 */
Sample *__currentSample;

/**
 * @brief Identifier of the current environment function Id.
 */
size_t __envFunctionId;

/**
 * @brief Pointer to the agent (Korali solver module)
 */
solver::Agent *_agent;

/**
  * @brief Stores the environment thread (coroutine).
  */
cothread_t _envThread;

/**
 * @brief Thread wrapper to run an environment
 */
void __environmentWrapper()
{
  Sample *agent = __currentSample;

  agent->run(__envFunctionId);

  if ((*agent)["Termination"] == "Non Terminal")
    KORALI_LOG_ERROR("Environment function terminated, but agent termination status (success or truncated) was not set.\n");

  bool terminationRecognized = false;
  if ((*agent)["Termination"] == "Terminal") terminationRecognized = true;
  if ((*agent)["Termination"] == "Truncated") terminationRecognized = true;

  if (terminationRecognized == false)
    KORALI_LOG_ERROR("Environment function terminated, but agent termination status (%s) is neither 'Terminal' nor 'Truncated'.\n", (*agent)["Termination"].get<std::string>().c_str());

  co_switch(agent->_workerThread);

  KORALI_LOG_ERROR("Resuming a finished agent\n");
}

void @className::runTrainingEpisode(Sample &agent)
{
  // Profiling information - Computation and communication time taken by the agent
  _agentPolicyEvaluationTime = 0.0;
  _agentComputationTime = 0.0;
  _agentCommunicationTime = 0.0;

  // Initializing environment configuration
  initializeEnvironment(agent);

  // Counter for the total number of actions taken
  size_t actionCount = 0;

  // Setting mode to traing to add exploratory noise or random actions
  agent["Mode"] = "Training";

  // Reserving message storage for sending back the episode
  knlohmann::json episode;

  // Storage to keep track of cumulative reward
  float trainingReward = 0.0;

  // Setting termination status of initial state (and the following ones) to non terminal.
  // The environment will change this at the last state, indicating whether the episode was
  // "Success" or "Truncated".
  agent["Termination"] = "Non Terminal";

  // Getting first state
  runEnvironment(agent);

  // Saving experiences
  while (agent["Termination"] == "Non Terminal")
  {
    // Generating new action from the agent's policy
    getAction(agent);

    // Store the current state in the experience
    episode["Experiences"][actionCount]["State"] = agent["State"];

    // Storing the current action
    episode["Experiences"][actionCount]["Action"] = agent["Action"];

    // Storing the experience's policy
    episode["Experiences"][actionCount]["Policy"] = agent["Policy"];

    // Jumping back into the agent's environment
    runEnvironment(agent);

    // Sanity check for reward
    if (std::isfinite(agent["Reward"].get<float>()) == false)
      KORALI_LOG_ERROR("Environment reward returned an invalid value: %f\n", agent["Reward"].get<float>());

    // Storing experience's reward
    episode["Experiences"][actionCount]["Reward"] = agent["Reward"];

    // Storing termination status
    episode["Experiences"][actionCount]["Termination"] = agent["Termination"];

    // If the episode was truncated, then save the terminal state
    if (agent["Termination"] == "Truncated") episode["Experiences"][actionCount]["Truncated State"] = agent["State"];

    // Adding to cumulative training reward
    trainingReward += agent["Reward"].get<float>();

    // Increasing counter for generated actions
    actionCount++;

    // Checking if we requested the given number of actions in between policy updates and it is not a terminal state
    if ((_actionsBetweenPolicyUpdates > 0) &&
        (agent["Termination"] == "Non Terminal") &&
        (actionCount % _actionsBetweenPolicyUpdates == 0)) requestNewPolicy(agent);
  }

  // Setting cumulative reward
  agent["Training Reward"] = trainingReward;

  // Finalizing Environment
  finalizeEnvironment();

  // Setting tested policy flag to false, unless we do testing
  agent["Tested Policy"] = false;

  // If the training reward exceeds the threshold or meets the periodic conditions, then also run testing on it
  bool runTest = false;
  runTest |= trainingReward > _trainingRewardThreshold;
  runTest |= (_testingFrequency > 0) && (_k->_currentGeneration % _testingFrequency == 0);
  if (runTest)
  {
    float averageTestingReward = 0.0;
    float stdevTestingReward = 0.0;
    float bestTestingReward = -Inf;
    float worstTestingReward = +Inf;

    for (size_t i = 0; i < _policyTestingEpisodes; i++)
    {
      runTestingEpisode(agent);

      // Getting current testing reward
      float currentTestingReward = agent["Testing Reward"];

      // Adding current testing reward to the average and keeping statistics
      averageTestingReward += currentTestingReward;
      stdevTestingReward += currentTestingReward * currentTestingReward;
      if (currentTestingReward > bestTestingReward) bestTestingReward = currentTestingReward;
      if (currentTestingReward < worstTestingReward) worstTestingReward = currentTestingReward;
    }

    // Normalizing average
    averageTestingReward /= (float)_policyTestingEpisodes;
    stdevTestingReward = std::sqrt(stdevTestingReward / (float)_policyTestingEpisodes - averageTestingReward * averageTestingReward);

    // Storing testing information
    agent["Average Testing Reward"] = averageTestingReward;
    agent["Stdev Testing Reward"] = stdevTestingReward;
    agent["Best Testing Reward"] = bestTestingReward;
    agent["Worst Testing Reward"] = worstTestingReward;

    // Indicate that the agent has been tested
    agent["Tested Policy"] = true;
  }

  // Sending last experience last (after testing)
  // This is important to prevent the engine for block-waiting for the return of the sample
  // while the testing runs are being performed.
  knlohmann::json message;
  message["Action"] = "Send Episode";
  message["Sample Id"] = agent["Sample Id"];
  message["Experiences"] = episode["Experiences"];
  KORALI_SEND_MSG_TO_ENGINE(message);

  // Adding profiling information to agent
  agent["Computation Time"] = _agentComputationTime;
  agent["Communication Time"] = _agentCommunicationTime;
  agent["Policy Evaluation Time"] = _agentPolicyEvaluationTime;
}

void @className::runTestingEpisode(Sample &agent)
{
  float testingReward = 0.0;

  // Initializing Environment
  initializeEnvironment(agent);

  // Setting mode to testing to prevent the addition of noise or random actions
  agent["Mode"] = "Testing";

  // Setting initial non terminal state
  agent["Termination"] = "Non Terminal";

  // Getting first state
  runEnvironment(agent);

  // Running environment using the last policy only
  while (agent["Termination"] == "Non Terminal")
  {
    getAction(agent);
    runEnvironment(agent);
    testingReward += agent["Reward"].get<float>();
  }

  // Storing the cumulative reward of the testing episode
  agent["Testing Reward"] = testingReward;

  // Finalizing Environment
  finalizeEnvironment();
}

void @className::initializeEnvironment(Sample &agent)
{
  // Getting RL-compatible solver
  _agent = dynamic_cast<solver::Agent *>(_k->_solver);

  // First, we update the initial policy's hyperparameters
  _agent->setAgentPolicy(agent["Policy Hyperparameters"]);

  // Then, we reset the state sequence for time-dependent learners
  _agent->resetTimeSequence();

  // Define state rescaling variables
  _stateRescalingMeans = agent["State Rescaling"]["Means"].get<std::vector<float>>();
  _stateRescalingSdevs = agent["State Rescaling"]["Standard Deviations"].get<std::vector<float>>();

  // Appending any user-defined settings
  agent["Custom Settings"] = _customSettings;

  // Creating agent coroutine
  __currentSample = &agent;
  __envFunctionId = _environmentFunction;
  agent._workerThread = co_active();

  // Creating coroutine
  _envThread = co_create(1 << 28, __environmentWrapper);
}

void @className::finalizeEnvironment()
{
  // Freeing training co-routine memory
  co_delete(_envThread);
}

void @className::requestNewPolicy(Sample &agent)
{
  auto t0 = std::chrono::steady_clock::now(); // Profiling

  // Reserving message storage for requesting new policy
  knlohmann::json message;

  // Sending request to engine
  message["Sample Id"] = agent["Sample Id"];
  message["Action"] = "Request New Policy";
  KORALI_SEND_MSG_TO_ENGINE(message);

  // If requested new policy, wait for incoming message containing new hyperparameters
  agent["Policy Hyperparameters"] = KORALI_RECV_MSG_FROM_ENGINE();
  _agent->setAgentPolicy(agent["Policy Hyperparameters"]);

  auto t1 = std::chrono::steady_clock::now();                                                       // Profiling
  _agentCommunicationTime += std::chrono::duration_cast<std::chrono::nanoseconds>(t1 - t0).count(); // Profiling
}

void @className::getAction(Sample &agent)
{
  // Generating new action from policy
  auto t0 = std::chrono::steady_clock::now(); // Profiling

  _agent->getAction(agent);

  auto t1 = std::chrono::steady_clock::now();                                                          // Profiling
  _agentPolicyEvaluationTime += std::chrono::duration_cast<std::chrono::nanoseconds>(t1 - t0).count(); // Profiling

  // Sanity checks for action
  for (size_t i = 0; i < _actionVectorSize; i++)
    if (std::isfinite(agent["Action"][i].get<float>()) == false)
      KORALI_LOG_ERROR("Agent agent variable %lu returned an invalid value: %f\n", agent["Action"][i].get<float>());
}

void @className::runEnvironment(Sample &agent)
{
  // Switching back to the environment's thread
  auto beginTime = std::chrono::steady_clock::now(); // Profiling
  co_switch(_envThread);
  auto endTime = std::chrono::steady_clock::now();                                                            // Profiling
  _agentComputationTime += std::chrono::duration_cast<std::chrono::nanoseconds>(endTime - beginTime).count(); // Profiling

  // Sanity checks for state
  for (size_t i = 0; i < _stateVectorSize; i++)
    if (std::isfinite(agent["State"][i].get<float>()) == false)
      KORALI_LOG_ERROR("Environment state variable %lu returned an invalid value: %f\n", agent["State"][i].get<float>());

  // Normalizing State
  auto state = agent["State"].get<std::vector<float>>();

  // Scale the state
  for (size_t d = 0; d < _stateVectorSize; ++d)
    state[d] = (state[d] - _stateRescalingMeans[d]) / _stateRescalingSdevs[d];

  // Re-storing state into agent
  agent["State"] = state;
}

@moduleAutoCode

@endNamespace
