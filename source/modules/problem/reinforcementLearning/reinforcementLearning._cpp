#include "modules/problem/reinforcementLearning/reinforcementLearning.hpp"
#include "modules/solver/DQN/DQN.hpp"

namespace korali
{
namespace problem
{
void ReinforcementLearning::initialize()
{
  // Processing state/action variable configuration

  for (size_t i = 0; i < _k->_variables.size(); i++)
  {
    if (_k->_variables[i]->_type == "State") _stateVectorIndexes.push_back(i);
    if (_k->_variables[i]->_type == "Action") _actionVectorIndexes.push_back(i);
  }

  _actionVectorSize = _actionVectorIndexes.size();
  _stateVectorSize = _stateVectorIndexes.size();

  if (_actionVectorSize == 0) KORALI_LOG_ERROR("No action variables have been defined.\n");
  if (_stateVectorSize == 0) KORALI_LOG_ERROR("No state variables have been defined.\n");

  // Verifying initial states
  _initialStateCount = _initialStates.size();

  if (_initialStateCount == 0) KORALI_LOG_ERROR("No initial states have been provided.\n");

  for (size_t i = 0; i < _initialStates.size(); i++)
   if (_initialStates[i].size() != _stateVectorSize)
    KORALI_LOG_ERROR("Incorrect number of values (%lu) for initial state %lu. Expected: %lu (the number of state variables).\n", _initialStates[i].size(), i, _stateVectorSize);
}

void ReinforcementLearning::runEnvironment(Sample &sample)
{
 // Getting RL-compatible solver
 auto solver = dynamic_cast<solver::DQN *>(_k->_solver);

 solver->getAction2(sample);

  sample.run(_environmentFunction);
}

} // namespace problem

} // namespace korali
