#include "engine.hpp"
#include "modules/problem/reinforcementLearning/reinforcementLearning.hpp"
#include "modules/solver/agent/agent.hpp"
#include "sample/sample.hpp"

__startNamespace__;

/**
 * @brief Pointer to the current agent, it is immediately copied as to avoid concurrency problems
 */
Sample *__currentSample;

/**
 * @brief Identifier of the current environment function Id.
 */
size_t __envFunctionId;

/**
 * @brief Pointer to the agent (Korali solver module)
 */
solver::Agent *_agent;

/**
 * @brief Pointer to the engine's conduit
 */
Conduit *_conduit;

/**
 * @brief Stores the environment thread (coroutine).
 */
cothread_t _envThread;

/**
 * @brief Stores the current launch Id for the current sample
 */
size_t _launchId;

void __className__::initialize()
{
  // Processing state/action variable configuration
  _stateVectorIndexes.clear();
  _actionVectorIndexes.clear();
  for (size_t i = 0; i < _k->_variables.size(); i++)
  {
    if (_k->_variables[i]->_type == "State") _stateVectorIndexes.push_back(i);
    if (_k->_variables[i]->_type == "Action") _actionVectorIndexes.push_back(i);
  }

  _actionVectorSize = _actionVectorIndexes.size();
  _stateVectorSize = _stateVectorIndexes.size();

  if (_actionVectorSize == 0) KORALI_LOG_ERROR("No action variables have been defined.\n");
  if (_stateVectorSize == 0) KORALI_LOG_ERROR("No state variables have been defined.\n");
  if ((_policiesPerEnvironment != _agentsPerEnvironment) && (_policiesPerEnvironment != 1))
    KORALI_LOG_ERROR("Number of Policies: %lu is neither 1 nor %lu.\n", _policiesPerEnvironment, _agentsPerEnvironment);

  // Setting initial launch id (0)
  _launchId = 0;
}

/**
 * @brief Thread wrapper to run an environment
 */
void __environmentWrapper()
{
  Sample *worker = __currentSample;

  // Setting and increasing agent's launch Id
  (*worker)["Launch Id"] = _launchId++;
  worker->run(__envFunctionId);

  // If this is the leader rank within the worker group, check termination state
  if (_conduit->isWorkerLeadRank() != false)
  {
    if ((*worker)["Termination"] == "Non Terminal") KORALI_LOG_ERROR("Environment function terminated, but worker termination status (success or truncated) was not set.\n");

    bool terminationRecognized = false;
    if ((*worker)["Termination"] == "Terminal") terminationRecognized = true;
    if ((*worker)["Termination"] == "Truncated") terminationRecognized = true;

    if (terminationRecognized == false) KORALI_LOG_ERROR("Environment function terminated, but worker termination status (%s) is neither 'Terminal' nor 'Truncated'.\n", (*worker)["Termination"].get<std::string>().c_str());
  }

  // Returning to worker context
  co_switch(worker->_workerThread);

  KORALI_LOG_ERROR("Resuming a finished worker\n");
}

void __className__::runTrainingEpisode(Sample &worker)
{
  // Profiling information - Computation and communication time taken by the agent
  _agentPolicyEvaluationTime = 0.0;
  _agentComputationTime = 0.0;
  _agentCommunicationTime = 0.0;

  // Initializing environment configuration
  initializeEnvironment(worker);

  // Counter for the total number of actions taken
  size_t actionCount = 0;

  // Setting mode to traing to add exploratory noise or random actions
  worker["Mode"] = "Training";

  // Reserving message storage for sending back the episode
  knlohmann::json episode;

  // Setting termination status of initial state (and the following ones) to non terminal.
  // The environment will change this at the last state, indicating whether the episodes was
  // "Success" or "Truncated".
  worker["Termination"] = "Non Terminal";

  // Getting first state
  if(worker["Termination"] == "Non Terminal")
    runEnvironment(worker);

  // If this is not the leader rank within the worker group, return immediately
  if (_k->_engine->_conduit->isWorkerLeadRank() == false)
  {
    finalizeEnvironment();
    return;
  }

  // Saving experiences
  while (worker["Termination"] == "Non Terminal")
  {
	// Getting current state
	const auto state = worker["State"].get<std::vector<std::vector<float>>>();


  std::vector<float> stateValue(_agentsPerEnvironment);
 // Get action for all the agents in the environment
  for (size_t i = 0; i < _agentsPerEnvironment; i++)
  {
    // Forward state sequence to get the Gaussian means and sigmas from policy
    // in case of multiple polices it runs the i-th policy otherwise standard
    if (_policiesPerEnvironment == 1)
      stateValue[i] = _agent->calculateStateValue({state[i]}, 0);
    else
      stateValue[i] = _agent->calculateStateValue({state[i]}, i);
  }
    // Storing the experience's policy
    episode["Experiences"][actionCount]["Policy"]["State Value"] = stateValue;
    episode["Experiences"][actionCount]["Policy"]["Distribution Parameters"] = worker["Distribution Parameters"];

    // Store the current state in the experience
    episode["Experiences"][actionCount]["State"] = worker["State"];

    // Storing the current action
    episode["Experiences"][actionCount]["Action"] = worker["Action"];

    // Jumping back into the worker's environment
    runEnvironment(worker);

    // Storing experience's reward
    episode["Experiences"][actionCount]["Reward"] = worker["Reward"];

    // Storing termination status
    episode["Experiences"][actionCount]["Termination"] = worker["Termination"];

    // If the episode was truncated, then save the terminal state
    if (worker["Termination"] == "Truncated")
    {
      episode["Experiences"][actionCount]["Truncated State"] = worker["State"];
    }

    // Increasing counter for generated actions
    actionCount++;

	// Cleanup sample object
    //worker._js.getJson().erase("Action");
    //worker._js.getJson().erase("Reward");
    //worker._js.getJson().erase("Termination");

    // Checking if we requested the given number of actions in between policy updates and it is not a terminal state
    if ((_actionsBetweenPolicyUpdates > 0) &&
        (worker["Termination"] == "Non Terminal") &&
        (actionCount % _actionsBetweenPolicyUpdates == 0))
    {
      requestNewPolicy(worker);
    }
  }

  if (worker.contains("Gradients"))
    worker._js.getJson().erase("Gradients");

  // Finalizing Environment
  finalizeEnvironment();

  // Setting tested policy flag to false, unless we do testing
  worker["Tested Policy"] = false;

  // Get current "true" episode count
  size_t episodeCount = worker["Sample Id"];

  // Sending last experience last (after testing)
  // This is important to prevent the engine for block-waiting for the return of the sample
  // while the testing runs are being performed.
  knlohmann::json message;
  message["Action"] = "Send Episodes";
  message["Sample Id"] = worker["Sample Id"];
  message["Episodes"] = episode;

  // Sending evaluated mini batches
  if (worker.contains("Mini Batch"))
  {
    if (worker.contains("State Sequence Batch") == false)
      KORALI_LOG_ERROR("State sequence not available. Sample object does not conaint State Sequence Batch");

    if (worker.contains("Distribution Parameters") == false)
      KORALI_LOG_ERROR("State sequence not evaluated in environment. Sample object does not contain Distribution Parameters");
    else
    {
    const auto miniBatchList = KORALI_GET(std::vector<std::vector<std::vector<size_t>>>, worker, "Mini Batch");
    const auto stateSequenceList = KORALI_GET(std::vector<std::vector<std::vector<std::vector<float>>>>, worker, "State Sequence Batch");
    const auto distributionParamsList = KORALI_GET(std::vector<std::vector<std::vector<float>>>, worker, "Distribution Parameters");

    if (miniBatchList.size() != distributionParamsList.size())
        KORALI_LOG_ERROR("Distribution Parameters length (%zu) does not match Mini Batch length (%zu)", distributionParamsList.size(), miniBatchList.size());

    if (distributionParamsList[0][0].size() != 2 * _actionVectorSize)
      KORALI_LOG_ERROR("Distribution Parameters must be of size %zu but are of size %zu", 2 * _actionVectorSize, distributionParamsList[0][0].size());

    message["Mini Batch"] = miniBatchList;
    message["State Sequence Batch"] = stateSequenceList;
    message["Distribution Parameters"] = distributionParamsList;

    }

    // Cleanup
    worker._js.getJson().erase("Mini Batch");
    worker._js.getJson().erase("State Sequence Batch");
    //worker._js.getJson().erase("Distribution Parameters");
  }

  KORALI_SEND_MSG_TO_ENGINE(message);

  if (message.contains("Mini Batch"))
  {
    worker["Gradients"] = KORALI_RECV_MSG_FROM_ENGINE();
    worker["Gradients"]["Mini Batch"] = message["Mini Batch"];
    worker["Gradients"]["State Sequence Batch"] = message["State Sequence Batch"];
  }

  // Adding profiling information to worker
  worker["Computation Time"] = _agentComputationTime;
  worker["Communication Time"] = _agentCommunicationTime;
  worker["Policy Evaluation Time"] = _agentPolicyEvaluationTime;
}

void __className__::initializeEnvironment(Sample &worker)
{
  // Getting RL-compatible solver
  _agent = dynamic_cast<solver::Agent *>(_k->_solver);

  // Getting worker's conduit
  _conduit = _agent->_k->_engine->_conduit;

  // First, we update the initial policy's hyperparameters
  _agent->setPolicy(worker["Policy Hyperparameters"]);

  // Then, we reset the state sequence for time-dependent learners
  _agent->resetTimeSequence();

  // Define state rescaling variables
  _stateRescalingMeans = worker["State Rescaling"]["Means"].get<std::vector<std::vector<float>>>();
  _stateRescalingSdevs = worker["State Rescaling"]["Standard Deviations"].get<std::vector<std::vector<float>>>();

  // Appending any user-defined settings
  worker["Custom Settings"] = _customSettings;

  // Creating agent coroutine
  __currentSample = &worker;
  __envFunctionId = _environmentFunction;
  worker._workerThread = co_active();

  // Creating coroutine
  _envThread = co_create(1 << 28, __environmentWrapper);

  // Initializing rewards
  if (_agentsPerEnvironment == 1) worker["Reward"] = 0.0f;
  if (_agentsPerEnvironment > 1) worker["Reward"] = std::vector<float>(_agentsPerEnvironment, 0.0f);
}

void __className__::finalizeEnvironment()
{
  // Freeing training co-routine memory
  co_delete(_envThread);
}

void __className__::requestNewPolicy(Sample &worker)
{
  auto t0 = std::chrono::steady_clock::now(); // Profiling

  // Reserving message storage for requesting new policy
  knlohmann::json message;

  // Sending request to engine
  message["Sample Id"] = worker["Sample Id"];
  message["Action"] = "Request New Policy";
  KORALI_SEND_MSG_TO_ENGINE(message);

  // If requested new policy, wait for incoming message containing new hyperparameters
  worker["Policy Hyperparameters"] = KORALI_RECV_MSG_FROM_ENGINE();
  _agent->setPolicy(worker["Policy Hyperparameters"]);

  auto t1 = std::chrono::steady_clock::now();                                                       // Profiling
  _agentCommunicationTime += std::chrono::duration_cast<std::chrono::nanoseconds>(t1 - t0).count(); // Profiling
}

void __className__::runEnvironment(Sample &worker)
{
  // Switching back to the environment's thread
  auto beginTime = std::chrono::steady_clock::now(); // Profiling

  co_switch(_envThread);
  auto endTime = std::chrono::steady_clock::now();                                                            // Profiling
  _agentComputationTime += std::chrono::duration_cast<std::chrono::nanoseconds>(endTime - beginTime).count(); // Profiling

  // In case of this being a single worker, preprocess state and reward if necessary
  if (_conduit->isWorkerLeadRank() == false) return;
  
  if(worker.contains("Mini Batch"))
    return;

  // In case of this being a single agent, support returning state as only vector
  if (_agentsPerEnvironment == 1)
  {
    // Support returning state as vector
    const auto state = KORALI_GET(std::vector<float>, worker, "State");
    worker._js.getJson().erase("State");
    worker["State"][0] = state;

    // Support returning reward as scalar
    const auto reward = KORALI_GET(float, worker, "Reward");
    worker._js.getJson().erase("Reward");
    worker["Reward"][0] = reward;

    // Support returning distribution params as vector
    const auto distributionParams = KORALI_GET(std::vector<float>, worker, "Distribution Parameters");
    worker._js.getJson().erase("Distribution Parameters");
    worker["Distribution Parameters"][0] = distributionParams;
  }
  
  // Checking correct format of state
  if (worker["Distribution Parameters"].is_array() == false) KORALI_LOG_ERROR("Distribution Parameters variable returned by the environment is not a vector.\n");
  if (worker["Distribution Parameters"].size() != _agentsPerEnvironment) KORALI_LOG_ERROR("Distribution Parameters vector returned with the wrong size: %lu, expected: %lu.\n", worker["Distribution Parameters"].size(), _agentsPerEnvironment);

  /*
  for (size_t i = 0; i < _agentsPerEnvironment; i++)
  {
    if (worker["Distribution Parameters"][i].is_array() == false) KORALI_LOG_ERROR("Distribution Parameters variable returned by the environment is not a vector.\n");



    for (size_t j = 0; j < _stateVectorSize; j++)

    if (worker["State"][i].size() != _stateVectorSize) KORALI_LOG_ERROR("Agents state vector %lu returned with the wrong size: %lu, expected: %lu.\n", i, worker["State"][i].size(), _stateVectorSize);

    for (size_t j = 0; j < _stateVectorSize; j++)
      if (std::isfinite(worker["State"][i][j].get<float>()) == false) KORALI_LOG_ERROR("Agent %lu state variable %lu returned an invalid value: %f\n", i, j, worker["State"][i][j].get<float>());
  }
  */

  // Checking correct format of state
  if (worker["State"].is_array() == false) KORALI_LOG_ERROR("Agent state variable returned by the environment is not a vector.\n");
  if (worker["State"].size() != _agentsPerEnvironment) KORALI_LOG_ERROR("Agents state vector returned with the wrong size: %lu, expected: %lu.\n", worker["State"].size(), _agentsPerEnvironment);

  // Sanity checks for state
  for (size_t i = 0; i < _agentsPerEnvironment; i++)
  {
    if (worker["State"][i].is_array() == false) KORALI_LOG_ERROR("Agent state variable returned by the environment is not a vector.\n");
    if (worker["State"][i].size() != _stateVectorSize) KORALI_LOG_ERROR("Agents state vector %lu returned with the wrong size: %lu, expected: %lu.\n", i, worker["State"][i].size(), _stateVectorSize);

    for (size_t j = 0; j < _stateVectorSize; j++)
      if (std::isfinite(worker["State"][i][j].get<float>()) == false) KORALI_LOG_ERROR("Agent %lu state variable %lu returned an invalid value: %f\n", i, j, worker["State"][i][j].get<float>());
  }

  // Normalizing State
  for (size_t i = 0; i < _agentsPerEnvironment; i++)
  {
    auto state = worker["State"][i].get<std::vector<float>>();

    // Scale the state
    for (size_t d = 0; d < _stateVectorSize; ++d)
      state[d] = (state[d] - _stateRescalingMeans[i][d]) / _stateRescalingSdevs[i][d];

    // Re-storing state into worker
    worker["State"][i] = state;
  }

  // Checking correct format of reward
  if (worker["Reward"].is_array() == false) KORALI_LOG_ERROR("Agent reward variable returned by the environment is not a vector.\n");
  if (worker["Reward"].size() != _agentsPerEnvironment) KORALI_LOG_ERROR("Agents reward vector returned with the wrong size: %lu, expected: %lu.\n", worker["Reward"].size(), _agentsPerEnvironment);

  // Sanity checks for reward
  for (size_t i = 0; i < _agentsPerEnvironment; i++)
    if (std::isfinite(worker["Reward"][i].get<float>()) == false) KORALI_LOG_ERROR("Agent %lu reward returned an invalid value: %f\n", i, worker["Reward"][i].get<float>());

  // If available actions not given, set all 1s
  std::vector<size_t> availableActions(_actionCount, 1);
  if (not isDefined(worker._js.getJson(), "Available Actions"))
  {
    for (size_t i = 0; i < _agentsPerEnvironment; i++)
    {
      worker["Available Actions"][i] = availableActions;
    }
  }

  // Check format of available action
  if (worker["Available Actions"].size() != _agentsPerEnvironment) KORALI_LOG_ERROR("Available Actions vector returned with the wrong size: %lu, expected: %lu.\n", worker["Available Actions"].size(), _agentsPerEnvironment);

  for (size_t i = 0; i < _agentsPerEnvironment; i++)
  {
    if (worker["Available Actions"][i].size() != _actionCount) KORALI_LOG_ERROR("Available Actions vector %lu returned with the wrong size: %lu, expected: %lu.\n", i, worker["Available Actions"][i].size(), _actionCount);
  }
}

__moduleAutoCode__;

__endNamespace__;
