#include "modules/problem/gaussian/evaluate/evaluate.hpp"
#include <Eigen/Dense>

void korali::problem::gaussian::Evaluate::initialize()
{
  if (_xData.size() != _yData.size())
    _k->_logger->logError("The number of rows of 'X Data' (%lu) must beq equal to the number of rows of 'Y Data' (%lu).\n", _xData.size(), _yData.size());

  _dataSize = _xData.size();
  _dataDimension = _xData[0].size();

  _gp = new libgp::GaussianProcess(_dataDimension, _covarianceFunction);

  _parameterDimension = _gp->covf().get_param_dim();

  std::vector<korali::Variable *> variables;
  for (size_t i = 0; i < _parameterDimension; i++)
    _k->_variables.push_back(new korali::Variable);

  for (size_t i = 0; i < _parameterDimension; i++)
  {
    _k->_variables[i]->_name = "X" + std::to_string(i);
    _k->_variables[i]->_initialValue = 0.1;
  }

  Eigen::VectorXd eParameters(_parameterDimension);
  for (size_t i = 0; i < _parameterDimension; i++) eParameters[i] = _k->_variables[i]->_initialValue;
  _gp->covf().set_loghyper(eParameters);

  for (size_t i = 0; i < _dataSize; ++i) _gp->add_pattern(_xData[i].data(), _yData[i]);
}

bool korali::problem::gaussian::Evaluate::isSampleFeasible(korali::Sample &sample)
{
  sample["Is Feasible"] = true;
  return true;
}

void korali::problem::gaussian::Evaluate::evaluate(korali::Sample &sample)
{
  Eigen::VectorXd p(_parameterDimension);
  for (size_t i = 0; i < _parameterDimension; i++) p[i] = sample["Parameters"][i];

  _gp->covf().set_loghyper(p);

  sample["F(x)"] = _gp->log_likelihood();
  sample["P(x)"] = sample["F(x)"];

  Eigen::VectorXd eigenGrad = _gp->log_likelihood_gradient();
  for (size_t i = 0; i < _parameterDimension; i++)
    sample["Gradient"][i] = eigenGrad[i];
}
