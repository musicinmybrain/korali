#include "modules/solver/solver.hpp"

__startNamespace__;

void __className__::printGenerationAfter()
{
  _k->_logger->logInfo("Detailed", "Experiment: %lu - Generation Time: %.3fs\n", _k->_experimentId, _k->_genTime);
};

void __className__::printGenerationBefore()
{
  _k->_logger->logInfo("minimal", "--------------------------------------------------------------------\n");
  _k->_logger->logInfo("minimal", "current generation: #%zu: \n", _k->_currentGeneration);
};

void __className__::printRunAfter()
{
  _k->_logger->logInfo("Minimal", "--------------------------------------------------------------------\n");
  _k->_logger->logInfo("Minimal", "%s finished correctly.\n", this->getType().c_str());
  for (auto &crit : _terminationCriteria)
  {
    _k->_logger->logInfo("Normal", "Termination Criterion Met: %s\n", crit.c_str());
  }
  _k->_logger->logInfo("Normal", "Final Generation: %lu\n", _k->_currentGeneration);
  _k->_logger->logInfo("Normal", "Elapsed Time: %.3fs\n", _k->_genTime);
};

void __className__::setInitialConfiguration(){};

__moduleAutoCode__;

__endNamespace__;
