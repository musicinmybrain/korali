#include "modules/solver/solver.hpp"

__startNamespace__;

/**
 * @brief Prints solver information before the execution of the current generation.
 */
void __className__::printGenerationBefore(){
    _k->_logger->logInfo("minimal", "--------------------------------------------------------------------\n");
    _k->_logger->logInfo("minimal", "current generation: #%zu: \n", _k->_currentGeneration);
};

/**
 * @brief Prints solver information after the execution of the current generation.
 */
void __className__::printGenerationAfter(){};

void __className__::printRunAfter(){
    _k->_logger->logInfo("Minimal", "--------------------------------------------------------------------\n");
    _k->_logger->logInfo("Minimal", "%s finished correctly.\n", this->getType().c_str());
    while (!_terminationCriteria.empty())
    for(auto &crit : _terminationCriteria)
    {
        _k->_logger->logInfo("Normal", "Termination Criterion Met: %s\n", crit.c_str());
    }
    _k->_logger->logInfo("Normal", "Final Generation: %lu\n", _k->_currentGeneration);
    _k->_logger->logInfo("Normal", "Elapsed Time: %.3fs\n", _k->_genTime);
};

/**
 * @brief Initializes the solver with starting values for the first generation.
 */
void __className__::setInitialConfiguration(){};

__moduleAutoCode__;

__endNamespace__;
