{
 "Configuration Settings":
 [
   {
    "Name": [ "Number Markov Chain Samples" ],
    "Default": "10",
    "Type": "int",
    "Description": "The number of latent-variable samples to generate in each E-M iteration. More result in a more precise estimate of Q in each iteration - although Q is a Robbinsâ€“Monro 'running average', so there should not be a need for a very large number of samples."
   },
   {
    "Name": [ "Latent Variable Sampler" ],
     "Default": "nullptr",
    "Type": "std::function<void(korali::Sample&)>",
    "Description": "Stores a user-defined sampler. It should store samples of the latent variables in the 'sample' object, as sample['Samples'] = ..., given a value for the parameters of the distribution (any datapoints need to be stored/processed internally). (Input: a korali::Sample object, with a list of hyperparameters that can be accessed as sample['Hyperparameters'][0], etc. and number of samples sample['Number Samples']; can also access sample['Number Of Latent Variables']. Sets: vector<vector<double>> (one vector per sample). )"
   },
   {
    "Name": [ "Alpha 1" ],
     "Default": "0.6",
    "Type": "double",
    "Description": "The 'decay rate' gamma_k (used in Robbins-Monro averaging) is calculated as 1/(k^alpha). You can set two different alphas, one for the initial phase, one for the later phase. This alpha is for the initial phase."
   },
   {
    "Name": [ "Alpha 2" ],
     "Default": "0.9",
    "Type": "double",
    "Description": "The 'decay rate' gamma_k (used in Robbins-Monro averaging) is calculated as 1/(k^alpha). You can set two different alphas, one for the initial phase, one for the later phase. This alpha is for the later phase."
   },
   {
    "Name": [ "Number Initial Steps" ],
     "Default": "100",
    "Type": "int",
    "Description": "After this number of initial steps, the decay rate switches from being defined by Alpha 1 to being defined by Alpha 2."
   },
   {
    "Name": [ "M Step Solver Type" ],
    "Type": "std::string",
    "Default": "CMAES",
    "Options": [
                { "Value": "CMAES", "Description": "CMAES solver as implemented in Korali." }
               ],
    "Description": "Which solver to use in the M step."
   }
 ],

 "Termination Criteria":
 [
 ],

 "Variables Configuration":
 [
   {
    "Name": [ "Initial Value" ],
    "Type": "double",
    "Description": "Defines the initial value at which the algorithm will start looking for an optimum."
   }
 ],

 "Internal Settings":
 [
   {
    "Name": [ "Current Hyperparameters" ],
    "Type": "std::vector<double>",
    "Default": "std::vector<double>(0)",
    "Description": "Current values of the hyperparameters"
   },
   {
    "Name": [ "Previous Latent Sample Means" ],
    "Type": "std::vector<double>",
    "Default": "std::vector<double>(0)",
    "Description": "For each latent variable, contains the mean of all sampled values from the previous generation / E-M step. Used to initialize sampling in the next iteration."
   },

   {
    "Name": [ "Previous Sample Mean" ],
    "Type": "double",
    "Default": "0",
    "Description": "Temporarily contains the mean of all sampled values from the previous generation / E-M step, for **one** latent variable."
   },

   {
     "Name": [ "Has User Defined Sampler" ],
     "Type": "bool",
     "Description": "Current value of parameters."
   },
   {
     "Name": [ "Current Samples" ],
     "Type": "std::vector<std::vector<double>>",
     "Description": "Sampled values of the latent variables in the current iteration. A vector of _numberMarkovChainSamples vectors with samples. (Outer vector iterates over samples, inner vector over different latent variables.)"
   },
   {
     "Name": [ "Previous Samples" ],
     "Type": "std::vector<std::vector<double>>",
     "Description": "Sampled values of the latent variables from the last iteration"
   },
   {
     "Name": [ "Current Samples S Vectors" ],
     "Type": "std::vector<std::vector<double>>",
     "Description": "S (sufficient statistics) for each of the current samples of latent variables, and the current hyperparameters. Needed for calculating a Robbins-Monro update of . "
   },
   {
     "Name": [ "Current S" ],
     "Type": "std::vector<double>",
     "Description": "Robbins-Monro average of S (sufficient statistics of the distribution). Updated at every step. "
   },
   {
     "Name": [ "Previous S" ],
     "Type": "std::vector<double>",
     "Description": "Robbins-Monro average of S from one step before. 'Little change in S' can be used as termination criterion (TODO). "
   },
   {
     "Name": [ "Number Variables" ],
     "Type": "int",
     "Description": "Number of variables"
   },
   {
     "Name": [ "Number Latent" ],
     "Type": "int",
     "Description": "Number of latent variables"
   },
   {
     "Name": [ "Number Hyperparameters" ],
     "Type": "int",
     "Description": "Number of hyperparameters (= all variables that are not latent variables)"
   },
   
   
   

   {
     "Name": [ "Current Evaluation" ],
     "Type": "double",
     "Description": "Function evaluation in the current step."
   },
   {
     "Name": [ "Previous Evaluation" ],
     "Type": "double",
     "Description": "Function evaluation in the previous step."
   },
   {
     "Name": [ "Best Evaluation" ],
     "Type": "double",
     "Description": "Smaller function evaluation"
   },
   {
     "Name": [ "Max Stall Counter" ],
     "Type": "double",
     "Description": "Counts the number the algorithm has been stalled in function evaluation bigger than the best one."
   },
   {
     "Name": [ "X Diff" ],
     "Type": "double",
     "Description": "Difference in parameters..."
   }
 ],


 "Module Defaults":
 {
   "M Step Solver Type": "CMAES",
   "Number Markov Chain Samples" : 10,
   "Alpha 1" : 0.6,
   "Alpha 2" : 0.9,
   "Number Initial Steps": 100
 },

 "Variable Defaults":
 {
 }

}
