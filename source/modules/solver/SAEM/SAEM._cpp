#include "modules/solver/SAEM/SAEM.hpp"
#include "modules/problem/problem.hpp"
#include "modules/engine/engine.hpp"
#include "sample/sample.hpp"
#include "modules/experiment/experiment.hpp"
#include "modules/conduit/conduit.hpp"

#include <string>
#include <stdio.h>
#include <vector>

void korali::solver::SAEM::initialize()
{

  if( _k->_problem->getType() != "Bayesian/Latent")
    korali::logError("SAEM can only optimize problems of type 'Bayesian/Latent' .\n");

   _latentProblem = dynamic_cast<korali::problem::bayesian::Latent*>(_k->_problem); // .get<korali::problem::bayesian::Latent>()

  _numberVariables = _k->_variables.size();
  _numberLatent = _latentProblem->_latentVariableIndices.size();

  if (_k->_currentGeneration > 0) return;

  for (size_t i = 0; i < _numberVariables; i++)
    if( std::isfinite(_k->_variables[i]->_initialValue) == false )
      korali::logError("Initial Value of variable \'%s\' not defined (no defaults can be calculated).\n", _k->_variables[i]->_name.c_str());

  if (_latentVariableSampler){
    _hasUserDefinedSampler = true;}
  else _hasUserDefinedSampler = false;
    //  _hasUserDefinedSampler = (_latentVariableSampler != 0); // Todo: not sure if this is the right way to check for not-passed sampler



  /* */


  _currentSamples.resize( _numberLatent);
  for (size_t j = 0; j < _numberMarkovChainSamples; j++){
      for (size_t i = 0; i < _numberLatent; i++){
          size_t idx = _latentProblem->_latentVariableIndices[i];
          _currentSamples[j][i] = _k->_variables[idx]->_initialValue;    // _k->_variables: vector of korali-variables* (std::vector<korali::Variable*>).
      }
  }
  // _bestSamples = _currentSamples;
  //_delta.resize( N, _delta0 );
  //_currentGradient.resize( N, 0);
  //_previousGradient.resize( N, 0.0 );

  _bestEvaluation = korali::Inf;
  //_xDiff = korali::Inf;
  //_maxStallCounter = 0;
  //_normPreviousGradient = korali::Inf;
  //_previousEvaluation   = korali::Inf;
}


void korali::solver::SAEM::sampleLatent(){
    // If no sampling function is given, create a sampling experiment, run it and get the results.

    if (_hasUserDefinedSampler) {
      //for(size_t i=0; i< _numberMarkovChainSamples; i++){
          korali::Sample sample;
          sample["Hyperparameters"] = _currentHyperparameters;
          sample["Number Samples"] = _numberMarkovChainSamples;
          sample.run(_latentVariableSampler); // Like in: problem/reference.cpp, def of evaluateLogLikelihood()
          std::vector<std::vector<double>> v =  sample["Samples"].get<std::vector<std::vector<double>>>();
          if (v.size() != _numberMarkovChainSamples) korali::logError("User defined sampler did not return the correct number of samples ('Number Samples').");
          _currentSamples = v; //.push_back(v);
          //}
    }
    else {
      runBuiltinSampler();
    }


}



void korali::solver::SAEM::runBuiltinSampler()
{

    /*
     * probability to sample from:
     * p(d, z | theta) * p(theta) -- that's the (log-)posterior
     * - use a "Custom" bayesian problem, with our log-posterior as "Likelihood Model" , but with the current values for theta inserted.
    */

    /* Create one sampling experiment to sample all latent variables. After all the latent vars are correlated / have a joint distrib.
        Todo: does it make sense to re-create these experiments at every E-M step? Otherwise, how
            to automatically update the initial mean and the distribution function of the sampling experiments?*/

         auto k = korali::Engine();
         auto e = korali::Experiment();
         //auto p = heat2DInit(&argc, &argv);

         // Based on tutorial a2-sampling
         e["Problem"]["Type"] = "Direct/Basic";
         e["Problem"]["Objective Function"] = [params=_currentHyperparameters, this](korali::Sample& s) -> void {
                        if (! s.contains("Latent Variables")){
                            korali::logError("You try to evaluate the likelihood without passing values for the latent variables to the sample.\n");
                        }
                        s["Hyperparameters"] = params; // _currentHyperparameters;
                        // Ugly? & Probably doesnt work
                        _latentProblem->evaluateLogLikelihood(s);
                        
                    };

        for (size_t i=0; i < _numberLatent; i++){

             size_t idx = _latentProblem->_latentVariableIndices[i];
             std::string varName = _k->_variables[idx]->_name;

             if (_k->_currentGeneration == 0){
                previousSampleMean =  _previousLatentSampleMeans[i]; // TODO: Check, do I need a vector of vectors instead? Edit: No.
             } else {
                previousSampleMean = _k->_variables[idx]->_initialValue;
             }
            // Defining problem's variables
            e["Variables"][i]["Name"] = varName;
            e["Variables"][i]["Initial Mean"] = previousSampleMean;
            e["Variables"][i]["Initial Standard Deviation"] = 1.0;
        }

        // Configuring the MCMC sampler parameters
        e["Solver"]["Type"]  = "Sampler/MCMC";
        e["Solver"]["Burn In"] = 500;
        e["Solver"]["Termination Criteria"]["Max Samples"] = 5000;

        // Configuring output settings
        e["Results"]["Frequency"] = 500;
        e["Console"]["Frequency"] = 500;
        e["Console"]["Verbosity"] = "Detailed";

        // Todo: I don't think a result path is needed (and it'd need a step id in the pathname as well)
        //e["Results"]["Path"] = "setup/results_phase_1/" + "0"*(3 - str(i).length()) +  std:to_string(i);
        k.run(e);

        std::vector<std::vector<double>> db = e["Solver"]["Sample Database"].get<std::vector<std::vector<double>>>();
        printf("Database size: %lu\n", db.size());
        /*for (size_t i = 0; i < db.size(); i++)
        {
        printf("[ ");
        for (size_t j = 0; j < db[i].size(); j++)
        printf("%f, ", db[i][j]);
        printf("]\n");
        }*/
        // TODO: modify this
        std::vector<std::vector<double>>::const_iterator first = db.end() - _numberMarkovChainSamples;
        std::vector<std::vector<double>>::const_iterator last = db.end();
        std::vector<std::vector<double>> samples(first, last);

        _currentSamples = samples;
}

/*void korali::solver::optimizer::Rprop::evaluateFunctionAndGradient( void )
{
  int Ns = 1;
  // Initializing Sample Evaluation
  std::vector<korali::Sample> samples(Ns);
  for (size_t i = 0; i < Ns; i++){
    samples[i]["Operation"]  = "Basic Evaluation";
    samples[i]["Parameters"] = _currentX;
    samples[i]["Sample Id"]  = i;
    _modelEvaluationCount++;
    korali::_conduit->start(samples[i]);
  }

  // Waiting for samples to finish
  korali::_conduit->waitAll(samples);

  // Processing results
  // The 'minus' is there because we want Rprop to do Maximization be default.
  for (size_t i = 0; i < Ns; i++){
    _currentEvaluation = samples[i]["Evaluation"];
    _currentEvaluation = -_currentEvaluation;
    for( size_t j=0; j<N; j++){
      _currentGradient[j] = samples[i]["Gradient"][j];
      _currentGradient[j] = -_currentGradient[j];
    }
  }
}*/

void korali::solver::SAEM::runGeneration( void )
{

  if (_k->_currentGeneration > 0) initialize();

  /* E1: Sample latent variable values */
  sampleLatent(); 
  std::cout << "Sampled; generation: " << _k->_currentGeneration << std::endl;
  /* E2: Update posterior probability function Q */


  /* M:  Find argmax Q(theta) */



  /* * * * * * */



/*   evaluateFunctionAndGradient( );

  korali::logInfo("Normal","X = [ ");
  for(size_t k=0; k<N; k++) korali::logData("Normal"," %.5le  ",_currentX[k]);
  korali::logData("Normal"," ]\n");

  korali::logInfo("Normal","F(X) = %le \n", _currentEvaluation );

  korali::logInfo("Normal","DF(X) = [ ");
  for(size_t k=0; k<N; k++) korali::logData("Normal"," %.5le  ",_currentGradient[k]);
  korali::logData("Normal"," ]\n");

  korali::logInfo("Normal","X_best = [ ");
  for(size_t k=0; k<N; k++) korali::logData("Normal"," %.5le  ",_bestX[k]);
  korali::logData("Normal"," ]\n");

  Update_iminus();

  _previousEvaluation   = _currentEvaluation;
  _previousGradient     = _currentGradient;
  _normPreviousGradient = vectorNorm(_previousGradient);

  if( _currentEvaluation < _bestEvaluation ){
    _bestEvaluation = _currentEvaluation;
    std::vector<double> tmp(N);
    for(size_t j=0; j<N; j++) tmp[j] = _bestX[j]-_currentX[j];
    _xDiff = vectorNorm( tmp );
    _bestX = _currentX;
    _maxStallCounter = 0;
  }
  else{
    _maxStallCounter++;
  } */

}




void korali::solver::SAEM::printGenerationBefore(){ return; }

void korali::solver::SAEM::printGenerationAfter() { return; }

void korali::solver::SAEM::finalize()  { return; }

