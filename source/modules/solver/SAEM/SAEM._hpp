#ifndef _KORALI_SOLVERS_SAEM_H_
#define _KORALI_SOLVERS_SAEM_H_

#include "engine.hpp"
#include "modules/problem/bayesian/latent/latent.hpp"
#include "modules/solver/solver.hpp"
#include <vector>

namespace korali
{
namespace solver
{
/*! @brief Class for the (general) Stochastic Approximation Expectation Maximization solver. */
class SAEM : public Solver
{
  public:
  void setInitialConfiguration();

  Engine _engine;         //!< @brief Korali engine for running the optimization in the M step
  Experiment _experiment; //!< @brief Korali experiment for the optimization in the M step

  problem::bayesian::Latent *_latentProblem; //!< @brief The problem instance that this SAEM is supposed to solve

  /**
  * @brief Run the user defined sampler to get new samples. Track mean and variance of the samples.
  */
  void sampleLatent();

  /**
  * @brief Called after sampling.

        Sets _currentSamplesSVectors using each current sample of latent variables
        and the current hyperparameter values

        Uses:
              _currentSamples,
              _currentHyperparameters,
              the S function of _latentProblem
        Sets:
              _currentSamplesSVectors
  */
  void calculateSampleSVectors();

  /** @brief Robbins-Monro-update our estimate of S.

 Uses:
        _currentSamplesSValues
        _currentS
        _k->_currentGeneration
 Sets:
       _previousS <-- _currentS
       _currentS

       Note/ Todo: This could be parallelized. But this would only be relevant if there are a huge amount of
                    samples, else this function should execute fast already.
*/
  void updateS();

  /**
  * @brief  Set up a korali experiment and optimize the current
  *         Q function to get a new vector of hyperparameters.
  */
  void updateHyperparameters();

  /**
  * @brief Test whether index idx corresponds to a latent variable.
  * @param idx The index of a variable, in the list of all variables. The order is given by the user when defining
  *            variables, e.g. k["Variables"][3] will be the third variable. (typo possible.)
  * @return True if the variable at this index is a latent variable.
  */
  bool isLatent(int idx);

  /**
  * @brief Utility function to calculate mean and standard deviation of the values in vector v.
  * @param v A 1D vector.
  * @return A two-element vector: {mean, stdev} (in this order)
  */
  std::vector<double> meanAndSDev(std::vector<double> v);

  /**
  * @brief Utility function, "transposes" a vector of vectors @param data
  * @param data A vector of vectors. All sub-vectors are expected to have same length. Represents a 2D-array.
  * @return result, a 2D array, so that data[i][j] is moved to result[j][i].
  */
  std::vector<std::vector<double>> transpose(const std::vector<std::vector<double>> data);

  /**
  * @brief Function to be optimized in the M-step.

   Uses:
       _currentS
       zeta and phi functions of _latentProblem
   Sets:
       _currentQ

   @param sample - the sample used during optimization; is expected to contain the
            hyperparameters at sample["Parameters"].
            Sets sample["F(x)"].

   @param zetaFc Function for calculating zeta of the likelihood model
   @param phiFc Function for calculating phi of the likelihood model
  */
  static void QFunction(Sample &sample, size_t zetaFc, size_t phiFc);

  void initialize() override;
  void finalize() override;
  void runGeneration() override;
  void printGenerationBefore() override;
  void printGenerationAfter() override;
};

} // namespace solver
} // namespace korali

#endif // _KORALI_SOLVERS_SAEM_H_
