#ifndef _KORALI_SOLVERS_SAEM_H_
#define _KORALI_SOLVERS_SAEM_H_

#include <vector>
#include "modules/solver/solver.hpp"
#include "modules/problem/bayesian/latent/latent.hpp"

namespace korali { namespace solver {

class SAEM : public korali::Solver
{

  private:  


    void setInitialConfiguration();

    korali::problem::bayesian::Latent* _latentProblem;
    void sampleLatent();
    void runBuiltinSampler( );
    void calculateSampleSVectors();
    void updateS();
    void updateQFunction();
    void updateHyperparameters();
    std::function<void(korali::Sample&)> _currentQ;

    bool isLatent(int idx);

  public:

    void finalize() override;
    void runGeneration() override;
    void printGenerationBefore() override;
    void printGenerationAfter() override;


};

} } // namespace korali::solver

#endif // _KORALI_SOLVERS_SAEM_H_
