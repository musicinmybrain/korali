#ifndef _KORALI_SOLVERS_SAEM_H_
#define _KORALI_SOLVERS_SAEM_H_

#include "engine.hpp"
#include "modules/problem/bayesian/latent/latent.hpp"
#include "modules/solver/solver.hpp"
#include <vector>

namespace korali
{
namespace solver
{
class SAEM : public korali::Solver
{
  public:
  void setInitialConfiguration();

  /**
  * @brief [Missing Description]
  */
  korali::Engine _engine;

  /**
  * @brief [Missing Description]
  */
  korali::Experiment _experiment;

  /**
 * @brief [Missing Description]
 */
  korali::problem::bayesian::Latent *_latentProblem;

  /**
  * @brief [Missing Description]
  */
  void sampleLatent();

  /**
  * @brief [Missing Description]
  */
  void calculateSampleSVectors();

  /**
  * @brief [Missing Description]
  */
  void updateS();

  /**
  * @brief [Missing Description]
  */
  void updateQFunction();

  /**
  * @brief [Missing Description]
  */
  void updateHyperparameters();

  /**
  * @brief [Missing Description]
  * @param idx [Missing Description]
  * @return [Missing Description]
  */
  bool isLatent(int idx);

  /**
  * @brief [Missing Description]
  * @param v [Missing Parameter]
  * @return [Missing Return]
  */
  std::vector<double> meanAndSDev(std::vector<double> v);

  /**
  * @brief [Missing Description]
  * @param data [Missing Param]
  * @return [Missing Return]
  */
  std::vector<std::vector<double>> transpose(const std::vector<std::vector<double>> data);

  /**
  * @brief [Missing Description]
  * @param sample [Missing Description]
  */
  static void QFunction(korali::Sample &sample);

  void initialize() override;
  void finalize() override;
  void runGeneration() override;
  void printGenerationBefore() override;
  void printGenerationAfter() override;
};

} // namespace solver
} // namespace korali

#endif // _KORALI_SOLVERS_SAEM_H_
