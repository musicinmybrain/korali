#ifndef _KORALI_SOLVERS_SAEM_H_
#define _KORALI_SOLVERS_SAEM_H_

#include <vector>
#include "engine.hpp"
#include "modules/solver/solver.hpp"
#include "modules/problem/bayesian/latent/latent.hpp"

namespace korali { namespace solver {

/*! @brief Class for the (general) Stochastic Approximation Expectation Maximization solver. */
class SAEM : public korali::Solver
{
 public:

 void setInitialConfiguration();

 korali::Engine _engine;
 korali::Experiment _experiment;

 korali::problem::bayesian::Latent* _latentProblem;
 void sampleLatent();
 void calculateSampleSVectors();
 void updateS();
 void updateQFunction();
 void updateHyperparameters();

 bool isLatent(int idx);

 std::vector<double> meanAndSDev(std::vector<double> v);
 std::vector<std::vector<double> > transpose(const std::vector<std::vector<double> > data);

 static void QFunction(korali::Sample& sample);

 void initialize() override;
 void finalize() override;
 void runGeneration() override;
 void printGenerationBefore() override;
 void printGenerationAfter() override;
};

} } // namespace korali::solver

#endif // _KORALI_SOLVERS_SAEM_H_
