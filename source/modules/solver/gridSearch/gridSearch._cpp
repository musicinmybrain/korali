#include "modules/conduit/conduit.hpp"
#include "modules/solver/gridSearch/gridSearch.hpp"

namespace korali
{
namespace solver
{
void GridSearch::setInitialConfiguration()
{
  _numberOfValues = 1;
  for (size_t i = 0; i < _k->_variables.size(); i++)
    _numberOfValues *= _k->_variables[i]->_values.size();

  if (_numberOfValues > _maxModelEvaluations)
    KORALI_LOG_ERROR("%lu > %lu. To many evaluations of the Utility per Sensor", _numberOfValues, _maxModelEvaluations);

  _k->_logger->logInfo("Normal", "Evaluating a total of %lu values..\n", _numberOfValues);

  _maxModelEvaluations = _numberOfValues;

  _objective.resize(_numberOfValues);
  _locationOfMaximum.resize(_k->_variables.size());

  // We assume i = _index[0] + _index[1]*_sample[0].size() + _index[1]*_sample[0].size()*_sample[1].size() + .....
  _indexHelper.resize(_k->_variables.size());
  for (size_t i = 0; i < _k->_variables.size(); i++)
  {
    if (i == 0 || i == 1)
      _indexHelper[i] = _k->_variables[0]->_values.size();
    else
      _indexHelper[i] = _indexHelper[i - 1] * _k->_variables[i - 1]->_values.size();
  }
}

void GridSearch::runGeneration()
{
  if (_k->_currentGeneration == 1) setInitialConfiguration();

  // Example: Evaluating a sample
  std::vector<Sample> samples(_numberOfValues);
  std::vector<double> sampleData(_k->_variables.size());

  size_t rest, index;
  for (size_t i = 0; i < _numberOfValues; i++)
  {
    rest = i;
    for (int d = _k->_variables.size() - 1; d >= 0; d--)
    {
      // We assume i = _index[0] + _index[1]*_sample[0].size() + _index[1]*_sample[0].size()*_sample[1].size() + .....
      if (d == 0)
        index = rest % _indexHelper[d];
      else
        index = rest / _indexHelper[d];

      rest -= index * _indexHelper[d];

      sampleData[d] = _k->_variables[d]->_values[index];
    }
    _k->_logger->logInfo("Detailed", "Running sample %zu/%zu with values:\n         ", i + 1, _numberOfValues);
    for (auto &x : sampleData) _k->_logger->logData("Detailed", " %lu   ", x);
    _k->_logger->logData("Detailed", "\n");

    samples[i]["Module"] = "Problem";
    samples[i]["Operation"] = "Evaluate";
    samples[i]["Parameters"] = sampleData;
    samples[i]["Sample Id"] = i;
    _conduit->start(samples[i]);
    _modelEvaluationCount++;
  }
  _conduit->waitAll(samples);
  for (size_t i = 0; i < _numberOfValues; i++)
  {
    _objective[i] = KORALI_GET(double, samples[i], "F(x)");
  }

  std::vector<double>::iterator maximum = std::max_element(_objective.begin(), _objective.end());
  size_t maxIndex = std::distance(_objective.begin(), maximum);

  _locationOfMaximum = KORALI_GET(std::vector<double>, samples[maxIndex], "Parameters");
  _maximum = KORALI_GET(double, samples[maxIndex], "F(x)");
}

void GridSearch::printGenerationBefore()
{
  _k->_logger->logInfo("Minimal", "Starting GridSearch\n");
}

void GridSearch::printGenerationAfter()
{
  _k->_logger->logInfo("Minimal", "Found Maximum with Objective %+6.3e at:\n", _maximum);
  for (size_t i = 0; i < _locationOfMaximum.size(); i++)
    _k->_logger->logData("Normal", " %+6.3e", _locationOfMaximum[i]);
  _k->_logger->logData("Normal", "\n");
}

void GridSearch::finalize()
{
  // Updating Results
  (*_k)["Results"]["Best Sample"]["Parameters"] = _locationOfMaximum;
  (*_k)["Results"]["Best Sample"]["F(x)"] = _maximum;
}

} // namespace solver

} // namespace korali
