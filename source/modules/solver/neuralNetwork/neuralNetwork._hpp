#ifndef _KORALI_SOLVER_NEURALNETWORK_HPP_
#define _KORALI_SOLVER_NEURALNETWORK_HPP_

#include "modules/solver/solver.hpp"
#include "modules/layer/layer.hpp"
#include "modules/distribution/univariate/uniform/uniform.hpp"
#include "modules/problem/supervisedLearning/supervisedLearning.hpp"

#ifdef _KORALI_USE_ONEDNN
#include "dnnl.hpp"
#endif

namespace korali { namespace solver {

class NeuralNetwork : public korali::Solver
{
 public:

 /**
  * @brief Flag that indicates whether the oneDNN structures have been initialized
  */
 bool _isInitialized;

 #ifdef _KORALI_USE_ONEDNN
 /**
   * @brief oneDNN Engine
   */
 dnnl::engine _engine;

 /**
   * @brief oneDNN Stream to run operations
   */
 dnnl::stream _stream;

 #endif

 void initialize() override;
 void setInitialConfiguration() override;
 void runGeneration() override;
 void printGenerationAfter() override;

};

} } // namespace korali::solver


#endif // _KORALI_SOLVER_NEURALNETWORK_HPP_
