#include "modules/solver/neuralNetwork/neuralNetwork.hpp"
#include "modules/conduit/conduit.hpp"

void korali::solver::NeuralNetwork::setInitialConfiguration()
{
 // Initialize solver's configuration here

  #ifndef _KORALI_USE_ONEDNN
    _k->_logger->logError("OneDNN has not been properly installed to support NN operations.\n");
  #endif

}

void korali::solver::NeuralNetwork::runGeneration()
{
 if (_k->_currentGeneration == 1) setInitialConfiguration();

 if (_operation == "Training") doTraining();
 if (_operation == "Forwarding") doForwarding();

}

void korali::solver::NeuralNetwork::doTraining()
{

}

void korali::solver::NeuralNetwork::doForwarding()
{

}

void korali::solver::NeuralNetwork::printGenerationBefore()
{
 _k->_logger->logInfo("Normal", "Preparing to start generation...\n");
}

void korali::solver::NeuralNetwork::printGenerationAfter()
{
 _k->_logger->logInfo("Normal", "Finished to generation %lu...\n", _k->_currentGeneration);
}

