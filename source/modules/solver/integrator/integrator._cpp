#include "modules/conduit/conduit.hpp"
#include "modules/solver/integrator/integrator.hpp"

namespace korali
{
namespace solver
{
void Integrator::setInitialConfiguration()
{
  _integral = 0;
  _sampleCount = 1;
  for (size_t i = 0; i < _k->_variables.size(); i++)
    _sampleCount *= _k->_variables[i]->_numberOfGridpoints;
  _maxModelEvaluations = std::min(_maxModelEvaluations, _sampleCount);

  if (_k->_variables[0]->_samplePoints.size() > 0)
  { //quadrature
    _indicesHelper.resize(_k->_variables.size());
    _indicesHelper[0] = _k->_variables[0]->_samplePoints.size();
    _indicesHelper[1] = _k->_variables[0]->_samplePoints.size();
    for (size_t i = 2; i < _indicesHelper.size(); i++)
    {
      _indicesHelper[i] = _indicesHelper[i - 1] * _k->_variables[i - 1]->_samplePoints.size();
    }
  }
}

void Integrator::runGeneration()
{
  if (_k->_currentGeneration == 1) setInitialConfiguration();

  _executionsPerGeneration = std::min(_executionsPerGeneration, _maxModelEvaluations - _modelEvaluationCount);

  std::vector<Sample> samples(_executionsPerGeneration);
  std::vector<double> sampleData(_k->_variables.size());
  std::vector<std::vector<size_t>> usedIndices(_executionsPerGeneration, std::vector<size_t>(_k->_variables.size()));

  size_t rest, index;
  for (size_t i = 0; i < _executionsPerGeneration; i++)
  {
    rest = _modelEvaluationCount;
    for (int d = _k->_variables.size() - 1; d >= 0; d--)
    {
      if (_k->_variables[0]->_samplePoints.size() > 0)
      { //quadrature
        // We assume i = _index[0] + _index[1]*_sample[0].size() + _index[1]*_index[2]*_sample[1].size() + .....
        if (d == 0)
          index = rest % _indicesHelper[d];
        else
          index = rest / _indicesHelper[d];
        rest -= index * _indicesHelper[d];

        sampleData[d] = _k->_variables[d]->_samplePoints[index];
        usedIndices[i][d] = index;
      }
      else
      { //monte carlo
        sampleData[d] = _k->_distributions[_k->_variables[d]->_distributionIndex]->getRandomNumber();
        usedIndices[i][d] = 0;
      }
    }

    _k->_logger->logInfo("Detailed", "Running sample %zu/%zu with values:\n         ", _modelEvaluationCount + 1, _sampleCount);
    for (auto &x : sampleData) _k->_logger->logData("Detailed", " %le   ", x);
    _k->_logger->logData("Detailed", "\n");

    samples[i]["Sample Id"] = i;
    samples[i]["Module"] = "Problem";
    samples[i]["Operation"] = "Execute";
    samples[i]["Parameters"] = sampleData;
    _conduit->start(samples[i]);
    _modelEvaluationCount++;
  }
  _conduit->waitAll(samples);

  double weight;
  for (size_t i = 0; i < _executionsPerGeneration; i++)
  {
    weight = 1.0;
    for (size_t d = 0; d < _k->_variables.size(); d++)
      weight *= _k->_variables[d]->_quadratureWeights[usedIndices[i][d]];

    auto f = KORALI_GET(double, samples[i], "Evaluation");

    _integral += weight * f;
  }
  (*_k)["Results"]["Integral"] = _integral;
}

void Integrator::printGenerationBefore()
{
}

void Integrator::printGenerationAfter()
{
  _k->_logger->logInfo("Minimal", "Total Terms summed %lu/%lu.\n", _modelEvaluationCount, _sampleCount);
}

void Integrator::finalize()
{
  _k->_logger->logInfo("Minimal", "Integral Calculated: %e\n", _integral);
}

} // namespace solver

} // namespace korali
