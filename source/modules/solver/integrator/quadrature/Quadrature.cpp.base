#include "engine.hpp"
#include "modules/solver/integrator/quadrature/Quadrature.hpp"

__startNamespace__;

void __className__::setInitialConfiguration()
{
  Integrator::setInitialConfiguration();

  _indicesHelper.resize(_variableCount);
  _weight = 1.;

  size_t numEval = 1;
  for (size_t i = 0; i < _variableCount; i++)
  {
    if (_k->_variables[i]->_numberOfGridpoints <= 0) KORALI_LOG_ERROR("'Number Of Gridpoints' for variable %s must be larger 0", _k->_variables[i]->_name.c_str());

    double intervalSize = _k->_variables[i]->_upperBound - _k->_variables[i]->_lowerBound;

    // Initialize quadrature weight
    if (_method == "Rectangle")
    {
      _weight *= intervalSize / (_k->_variables[i]->_numberOfGridpoints);
    }
    else if (_method == "Trapezoidal")
    {
      _weight *= intervalSize / _k->_variables[i]->_numberOfGridpoints;
    }
    else if (_method == "Simpson")
    {
      _weight *= intervalSize / (_k->_variables[i]->_numberOfGridpoints - 1) / 3.;
    }

    // Initialize indices helper
    if (i == 0)
      _indicesHelper[i] = 1;
    else
      _indicesHelper[i] = _k->_variables[i - 1]->_numberOfGridpoints * _indicesHelper[i - 1];

    numEval *= _k->_variables[i]->_numberOfGridpoints;
  }

  // Init max model evaluations
  _maxModelEvaluations = std::min(_maxModelEvaluations, numEval);
}

void __className__::launchSample(size_t sampleIndex)
{
  std::vector<float> params(_variableCount);

  float weight = _weight;
  for (size_t d = 0; d < _variableCount; ++d)
  {
    const size_t dimIdx = (size_t)(sampleIndex / _indicesHelper[d]) % _k->_variables[d]->_numberOfGridpoints;

    params[d] = dimIdx * (_k->_variables[d]->_upperBound - _k->_variables[d]->_lowerBound);

    if (_method == "Trapezoidal")
    {
      if ((dimIdx == 0) || (dimIdx == _k->_variables[d]->_numberOfGridpoints - 1)) weight *= 0.5;
    }
    else if (_method == "Simpson")
    {
      if ((dimIdx == 0) || (dimIdx == _k->_variables[d]->_numberOfGridpoints - 1))
        weight *= 1.;
      else if (dimIdx % 2 == 0)
        weight *= 2.;
      else
        weight *= 4.;
    }
  }

  _gridPoints.push_back(params);

  _samples[sampleIndex]["Sample Id"] = sampleIndex;
  _samples[sampleIndex]["Module"] = "Problem";
  _samples[sampleIndex]["Operation"] = "Execute";
  _samples[sampleIndex]["Parameters"] = params;
  _samples[sampleIndex]["Weight"] = weight;

  KORALI_START(_samples[sampleIndex]);
}

__moduleAutoCode__;

__endNamespace__;
