{
 "Configuration Settings": 
 [
   {
    "Name": [ "Burn In" ],
    "Type": "size_t",
    "Description": "Specifies the number of preliminary HMC steps before samples are being drawn. This may reduce effects from improper initialization."
   },
   {
    "Name": [ "Use Euclidean Metric" ],
    "Type": "bool",
    "Description": "Specifies if Metric is calculated from the samples via Fisher information."
   },
   {
    "Name": [ "Step Size" ],
    "Type": "double",
    "Description": "Step size used in Leapfrog scheme."
   },
   {
    "Name": [ "Adaptive Time Stepping" ],
    "Type": "bool",
    "Description": "Controls whether dual averaging technique for adaptive time stepping is used."
   },
   {
    "Name": [ "Desired Average Acceptance Rate" ],
    "Type": "double",
    "Description": "Desired Average Acceptance Rate used in Adaptive Time Stepping."
   },
   {
    "Name": [ "Target Integration Time" ],
    "Type": "double",
    "Description": "Targeted Integration Time used in Adaptive Time Stepping."
   },
   {
    "Name": [ "Num Integration Steps" ],
    "Type": "size_t",
    "Description": "Number of Integration steps used in Leapfrog scheme."
   }
 ],
 
 "Termination Criteria":
 [
   {
    "Name": [ "Max Samples" ],
    "Type": "size_t",
    "Criteria": "_sampleDatabase.size() >= _maxSamples",
    "Description": "Number of Samples to Generate."
   }   
 ]
 ,
 "Variables Configuration": 
 [
   {
    "Name": [ "Initial Mean" ],
    "Type": "double",
    "Description": "Specifies the Initial Mean of the proposal distribution."
   },
   {
    "Name": [ "Initial Standard Deviation" ],
    "Type": "double",
    "Description": "Specifies the Standard Deviation for each variable. The proposal distribution is defined through a covariance matrix with the variance of the variables in its diagonal."
   }
 ],
 
 "Internal Settings": 
 [
   {
    "Name": [ "Normal Generator" ],
    "Type": "korali::distribution::univariate::Normal*",
    "Description": "Normal random number generator."
   },
   {
    "Name": [ "Multivariate Generator" ],
    "Type": "korali::distribution::multivariate::Normal*",
    "Description": "Random number generator with a multivariate normal distribution."
   },
   {
    "Name": [ "Uniform Generator" ],
    "Type": "korali::distribution::univariate::Uniform*",
    "Description": "Uniform random number generator."
   },
   {
    "Name": [ "Chain Leader" ],
    "Type": "std::vector<double>",
    "Description": "Variables of the newest sample in the Markov chain."
   },
   {
    "Name": [ "Acceptance Rate" ],
    "Type": "double",
    "Description": "Ratio proposed to accepted samples (including Burn In period)."
   },
   {
    "Name": [ "Acceptance Count" ],
    "Type": "size_t",
    "Description": "Number of accepted samples (including Burn In period)."
   },
   {
    "Name": [ "Proposed Sample Count" ],
    "Type": "size_t",
    "Description": "Number of proposed samples."
   },
   {
    "Name": [ "Sample Database" ],
    "Type": "std::vector<std::vector<double>>",
    "Description": "Parameters generated by HMC and stored in the database."
   },
   {
    "Name": [ "Warmup Sample Database" ],
    "Type": "std::vector<std::vector<double>>",
    "Description": "Parameters generated by during warmup HMC and stored in the database. Used for Euclidean Metric approximation."
   },
   {
    "Name": [ "Chain Length" ],
    "Type": "size_t",
    "Description": "Current Chain Length (including Burn In and Leaped Samples)."
   },
   {
    "Name": [ "Cholesky Decomposition Metric" ],
    "Type": "std::vector<double>",
    "Description": "Chain Cholesky Decomposition of Metric for sampling (using a lower triangular matrix, with rest zeros)."
   },
   {
    "Name": [ "Position Leader" ],
    "Type": "std::vector<double>",
    "Description": "Variables of the newest position/sample in the Markov chain."
   },
   {
    "Name": [ "Position Candidate" ],
    "Type": "std::vector<double>",
    "Description": "Candidate position to be accepted or rejected."
   },
   {
    "Name": [ "Momentum Leader" ],
    "Type": "std::vector<double>",
    "Description": "Latest momentum sample."
   },
   {
    "Name": [ "Momentum Candidate" ],
    "Type": "std::vector<double>",
    "Description": "Proposed momentum after propagating Chain Leader and Momentum Leader according to Hamiltonian dynamics."
   },
   {
    "Name": [ "Metric" ],
    "Type": "std::vector<double>",
    "Description": "Metric used for sampling momentum."
   },
   {
    "Name": [ "Inverse Metric" ],
    "Type": "std::vector<double>",
    "Description": "Inverse Metric used for kinetic energy."
   },
   {
    "Name": [ "Position Mean" ],
    "Type": "std::vector<double>",
    "Description": "Mean of Markov Chain Position calculated from samples in Database. TODO:REPLACE Chain Mean."
   },
   {
    "Name": [ "Mu" ],
    "Type": "double",
    "Description": "Constant used for adaptive time stepping."
   }, 
   {
    "Name": [ "H Bar" ],
    "Type": "double",
    "Description": "Constant used for adaptive time stepping."
   }, 
   {
    "Name": [ "Dual Step Size" ],
    "Type": "double",
    "Description": "Dual Step Size used for adaptive time stepping according to dual averaging."
   }
 ],
 
  "Module Defaults":
  {
   "Burn In":  0,
   "Use Euclidean Metric": false,
   "Step Size": 0.01,
   "Num Integration Steps": 10,
   "Adaptive Time Stepping": false,
   "Dual Step Size": 1.0,
   "Desired Average Acceptance Rate": 0.65,
   
   "Termination Criteria":
   {
      "Max Samples": 5000
   },
   
   "Uniform Generator":
    {
     "Type": "Univariate/Uniform",
     "Minimum": 0.0,
     "Maximum": 1.0
    },
    
   "Normal Generator":
    {
     "Type": "Univariate/Normal",
     "Mean": 0.0,
     "Standard Deviation": 1.0
    },

    "Multivariate Generator":
    {
    "Type": "Multivariate/Normal"
    }
  }
}
