#ifndef _KORALI_SOLVER_HMC_HPP_
#define _KORALI_SOLVER_HMC_HPP_

// TODO: REMOVE normal/normal.hpp
#include "modules/distribution/multivariate/normal/normal.hpp"
#include "modules/distribution/univariate/normal/normal.hpp"
#include "modules/distribution/univariate/uniform/uniform.hpp"
#include "modules/solver/sampler/sampler.hpp"
#include <string>
#include <vector>

#include "hamiltonian_euclidean_dense.hpp"
#include "hamiltonian_euclidean_diag.hpp"
#include "hamiltonian_riemannian_const_dense.hpp"
#include "hamiltonian_riemannian_const_diag.hpp"
#include "hamiltonian_riemannian_diag.hpp"
#include "leapfrog_explicit.hpp"
#include "leapfrog_implicit.hpp"
#include "tree_helper_euclidean.hpp"
#include "tree_helper_riemannian.hpp"

namespace korali
{
namespace solver
{
namespace sampler
{
class HMC : public Sampler
{
  std::unique_ptr<Hamiltonian> _hamiltonian;
  std::unique_ptr<Leapfrog> _integrator;

  /**
  * @brief Updates internal state such as mean, Metric and InverseMetric.
  */
  void updateState();

  /**
  * @brief Process sample after evaluation.
  */
  void finishSample(size_t sampleId);

  public:
  /**
 * @brief Configures HMC.
 */
  void setInitialConfiguration() override;

  /**
  * @brief Final console output at termination.
  */
  void finalize() override;

  /**
  * @brief Generate a sample and evaluate it.
  */
  void runGeneration() override;

  /**
  * @brief Runs generation for HMC sampler.
  * @param logUniSample Log of uniform sample needed for Metropolis accepance / rejection step.
  */
  void runGenerationHMC(const double logUniSample);

  /**
  * @brief Rund NUTS algorithm with buildTreeUtil.
  * @param helper Helper struct for large argument list.
  */
  void runGenerationNUTSUtil(std::shared_ptr<TreeHelperEuclidean> helper);

  /**
  * @brief Rund NUTS algorithm with buildTreeUtil.
  * @param helper Helper struct for large argument list.
  */
  void runGenerationNUTSUtilRiemannian(std::shared_ptr<TreeHelperRiemannian> helper);

  /**
  * @brief Saves sample.
  */
  void saveSample();

  /**
  * @brief Updates Step Size for Adaptive Step Size.
  */
  void updateStepSize();

  /**
  * @brief Console Output before generation runs.
  */
  void printGenerationBefore() override;

  /**
  * @brief Console output after generation.
  */
  void printGenerationAfter() override;

  /**
  * @brief Recursive binary tree building algorithm. Used if Use NUTS is set to True.
  * @param helper Helper struct for large argument list.
  * @param depth Current depth of binary tree.
  */
  void buildTreeUtil(std::shared_ptr<TreeHelperEuclidean> helper, const size_t depth);

  /**
  * @brief Recursive binary tree building algorithm. Used if Use NUTS is set to True.
  * @param helper Helper struct for large argument list.
  * @param rho Sum of momenta encountered along momentum.
  * @param depth Current depth of binary tree.
  */
  void buildTreeUtilIntegration(std::shared_ptr<TreeHelperRiemannian> helper, std::vector<double> &rho, const size_t depth);

  /**
  * @brief Helper function to print std::vector.
  * @param vec Vector to be printed.
  */
  void __printVec(const std::vector<double> vec) const;

  /**
  * @brief Checks if vector is Nan.
  * @param vec Input vector.
  * @return True if at least one value in vec is nan.
  */
  bool isNan(const std::vector<double> vec) const;
};

} // namespace sampler
} // namespace solver
} // namespace korali

#endif // _KORALI_SOLVER_HMC_HPP_
