#include "modules/conduit/conduit.hpp"
#include "modules/distribution/univariate/uniform/uniform.hpp"
#include "modules/experiment/experiment.hpp"
#include "modules/solver/sampler/Nested/Nested.hpp"

#include <gsl/gsl_linalg.h>
#include <gsl/gsl_matrix.h>
#include <gsl/gsl_randist.h>
#include <gsl/gsl_vector.h>

#include <algorithm> //sort
#include <chrono>
#include <limits>
#include <math.h> //isfinite, sqrt
#include <numeric>
#include <random> // std::default_random_engine

namespace korali
{
namespace solver
{
namespace sampler
{
void Nested::setInitialConfiguration()
{
  _shuffleSeed = _k->_randomSeed++;
  _dimensions = _k->_variables.size();

  if (_covarianceScaling <= 0.0) KORALI_LOG_ERROR("Covariance Scaling must be larger 0.0 (is %lf).\n", _covarianceScaling);
  if (_maxGainFactor < 0.0) KORALI_LOG_ERROR("Max Gain Factor must be larger equal 0.0 (is %lf).\n", _maxGainFactor);

  if ((_resamplingMethod != "MCMC") && (_resamplingMethod != "Box") && (_resamplingMethod != "Ellipse") && (_resamplingMethod != "Multi Ellipse")) KORALI_LOG_ERROR("Only accepted Resampling Method are 'MCMC', 'Box' and 'Ellipse' (is %s).\n", _resamplingMethod.c_str());

  if (_proposalUpdateFrequency <= 0) KORALI_LOG_ERROR("Proposal Update Frequency must be larger 0");

  _priorLowerBound.resize(_dimensions);
  _priorWidth.resize(_dimensions);

  for (size_t d = 0; d < _dimensions; ++d)
  {
    if (_k->_distributions[_k->_variables[d]->_distributionIndex]->_type != "Univariate/Uniform") KORALI_LOG_ERROR("Only 'Univariate/Uniform' priors allowed (is %s).\n", _k->_distributions[_k->_variables[d]->_distributionIndex]->_type.c_str());
    _priorWidth[d] = dynamic_cast<distribution::univariate::Uniform *>(_k->_distributions[_k->_variables[d]->_distributionIndex])->_maximum - dynamic_cast<distribution::univariate::Uniform *>(_k->_distributions[_k->_variables[d]->_distributionIndex])->_minimum;
    _priorLowerBound[d] = dynamic_cast<distribution::univariate::Uniform *>(_k->_distributions[_k->_variables[d]->_distributionIndex])->_minimum;
  }

  if ((_resamplingMethod == "Ellipse" || _resamplingMethod == "Multi Ellipse") && (_dimensions == 2)) KORALI_LOG_ERROR("Resampling Method Ellipse only suitable for problems of dim larger 2.");

  _candidateLogLikelihoods.resize(_batchSize);
  _candidateLogPriors.resize(_batchSize);
  _candidates.resize(_batchSize);
  for (size_t i = 0; i < _batchSize; i++) _candidates[i].resize(_dimensions);

  _liveLogLikelihoods.resize(_numberLivePoints);
  _liveLogPriors.resize(_numberLivePoints);
  _liveSamplesRank.resize(_numberLivePoints);
  _liveSamples.resize(_numberLivePoints);
  for (size_t i = 0; i < _numberLivePoints; i++) _liveSamples[i].resize(_dimensions);

  _databaseEntries = 0;
  _sampleLogLikelihoodDatabase.resize(0);
  _sampleLogPriorDatabase.resize(0);
  _sampleLogWeightDatabase.resize(0);
  _sampleDatabase.resize(0);

  // Init Generation
  _logEvidence = std::numeric_limits<double>::lowest();
  _expectedLogShrinkage = log((_numberLivePoints + 1.) / _numberLivePoints);
  _logVolume = 0.;
  _logEvidenceVar = 0.;
  _information = 0.;
  _lastAccepted = 0;
  _acceptedSamples = 0;
  _generatedSamples = 0;
  _lStarOld = std::numeric_limits<double>::lowest();
  _lStar = std::numeric_limits<double>::lowest();

  _domainMean.resize(_dimensions);
  if (_resamplingMethod == "MCMC")
  {
    _covarianceMatrix.resize(_dimensions * _dimensions);
  }
  else if (_resamplingMethod == "Box")
  {
    _boxLowerBound.resize(_dimensions);
    _boxUpperBound.resize(_dimensions);
  }
  else if (_resamplingMethod == "Ellipse")
  {
    _ellipseVector.emplace_back(ellipse_t());
    ellipse_t *first = _ellipseVector.data();
    first->sampleIdx.resize(_numberLivePoints);

    std::iota(first->sampleIdx.begin(), first->sampleIdx.end(), 0);
    first->num = _numberLivePoints;
  }
  else /* _resamplingMethod == "Multi Ellipse" */
  {
    _ellipseVector.emplace_back(ellipse_t());
    ellipse_t *first = _ellipseVector.data();
    first->sampleIdx.resize(_numberLivePoints);

    size_t i = 0;
    std::iota(first->sampleIdx.begin(), first->sampleIdx.end(), 0);
    first->num = _numberLivePoints;
  }

  (*_k)["Results"]["Posterior Samples"] = {};
}

void Nested::runGeneration()
{
  if (_k->_currentGeneration == 1)
  {
    setInitialConfiguration();
    runFirstGeneration();
    return;
  };

  // Generation > 1
  prepareGeneration();
  generateCandidates();
  std::vector<Sample> samples(_batchSize);

  for (size_t c = 0; c < _batchSize; c++)
  {
    samples[c]["Module"] = "Problem";
    samples[c]["Operation"] = "Evaluate";
    samples[c]["Parameters"] = _candidates[c];
    samples[c]["Sample Id"] = c;
    _conduit->start(samples[c]);
    _modelEvaluationCount++;
    _generatedSamples++;
  }

  size_t finishedCandidatesCount = 0;
  while (finishedCandidatesCount < _batchSize)
  {
    size_t finishedId = _conduit->waitAny(samples);

    _candidateLogLikelihoods[finishedId] = KORALI_GET(double, samples[finishedId], "logLikelihood");
    _candidateLogPriors[finishedId] = KORALI_GET(double, samples[finishedId], "logPrior");

    finishedCandidatesCount++;
  }

  processGeneration();

  return;
}

void Nested::runFirstGeneration()
{
  for (size_t i = 0; i < _numberLivePoints; i++)
    for (size_t d = 0; d < _dimensions; d++)
      _liveSamples[i][d] = _k->_distributions[_k->_variables[d]->_distributionIndex]->getRandomNumber();

  std::vector<Sample> samples(_numberLivePoints);

  for (size_t c = 0; c < _numberLivePoints; c++)
  {
    samples[c]["Module"] = "Problem";
    samples[c]["Operation"] = "Evaluate";
    samples[c]["Parameters"] = _liveSamples[c];
    samples[c]["Sample Id"] = c;
    _conduit->start(samples[c]);
    _modelEvaluationCount++;
    _generatedSamples++;
  }

  size_t finishedCandidatesCount = 0;
  while (finishedCandidatesCount < _numberLivePoints)
  {
    size_t finishedId = _conduit->waitAny(samples);

    _liveLogLikelihoods[finishedId] = KORALI_GET(double, samples[finishedId], "logLikelihood");
    _liveLogPriors[finishedId] = KORALI_GET(double, samples[finishedId], "logPrior");

    finishedCandidatesCount++;
  }

  sortLiveSamplesAscending();

  if (isfinite(_liveLogLikelihoods[_liveSamplesRank[0]])) _lStar = _liveLogLikelihoods[_liveSamplesRank[0]];
  _maxEvaluation = _liveLogLikelihoods[_liveSamplesRank[_numberLivePoints - 1]];

  return;
}

void Nested::prepareGeneration()
{
  if (_k->_currentGeneration > 3 && _k->_currentGeneration % _proposalUpdateFrequency != 0) return;

  if (_resamplingMethod == "MCMC")
  {
    updateMeanAndCovariance();
  }
  else if (_resamplingMethod == "Box")
  {
    updateBox();
  }
  else if (_resamplingMethod == "Ellipse")
  {
    updateEllipse(_ellipseVector.front());
  }
  else /* _resamplingMethod == "Multi Ellipse" */
  {
    for (auto &ellipse : _ellipseVector)
    {
      auto one = ellipse_t();
      auto two = ellipse_t();
      kmeansClustering(ellipse, 100, one, two);
      updateEllipse(ellipse);
    }
  }
}

void Nested::generateCandidates()
{
  if (_resamplingMethod == "MCMC")
  {
    generateCandidatesFromMCMC();
  }
  else if (_resamplingMethod == "Box")
  {
    generateCandidatesFromBox();
  }
  else if (_resamplingMethod == "Ellipse")
  {
    generateCandidatesFromEllipse(_ellipseVector.front());
  }
  else /* _resamplingMethod == "Multi Ellipse" */
  {
    generateCandidatesFromEllipse(_ellipseVector.front());
    // TODO
  }
}

void Nested::processGeneration()
{
  size_t sampleIdx = _liveSamplesRank[0];
  size_t acceptedBefore = _acceptedSamples;
  for (size_t c = 0; c < _batchSize; ++c)
  {
    if (_candidateLogLikelihoods[c] < _lStar) continue;
    _acceptedSamples++;

    // update evidence & domain
    double logVolumeOld = _logVolume;
    double informationOld = _information;
    double logEvidenceOld = _logEvidence;

    _logVolume -= _expectedLogShrinkage;

    double dLogVol = log(0.5 * exp(logVolumeOld) - 0.5 * exp(_logVolume));
    _logWeight = safeLogPlus(_lStar, _lStarOld) + dLogVol;
    _logEvidence = safeLogPlus(_logEvidence, _logWeight);

    double evidenceTerm = exp(_lStarOld - _logEvidence) * _lStarOld + exp(_lStar - _logEvidence) * _lStar;

    _information = exp(dLogVol) * evidenceTerm + exp(logEvidenceOld - _logEvidence) * (informationOld + logEvidenceOld) - _logEvidence;
    _logEvidenceVar += 2. * (_information - informationOld) * _expectedLogShrinkage;
    //printf("%lf | %lf (%lf) | %lf\n",evidenceTerm, _information, informationOld, _logEvidenceVar);

    // add it to db
    if (isfinite(_liveLogLikelihoods[sampleIdx])) updateSampleDatabase(sampleIdx);

    // replace worst sample
    _liveSamples[sampleIdx] = _candidates[c];
    _liveLogPriors[sampleIdx] = _candidateLogPriors[c];
    _liveLogLikelihoods[sampleIdx] = _candidateLogLikelihoods[c];

    // sort rank vector and update constraint
    sortLiveSamplesAscending();

    // select new worst sample
    sampleIdx = _liveSamplesRank[0];

    _lStarOld = _lStar;
    if (isfinite(_liveLogLikelihoods[sampleIdx])) _lStar = _liveLogLikelihoods[sampleIdx];
  }

  _maxEvaluation = _liveLogLikelihoods[_liveSamplesRank[_numberLivePoints - 1]];
  _effectiveSampleSize = calcEffectiveSamples();

  if (acceptedBefore == _acceptedSamples)
    _lastAccepted++;
  else
    _lastAccepted = 1;

  return;
}

void Nested::generateCandidatesFromMCMC()
{
  std::vector<double> zeroMean(_dimensions, 0.0);
  _multivariateGenerator->_meanVector = zeroMean;
  _multivariateGenerator->_sigma = _covarianceMatrix;

  /* Cholesky Decomp */
  gsl_matrix_view sigma = gsl_matrix_view_array(_multivariateGenerator->_sigma.data(), _dimensions, _dimensions);
  gsl_linalg_cholesky_decomp(&sigma.matrix);

  _multivariateGenerator->updateDistribution();

  for (size_t i = 0; i < _batchSize; i++)
  {
    _multivariateGenerator->getRandomVector(&_candidates[i][0], _dimensions);

    size_t cpyIdx = (size_t)(_uniformGenerator->getRandomNumber() * _numberLivePoints);
    for (size_t d = 0; d < _dimensions; ++d) _candidates[i][d] = _candidates[i][d] * _priorWidth[d] + _liveSamples[cpyIdx][d];
  }
}

void Nested::generateCandidatesFromBox()
{
  for (size_t i = 0; i < _batchSize; i++)
  {
    for (size_t d = 0; d < _dimensions; ++d)
      _candidates[i][d] = _boxLowerBound[d] + _uniformGenerator->getRandomNumber() * (_boxUpperBound[d] - _boxLowerBound[d]);
  }
}

void Nested::generateCandidatesFromEllipse(const ellipse_t &ellipse)
{
  std::vector<double> vec(_dimensions);
  for (size_t i = 0; i < _batchSize; i++)
  {
    double len = 0;
    for (size_t d = 0; d < _dimensions; ++d)
    {
      vec[d] = _normalGenerator->getRandomNumber();
      len += vec[d] * vec[d];
    }
    for (size_t d = 0; d < _dimensions; ++d)
      vec[d] *= pow(_uniformGenerator->getRandomNumber(), 1. / ((double)_dimensions)) / sqrt(len);

    for (size_t k = 0; k < _dimensions; ++k)
    {
      _candidates[i][k] = ellipse.mean[k];
      for (size_t l = 0; l < k + 1; ++l)
      {
        _candidates[i][k] += ellipse.enlargementFactor * ellipse.axes[k * _dimensions + l] * vec[l];
      }
    }
  }
}

void Nested::generateCandidatesFromMultiEllipse()
{
  // randomly select ellipse
  double rnd_ellipse = _uniformGenerator->getRandomNumber();
  double totalVol = 0.0;
  for (auto &ellipse : _ellipseVector) totalVol += ellipse.volume;

  ellipse_t *ellipse_ptr;
  double cumVol = 0.0;
  for (auto &ellipse : _ellipseVector)
  {
    cumVol += ellipse.volume / totalVol;
    if (rnd_ellipse < cumVol)
    {
      ellipse_ptr = &ellipse;
      break;
    }
  }

  // sample from ellipse and check overlaps
}

void Nested::updateMeanAndCovariance()
{
  for (size_t d = 0; d < _dimensions; d++) _domainMean[d] = 0.0;

  double weight1 = 1. / ((double)_numberLivePoints);
  for (size_t i = 0; i < _numberLivePoints; i++)
    for (size_t d = 0; d < _dimensions; d++)
      _domainMean[d] += weight1 * _liveSamples[i][d];

  double weight2 = 1. / ((double)_numberLivePoints - 1.);
  for (size_t i = 0; i < _dimensions; i++)
  {
    for (size_t j = i; j < _dimensions; ++j)
    {
      double s = 0.;
      for (size_t k = 0; k < _numberLivePoints; ++k) s += (_liveSamples[k][i] - _domainMean[i]) * (_liveSamples[k][j] - _domainMean[j]);
      _covarianceMatrix[i * _dimensions + j] = _covarianceMatrix[j * _dimensions + i] = _covarianceScaling * weight2 * s / (_priorWidth[i] * _priorWidth[j]);
    }
  }
}

void Nested::updateBox()
{
  for (size_t d = 0; d < _dimensions; d++) _boxLowerBound[d] = std::numeric_limits<double>::max();
  for (size_t d = 0; d < _dimensions; d++) _boxUpperBound[d] = std::numeric_limits<double>::lowest();

  for (size_t i = 0; i < _numberLivePoints; i++)
    for (size_t d = 0; d < _dimensions; d++)
    {
      _boxLowerBound[d] = std::min(_boxLowerBound[d], _liveSamples[i][d]);
      _boxUpperBound[d] = std::max(_boxUpperBound[d], _liveSamples[i][d]);
    }
}

void Nested::sortLiveSamplesAscending()
{
  //TODO: speed up
  std::iota(_liveSamplesRank.begin(), _liveSamplesRank.end(), 0);
  stable_sort(_liveSamplesRank.begin(), _liveSamplesRank.end(), [this](const size_t &idx1, const size_t &idx2) -> bool { return this->_liveLogLikelihoods[idx1] < this->_liveLogLikelihoods[idx2]; });
}

void Nested::updateSampleDatabase(size_t sampleIdx)
{
  _databaseEntries++;
  _sampleDatabase.push_back(_liveSamples[sampleIdx]);
  _sampleLogPriorDatabase.push_back(_liveLogPriors[sampleIdx]);
  _sampleLogLikelihoodDatabase.push_back(_liveLogLikelihoods[sampleIdx]);
  _sampleLogWeightDatabase.push_back(_logWeight);
}

void Nested::consumeLiveSamples()
{
  size_t sampleIdx;
  double dLogVol, logEvidenceOld, informationOld, evidenceTerm;

  std::vector<double> logvols(_numberLivePoints + 1, _logVolume);
  std::vector<double> logdvols(_numberLivePoints);
  std::vector<double> dlvs(_numberLivePoints);

  for (size_t i = 0; i < _numberLivePoints; ++i)
  {
    logvols[i + 1] += log(1. - (i + 1.) / (_numberLivePoints + 1.));
    logdvols[i] = safeLogMinus(logvols[i], logvols[i + 1]);
    dlvs[i] = logvols[i] - logvols[i + 1];
  }
  for (size_t i = 0; i < _numberLivePoints + 1; ++i) logdvols[i] += log(0.5);

  for (size_t i = 0; i < _numberLivePoints; ++i)
  {
    sampleIdx = _liveSamplesRank[i];

    logEvidenceOld = _logEvidence;
    informationOld = _information;

    _lStarOld = _lStar;
    if (isfinite(_liveLogLikelihoods[sampleIdx])) _lStar = _liveLogLikelihoods[sampleIdx];
    dLogVol = logdvols[i];

    _logVolume = safeLogMinus(_logVolume, dLogVol);
    _logWeight = safeLogPlus(_lStar, _lStarOld) + dLogVol;
    _logEvidence = safeLogPlus(_logEvidence, _logWeight);

    evidenceTerm = exp(_lStarOld - _logEvidence) * _lStarOld + exp(_lStar - _logEvidence) * _lStar;

    _information = exp(dLogVol) * evidenceTerm + exp(logEvidenceOld - _logEvidence) * (informationOld + logEvidenceOld) - _logEvidence;

    _logEvidenceVar += 2. * (_information - informationOld) * dlvs[i];

    updateSampleDatabase(sampleIdx);
  }

  _effectiveSampleSize = calcEffectiveSamples();
}

void Nested::generatePosterior()
{
  double maxLogWtDb = *max_element(std::begin(_sampleLogWeightDatabase), std::end(_sampleLogWeightDatabase));

  std::vector<size_t> permutation(_databaseEntries);
  std::iota(std::begin(permutation), std::end(permutation), 0);
  std::shuffle(permutation.begin(), permutation.end(), std::default_random_engine(_shuffleSeed));

  size_t rndIdx;
  _posteriorSampleDatabase.clear();
  _posteriorSampleLogPriorDatabase.clear();
  _posteriorSampleLogLikelihoodDatabase.clear();

  double k = 1.0;
  double sum = _uniformGenerator->getRandomNumber();
  for (size_t i = 0; i < _databaseEntries; ++i)
  {
    rndIdx = permutation[i];
    sum += exp(_sampleLogWeightDatabase[rndIdx] - maxLogWtDb);
    if (sum > k)
    {
      _posteriorSampleDatabase.push_back(_sampleDatabase[rndIdx]);
      _posteriorSampleLogPriorDatabase.push_back(_sampleLogPriorDatabase[rndIdx]);
      _posteriorSampleLogLikelihoodDatabase.push_back(_sampleLogLikelihoodDatabase[rndIdx]);
      k++;
    }
  }
  return;
}

double Nested::l2distance(const std::vector<double> &sampleOne, const std::vector<double> &sampleTwo) const
{
  double dist = 0.;
  for (size_t d = 0; d < _dimensions; ++d) dist += (sampleOne[d] - sampleTwo[d]) * (sampleOne[d] - sampleTwo[d]);
  dist = sqrt(dist);
  return dist;
}

void Nested::updateEllipse(ellipse_t &ellipse) const
{
  updateEllipseMean(ellipse);
  updateEllipseCov(ellipse);
  updateEllipseVolume(ellipse);
  updateEllipseAxes(ellipse);
}

void Nested::kmeansClustering(const ellipse_t &parent, size_t maxIter, ellipse_t &childOne, ellipse_t &childTwo) const
{
  childOne.mean.resize(_dimensions);
  childTwo.mean.resize(_dimensions);

  for (size_t d = 0; d < _dimensions; ++d)
  {
    childOne.mean[d] = _priorLowerBound[d] + _k->_distributions[_k->_variables[d]->_distributionIndex]->getRandomNumber() * _priorWidth[d];
    childTwo.mean[d] = _priorLowerBound[d] + _k->_distributions[_k->_variables[d]->_distributionIndex]->getRandomNumber() * _priorWidth[d];
  }

  size_t diffs, nOne, nTwo;
  std::vector<double> meanOneTmp(_dimensions);
  std::vector<double> meanTwoTmp(_dimensions);

  std::vector<int8_t> clusterFlag(parent.num, 0);

  size_t iter = 0;
  while (iter < maxIter)
  {
    diffs = 0;
    nOne = 0;
    nTwo = 0;
    std::fill(meanOneTmp.begin(), meanOneTmp.end(), 0.);
    std::fill(meanTwoTmp.begin(), meanTwoTmp.end(), 0.);

    // assign samples to means
    for (size_t i = 0; i < parent.num; ++i)
    {
      size_t six = parent.sampleIdx[i];
      double d1 = l2distance(_liveSamples[six], childOne.mean);
      double d2 = l2distance(_liveSamples[six], childTwo.mean);
      int8_t flag = (d1 < d2) ? 1 : 2;

      if (clusterFlag[i] != flag) diffs++;
      clusterFlag[i] = flag;

      // calc mean (accumulate)
      if (flag == 1)
      {
        nOne++;
        for (size_t d = 0; d < _dimensions; ++d) meanOneTmp[d] += _liveSamples[six][d];
      }
      else
      {
        nTwo++;
        for (size_t d = 0; d < _dimensions; ++d) meanTwoTmp[d] += _liveSamples[six][d];
      }
    }

    // calc mean (average)
    if (nOne > 0)
    {
      for (size_t d = 0; d < _dimensions; ++d) meanOneTmp[d] /= ((double)nOne);
      childOne.mean = meanOneTmp;
    }
    if (nTwo > 0)
    {
      for (size_t d = 0; d < _dimensions; ++d) meanTwoTmp[d] /= ((double)nTwo);
      childTwo.mean = meanTwoTmp;
    }

    iter++;
    if (diffs == 0) break;
  }
  if (iter >= maxIter) _k->_logger->logWarning("Normal", "K-Means Clustering did not terminate in %zu steps.\n", maxIter);

  childOne.sampleIdx.resize(nOne);
  childTwo.sampleIdx.resize(nTwo);

  size_t idxOne = 0;
  size_t idxTwo = 0;

  for (size_t i = 0; i < parent.num; ++i)
  {
    size_t six = parent.sampleIdx[i];
    if (clusterFlag[i] == 1)
    {
      childOne.sampleIdx[idxOne] = six;
      idxOne++;
    }
    else /* clusterFlag[i] == 2 */
    {
      childTwo.sampleIdx[idxTwo] = six;
      idxTwo++;
    }
  }
  printf("k-means terminated in %zu steps (%zu, %zu)\n", iter, nOne, nTwo);

  if (nOne == 0 || nTwo == 0)
    for (size_t i = 0; i < parent.num; ++i)
    {
      size_t six = parent.sampleIdx[i];
      double d1 = l2distance(_liveSamples[six], childOne.mean);
      double d2 = l2distance(_liveSamples[six], childTwo.mean);
      printf("%zu %lf %lf\n", six, d1, d2);
    }
}

void Nested::updateEllipseMean(ellipse_t &ellipse) const
{
  ellipse.mean.resize(_dimensions);
  std::fill(ellipse.mean.begin(), ellipse.mean.end(), 0.0);

  for (size_t i = 0; i < ellipse.num; ++i)
    for (size_t d = 0; d < _dimensions; ++d)
    {
      size_t sidx = ellipse.sampleIdx[i];
      ellipse.mean[d] += _liveSamples[sidx][d];
    }

  for (size_t d = 0; d < _dimensions; ++d)
    ellipse.mean[d] /= ((double)ellipse.num);
}

void Nested::updateEllipseCov(ellipse_t &ellipse) const
{
  ellipse.cov.resize(_dimensions * _dimensions);

  for (size_t i = 0; i < _dimensions; i++)
  {
    for (size_t j = i; j < _dimensions; ++j)
    {
      double c = 0.0;
      for (size_t k = 0; k < ellipse.num; ++k)
      {
        size_t sidx = ellipse.sampleIdx[k];
        c += (_liveSamples[sidx][i] - ellipse.mean[i]) * (_liveSamples[sidx][j] - ellipse.mean[j]);
      }
      ellipse.cov[i * _dimensions + j] = ellipse.cov[j * _dimensions + i] = c / (ellipse.num - 1.0);
    }
  }
}

void Nested::updateEllipseVolume(ellipse_t &ellipse) const
{
  ellipse.trueVolume = exp(_logVolume) * (double)ellipse.num / ((double)_numberLivePoints);

  gsl_matrix *matLU = gsl_matrix_alloc(_dimensions, _dimensions);
  for (size_t i = 0; i < _dimensions; i++)
    for (size_t j = i; j < _dimensions; j++)
    {
      gsl_matrix_set(matLU, i, j, ellipse.cov[i * _dimensions + j]);
      gsl_matrix_set(matLU, j, i, ellipse.cov[i * _dimensions + j]);
    }

  int signal;
  gsl_permutation *perm = gsl_permutation_alloc(_dimensions);
  gsl_linalg_LU_decomp(matLU, perm, &signal);

  ellipse.invCov.resize(_dimensions * _dimensions);
  gsl_matrix_view invCov = gsl_matrix_view_array(ellipse.invCov.data(), _dimensions, _dimensions);
  int status = gsl_linalg_LU_invert(matLU, perm, &invCov.matrix);

  double det = gsl_linalg_LU_det(matLU, signal);

  gsl_matrix_free(matLU);
  gsl_permutation_free(perm);
  double voltmp = pow(_ellipsoidalScaling, _dimensions / 2.0) * sqrt(det);

  ellipse.enlargementFactor = voltmp > ellipse.trueVolume ? _ellipsoidalScaling : pow(ellipse.trueVolume / voltmp, 2.0 / _dimensions);
}

void Nested::updateEllipseAxes(ellipse_t &ellipse) const
{
  ellipse.axes.resize(_dimensions * _dimensions);

  gsl_vector *vec = gsl_vector_calloc(_dimensions);
  gsl_vector *vout = gsl_vector_calloc(_dimensions);
  gsl_matrix_view inv = gsl_matrix_view_array(ellipse.invCov.data(), _dimensions, _dimensions);
  gsl_matrix_view cov = gsl_matrix_view_array(ellipse.cov.data(), _dimensions, _dimensions);
  gsl_matrix_view axes = gsl_matrix_view_array(ellipse.axes.data(), _dimensions, _dimensions);

  double res, max = std::numeric_limits<double>::lowest();

  // find scaling s.t. all samples are bounded by ellipse
  for (size_t i = 0; i < ellipse.num; ++i)
  {
    size_t six = ellipse.sampleIdx[i];
    for (size_t d = 0; d < _dimensions; ++d)
      gsl_vector_set(vec, d, (_liveSamples[six][d] - ellipse.mean[d]));

    gsl_blas_dgemv(CblasNoTrans, 1., &inv.matrix, vec, 0., vout);
    res = 0.;
    gsl_blas_ddot(vec, vout, &res);

    if (res > max) max = res;
  }

  gsl_vector_free(vec);
  gsl_vector_free(vout);

  // calculate axes from cholesky decomposition
  int status;
  status = gsl_matrix_memcpy(&axes.matrix, &cov.matrix);
  gsl_matrix_scale(&axes.matrix, max);
  status = gsl_linalg_cholesky_decomp1(&axes.matrix); // LL^T = A
  if (status != 0) KORALI_LOG_ERROR("Cholesky Decomposition failed during Ellipse update.");

  /* On output the diagonal and lower triangular part of the 
     * input matrix A contain the matrix L, while the upper triangular part 
     * contains the original matrix. */
}

double Nested::weightedMahalanobisDistance(std::vector<double> sample, ellipse_t ellipse) const
{
  std::vector<double> dif(_dimensions);
  for (size_t d = 0; d < _dimensions; ++d) dif[d] = sample[d] - ellipse.mean[d];

  // Mahalanobis distance
  double dist = 0;
  double tmp;
  for (size_t i = 0; i < _dimensions; ++i)
  {
    tmp = 0.0;
    for (size_t j = 0; j < _dimensions; ++j)
      tmp += dif[j] * ellipse.invCov[i + _dimensions * j];
    tmp *= dif[i];
    dist += tmp;
  }

  // weighting
  return ellipse.volume * dist / ellipse.trueVolume;
}

double Nested::calcEffectiveSamples() const
{
  if (_databaseEntries < 1) return 0.0;

  double wtsum = std::numeric_limits<double>::lowest();
  double wt2sum = std::numeric_limits<double>::lowest();

  for (size_t i = 0; i < _databaseEntries; ++i)
  {
    wtsum = safeLogPlus(wtsum, _sampleLogWeightDatabase[i]);
    wt2sum = safeLogPlus(wt2sum, 2.0 * _sampleLogWeightDatabase[i]);
  }

  return exp(2.0 * wtsum - wt2sum);
}

double Nested::safeLogPlus(double logx, double logy) const
{
  if (logx > logy)
    return logx + log1p(exp(logy - logx));
  else
    return logy + log1p(exp(logx - logy));
}

double Nested::safeLogMinus(double logx, double logy) const
{
  return log(exp(logx - logy) - 1) + logy;
}

void Nested::printGenerationBefore() { return; }

void Nested::printGenerationAfter()
{
  _k->_logger->logInfo("Minimal", "Log Evidence: %.4f (+- %.4f)\n", _logEvidence, sqrt(_logEvidenceVar));
  _k->_logger->logInfo("Minimal", "Accepted Samples: %zu (+%zu) \n", _acceptedSamples, _numberLivePoints);
  _k->_logger->logInfo("Minimal", "Effective Sample Size: %.2f\n", _effectiveSampleSize);
  _k->_logger->logInfo("Minimal", "Sampling Efficiency: %.2f%%\n", 100.0 * (_acceptedSamples + _numberLivePoints) / ((double)_generatedSamples));
  _k->_logger->logInfo("Detailed", "Log Volume (shrinkage): %.4f (%.2f%%)\n", _logVolume, 100. * (1. - exp(_logVolume)));
  _k->_logger->logInfo("Detailed", "lStar: %.2f\n", _lStar);
  _k->_logger->logInfo("Detailed", "Estimated maximal remaining log evidence: %.2f (max evaluation: %.2f)\n", _maxEvaluation + _logVolume, _maxEvaluation);
  _k->_logger->logInfo("Detailed", "Last Accepted: %zu\n", _lastAccepted);
  _k->_logger->logInfo("Detailed", "Information: %.4f\n", _information);
  return;
}

void Nested::finalize()
{
  if (_k->_currentGeneration <= 1) return;
  if (_addLivePoints == true) consumeLiveSamples();

  generatePosterior();
  (*_k)["Results"]["Posterior Sample Database"] = _posteriorSampleDatabase;
  (*_k)["Results"]["Posterior Sample LogPrior Database"] = _posteriorSampleLogPriorDatabase;
  (*_k)["Results"]["Posterior Sample LogLikelihood Database"] = _posteriorSampleLogLikelihoodDatabase;

  _k->_logger->logInfo("Minimal", "Final Log Evidence: %.4f (+- %.4F)\n", _logEvidence, sqrt(_logEvidenceVar));
  _k->_logger->logInfo("Minimal", "Max evaluation: %.2f\n", _maxEvaluation);
  _k->_logger->logInfo("Minimal", "Information: %.4f\n", _information);
  _k->_logger->logInfo("Minimal", "Posterior Samples: %zu\n", _posteriorSampleDatabase.size());
  _k->_logger->logInfo("Minimal", "Sampling Efficiency: %.2f%%\n", 100.0 * (_acceptedSamples + _numberLivePoints) / ((double)_generatedSamples));
  return;
}

} // namespace sampler

} // namespace solver

} // namespace korali
