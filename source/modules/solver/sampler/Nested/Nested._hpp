#ifndef _KORALI_SOLVER_NESTED_HPP_
#define _KORALI_SOLVER_NESTED_HPP_

#include "modules/distribution/multivariate/normal/normal.hpp"
#include "modules/distribution/univariate/normal/normal.hpp"
#include "modules/distribution/univariate/uniform/uniform.hpp"
#include "modules/solver/sampler/sampler.hpp"
#include <vector>

namespace korali
{
namespace solver
{
namespace sampler
{
class Nested : public Sampler
{
  private:
  /*
  * @brief Seed for the shuffle randomizer
  */
  size_t _shuffleSeed;

  /*
  * @brief Init and run first Generation.
  */
  void runFirstGeneration();

  /*
  * @brief Prepare Generation before evaluation.
  */
  void prepareGeneration();

  /** 
  * @brief Generates new samples by copying and mutating randomly selected samples
  */
  void generateCandidatesFromMCMC();

  /** 
  * @brief Generate new samples uniformly in Box
  */
  void generateCandidatesFromBox();

  /** 
  * @brief Generate new samples uniformly in Ellipse
  */
  void generateCandidatesFromEllipse();

  /*
  * @brief Process Generation after receiving all results.
  */
  void processGeneration();

  /*
  * @brief Add all live samples to sample data base.
  */
  void consumeLiveSamples();

  /*
  * @brief Calculates Mean and Covariance from Live Samples.
 */
  void updateMeanAndCovariance();

  /*
  * @brief Updates bounding Box.
 */
  void updateBox();

  /*
  * @brief Updates bounding Ellipse.
 */
  void updateEllipse();

  /*
  * @brief Ascending sort of live sample ranks based on evaluation.
 */
  void sortLiveSamplesAscending();

  /*
  * @brief Add sample to discard to sample database.
 */
  void updateSampleDatabase(size_t sampleIdx);

  /*
  * @brief Generate posterior distribution from sample data base.
  */
  void generatePosterior();

  /*
  * @brief Calculate effective number of samples.
  * @return the number of effective samples
  */
  double calcEffectiveSamples() const;

  /*
  * @brief Safely adding two values that are in log space. Returns in log space.
  * @param logx logx
  * @param logy logy
  * return The operation result
  */
  double safeLogPlus(double logx, double logy) const;

  /*
  * @brief Safely subtracting logy from logx. Returns in log space.
  * @param logx logx
  * @param logy logy
  * return The operation result
  */
  double safeLogMinus(double logx, double logy) const;

  public:
  /**
 * @brief Configures Sampler.
 */
  void setInitialConfiguration() override;

  /**
  * @brief Main solver loop.
  */
  void runGeneration() override;

  /**
 * @brief Console Output before generation runs.
 */
  void printGenerationBefore() override;

  /**
 * @brief Console output after generation.
 */
  void printGenerationAfter() override;

  /**
  * @brief Final console output at termination.
  */
  void finalize() override;
};

} // namespace sampler
} // namespace solver
} // namespace korali

#endif // _KORALI_SOLVER_NESTED_HPP_
