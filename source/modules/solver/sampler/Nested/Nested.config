{
 "Configuration Settings": 
 [ 
   {
    "Name": [ "Number Live Points" ],
    "Type": "size_t",
    "Description": "Number of live samples."
   }, 
   {
    "Name": [ "Batch Size" ],
    "Type": "size_t",
    "Description": "Number of samples to discard and replace per generation, maximal number of parallel sample evaluation."
   },
   {
    "Name": [ "Add Live Points" ],
    "Type": "bool",
    "Description": "Add live points to dead points."
   },
   {
    "Name": [ "Resampling Method" ],
    "Type": "std::string",
    "Description": "Method to generate new candidates (can be set to either 'MCMC', 'Box' or 'Ellipse')."
   },
   {
    "Name": [ "Proposal Update Frequency" ],
    "Type": "size_t",
    "Description": "Frequency of resampling distribution update (e.g. covariance for MCMC, or ellipse rescaling for Ellipse)."
   },
   {
    "Name": [ "Covariance Scaling" ],
    "Type": "double",
    "Description": "Scaling factor of covariance of MCMC proposal during resampling step (only relevant for 'MCMC' proposal)."
   }, 
   {
    "Name": [ "Ellipsoidal Scaling" ],
    "Type": "double",
    "Description": "Scaling factor of ellipsoidal (only relevant for 'Ellipse' proposal)."
   }
 ],
 
  "Results":
 [
   {
    "Name": [ "Posterior Samples" ],
    "Type": "std::vector<std::vector<double>>",
    "Description": "Samples that approximate the posterior distribution (drawn from Sample Database)."
   }
 ],
 
 "Termination Criteria":
 [
   {
    "Name": [ "Max Gain Factor" ],
    "Type": "double",
    "Criteria": "_maxEvaluation + _logVolume <= log(_maxGainFactor) + _logEvidence",
    "Description": "Estimated maximal evidence gain smaller than accumulated evidence by given factor."
   },
   {
    "Name": [ "Max Effective Sample Size" ],
    "Type": "size_t",
    "Criteria": "_maxEffectiveSampleSize <= _effectiveSampleSize",
    "Description": "Estimated maximal evidence gain smaller than accumulated evidence by given factor."
   },
   {
    "Name": [ "Max Log Likelihood" ],
    "Type": "size_t",
    "Criteria": "_maxLogLikelihood <= _lStar",
    "Description": "Terminates if loglikelihood of sample removed from live set exceeds given value."
   } 
 ]
 ,
 "Variables Configuration": 
 [
 ],
 
 "Internal Settings": 
 [
   {
    "Name": [ "Uniform Generator" ],
    "Type": "korali::distribution::univariate::Uniform*",
    "Description": "Uniform random number generator."
   },   
   {
    "Name": [ "Normal Generator" ],
    "Type": "korali::distribution::univariate::Normal*",
    "Description": "Gaussian random number generator."
   },  
   {
    "Name": [ "Multivariate Generator" ],
    "Type": "korali::distribution::multivariate::Normal*",
    "Description": "Random number generator with a multivariate normal distribution."
   },
   {
    "Name": [ "Accepted Samples" ],
    "Type": "size_t",
    "Description": "Number of accepted samples."
   },  
   {
    "Name": [ "Generated Samples" ],
    "Type": "size_t",
    "Description": "Number of generated samples (after initialization)."
   }, 
   {
    "Name": [ "LogEvidence" ],
    "Type": "double",
    "Description": "Accumulated LogEvidence."
   }, 
   {
    "Name": [ "LogEvidence Var" ],
    "Type": "double",
    "Description": "Estimated accumulated variance of log evidence."
   }, 
   {
    "Name": [ "LogVolume" ],
    "Type": "double",
    "Description": "Remaining Prior Mass."
   },
   {
    "Name": [ "Last Accepted" ],
    "Type": "size_t",
    "Description": "Number of generations past since a sample has been accepted."
   },
   {
    "Name": [ "Information" ],
    "Type": "double",
    "Description": "Accumulated information."
   },
   {
    "Name": [ "LStar" ],
    "Type": "double",
    "Description": "Likelihood constraint for sample acceptance."
   },  
   {
    "Name": [ "LStarOld" ],
    "Type": "double",
    "Description": "Previous likelihood constraint."
   }, 
   {
    "Name": [ "LogWeight" ],
    "Type": "double",
    "Description": "Log increment of evidence."
   }, 
   {
    "Name": [ "Expected LogShrinkage" ],
    "Type": "double",
    "Description": "Expected volume shrinkage per sample."
   },
   {
    "Name": [ "Max Evaluation" ],
    "Type": "double",
    "Description": "Largest sum of loglikelihood and logprior in live sample set."
   },
   {
    "Name": [ "Effective Sample Size" ],
    "Type": "double",
    "Description": "Number of effective Samples estimate."
   },
   {
    "Name": [ "Prior Lower Bound" ],
    "Type": "std::vector<double>",
    "Description": "Lower bound of unfirom prior."
   },
   {
    "Name": [ "Prior Width" ],
    "Type": "std::vector<double>",
    "Description": "Width of uniform prior."
   },
   {
    "Name": [ "Candidates" ],
    "Type": "std::vector<std::vector<double>>",
    "Description": "Sample candidates to be evaluated."
   },
   {
    "Name": [ "Candidate LogLikelihoods" ],
    "Type": "std::vector<double>",
    "Description": "Likelihood evaluations of candidates."
   }, 
   {
    "Name": [ "Candidate LogPriors" ],
    "Type": "std::vector<double>",
    "Description": "The logpriors of the candidates."
   },  
   {
    "Name": [ "Live Samples" ],
    "Type": "std::vector<std::vector<double>>",
    "Description": "Current samples."
   },
   {
    "Name": [ "Live LogLikelihoods" ],
    "Type": "std::vector<double>",
    "Description": "Likelihood evaluations of live samples."
   }, 
   {
    "Name": [ "Live LogPriors" ],
    "Type": "std::vector<double>",
    "Description": "Likelihood evaluations of live samples."
   }, 
   {
    "Name": [ "Live Samples Rank" ],
    "Type": "std::vector<size_t>",
    "Description": "Ranking of descending sorted live samples based on evaluation."
   }, 
   {
    "Name": [ "Database Entries" ],
    "Type": "size_t",
    "Description": "Number of samples in db."
   },
   {
    "Name": [ "Sample Database" ],
    "Type": "std::vector<std::vector<double>>",
    "Description": "Discarded samples stored in database."
   },
   {
    "Name": [ "Sample LogLikelihood Database" ],
    "Type": "std::vector<double>",
    "Description": "Loglikelihood evaluations of dead samples."
   }, 
   {
    "Name": [ "Sample LogPrior Database" ],
    "Type": "std::vector<double>",
    "Description": "Logprior evaluations associated with dead samples."
   }, 
   {
    "Name": [ "Sample LogWeight Database" ],
    "Type": "std::vector<double>",
    "Description": "Log weight (Priormass x Likelihood) of dead samples."
   }, 
   {
    "Name": [ "Posterior Samples" ],
    "Type": "std::vector<std::vector<double>>",
    "Description": "Samples that approximate the posterior distribution (drawn from Sample Database)."
   },
   {
    "Name": [ "Covariance Matrix" ],
    "Type": "std::vector<double>",
    "Description": "Sample covariance of the live samples."
   }, 
   {
    "Name": [ "Log Domain Size" ],
    "Type": "double",
    "Description": "Log of domain volumne given by uniform prior distribution."
   },
   {
    "Name": [ "Domain Mean" ],
    "Type": "std::vector<double>",
    "Description": "Mean of the domain occupied by live samples."
   },
   {
    "Name": [ "Box Lower Bound" ],
    "Type": "std::vector<double>",
    "Description": "Lower bound of box constraint (only required for 'Box' resampling method."
   },
   {
    "Name": [ "Box Upper Bound" ],
    "Type": "std::vector<double>",
    "Description": "Upper bound of box constraint (only required for 'Box' resampling method."
   }, 
   {
    "Name": [ "Ellipse Axes" ],
    "Type": "std::vector<std::vector<double>>",
    "Description": "Axes of bounding ellipse (only required for 'Ellipse' resampling metod."
   }

 ],
 
  "Module Defaults":
  {
   "Number Live Points": 1500,
   "Batch Size": 1,
   "Add Live Points": true,
   "Resampling Method": "Box", 
   "Proposal Update Frequency": 1, 
   "Covariance Scaling": 0.04, 
   "Ellipsoidal Scaling": 1.0, 
   
   "Termination Criteria":
   {
      "Max Gain Factor": 0.001,
      "Max Effective Sample Size": 10e9,
      "Max Log Likelihood": 10e6
   },
   
   "Uniform Generator":
    {
     "Type": "Univariate/Uniform",
     "Minimum": 0.0,
     "Maximum": 1.0
    },  
    "Normal Generator":
    {
     "Type": "Univariate/Normal",
     "Mean": 0.0,
     "Standard Deviation": 1.0
    },
    
    "Multivariate Generator":
    {
      "Type": "Multivariate/Normal"
    }
 
  }
}
