#ifndef _KORALI_SOLVER_MCMC_HPP_
#define _KORALI_SOLVER_MCMC_HPP_

#include "modules/distribution/univariate/normal/normal.hpp"
#include "modules/distribution/univariate/uniform/uniform.hpp"
#include "modules/solver/sampler/sampler.hpp"
#include <vector>

namespace korali
{
namespace solver
{
namespace sampler
{
class MCMC : public Sampler
{
  private:
  /**
  * @brief Calculates recursively acceptance probability. Recursion required for Delayed Rejection.
  * @param denominator denominator of quotient (acceptance probability)
  * @param leaderLoglikelihood loglikelihood of current chain leader
  * @param loglikelihoods loglikelihoods of samples obtained after delay
  * @param N rescursion depth
  */
  double recursiveAlpha(double &deonominator, const double leaderLoglikelihood, const double *loglikelihoods, size_t N) const;

  /**
  * @brief Updates internal state such as mean and covariance of chain.
  */
  void updateState();

  /**
  * @brief Generate new sample.
  */
  void generateCandidate(size_t sampleIdx);

  /**
  * @brief Cholesky decomposition of chain covariance matrix.
  */
  void choleskyDecomp(const std::vector<double> &inC, std::vector<double> &outL) const;

  /**
  * @brief Process sample after evaluation.
  */
  void finishSample(size_t sampleId);

  public:
  /**
 * @brief Configures MCMC.
 */
  void setInitialConfiguration() override;

  /**
  * @brief Final console output at termination.
  */
  void finalize() override;

  /**
  * @brief Generate a sample and evaluate it.
  */
  void runGeneration() override;

  /**
 * @brief Console Output before generation runs.
 */
  void printGenerationBefore() override;

  /**
 * @brief Console output after generation.
 */
  void printGenerationAfter() override;
};

} // namespace sampler
} // namespace solver
} // namespace korali

#endif // _KORALI_SOLVER_MCMC_HPP_
