__startIncludeGuard__;

#include "modules/distribution/distribution.hpp"
#include "modules/distribution/multivariate/normal/normal.hpp"
#include "modules/distribution/specific/multinomial/multinomial.hpp"
#include "modules/distribution/univariate/uniform/uniform.hpp"
#include "modules/solver/sampler/sampler.hpp"
#include <gsl/gsl_vector.h>

__startNamespace__;

/**
  * @brief Struct for TMCMC optimization operations
 */
typedef struct fparam_s
{
  /**
  * @brief Likelihood values in current generation
 */
  const double *loglike;

  /**
    * @brief Population size of current generation
   */
  size_t Ns;

  /**
    * @brief Annealing exponent of current generation
   */
  double exponent;

  /**
    * @brief Target coefficient of variation
   */
  double cov;
} fparam_t;

class __className__ : public __parentClassName__
{
  public:
  /**
  * @brief Sets the burn in steps per generation
  */
  void setBurnIn();

  /**
  * @brief Prepare Generation before evaluation.
  */
  void prepareGeneration();

  /**
  * @brief Process Generation after receiving all results.
  */
  void processGeneration();

  /**
  * @brief Helper function for annealing exponent update/
  * @param fj Pointer to exponentiated probability values.
  * @param fn Current exponent.
  * @param pj Number of values in fj array.
  * @param objTol Tolerance
  * @param xmin Location of minimum, the new exponent.
  * @param fmin Found minimum in search.
  */
  void minSearch(double const *fj, size_t fn, double pj, double objTol, double &xmin, double &fmin);

  /**
  * @brief Collects results after sample evaluation.
  * @param sampleId Id of the sample to process
  */
  void processCandidate(const size_t sampleId);

  /**
  * @brief Calculate gradients of loglikelihood (only relevant for mTMCMC).
  * @param samples Samples to calculate gradients for
  */
  void calculateGradients(std::vector<Sample> &samples);

  /**
  * @brief Calculate sample wise proposal distributions (only relevant for mTMCMC).
  * @param samples Samples to calculate proposal distributions for
  */
  void calculateProposals(std::vector<Sample> &samples);

  /**
  * @brief Generate candidate from leader.
  * @param sampleId Id of the sample to generate
  */
  void generateCandidate(const size_t sampleId);

  /**
  * @brief Add leader into sample database.
  * @param sampleId Id of the sample to update the database with
  */
  void updateDatabase(const size_t sampleId);

  /**
  * @brief Calculate acceptance probability.
  * @param sampleId Id of the sample to calculate acceptance probability
  * @return The acceptance probability of the given sample
  */
  double calculateAcceptanceProbability(const size_t sampleId);

  /**
  * @brief Helper function to calculate the squared difference between (CVaR) for min search.
  * @param x Alternative exponent
  * @param loglike Vector of loglikelihood values
  * @param Ns Size of loglike array
  * @param exponent Current rho
  * @param targetCV Target CV
  * @return The squared CV difference
  */
  static double calculateSquaredCVDifference(double x, const double *loglike, size_t Ns, double exponent, double targetCV);

  /**
  * @brief Helper function for minimization procedure to find the target CV.
  * @param v Input GSL vector containing loglikelihood values
  * @param param Input parameter for method 'calculateSquaredCVDifference'
  * @return The squared CV difference
  */
  static double calculateSquaredCVDifferenceOptimizationWrapper(const gsl_vector *v, void *param);

  /**
  * @brief Number of variables to sample.
  */
  size_t N;

  /**
 * @brief Configures TMCMC.
 */
  void setInitialConfiguration() override;

  /**
 * @brief Main solver loop.
 */
  void runGeneration() override;

  /**
 * @brief Console Output before generation runs.
 */
  void printGenerationBefore() override;

  /**
 * @brief Console output after generation.
 */
  void printGenerationAfter() override;

  /**
 * @brief Final console output at termination.
 */
  void finalize() override;
};

__endNamespace__;


