#ifndef _KORALI_SOLVER_LMCMAES_HPP_
#define _KORALI_SOLVER_LMCMAES_HPP_

#include "modules/solver/optimizer/optimizer.hpp"
#include "modules/distribution/univariate/normal/normal.hpp"
#include "modules/distribution/univariate/uniform/uniform.hpp"
#include <vector>

namespace korali { namespace solver { namespace optimizer {

class LMCMAES : public korali::solver::Optimizer
{
 private:

 void setInitialConfiguration();
 void prepareGeneration();
 void initMuWeights(size_t numsamplesmu);
 void initCovariance();
 void sampleSingle(size_t sampleIdx);
 void choleskyFactorUpdate(size_t sampleIdx);
 void updateSet();
 void updateInverseVectors();
 void updateDistribution();
 void updateSigma();
 void numericalErrorTreatment();

 void sort_index(const std::vector<double>& vec, std::vector<size_t>& _sortingIndex, size_t n) const;

 public:

 void finalize() override;
 void runGeneration() override;
 void printGenerationBefore() override;
 void printGenerationAfter() override;
};

} } } // namespace korali::solver::optimizer

#endif // _KORALI_SOLVER_LMCMAES_HPP_
