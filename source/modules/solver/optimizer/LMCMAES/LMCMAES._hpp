#ifndef _KORALI_SOLVER_LMCMAES_HPP_
#define _KORALI_SOLVER_LMCMAES_HPP_

#include "modules/distribution/univariate/normal/normal.hpp"
#include "modules/distribution/univariate/uniform/uniform.hpp"
#include "modules/solver/optimizer/optimizer.hpp"
#include <vector>

namespace korali
{
namespace solver
{
namespace optimizer
{
class LMCMAES : public Optimizer
{
  private:
  /**
  * @brief Prepares generation for the next set of evaluations
 */
  void prepareGeneration();

  /**
  * @brief Initializes the weights of the mu vector.
  * @param numsamples Length of mu vector.
 */
  void initMuWeights(size_t numsamples); /* init _muWeights and dependencies */

  /**
  * @brief Initialize Covariance Matrix and Cholesky Decomposition.
 */
  void initCovariance(); /* init sigma, C and B */

  /**
  * @brief Generate new Sample.
  */
  void sampleSingle(size_t sampleIdx);

  /**
  * @brief Updates set of historical samples, required for cholesky factor calculation.
  */
  void choleskyFactorUpdate(size_t sampleIdx);

  /**
  */
  void updateSet();

  /**
  * @brief Updates vectors for cholesky factor computation.
  */
  void updateInverseVectors();

  /**
 * @brief Updates mean and covariance of Gaussian proposal distribution.
 */
  void updateDistribution(std::vector<Sample> &samples);

  /**
  * @brief Update covariance matrix scaling
  */
  void updateSigma();

  /**
  * @brief Method that checks potential numerical issues and does correction. Not yet implemented.
 */
  void numericalErrorTreatment();

  /**
  * @brief Descending sort of vector elements, stores ordering in _sortingIndex.
  * @param vec Vector to sort, _sortingIndex Ordering of elements in vector
 */
  void sort_index(const std::vector<double> &vec, std::vector<size_t> &_sortingIndex) const;

  public:
  /**
 * @brief Configures LMCMA-ES.
 */
  void setInitialConfiguration() override;

  /**
 * @brief Executes sampling & evaluation generation.
 */
  void runGeneration() override;

  /**
 * @brief Console Output before generation runs.
 */
  void printGenerationBefore() override;

  /**
 * @brief Console output after generation.
 */
  void printGenerationAfter() override;

  /**
 * @brief Final console output at termination.
 */
  void finalize() override;
};

} // namespace optimizer
} // namespace solver
} // namespace korali

#endif // _KORALI_SOLVER_LMCMAES_HPP_
