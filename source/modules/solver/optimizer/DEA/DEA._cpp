#include "modules/conduit/conduit.hpp"
#include "modules/experiment/experiment.hpp"
#include "modules/problem/problem.hpp"
#include "modules/solver/optimizer/DEA/DEA.hpp"

#include <algorithm>
#include <chrono>
#include <numeric>
#include <stdio.h>
#include <unistd.h>

namespace korali
{
namespace solver
{
namespace optimizer
{
void DEA::setInitialConfiguration()
{
  for (size_t d = 0; d < _k->_variables.size(); ++d)
    if (_k->_variables[d]->_upperBound < _k->_variables[d]->_lowerBound)
      KORALI_LOG_ERROR("Lower Bound (%.4f) of variable \'%s\'  exceeds Upper Bound (%.4f).\n", _k->_variables[d]->_lowerBound, _k->_variables[d]->_name.c_str(), _k->_variables[d]->_upperBound);

  // Allocating Memory
  _samplePopulation.resize(_populationSize);
  for (size_t i = 0; i < _populationSize; i++) _samplePopulation[i].resize(_k->_variables.size());

  _candidatePopulation.resize(_populationSize);
  for (size_t i = 0; i < _populationSize; i++) _candidatePopulation[i].resize(_k->_variables.size());

  _previousMean.resize(_k->_variables.size());
  _currentMean.resize(_k->_variables.size());
  _bestEverVariables.resize(_k->_variables.size());
  _currentBestVariables.resize(_k->_variables.size());
  _maxDistances.resize(_k->_variables.size());

  _valueVector.resize(_populationSize);
  for (size_t i = 0; i < _populationSize; i++) _valueVector[i] = -Inf;

  _valueVector.resize(_populationSize);

  _infeasibleSampleCount = 0;
  _bestSampleIndex = 0;

  _previousBestValue = -Inf;
  _currentBestValue = -Inf;
  _previousBestEverValue = -Inf;
  _bestEverValue = -Inf;
  _currentMinimumStepSize = +Inf;

  initSamples();

  for (size_t d = 0; d < _k->_variables.size(); ++d)
  {
    _previousMean[d] = 0.0;
    _currentMean[d] = 0.0;
  }

  for (size_t i = 0; i < _populationSize; ++i)
    for (size_t d = 0; d < _k->_variables.size(); ++d)
      _currentMean[d] += _samplePopulation[i][d] / ((double)_populationSize);
}

void DEA::runGeneration()
{
  if (_k->_currentGeneration == 1) setInitialConfiguration();

  prepareGeneration();

  // Initializing Sample Evaluation
  std::vector<Sample> samples(_populationSize);
  for (size_t i = 0; i < _populationSize; i++)
  {
    samples[i]["Module"] = "Problem";
    samples[i]["Operation"] = "Evaluate";
    samples[i]["Parameters"] = _candidatePopulation[i];
    samples[i]["Sample Id"] = i;
    _modelEvaluationCount++;
    _conduit->start(samples[i]);
  }

  // Waiting for samples to finish
  _conduit->waitAll(samples);

  updateSolver(samples);
}

void DEA::initSamples()
{
  /* skip sampling in gen 1 */
  for (size_t i = 0; i < _populationSize; ++i)
    for (size_t d = 0; d < _k->_variables.size(); ++d)
    {
      double width = _k->_variables[d]->_upperBound - _k->_variables[d]->_lowerBound;
      _candidatePopulation[i][d] = _k->_variables[d]->_lowerBound + width * _uniformGenerator->getRandomNumber();
      _samplePopulation[i][d] = _candidatePopulation[i][d];
    }
}

void DEA::prepareGeneration()
{
  /* at gen 1 candidates initialized in initialize() */
  if (_k->_currentGeneration > 1)
    for (size_t i = 0; i < _populationSize; ++i)
    {
      bool isFeasible = true;
      do
      {
        mutateSingle(i);
        if (_fixInfeasible && isFeasible == false) fixInfeasible(i);

        isFeasible = isSampleFeasible(_candidatePopulation[i]);
        if (isFeasible == false) _infeasibleSampleCount++;
      } while (isFeasible == false);
    }
  _previousValueVector = _valueVector;
}

void DEA::mutateSingle(size_t sampleIdx)
{
  size_t a, b;
  do
  {
    a = _uniformGenerator->getRandomNumber() * _populationSize;
  } while (a == sampleIdx);
  do
  {
    b = _uniformGenerator->getRandomNumber() * _populationSize;
  } while (b == sampleIdx || b == a);

  if (_mutationRule == "Self Adaptive")
  {
    // Brest [2006]
    double tau1 = 0.1;
    double tau2 = 0.1;
    double Fl = 0.1;
    double Fu = 0.9;

    double rd2 = _uniformGenerator->getRandomNumber();
    double rd3 = _uniformGenerator->getRandomNumber();

    if (rd2 < tau1)
    {
      double rd1 = _uniformGenerator->getRandomNumber();
      _mutationRate = Fl + rd1 * Fu;
    }
    if (rd3 < tau2)
    {
      double rd4 = _uniformGenerator->getRandomNumber();
      _crossoverRate = rd4;
    }
  }

  double *parent;
  if (_parentSelectionRule == "Random")
  {
    size_t c;
    do
    {
      c = _uniformGenerator->getRandomNumber() * _populationSize;
    } while (c == sampleIdx || c == a || c == b);
    parent = &_samplePopulation[c][0];
  }
  else /* _parentSelectionRule == "Best" */
  {
    parent = &_samplePopulation[_bestSampleIndex][0];
  }

  size_t rn = _uniformGenerator->getRandomNumber() * _k->_variables.size();
  for (size_t d = 0; d < _k->_variables.size(); ++d)
  {
    if ((_uniformGenerator->getRandomNumber() < _crossoverRate) || (d == rn))
      _candidatePopulation[sampleIdx][d] = parent[d] + _mutationRate * (_samplePopulation[a][d] - _samplePopulation[b][d]);
    else
      _candidatePopulation[sampleIdx][d] = _samplePopulation[sampleIdx][d];
  }
}

void DEA::fixInfeasible(size_t sampleIdx)
{
  for (size_t d = 0; d < _k->_variables.size(); ++d)
  {
    double len = 0.0;
    if (_candidatePopulation[sampleIdx][d] < _k->_variables[d]->_lowerBound)
      len = _candidatePopulation[sampleIdx][d] - _k->_variables[d]->_lowerBound;
    if (_candidatePopulation[sampleIdx][d] > _k->_variables[d]->_upperBound)
      len = _candidatePopulation[sampleIdx][d] - _k->_variables[d]->_upperBound;

    _candidatePopulation[sampleIdx][d] = _samplePopulation[sampleIdx][d] - len * _uniformGenerator->getRandomNumber();
  }
}

void DEA::updateSolver(std::vector<Sample> &samples)
{
  // Processing results
  for (size_t i = 0; i < _populationSize; i++)
    _valueVector[i] = KORALI_GET(double, samples[i], "F(x)");

  _bestSampleIndex = std::distance(std::begin(_valueVector), std::max_element(std::begin(_valueVector), std::end(_valueVector)));
  _previousBestEverValue = _bestEverValue;
  _previousBestValue = _currentBestValue;
  _currentBestValue = _valueVector[_bestSampleIndex];

  for (size_t d = 0; d < _k->_variables.size(); ++d) _currentBestVariables[d] = _candidatePopulation[_bestSampleIndex][d];

  _previousMean = _currentMean;
  std::fill(std::begin(_currentMean), std::end(_currentMean), 0.0);

  if (_currentBestValue > _bestEverValue) _bestEverVariables = _currentBestVariables;

  bool acceptRuleRecognized = false;

  if (_acceptRule == "Best") // only update best sample
  {
    if (_currentBestValue > _bestEverValue)
    {
      for (size_t d = 0; d < _k->_variables.size(); ++d) _samplePopulation[_bestSampleIndex][d] = _candidatePopulation[_bestSampleIndex][d];
      _bestEverValue = _currentBestValue;
    }
    acceptRuleRecognized = true;
  }

  if (_acceptRule == "Greedy") // accept all mutations better than parent
  {
    for (size_t i = 0; i < _populationSize; ++i)
      if (_valueVector[i] > _previousValueVector[i])
        _samplePopulation[i] = _candidatePopulation[i];
    if (_currentBestValue > _bestEverValue)
    {
      _bestEverValue = _currentBestValue;
    }
    acceptRuleRecognized = true;
  }

  if (_acceptRule == "Improved") // update all samples better than _bestEverValue
  {
    for (size_t i = 0; i < _populationSize; ++i)
      if (_valueVector[i] > _bestEverValue)
        for (size_t d = 0; d < _k->_variables.size(); ++d) _samplePopulation[i][d] = _candidatePopulation[i][d];
    if (_currentBestValue > _bestEverValue)
    {
      _bestEverValue = _currentBestValue;
    }
    acceptRuleRecognized = true;
  }

  if (_acceptRule == "Iterative") // iteratively update _bestEverValue and accept samples
  {
    for (size_t i = 0; i < _populationSize; ++i)
      if (_valueVector[i] > _bestEverValue)
        for (size_t d = 0; d < _k->_variables.size(); ++d)
        {
          _samplePopulation[i][d] = _candidatePopulation[i][d];
          _bestEverValue = _valueVector[i];
        }
    acceptRuleRecognized = true;
  }

  if (acceptRuleRecognized == false) KORALI_LOG_ERROR("Accept Rule (%s) not recognized.\n", _acceptRule.c_str());

  for (size_t i = 0; i < _populationSize; ++i)
    for (size_t d = 0; d < _k->_variables.size(); ++d)
      _currentMean[d] += _samplePopulation[i][d] / ((double)_populationSize);

  for (size_t d = 0; d < _k->_variables.size(); ++d)
  {
    double max = -Inf;
    double min = +Inf;
    for (size_t i = 0; i < _populationSize; ++i)
    {
      if (_samplePopulation[i][d] > max) max = _samplePopulation[i][d];
      if (_samplePopulation[i][d] < min) min = _samplePopulation[i][d];
    }
    _maxDistances[d] = max - min;
  }

  _currentMinimumStepSize = +Inf;
  for (size_t d = 0; d < _k->_variables.size(); ++d) std::min(_currentMinimumStepSize, fabs(_currentMean[d] - _previousMean[d]));
}

/************************************************************************/
/*                    Additional Methods                                */
/************************************************************************/

void DEA::printGenerationBefore() { return; }

void DEA::printGenerationAfter()
{
  _k->_logger->logInfo("Normal", "Current Function Value: Max = %+6.3e - Best = %+6.3e\n", _currentBestValue, _bestEverValue);
  _k->_logger->logInfo("Detailed", "Variable = (MeanX, BestX):\n");
  for (size_t d = 0; d < _k->_variables.size(); d++) _k->_logger->logData("Detailed", "         %s = (%+6.3e, %+6.3e)\n", _k->_variables[d]->_name.c_str(), _currentMean[d], _bestEverVariables[d]);
  _k->_logger->logInfo("Detailed", "Max Width:\n");
  for (size_t d = 0; d < _k->_variables.size(); d++) _k->_logger->logData("Detailed", "         %s = %+6.3e\n", _k->_variables[d]->_name.c_str(), _maxDistances[d]);
  _k->_logger->logInfo("Detailed", "Number of Infeasible Samples: %zu\n", _infeasibleSampleCount);
}

void DEA::finalize()
{
  // Updating Results
  (*_k)["Results"]["Best Sample"]["F(x)"] = _bestEverValue;
  (*_k)["Results"]["Best Sample"]["Parameters"] = _bestEverVariables;

  _k->_logger->logInfo("Minimal", "Optimum found: %e\n", _bestEverValue);
  _k->_logger->logInfo("Minimal", "Optimum found at:\n");
  for (size_t d = 0; d < _k->_variables.size(); ++d) _k->_logger->logData("Minimal", "         %s = %+6.3e\n", _k->_variables[d]->_name.c_str(), _bestEverVariables[d]);
  _k->_logger->logInfo("Minimal", "Number of Infeasible Samples: %zu\n", _infeasibleSampleCount);
}

} // namespace optimizer

} // namespace solver

} // namespace korali
