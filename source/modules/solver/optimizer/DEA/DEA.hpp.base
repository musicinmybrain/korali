@startIncludeGuard

#include "modules/distribution/univariate/normal/normal.hpp"
#include "modules/distribution/univariate/uniform/uniform.hpp"
#include "modules/solver/optimizer/optimizer.hpp"
#include <vector>

@startNamespace

class @className : public @parentClassName
{
  private:
  /**
  * @brief Mutate a sample.
  * @param sampleIdx Index of sample to be mutated.
 */
  void mutateSingle(size_t sampleIdx);

  /**
  * @brief Fix sample params that are outside of domain.
  * @param sampleIdx Index of sample that is outside of domain.
 */
  void fixInfeasible(size_t sampleIdx);

  /**
  * @brief Update the state of Differential Evolution
  * @param samples Sample evaluations.
 */
  void updateSolver(std::vector<Sample> &samples);

  /**
  * @brief Create new set of candidates.
 */
  void initSamples();

  /**
  * @brief Mutate samples and distribute them.
 */
  void prepareGeneration();

  public:
  /**
 * @brief Configures Differential Evolution/
 */
  void setInitialConfiguration() override;

  /**
 * @brief Executes sampling & evaluation generation.
 */
  void runGeneration() override;

  /**
 * @brief Console Output before generation runs.
 */
  void printGenerationBefore() override;

  /**
 * @brief Console output after generation.
 */
  void printGenerationAfter() override;

  /**
 * @brief Final console output at termination.
 */
  void finalize() override;
};

@endNamespace

@endIncludeGuard
