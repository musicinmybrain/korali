{
 "Configuration Settings": 
 [
   {
    "Name": [ "Population Size" ],
    "Type": "size_t",
    "Description": "Specifies the number of samples to evaluate per generation (preferably 5-10x number of variables)."
   },
   {
    "Name": [ "Crossover Rate" ],
    "Type": "double",
    "Description": "Controls the rate at which dimensions of the samples are mixed (must be in [0,1])."
   },
   {
    "Name": [ "Mutation Rate" ],
    "Type": "double",
    "Description": "Controls the scaling of the vector differentials (must be in [0,2], preferably < 1)."
   },
   {
    "Name": [ "Mutation Rule" ],
    "Type": "std::string",
    "Options": [
                { "Value": "Fixed", "Description": "Fixed mutation rate." },
                { "Value": "Self Adaptive", "Description": "Varying Crossover Rate and Mutation Rate, according to [Brest2006]" }
               ],
    "Description": "Controls the Mutation Rate." 
   },
   {
    "Name": [ "Parent Selection Rule" ],
    "Type": "std::string",
    "Options": [
                { "Value": "Random", "Description": "Select parent randomly." },
                { "Value": "Best", "Description": "Mutate only best variables." }
               ],
    "Description": "Defines the selection rule of the parent vector."
   },
   {
    "Name": [ "Accept Rule" ],
    "Type": "std::string",
    "Options": [
                { "Value": "Best", "Description": "Update best sample if better than Best Ever Sample." },
                { "Value": "Greedy", "Description": "Accept all candiates better than parent." },
                { "Value": "Iterative", "Description": "Iterate through candidates and accept if Best Ever Value improved." },
                { "Value": "Improved", "Description": "Accept all candidates better than Best Ever Sample." }
               ],
    "Description": "Sets the accept rule after sample mutation and evaluation."
   },
   {
    "Name": [ "Fix Infeasible" ],
    "Type": "bool",
    "Description": "If set true, Korali samples a random sample between Parent and the voiolated boundary. If set false, infeasible samples are mutated again until feasible."
   }
 ],
 
  "Variables Configuration":
 [

 ],
 
 "Termination Criteria":
 [
   {
    "Name": [ "Max Infeasible Resamplings" ],
    "Type": "size_t",
    "Criteria": "_infeasibleSampleCount > _maxInfeasibleResamplings",
    "Description": "Max number of mutations per sample per generation if infeasible (only relevant if Fix Infeasible is set False)."
   },
   {
    "Name": [ "Min Value" ],
    "Type": "double",
    "Criteria": "(_k->_currentGeneration > 1) && (-_bestEverValue < _minValue)",
    "Description": "Specifies the target fitness to stop minimization."
   },
   {
    "Name": [ "Max Value" ],
    "Type": "double",
    "Criteria": "(_k->_currentGeneration > 1) && (+_bestEverValue > _maxValue)",
    "Description": "Specifies the target fitness to stop maximization."
   },
   {
    "Name": [ "Min Value Difference Threshold" ],
    "Type": "double",
    "Criteria": "(_k->_currentGeneration > 1) && (fabs(_currentBestValue - _previousBestValue) < _minValueDifferenceThreshold)",
    "Description": "Specifies the minimum fitness differential between two consecutive generations before stopping execution."
   },
   {
    "Name": [ "Min Step Size" ],
    "Type": "double",
    "Criteria": "_currentMinimumStepSize < _minStepSize",
    "Description": "Specifies the minimal step size of the population mean from one gneration to another."
   }
 ],
 
 "Internal Settings": 
 [
   {
    "Name": [ "Normal Generator" ],
    "Type": "korali::distribution::univariate::Normal*",
    "Description": "Normal random number generator."
   },
   {
    "Name": [ "Uniform Generator" ],
    "Type": "korali::distribution::univariate::Uniform*",
    "Description": "Uniform random number generator."
   },
   {
    "Name": [ "Value Vector" ],
    "Type": "std::vector<double>",
    "Description": "Objective Function Values."
   },
   {
    "Name": [ "Previous Value Vector" ],
    "Type": "std::vector<double>",
    "Description": "Objective Function Values from previous evaluations."
   },
   {
    "Name": [ "Sample Population" ],
    "Type": "std::vector<std::vector<double>>",
    "Description": "Sample variable information."
   },
   {
    "Name": [ "Candidate Population" ],
    "Type": "std::vector<std::vector<double>>",
    "Description": "Sample candidates variable information."
   },
   {
    "Name": [ "Current Best Value" ],
    "Type": "double",
    "Description": "Best model evaluation from current generation."
   },
   {
    "Name": [ "Previous Best Value" ],
    "Type": "double",
    "Description": "Best model evaluation from previous generation."
   },
   {
    "Name": [ "Best Sample Index" ],
    "Type": "size_t",
    "Description": "Index of the best sample in current generation."
   },
   {
    "Name": [ "Best Ever Value" ],
    "Type": "double",
    "Description": "Best ever model evaluation."
   },
   {
    "Name": [ "Previous Best Ever Value" ],
    "Type": "double",
    "Description": "Best ever model evaluation as of previous generation."
   },
   {
    "Name": [ "Current Mean" ],
    "Type": "std::vector<double>",
    "Description": "Current mean of population."
   },
   {
    "Name": [ "Previous Mean" ],
    "Type": "std::vector<double>",
    "Description": "Previous mean of population."
   },
   {
    "Name": [ "Best Ever Variables" ],
    "Type": "std::vector<double>",
    "Description": "Best ever found variables."
   },
   {
    "Name": [ "Current Best Variables" ],
    "Type": "std::vector<double>",
    "Description": "Best variables of current generation."
   },
   {
    "Name": [ "Max Distances" ],
    "Type": "std::vector<double>",
    "Description": "Max distance between samples per dimension."
   },
   {
    "Name": [ "Infeasible Sample Count" ],
    "Type": "size_t",
    "Description": "Keeps count of infeasible samples so far."
   },
   {
    "Name": [ "Current Minimum Step Size" ],
    "Type": "double",
    "Description": "Minimum step size of any variable in the current generation."
   }
 ],
 
 "Module Defaults":
 {
  "Population Size": 200,
  "Crossover Rate": 0.9,
  "Mutation Rate": 0.5,
  "Mutation Rule": "Fixed",
  "Parent Selection Rule": "Random",
  "Accept Rule": "Greedy",
  "Fix Infeasible": true,
  
  "Termination Criteria":
   {
    "Max Infeasible Resamplings": 10000000,
    "Min Value": -Infinity,
    "Max Value": Infinity,
    "Min Value Difference Threshold": -Infinity,
    "Min Step Size": -Infinity
   },

  "Uniform Generator":
   {
    "Type": "Univariate/Uniform",
    "Minimum": 0.0,
    "Maximum": 1.0
   },
   
  "Normal Generator":
   {
    "Type": "Univariate/Normal",
    "Mean": 0.0,
    "Standard Deviation": 1.0
   },
  
  "Value Vector": [ ], 
  "Previous Value Vector":  [ ],
  "Sample Population": [ [ ] ],
  "Candidate Population": [ [ ] ],
  "Current Best Value": 0.0,
  "Previous Best Value": 0.0,
  "Best Sample Index": 0,
  "Best Ever Value": -Infinity,
  "Previous Best Ever Value": -Infinity,
  "Current Mean": [ ],
  "Previous Mean":  [ ],
  "Best Ever Variables": [ ],
  "Current Best Variables": [ ],
  "Max Distances":  [ ],
  "Infeasible Sample Count": 0,
  "Current Minimum Step Size": 0.0
 },
 
 "Variable Defaults":
 {
 }
}
