{
 "Configuration Settings":
 [
   {
    "Name": [ "Population Size" ],
    "Type": "size_t",
    "Description": "Specifies the number of samples to evaluate per generation (preferably $4+3*log(N)$, where $N$ is the number of variables)."
   },
   {
    "Name": [ "Mu Value" ],
    "Type": "size_t",
    "Description": "Number of best samples used to update the covariance matrix and the mean (by default it is half the Sample Count)."
   },
   {
    "Name": [ "Mu Type" ],
    "Type": "std::string",
    "Options": [
                { "Value": "Linear", "Description": "Distributes Mu values linearly." },
                { "Value": "Equal", "Description": "Distributes Mu values equally." },
                { "Value": "Logarithmic", "Description": "Distributes Mu values logarithmically." }
               ],
    "Description": "Weights given to the Mu best values to update the covariance matrix and the mean."
   },
   {
    "Name": [ "Initial Sigma Cumulation Factor" ],
    "Type": "double",
    "Description": "Controls the learning rate of the conjugate evolution path (by default this variable is internally calibrated)."
   },
   {
    "Name": [ "Initial Damp Factor" ],
    "Type": "double",
    "Description": "Controls the updates of the covariance matrix scaling factor (by default this variable is internally calibrated)."
   },
   {
    "Name": [ "Is Sigma Bounded" ],
    "Type": "bool",
    "Description": "Sets an upper bound for the covariance matrix scaling factor. The upper bound is given by the average of the initial standard deviation of the variables."
   },
   {
    "Name": [ "Initial Cumulative Covariance" ],
    "Type": "double",
    "Description": "Controls the learning rate of the evolution path for the covariance update (must be in (0,1], by default this variable is internally calibrated)."
   },
   {
    "Name": [ "Is Diagonal" ],
    "Type": "bool",
    "Description": "Covariance matrix updates will be optimized for diagonal matrices."
   },
   {
    "Name": [ "Viability Population Size" ],
    "Type": "size_t",
    "Description": "Specifies the number of samples per generation during the viability regime, i.e. during the search for a parameter vector not violating the constraints."
   },
   {
    "Name": [ "Viability Mu Value" ],
    "Type": "size_t",
    "Description": "Number of best samples used to update the covariance matrix and the mean during the viability regime (by default this variable is hald the Viability Sample Count)."
   },
   {
    "Name": [ "Max Covariance Matrix Corrections" ],
    "Type": "size_t",
    "Description": "Max number of covairance matrix adaptions per generation during the constraint handling loop."
   },
   {
    "Name": [ "Target Success Rate" ],
    "Type": "double",
    "Description": "Controls the updates of the covariance matrix scaling factor during the viability regime."
   },
   {
    "Name": [ "Covariance Matrix Adaption Strength" ],
    "Type": "double",
    "Description": "Controls the covariane matrix adaption strength if samples violate constraints."
   },
   {
    "Name": [ "Normal Vector Learning Rate" ],
    "Type": "double",
    "Description": "Learning rate of constraint normal vectors (must be in (0, 1], by default this variable is internally calibrated)."
   },
   {
    "Name": [ "Global Success Learning Rate" ],
    "Type": "double",
    "Description": "Learning rate of success probability of objective function improvements."
   }
 ],

 "Termination Criteria":
 [
   {
    "Name": [ "Max Infeasible Resamplings" ],
    "Type": "size_t",
    "Criteria": "_infeasibleSampleCount >= _maxInfeasibleResamplings",
    "Description": "Maximum number of resamplings per candidate per generation if sample is outside of Lower and Upper Bound."
   },
   {
    "Name": [ "Max Condition Covariance Matrix" ],
    "Type": "double",
    "Criteria": "_maximumCovarianceEigenvalue >= _maxConditionCovarianceMatrix * _minimumCovarianceEigenvalue",
    "Description": "Specifies the maximum condition of the covariance matrix."
   },
   {
    "Name": [ "Min Value" ],
    "Type": "double",
    "Criteria": "-_bestEverValue < _minValue",
    "Description": "Specifies the minimum target fitness to stop minimization."
   },
   {
    "Name": [ "Max Value" ],
    "Type": "double",
    "Criteria": "+_bestEverValue > _maxValue",
    "Description": "Specifies the maximum target fitness to stop maximization."
   },
   {
    "Name": [ "Min Value Difference Threshold" ],
    "Type": "double",
    "Criteria": "_k->_currentGeneration > 1 && (fabs(_currentBestValue - _previousBestValue) < _minValueDifferenceThreshold)",
    "Description": "Specifies the minimum fitness differential between two consecutive generations before stopping execution."
   },
   {
    "Name": [ "Min Standard Deviation" ],
    "Type": "double",
    "Criteria": "_currentMinStandardDeviation <= _minStandardDeviation",
    "Description": "Specifies the minimal standard deviation for any variable in any proposed sample."
   },
   {
    "Name": [ "Max Standard Deviation" ],
    "Type": "double",
    "Criteria": "_currentMaxStandardDeviation >= _maxStandardDeviation",
    "Description": "Specifies the maximal standard deviation for any variable in any proposed sample."
   }
 ],

 "Variables Configuration":
 [
 
 ],

 "Internal Settings":
 [
   {
    "Name": [ "Normal Generator" ],
    "Type": "korali::distribution::univariate::Normal*",
    "Description": "Normal random number generator."
   },
   {
    "Name": [ "Uniform Generator" ],
    "Type": "korali::distribution::univariate::Uniform*",
    "Description": "Uniform random number generator."
   },
   {
    "Name": [ "Is Viability Regime" ],
    "Type": "bool",
    "Description": "True if mean is outside feasible domain. During viability regime CMA-ES is working with relaxed constraint boundaries that contract towards the true constraint boundaries."
   },
   
   {
    "Name": [ "Value Vector" ],
    "Type": "std::vector<double>",
    "Description": "Objective function values."
   },
   {
    "Name": [ "Previous Value Vector" ],
    "Type": "std::vector<double>",
    "Description": "Objective function values from previous generation."
   },
   {
    "Name": [ "Current Population Size" ],
    "Type": "size_t",
    "Description": "Actual number of samples used per generation (Population Size or Viability Population Size)."
   },
   {
    "Name": [ "Current Mu Value" ],
    "Type": "size_t",
    "Description": "Actual value of mu (Mu Value or Viability Mu Value)."
   },
   {
    "Name": [ "Mu Weights" ],
    "Type": "std::vector<double>",
    "Description": "Weights for each of the Mu samples."
   },
   {
    "Name": [ "Effective Mu" ],
    "Type": "double",
    "Description": "Variance effective selection mass."
   },
   {
    "Name": [ "Sigma Cumulation Factor" ],
    "Type": "double",
    "Description": "Increment for sigma, calculated from muEffective and dimension."
   },
   {
    "Name": [ "Damp Factor" ],
    "Type": "double",
    "Description": "Dampening parameter controls step size adaption."
   },
   {
    "Name": [ "Cumulative Covariance" ],
    "Type": "double",
    "Description": "Controls the step size adaption."
   },
   {
    "Name": [ "Chi Square Number" ],
    "Type": "double",
    "Description": "Expectation of $||N(0,I)||^2$."
   },
   {
    "Name": [ "Covariance Eigenvalue Evaluation Frequency" ],
    "Type": "size_t",
    "Description": "Establishes how frequently the eigenvalues are updated."
   },
   {
    "Name": [ "Sigma" ],
    "Type": "double",
    "Description": "Determines the step size."
   },
   {
    "Name": [ "Trace" ],
    "Type": "double",
    "Description": "The trace of the initial covariance matrix."
   },
   {
    "Name": [ "Sample Population" ],
    "Type": "std::vector<std::vector<double>>",
    "Description": "Sample coordinate information."
   },
   {
    "Name": [ "Finished Sample Count" ],
    "Type": "size_t",
    "Description": "Counter of evaluated samples to terminate evaluation."
   },
   {
    "Name": [ "Current Best Value" ],
    "Type": "double",
    "Description": "Best model evaluation from current generation."
   },
   {
    "Name": [ "Current Best Variables" ],
    "Type": "std::vector<double>",
    "Description": "Best variables of current generation."
   },
   {
    "Name": [ "Best Ever Variables" ],
    "Type": "std::vector<double>",
    "Description": "Best ever found variables."
   },
   {
    "Name": [ "Previous Best Value" ],
    "Type": "double",
    "Description": "Best model evaluation from previous generation."
   },
   {
    "Name": [ "Best Sample Index" ],
    "Type": "size_t",
    "Description": "Index of the best sample in current generation."
   },
   {
    "Name": [ "Best Ever Value" ],
    "Type": "double",
    "Description": "Best ever model evaluation."
   },
   {
    "Name": [ "Previous Best Ever Value" ],
    "Type": "double",
    "Description": "Best ever model evaluation as of previous generation."
   },
   {
    "Name": [ "Sorting Index" ],
    "Type": "std::vector<size_t>",
    "Description": "Sorted indeces of samples according to their model evaluation."
   },
   {
    "Name": [ "Covariance Matrix" ],
    "Type": "std::vector<double>",
    "Description": "(Unscaled) covariance Matrix of proposal distribution."
   },
   {
    "Name": [ "Auxiliar Covariance Matrix" ],
    "Type": "std::vector<double>",
    "Description": "Temporary Storage for Covariance Matrix."
   },
   {
    "Name": [ "Covariance Eigenvector Matrix" ],
    "Type": "std::vector<double>",
    "Description": "Matrix with eigenvectors in columns."
   },
   {
    "Name": [ "Auxiliar Covariance Eigenvector Matrix" ],
    "Type": "std::vector<double>",
    "Description": "Temporary Storage for Matrix with eigenvectors in columns."
   },
   {
    "Name": [ "Axis Lengths" ],
    "Type": "std::vector<double>",
    "Description": "Axis lengths (sqrt(Evals))"
   },
   {
    "Name": [ "Auxiliar Axis Lengths" ],
    "Type": "std::vector<double>",
    "Description": "Temporary storage for Axis lengths."
   },
   {
    "Name": [ "BDZ Matrix" ],
    "Type": "std::vector<double>",
    "Description": "Temporary storage."
   },
   {
    "Name": [ "Auxiliar BDZ Matrix" ] ,
    "Type": "std::vector<double>",
    "Description": "Temporary storage."
   },
   {
    "Name": [ "Current Mean" ],
    "Type": "std::vector<double>",
    "Description": "Current mean of proposal distribution."
   },
   {
    "Name": [ "Previous Mean" ],
    "Type": "std::vector<double>",
    "Description": "Previous mean of proposal distribution."
   },
   {
    "Name": [ "Mean Update" ],
    "Type": "std::vector<double>",
    "Description": "Update differential from previous to current mean."
   },
   {
    "Name": [ "Evolution Path" ],
    "Type": "std::vector<double>",
    "Description": "Evolution path for Covariance Matrix update."
   },
   {
    "Name": [ "Conjugate Evolution Path" ],
    "Type": "std::vector<double>",
    "Description": "Conjugate evolution path for sigma update."
   },
   {
    "Name": [ "Conjugate Evolution Path L2 Norm" ],
    "Type": "double",
    "Description": "L2 Norm of the conjugate evolution path."
   },
   {
    "Name": [ "Infeasible Sample Count" ],
    "Type": "size_t",
    "Description": "Keeps count of the number of infeasible samples."
   },
   {
    "Name": [ "Maximum Diagonal Covariance Matrix Element" ],
    "Type": "double",
    "Description": "Maximum diagonal element of the Covariance Matrix."
   },
   {
    "Name": [ "Minimum Diagonal Covariance Matrix Element" ],
    "Type": "double",
    "Description": "Minimum diagonal element of the Covariance Matrix."
   },
   {
    "Name": [ "Maximum Covariance Eigenvalue" ],
    "Type": "double",
    "Description": "Maximum Covariance Matrix Eigenvalue."
   },
   {
    "Name": [ "Minimum Covariance Eigenvalue" ],
    "Type": "double",
    "Description": "Minimum Covariance Matrix Eigenvalue."
   },
   {
    "Name": [ "Is Eigensystem Updated" ],
    "Type": "bool",
    "Description": "Flag determining if the covariance eigensystem is up to date."
   },
   {
    "Name": [ "Viability Indicator" ],
    "Type": "std::vector<std::vector<bool>>",
    "Description": "Evaluation of each constraint for each sample."
   },
   {
    "Name": [ "Are Constraints Defined" ],
    "Type": "bool",
    "Description": "True if the number of constraints is higher than zero."
   },
   {
    "Name": [ "Covariance Matrix Adaption Factor" ],
    "Type": "double",
    "Description": "This is the $\beta$ factor that indicates how fast the covariance matrix is adapted."
   },
   {
    "Name": [ "Best Valid Sample" ],
    "Type": "int",
    "Description": "Index of best sample without constraint violations (otherwise -1)."
   },
   {
    "Name": [ "Global Success Rate" ],
    "Type": "double",
    "Description": "Estimated Global Success Rate, required for calibration of covariance matrix scaling factor updates."
   },
   {
    "Name": [ "Viability Function Value" ],
    "Type": "double",
    "Description": "Viability Function Value."
   },
   {
    "Name": [ "Resampled Parameter Count" ],
    "Type": "size_t",
    "Description": "Number of resampled parameters due constraint violation."
   },
   {
    "Name": [ "Covariance Matrix Adaptation Count" ],
    "Type": "size_t",
    "Description": "Number of Covariance Matrix Adaptations."
   },
   {
    "Name": [ "Viability Boundaries" ],
    "Type": "std::vector<double>",
    "Description": "Viability Boundaries."
   },
   {
    "Name": [ "Viability Improvement" ],
    "Type": "std::vector<bool>",
    "Description": "Sample evaluations larger than fviability."
   },
   {
    "Name": [ "Max Constraint Violation Count" ],
    "Type": "size_t",
    "Description": "Temporary counter of maximal amount of constraint violations attained by a sample (must be 0)."
   },
   {
    "Name": [ "Sample Constraint Violation Counts" ],
    "Type": "std::vector<size_t>",
    "Description": "Maximal amount of constraint violations."
   },
   {
    "Name": [ "Constraint Evaluations" ],
    "Type": "std::vector<std::vector<double>>",
    "Description": "Constraint Evaluations $$e$$."
   },
   {
    "Name": [ "Normal Constraint Approximation" ],
    "Type": "std::vector<std::vector<double>>",
    "Description": "Normal approximation of constraints."
   },
   {
    "Name": [ "Best Constraint Evaluations" ],
    "Type": "std::vector<double>",
    "Description": "Constraint evaluations for best ever."
   },
   {
    "Name": [ "Has Discrete Variables" ],
    "Type": "bool",
    "Description": "Flag indicating if at least one of the variables is discrete."
   },
   {
    "Name": [ "Discrete Mutations" ],
    "Type": "std::vector<double>",
    "Description": "Vector storing discrete mutations, required for covariance matrix update."
   },
   {
    "Name": [ "Number Of Discrete Mutations" ],
    "Type": "size_t",
    "Description": "Number of discrete mutations in current generation."
   },
   {
    "Name": [ "Number Masking Matrix Entries" ],
    "Type": "size_t",
    "Description": "Number of nonzero entries on diagonal in Masking Matrix."
   },
   {
    "Name": [ "Masking Matrix" ],
    "Type": "std::vector<double>",
    "Description": "Diagonal Matrix signifying where an integer mutation may be conducted."
   },
   {
    "Name": [ "Masking Matrix Sigma" ],
    "Type": "std::vector<double>",
    "Description": "Sigma of the Masking Matrix."
   },
   {
    "Name": [ "Chi Square Number Discrete Mutations" ],
    "Type": "double",
    "Description": "Expectation of $||N(0,I^S)||^2$ for discrete mutations."
   },
   {
    "Name": [ "Current Min Standard Deviation" ],
    "Type": "double",
    "Description": "Current minimum standard deviation of any variable."
   },
   {
    "Name": [ "Current Max Standard Deviation" ],
    "Type": "double",
    "Description": "Current maximum standard deviation of any variable."
   },
   {
    "Name": [ "Constraint Evaluation Count" ],
    "Type": "size_t",
    "Description": "Number of Constraint Evaluations."
   }
 ],
 
  "Module Defaults":
 {
   "Population Size": 0,
   "Mu Value": 0,
   "Mu Type": "Logarithmic",
   "Initial Sigma Cumulation Factor": -1.0,
   "Initial Damp Factor": -1.0,
   "Is Sigma Bounded": false,
   "Initial Cumulative Covariance": -1.0, 
   "Is Diagonal": false,
   "Viability Population Size": 2,
   "Viability Mu Value": 0,
   "Max Covariance Matrix Corrections": 1000000,
   "Target Success Rate": 0.1818,
   "Covariance Matrix Adaption Strength": 0.1,
   "Normal Vector Learning Rate": -1.0,
   "Global Success Learning Rate": 0.2,
  
   "Termination Criteria":
    {
     "Max Infeasible Resamplings": 10000000,
     "Max Condition Covariance Matrix": Infinity,
     "Min Value": -Infinity,
     "Max Value": Infinity,
     "Min Value Difference Threshold": -Infinity,
     "Min Standard Deviation": -Infinity,
     "Max Standard Deviation": Infinity
    },
     
    "Uniform Generator":
    {
     "Type": "Univariate/Uniform",
     "Minimum": 0.0,
     "Maximum": 1.0
    },
    
    "Normal Generator":
    {
     "Type": "Univariate/Normal",
     "Mean": 0.0,
     "Standard Deviation": 1.0
    },
    
    "Best Ever Value": -Infinity,
    "Current Min Standard Deviation": Infinity,
    "Current Max Standard Deviation": -Infinity,
    "Minimum Covariance Eigenvalue": Infinity,
    "Maximum Covariance Eigenvalue": -Infinity
 },
  
 "Variable Defaults":
 {

 }
}
