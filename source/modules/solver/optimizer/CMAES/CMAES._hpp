#ifndef _KORALI_SOLVER_CMAES_HPP_
#define _KORALI_SOLVER_CMAES_HPP_

#include "modules/distribution/univariate/normal/normal.hpp"
#include "modules/distribution/univariate/uniform/uniform.hpp"
#include "modules/solver/optimizer/optimizer.hpp"
#include <vector>

namespace korali
{
namespace solver
{
namespace optimizer
{
class CMAES : public Optimizer
{
  private:
  /**
  * @brief Prepares generation for the next set of evaluations
 */
  void prepareGeneration();

  /**
  * @brief Evaluates a single sample
  * @param sampleIdx Index of the sample to evaluate
 */
  void sampleSingle(size_t sampleIdx);

  /**
   * @brief Adapts the covariance matrix.
   * @param hsig Sign
  */
  void adaptC(int hsig);

  /**
    * @brief Updates scaling factor of covariance matrix.
 */
  void updateSigma(); /* update Sigma */

  /**
 * @brief Updates mean and covariance of Gaussian proposal distribution.
 */
  void updateDistribution(std::vector<Sample> &samples);

  /**
    * @brief Updates the system of eigenvalues and eigenvectors
    * @param M Input matrix
 */
  void updateEigensystem(std::vector<double> &M);

  /**
  * @brief Method that checks potential numerical issues and does correction. Not yet implemented.
 */
  void numericalErrorTreatment();

  /**
    * @brief Function for eigenvalue decomposition.
 */
  void eigen(size_t N, std::vector<double> &C, std::vector<double> &diag, std::vector<double> &Q) const;

  /**
  * @brief Descending sort of vector elements, stores ordering in _sortingIndex.
  * @param vec Vector to sort, _sortingIndex Ordering of elements in vector
  * @param N Number of current samples.
 */
  void sort_index(const std::vector<double> &vec, std::vector<size_t> &_sortingIndex, size_t N) const;

  /**
  * @brief Initializes the weights of the mu vector
  * @param numsamples Length of mu vector
 */
  void initMuWeights(size_t numsamples); /* init _muWeights and dependencies */

  /**
  * @brief Initialize Covariance Matrix and Cholesky Decomposition
 */
  void initCovariance(); /* init sigma, C and B */

  /**
  * @brief Check if mean of proposal distribution is inside of valid domain (does not violate constraints), if yes, re-initialize internal vars. Method for CCMA-ES.
 */
  void checkMeanAndSetRegime();

  /**
 * @brief Update constraint evaluationsa. Method for CCMA-ES.
 */
  void updateConstraints();

  /**
 * @brief Update viability boundaries. Method for CCMA-ES.
 */
  void updateViabilityBoundaries();

  /**
 * @brief Process samples that violate constraints. Method for CCMA-ES.
 */
  void handleConstraints();

  /**
 * @brief Reevaluate constraint evaluations. Called in handleConstraints. Method for CCMA-ES.
 */
  void reEvaluateConstraints();

  /**
 * @brief Update mutation matrix for discrete variables. Method for discrete/integer optimization.
 */
  void updateDiscreteMutationMatrix();

  /**
 * @brief Discretize variables to given granularity using arithmetic rounding.
 */
  void discretize(std::vector<double> &sample);

  public:
  /**
 * @brief Configures CMA-ES.
 */
  void setInitialConfiguration() override;

  /**
 * @brief Executes sampling & evaluation generation.
 */
  void runGeneration() override;

  /**
 * @brief Console Output before generation runs.
 */
  void printGenerationBefore() override;

  /**
 * @brief Console output after generation.
 */
  void printGenerationAfter() override;

  /**
 * @brief Final console output at termination.
 */
  void finalize() override;
};

} // namespace optimizer
} // namespace solver
} // namespace korali

#endif // _KORALI_SOLVER_CMAES_HPP_
