#ifndef _KORALI_SOLVER_MOCMAES_HPP_
#define _KORALI_SOLVER_MOCMAES_HPP_

#include "modules/distribution/multivariate/normal/normal.hpp"
#include "modules/distribution/univariate/uniform/uniform.hpp"
#include "modules/solver/optimizer/optimizer.hpp"
#include <vector>

namespace korali
{
namespace solver
{
namespace optimizer
{
class MOCMAES : public Optimizer
{
  public:
  /**
  * @brief Prepares generation for the next set of evaluations
 */
  void prepareGeneration();

  /**
  * @brief Evaluates a single sample
  * @param sampleIdx Index of the sample to evaluate
 */
  void sampleSingle(size_t sampleIdx);
 
  /**
 * @brief Sort sample indeces based on non-dominance (primary) and contribution and contributing hypervolume (secondary).
 */
  void sortSampleIndices();

  /**
 * @brief Updates mean and covariance of Gaussian proposal distribution.
 * @param evaluations Model evaluations for proposed samples
 */
  void updateDistribution();

  /**
 * @brief Configures CMA-ES.
 */
  void setInitialConfiguration() override;

  /**
 * @brief Executes sampling & evaluation generation.
 */
  void runGeneration() override;

  /**
 * @brief Console Output before generation runs.
 */
  void printGenerationBefore() override;

  /**
 * @brief Console output after generation.
 */
  void printGenerationAfter() override;

  /**
 * @brief Final console output at termination.
 */
  void finalize() override;
};

} // namespace optimizer
} // namespace solver
} // namespace korali

#endif // _KORALI_SOLVER_MOCMAES_HPP_
