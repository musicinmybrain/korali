{
 "Configuration Settings":
 [
   {
    "Name": [ "Num Objectives" ],
    "Type": "size_t",
    "Description": "The number of objective functions to optimize."
   },
   {
    "Name": [ "Population Size" ],
    "Type": "size_t",
    "Description": "Specifies the number of samples to evaluate per generation (preferably $4+3*log(N)$, where $N$ is the number of variables)."
   },
   {
    "Name": [ "Mu Value" ],
    "Type": "size_t",
    "Description": "Number of best samples advancing to the next generation (by default it is half the Sample Count)."
   },
   {
    "Name": [ "Evolution Path Adaption Strength" ],
    "Type": "double",
    "Description": "Controls the learning rate of the conjugate evolution path (must be in (0,1], by default this variable is internally calibrated, variable Cc in reference)."
   },
   {
    "Name": [ "Covariance Learning Rate" ],
    "Type": "double",
    "Description": "Controls the learning rate of the covariance matrices (must be in (0,1], by default this variable is internally calibrated, variable Ccov in reference)."
   },
   {
    "Name": [ "Target Success Rate" ],
    "Type": "double",
    "Description": "Threshold value that controls the updates of the covariance matrix and the evolution path (must be in (0,1], variable Pthresh in reference)."
   },
   {
    "Name": [ "Success Learning Rate" ],
    "Type": "double",
    "Description": "Learning Rate of success rates (must be in (0,1], by default this variable is internally calibrated, variable Cp in reference)."
   }
 ],

 "Termination Criteria":
 [
   {
    "Name": [ "Min Value Difference Threshold" ],
    "Type": "double",
    "Criteria": "_k->_currentGeneration > 1 && (_currentMinValueDifferences < _minValueDifferenceThreshold)",
    "Description": "Specifies the minimum fitness differential between two consecutive generations before stopping execution."
   },
   {
    "Name": [ "Min Standard Deviation" ],
    "Type": "double",
    "Criteria": "_k->_currentGeneration > 1 && (*std::max_element(_currentMaxMinStandardDeviations.begin(), _currentMaxMinStandardDeviations.begin()) <= _minStandardDeviation)",
    "Description": "Specifies the minimal standard deviation."
   },
   {
    "Name": [ "Max Standard Deviation" ],
    "Type": "double",
    "Criteria": "_k->_currentGeneration > 1 && (*std::min_element(_currentMinMaxStandardDeviations.begin(), _currentMinMaxStandardDeviations.end()) >= _maxStandardDeviation)",
    "Description": "Specifies the maximal standard deviation."
   }
 ],

 "Variables Configuration":
 [
 
 ],

 "Internal Settings":
 [
   {
    "Name": [ "Normal Generator" ],
    "Type": "korali::distribution::univariate::Normal*",
    "Description": "Normal random number generator."
   },
   {
    "Name": [ "Uniform Generator" ],
    "Type": "korali::distribution::univariate::Uniform*",
    "Description": "Uniform random number generator."
   },
   {
    "Name": [ "Value Vector" ],
    "Type": "std::vector<double>",
    "Description": "Objective function values."
   },
   {
    "Name": [ "Previous Value Vector" ],
    "Type": "std::vector<double>",
    "Description": "Objective function values from previous generation."
   },
   {
    "Name": [ "Sigma" ],
    "Type": "std::vector<double>",
    "Description": "Determines the step size."
   },
   {
    "Name": [ "Sample Population" ],
    "Type": "std::vector<std::vector<double>>",
    "Description": "Sample coordinate information."
   },
   {
    "Name": [ "Finished Sample Count" ],
    "Type": "size_t",
    "Description": "Counter of evaluated samples to terminate evaluation."
   },
   {
    "Name": [ "Best Ever Values" ],
    "Type": "std::vector<double>",
    "Description": "Best value of each objective."
   },
   {
    "Name": [ "Previous Best Values" ],
    "Type": "std::vector<double>",
    "Description": "Best objectives from previous generation."
   },
   {
    "Name": [ "Current Best Values" ],
    "Type": "std::vector<double>",
    "Description": "Best objectives from current generation."
   },
   {
    "Name": [ "Current Best Variables" ],
    "Type": "std::vector<std::vector<double>>",
    "Description": "Samples associated with current best objective values."
   },
   {
    "Name": [ "Sample Collection" ],
    "Type": "std::vector<std::vector<double>>",
    "Description": "Candidate pareto optimal samples."
   },
   {
    "Name": [ "Sample Value Collection" ],
    "Type": "std::vector<std::vector<double>>",
    "Description": "Model evaluations of pareto candidates."
   },
   {
    "Name": [ "Sorting Index" ],
    "Type": "std::vector<size_t>",
    "Description": "Samples ranks according to the pareto criteria."
   },
   {
    "Name": [ "Covariance Matrix" ],
    "Type": "std::vector<std::vector<std::vector<double>>>",
    "Description": "(Unscaled) covariance matrices of proposal distributions."
   },
   {
    "Name": [ "Auxiliar Covariance Matrix" ],
    "Type": "std::vector<double>",
    "Description": "Temporary Storage for Covariance Matrix."
   },
   {
    "Name": [ "Evolution Paths" ],
    "Type": "std::vector<std::vector<double>>",
    "Description": "Evolution path of samples."
   },
   {
    "Name": [ "Infeasible Sample Count" ],
    "Type": "size_t",
    "Description": "Keeps count of the number of infeasible samples."
   },
   {
    "Name": [ "Current Min Value Differences" ],
    "Type": "std::vector<double>",
    "Description": "Current minimum value differences wrt previous best value."
   },
   {
    "Name": [ "Current Min Max Standard Deviations" ],
    "Type": "std::vector<double>",
    "Description": "Current minimum of any max standard devs."
   },
   {
    "Name": [ "Current Max Min Standard Deviations" ],
    "Type": "std::vector<double>",
    "Description": "Current maximum of any min standard devs."
   }

 ],
 
  "Module Defaults":
 {
   "Population Size": 0,
   "Mu Value": 0,
   "Evolution Path Adaption Strength": -1.0,
   "Covariance Learning Rate": -1.0,
   "Target Success Rate": 0.1818,
   "Success Learning Rate": 0.1,
  
   "Termination Criteria":
    {
     "Min Value Difference Threshold": -Infinity,
     "Min Standard Deviation": -Infinity,
     "Max Standard Deviation": Infinity
    },
     
    "Uniform Generator":
    {
     "Type": "Univariate/Uniform",
     "Minimum": 0.0,
     "Maximum": 1.0
    },
    
    "Normal Generator":
    {
     "Type": "Univariate/Normal",
     "Mean": 0.0,
     "Standard Deviation": 1.0
    }
 },
  
 "Variable Defaults":
 {

 }
}
