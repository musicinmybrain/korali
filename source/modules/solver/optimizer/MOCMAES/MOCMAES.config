{

  "Module Data":
  {
    "Class Name": "MOCMAES",
    "Namespace": ["korali", "solver", "optimizer"],
    "Parent Class Name": "Optimizer"
  },

 "Configuration Settings":
 [
   {
    "Name": [ "Population Size" ],
    "Type": "size_t",
    "Description": "Specifies the number of samples to evaluate per generation (preferably $4+3*log(N)$, where $N$ is the number of variables)."
   },
   {
    "Name": [ "Mu Value" ],
    "Type": "size_t",
    "Description": "Number of best samples advancing to the next generation (by default it is half the Sample Count)."
   },
   {
    "Name": [ "Evolution Path Adaption Strength" ],
    "Type": "double",
    "Description": "Controls the learning rate of the conjugate evolution path (must be in (0,1], by default this variable is internally calibrated, variable Cc in reference)."
   },
   {
    "Name": [ "Covariance Learning Rate" ],
    "Type": "double",
    "Description": "Controls the learning rate of the covariance matrices (must be in (0,1], by default this variable is internally calibrated, variable Ccov in reference)."
   },
   {
    "Name": [ "Target Success Rate" ],
    "Type": "double",
    "Description": "Value that controls the updates of the covariance matrix and the evolution path (must be in (0,1], variable Psucc in reference)."
   },
   {
    "Name": [ "Threshold Probability" ],
    "Type": "double",
    "Description": "Threshold that defines update scheme for the covariance matrix and the evolution path (must be in (0,1], variable Pthresh in reference)."
   },
   {
    "Name": [ "Success Learning Rate" ],
    "Type": "double",
    "Description": "Learning Rate of success rates (must be in (0,1], by default this variable is internally calibrated, variable Cp in reference)."
   }
 ],

 "Termination Criteria":
 [
   {
    "Name": [ "Min Max Value Difference Threshold" ],
    "Type": "double",
    "Criteria": "_k->_currentGeneration > 1 && (std::abs(*std::max_element(_currentBestValueDifferences.begin(), _currentBestValueDifferences.end())) < _minValueDifferenceThreshold)",
    "Description": "Specifies the min max fitness differential between two consecutive generations before stopping execution."
   },
   {
    "Name": [ "Min Variable Difference Threshold" ],
    "Type": "double",
    "Criteria": "_k->_currentGeneration > 1 && (*std::max_element(_currentBestVariableDifferences.begin(), _currentBestVariableDifferences.end()) < _minVariableDifferenceThreshold)",
    "Description": "Specifies the min L2 norm of the best samples between two consecutive generations before stopping execution."
   },
   {
    "Name": [ "Min Standard Deviation" ],
    "Type": "double",
    "Criteria": "_k->_currentGeneration > 1 && (*std::max_element(_currentMinStandardDeviations.begin(), _currentMinStandardDeviations.end()) <= _minStandardDeviation)",
    "Description": "Specifies the minimal standard deviation."
   },
   {
    "Name": [ "Max Standard Deviation" ],
    "Type": "double",
    "Criteria": "_k->_currentGeneration > 1 && (*std::min_element(_currentMaxStandardDeviations.begin(), _currentMaxStandardDeviations.end()) >= _maxStandardDeviation)",
    "Description": "Specifies the maximal standard deviation."
   }
 ],

 "Variables Configuration":
 [

 ],

 "Internal Settings":
 [
   {
    "Name": [ "Num Objectives" ],
    "Type": "size_t",
    "Description": "The number of objective functions to optimize."
   },
   {
    "Name": [ "Multinormal Generator" ],
    "Type": "korali::distribution::multivariate::Normal*",
    "Description": "Multinormal random number generator."
   },
   {
    "Name": [ "Uniform Generator" ],
    "Type": "korali::distribution::univariate::Uniform*",
    "Description": "Uniform random number generator."
   },
   {
    "Name": [ "Current Non Dominated Sample Count" ],
    "Type": "size_t",
    "Description": "Number of non dominated samples of current generation."
   },
   {
    "Name": [ "Current Values" ],
    "Type": "std::vector<std::vector<double>>",
    "Description": "Objective function values."
   },
   {
    "Name": [ "Previous Values" ],
    "Type": "std::vector<std::vector<double>>",
    "Description": "Objective function values from previous generation."
   },
   {
    "Name": [ "Parent Index" ],
    "Type": "std::vector<size_t>",
    "Description": "Tracking index of parent."
   },
   {
    "Name": [ "Parent Sample Population" ],
    "Type": "std::vector<std::vector<double>>",
    "Description": "Sample coordinate information of parents."
   },
   {
    "Name": [ "Current Sample Population" ],
    "Type": "std::vector<std::vector<double>>",
    "Description": "Sample coordinate information."
   },
   {
    "Name": [ "Previous Sample Population" ],
    "Type": "std::vector<std::vector<double>>",
    "Description": "Sample coordinate information of previous offsprint."
   },
   {
    "Name": [ "Parent Sigma" ],
    "Type": "std::vector<double>",
    "Description": "Step size of parent."
   },
   {
    "Name": [ "Current Sigma" ],
    "Type": "std::vector<double>",
    "Description": "Determines the step size."
   },
   {
    "Name": [ "Previous Sigma" ],
    "Type": "std::vector<double>",
    "Description": "Previous step size."
   },
   {
    "Name": [ "Parent Covariance Matrix" ],
    "Type": "std::vector<std::vector<double>>",
    "Description": "(Unscaled) covariance matrices of parents."
   },
   {
    "Name": [ "Current Covariance Matrix" ],
    "Type": "std::vector<std::vector<double>>",
    "Description": "(Unscaled) covariance matrices of proposal distributions."
   },
   {
    "Name": [ "Previous Covariance Matrix" ],
    "Type": "std::vector<std::vector<double>>",
    "Description": "(Unscaled) covariance matrices of proposal distributions from previous offspring."
   },
   {
    "Name": [ "Parent Evolution Paths" ],
    "Type": "std::vector<std::vector<double>>",
    "Description": "Evolution path of parents."
   },
   {
    "Name": [ "Current Evolution Paths" ],
    "Type": "std::vector<std::vector<double>>",
    "Description": "Evolution path of samples."
   },
   {
    "Name": [ "Previous Evolution Paths" ],
    "Type": "std::vector<std::vector<double>>",
    "Description": "Evolution path of samples of previous offspring."
   },
   {
    "Name": [ "Parent Success Probabilities" ],
    "Type": "std::vector<double>",
    "Description": "Smoothed success probabilities of parents."
   },
   {
    "Name": [ "Current Success Probabilities" ],
    "Type": "std::vector<double>",
    "Description": "Smoothed success probabilities."
   },
   {
    "Name": [ "Previous Success Probabilities" ],
    "Type": "std::vector<double>",
    "Description": "Smoothed success probabilities of previous generation."
   },
   {
    "Name": [ "Finished Sample Count" ],
    "Type": "size_t",
    "Description": "Counter of evaluated samples to terminate evaluation."
   },
   {
    "Name": [ "Best Ever Values" ],
    "Type": "std::vector<double>",
    "Description": "Best value of each objective."
   },
   {
    "Name": [ "Best Ever Variables" ],
    "Type": "std::vector<std::vector<double>>",
    "Description": "Samples associated with  best ever objective values."
   },
   {
    "Name": [ "Previous Best Values" ],
    "Type": "std::vector<double>",
    "Description": "Best objectives from previous generation."
   },
   {
    "Name": [ "Previous Best Variables" ],
    "Type": "std::vector<std::vector<double>>",
    "Description": "Samples associated with previous best objective values."
   },
   {
    "Name": [ "Current Best Values" ],
    "Type": "std::vector<double>",
    "Description": "Best objectives from current generation."
   },
   {
    "Name": [ "Current Best Variables" ],
    "Type": "std::vector<std::vector<double>>",
    "Description": "Samples associated with current best objective values."
   },
   {
    "Name": [ "Sample Collection" ],
    "Type": "std::vector<std::vector<double>>",
    "Description": "Candidate pareto optimal samples. Samples will be finalized at termination."
   },
   {
    "Name": [ "Sample Value Collection" ],
    "Type": "std::vector<std::vector<double>>",
    "Description": "Model evaluations of pareto candidates."
   },
   {
    "Name": [ "Infeasible Sample Count" ],
    "Type": "size_t",
    "Description": "Keeps count of the number of infeasible samples."
   },
   {
    "Name": [ "Current Best Value Differences" ],
    "Type": "std::vector<double>",
    "Description": "Value differences of current and previous best values found."
   },
   {
    "Name": [ "Current Best Variable Differences" ],
    "Type": "std::vector<double>",
    "Description": "L2 norm of previous and current best variable for each objective."
   },
   {
    "Name": [ "Current Min Standard Deviations" ],
    "Type": "std::vector<double>",
    "Description": "Current minimum of any standard devs of a sample."
   },
   {
    "Name": [ "Current Max Standard Deviations" ],
    "Type": "std::vector<double>",
    "Description": "Current maximum of any standard devs of a sample."
   }

 ],

  "Module Defaults":
 {
   "Population Size": 0,
   "Mu Value": 0,
   "Evolution Path Adaption Strength": -1.0,
   "Covariance Learning Rate": -1.0,
   "Target Success Rate": 0.175,
   "Threshold Probability": 0.44,
   "Success Learning Rate": 0.08,

   "Termination Criteria":
    {
     "Min Max Value Difference Threshold": -Infinity,
     "Min Variable Difference Threshold": -Infinity,
     "Min Standard Deviation": -Infinity,
     "Max Standard Deviation": Infinity
    },

    "Uniform Generator":
    {
     "Type": "Univariate/Uniform",
     "Minimum": 0.0,
     "Maximum": 1.0
    },

    "Multinormal Generator":
    {
     "Type": "Multivariate/Normal",
     "Mean Vector": [ 0.0 ],
     "Sigma": [ 1.0 ]
    }
 },

 "Variable Defaults":
 {

 }
}
