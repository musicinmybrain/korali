@startIncludeGuard

#include "modules/distribution/multivariate/normal/normal.hpp"
#include "modules/distribution/univariate/uniform/uniform.hpp"
#include "modules/solver/optimizer/optimizer.hpp"
#include <vector>

@startNamespace

class @className : public @parentClassName
{
  public:
  /**
  * @brief Prepares generation for the next set of evaluations
 */
  void prepareGeneration();

  /**
  * @brief Evaluates a single sample
  * @param sampleIdx Index of the sample to evaluate
 */
  void sampleSingle(size_t sampleIdx);

  /**
 * @brief Sort sample indeces based on non-dominance (primary) and contribution and contributing hypervolume (secondary).
 * @param values Values to sort
 * @return sorted indices
 */
  std::vector<int> sortSampleIndices(const std::vector<std::vector<double>> &values) const;

  /**
 * @brief Updates mean and covariance of Gaussian proposal distribution.
 */
  void updateDistribution();

  /**
 * @brief Update statistics mostly for analysis.
 */
  void updateStatistics();

  /**
 * @brief Configures CMA-ES.
 */
  void setInitialConfiguration() override;

  /**
 * @brief Executes sampling & evaluation generation.
 */
  void runGeneration() override;

  /**
 * @brief Console Output before generation runs.
 */
  void printGenerationBefore() override;

  /**
 * @brief Console output after generation.
 */
  void printGenerationAfter() override;

  /**
 * @brief Final console output at termination.
 */
  void finalize() override;
};

@endNamespace

@endIncludeGuard
