#include "engine.hpp"
#include "modules/solver/optimizer/MADGRAD/MADGRAD.hpp"
#include "sample/sample.hpp"

namespace korali
{
namespace solver
{
namespace optimizer
{
void MADGRAD::setInitialConfiguration()
{
  _variableCount = _k->_variables.size();

  for (size_t i = 0; i < _variableCount; i++)
    if (std::isfinite(_k->_variables[i]->_initialValue) == false)
      KORALI_LOG_ERROR("Initial Value of variable \'%s\' not defined (no defaults can be calculated).\n", _k->_variables[i]->_name.c_str());

  _currentValue.resize(_variableCount);
  for (size_t i = 0; i < _variableCount; i++)
    _currentValue[i] = _k->_variables[i]->_initialValue;

  _initialParameter = _currentValue;
  _gradient.resize(_variableCount, 0.0);
  _gradientSum.resize(_variableCount, 0.0);
  _squaredGradientSum.resize(_variableCount, 0.0);

  _bestEvaluation = Inf;
  _gradientNorm = 1;
  _scaledLearningRate = _eta;
    
  if (_eta <= 0) KORALI_LOG_ERROR("Learning Rate 'eta' must be larger 0 (is %lf).\n", _eta);
  if (_weightDecay <= 0) KORALI_LOG_ERROR("Weight decaymust be larger 0 (is %lf).\n", _weightDecay);
  if (_epsilon <= 0) KORALI_LOG_ERROR("Epsilon must be larger 0 (is %lf).\n", _epsilon);
}

void MADGRAD::runGeneration()
{
  if (_k->_currentGeneration == 1) setInitialConfiguration();

  // Initializing Sample Evaluation
  Sample sample;
  sample["Module"] = "Problem";
  sample["Operation"] = "Evaluate With Gradients";
  sample["Parameters"] = _currentValue;
  sample["Sample Id"] = 0;
  KORALI_START(sample);

  // Waiting for sample to finish
  KORALI_WAIT(sample);

  auto evaluation = KORALI_GET(double, sample, "F(x)");
  auto gradient = KORALI_GET(std::vector<double>, sample, "Gradient");

  // Processing results
  processResult(evaluation, gradient);
}

void MADGRAD::processResult(double evaluation, std::vector<double> &gradient)
{
  _modelEvaluationCount++;
  _currentEvaluation = -evaluation; //minimize

  _gradientNorm = 0.0;
  _gradient = gradient;

  //_scaledLearningRate = std::sqrt(_modelEvaluationCount+1.0) * _eta;

  for (size_t i = 0; i < _variableCount; i++)
  {
    _gradientSum[i] += _scaledLearningRate * _gradient[i];
    _squaredGradientSum[i] += _scaledLearningRate * _gradient[i] * _gradient[i];
    _gradientNorm += _gradient[i] * _gradient[i];
  }
  _gradientNorm = std::sqrt(_gradientNorm);

  if (_currentEvaluation < _bestEvaluation)
    _bestEvaluation = _currentEvaluation;

  // update parameters
  for (size_t i = 0; i < _variableCount; i++)
  {
    double intermediateParam = _initialParameter[i] + 1.0/(std::cbrt(_squaredGradientSum[i]) + _epsilon) * _gradientSum[i];
    _currentValue[i] = (1.0 - _weightDecay) * _currentValue[i] + _weightDecay * intermediateParam;
  }
}

void MADGRAD::printGenerationBefore()
{
  _k->_logger->logInfo("Normal", "Starting generation %lu...\n", _k->_currentGeneration);
}

void MADGRAD::printGenerationAfter()
{
  _k->_logger->logInfo("Normal", "x = [ ");
  for (size_t k = 0; k < _variableCount; k++) _k->_logger->logData("Normal", " %.5le  ", _currentValue[k]);
  _k->_logger->logData("Normal", " ]\n");

  _k->_logger->logInfo("Normal", "F(X) = %le \n", _currentEvaluation);

  _k->_logger->logInfo("Normal", "DF(X) = [ ");
  for (size_t k = 0; k < _variableCount; k++) _k->_logger->logData("Normal", " %.5le  ", _gradient[k]);
  _k->_logger->logData("Normal", " ]\n");

  _k->_logger->logInfo("Normal", "|DF(X)| = %le \n", _gradientNorm);
}

void MADGRAD::finalize()
{
  // Updating Results
  (*_k)["Results"]["Best Sample"]["F(x)"] = _currentEvaluation;
  (*_k)["Results"]["Best Sample"]["Gradient(x)"] = _gradient;
  (*_k)["Results"]["Best Sample"]["Parameters"] = _currentValue;
}

} // namespace optimizer

} // namespace solver

} // namespace korali
