#ifndef _KORALI_SOLVER_DEEPSUPERVISOR_HPP_
#define _KORALI_SOLVER_DEEPSUPERVISOR_HPP_

#include "engine.hpp"
#include "modules/neuralNetwork/neuralNetwork.hpp"
#include "modules/problem/supervisedLearning/supervisedLearning.hpp"
#include "modules/solver/solver.hpp"

namespace korali
{
namespace solver
{
class DeepSupervisor : public korali::Solver
{
  public:
  /**
 * @brief Korali engine for optimizing NN weights and biases
 */
  korali::problem::SupervisedLearning *_problem;

  /**
 * @brief Model function to evaluate the proposed NN configuration
 * @param sample The sample containing proposal configuration
 * @param nn Pointer to the neural network
 */
  static void runNeuralNetwork(korali::Sample &sample, korali::NeuralNetwork *nn, std::vector<std::vector<double>>* solution);
};

} // namespace solver
} // namespace korali

#endif // _KORALI_SOLVER_DEEPSUPERVISOR_HPP_
