#ifndef _KORALI_SOLVERHPP_
#define _KORALI_SOLVERHPP_

#include "libco.h"
#include "modules/experiment/experiment.hpp"
#include "modules/module.hpp"
#include <string>
#include <vector>

/*! \namespace Korali
    \brief The Korali namespace includes all Korali-specific functions, variables, and modules.
*/
namespace korali
{
/**
 * @brief Macro to start the processing of a sample.
 */
#define KORALI_START(SAMPLE) _k->_engine->_conduit->start(SAMPLE);

/**
 * @brief Macro to wait for the finishing of a sample.
 */
#define KORALI_WAIT(SAMPLE) _k->_engine->_conduit->wait(SAMPLE);

/**
 * @brief Macro to wait for any of the given samples.
 */
#define KORALI_WAITANY(SAMPLE) _k->_engine->_conduit->waitAny(SAMPLE);

/**
 * @brief Macro to wait for all of the given samples.
 */
#define KORALI_WAITALL(SAMPLE) _k->_engine->_conduit->waitAll(SAMPLE);

/**
 * @brief Macro to broadcast global information to all the workers.
 */
#define KORALI_BROADCAST(KEY, JSON) _k->_engine->_conduit->broadcastGlobals(KEY, JSON);

/**
 * @brief Macro to wait for any of the given samples.
 */
#define KORALI_SEND_MSG_TO_SAMPLE(SAMPLE, MSG) _k->_engine->_conduit->sendMessageToSample(SAMPLE, MSG);

/**
 * @brief Macro to wait for any of the given samples.
 */
#define KORALI_RECV_MSG_FROM_SAMPLE(SAMPLE) _k->_engine->_conduit->recvMessageFromSample(SAMPLE);

class Solver : public Module
{
  public:
  /**
  * @brief Prints solver information before the execution of the current generation.
  */
  virtual void printGenerationBefore(){};

  /**
 * @brief Prints solver information after the execution of the current generation.
 */
  virtual void printGenerationAfter(){};

  /**
 * @brief Runs the current generation.
 */
  virtual void runGeneration() = 0;

  /**
  * @brief Initializes the solver with starting values for the first generation.
 */
  virtual void setInitialConfiguration(){};

  /**
  * @brief Stores termination criteria for the module.
  */
  std::vector<std::string> _terminationCriteria;
};

} // namespace korali

#endif // _KORALI_SOLVERHPP_
