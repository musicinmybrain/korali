#include "modules/conduit/conduit.hpp"
#include "modules/solver/DQN/DQN.hpp"

namespace korali
{
namespace solver
{

void DQN::initialize()
{
  // Getting problem pointer
  _problem = dynamic_cast<problem::ReinforcementLearning *>(_k->_problem);


  /*********************************************************************
  * Creating Q-Approximation Experiment
  *********************************************************************/

  _QExperiment["Problem"]["Type"] = "Supervised Learning";
  _QExperiment["Solver"]["Type"] = "Deep Learner";
  _neuralNetwork->getConfiguration(_QExperiment["Solver"]["Neural Network"]);

  size_t expVar = 0;
  for (size_t i = 0; i < _problem->_stateVectorSize; i++)
  {
   size_t varIdx = _problem->_stateVectorIndexes[i];
   _QExperiment["Variables"][expVar]["Name"] = _k->_variables[varIdx]->_name;
   _QExperiment["Variables"][expVar]["Type"] = "Input";
   _QExperiment["Variables"][expVar]["Training Data"] = { 0.0 };
   _QExperiment["Variables"][expVar]["Validation Data"] = { 0.0 };
   expVar++;
  }

  for (size_t i = 0; i < _problem->_actionVectorSize; i++)
  {
   size_t varIdx = _problem->_actionVectorIndexes[i];
   _QExperiment["Variables"][expVar]["Name"] = _k->_variables[varIdx]->_name;
   _QExperiment["Variables"][expVar]["Type"] = "Input";
   _QExperiment["Variables"][expVar]["Training Data"] = { 0.0 };
   _QExperiment["Variables"][expVar]["Validation Data"] = { 0.0 };

   if (std::isfinite(_k->_variables[varIdx]->_lowerBound) == false)
    KORALI_LOG_ERROR("Lower bound for action variable %lu must be finite, but is %f instead.\n", i, _k->_variables[varIdx]->_lowerBound);

   if (std::isfinite(_k->_variables[varIdx]->_upperBound) == false)
    KORALI_LOG_ERROR("Upper bound for action variable %lu must be finite, but is %f instead.\n", i, _k->_variables[varIdx]->_upperBound);

   if (_k->_variables[varIdx]->_lowerBound >= _k->_variables[varIdx]->_upperBound)
    KORALI_LOG_ERROR("Lower Bound (%f) for action variable %lu must be strictly smaller than its upper bound (%f).\n", _k->_variables[varIdx]->_lowerBound, i, _k->_variables[varIdx]->_upperBound);

   expVar++;
  }

  _QExperiment["Variables"][expVar]["Name"] = "Q";
  _QExperiment["Variables"][expVar]["Type"] = "Output";
  _QExperiment["Variables"][expVar]["Training Data"] = { 0.0 };
  _QExperiment["Variables"][expVar]["Validation Data"] = { 0.0 };

  _QExperiment["Console Output"]["Frequency"] = 5000;
  _QExperiment["File Output"]["Enabled"] = false;

  // Running initialization to verify that the configuration is correct
  _QEngine.initialize(_QExperiment);

  /*********************************************************************
  * Creating Q-Maximizing Action Experiment
  *********************************************************************/

  // Creating evaluation lambda function for optimization
//  auto fc = [nn = _neuralNetwork](Sample &sample) { nn->evaluateInputs(sample); };
//
//  _AExperiment["Problem"]["Type"] = "Optimization";
//  _AExperiment["Problem"]["Objective Function"] = fc;
//  _AExperiment["Solver"]["Type"] = "CMAES";
//
//  for (size_t i = 0; i < _problem->_actionVectorSize; i++)
//  {
//   size_t varIdx = _problem->_actionVectorIndexes[i];
//   _AExperiment["Variables"][i]["Name"] = _k->_variables[varIdx]->_name;
//   _AExperiment["Variables"][i]["Lower Bound"] = _k->_variables[varIdx]->_lowerBound;
//   _AExperiment["Variables"][i]["Upper Bound"] = _k->_variables[varIdx]->_upperBound;
//  }
//
//  _AExperiment["Console Output"]["Frequency"] = 1;
//  _AExperiment["File Output"]["Enabled"] = false;
//
//  // Running initialization to verify that the configuration is correct
//  _AEngine.initialize(_AExperiment);
//
//  // Setting termination criterion
//  if (_maxEpisodes > _problem->_initialStateCount || _maxEpisodes == 0)
//   _maxEpisodes = _problem->_initialStateCount;
}

void DQN::setInitialConfiguration()
{
 // Starting to process initial states, from the first one
 _currentEpisode = 0;
}

void DQN::runGeneration()
{
 // If initial generation, set initial DQN configuration
  if (_k->_currentGeneration == 1)
   setInitialConfiguration();

  // Creating as many agents as initial states defined.
  size_t agentCount = 1;

  // Making sure we don't create more agents than remaining initial states
  if (agentCount + _currentEpisode > _maxEpisodes)
   agentCount = _maxEpisodes - _currentEpisode;

  // Creating storage for agents
  std::vector<Sample> agents(agentCount);

  // Index for current worker Id that helps making a balanced distribution of work
  size_t currentWorker = 0;

  // Storage for agent state/action information
  std::vector<std::vector<double>> actions(agentCount);
  std::vector<std::vector<double>> states(agentCount);
  for (size_t i = 0; i < agentCount; i++) actions[i].resize(_problem->_actionVectorSize);
  for (size_t i = 0; i < agentCount; i++) states[i].resize(_problem->_stateVectorSize);

  // Storage for agent reward information
  std::vector<double> rewards(agentCount);

  // Initializing Finished count
  size_t finishedCount = 0;

  // Setting initial states and actions
  for (size_t i = 0; i < agentCount; i++)
  {
   states[i] = _problem->_initialStates[_currentEpisode++];
   getAction(actions[i], states[i]);
   printf("ActionSize: %lu\n", actions[i].size());
  }

  // Initializing the agents and their environments
  for (size_t i = 0; i < agentCount; i++)
  {
    // Configuring Agent
    agents[i]["Worker"] = 0;
    agents[i]["Sample Id"] = i;
    agents[i]["Module"] = "Problem";
    agents[i]["Operation"] = "Run Environment";
    agents[i]["State"] = states[i];
    agents[i]["Action"] = actions[i];

    // Launching agent initialization
    _conduit->start(agents[i]);

    // Advancing to the next worker (if reached the last, start from beginning)
    currentWorker++;
    if (currentWorker == _conduit->maxConcurrency()) currentWorker = 0;
  }

  // Running main iteration loop until all agents have finished
  while (finishedCount < agentCount)
  {
    // Waiting for any of the pending agents
    size_t i = _conduit->waitAny(agents);

    // Updating reward
    rewards[i] = KORALI_GET(double, agents[i], "Reward");

    // Add state to current policy history
    _actionHistory.push_back(actions[i]);
    _stateHistory.push_back(states[i]);
    _rewardHistory.push_back(rewards[i]);

    // Storing agent's new state
    auto newState = KORALI_GET(std::vector<double>, agents[i], "State");

    // The new state becomes the current state
    states[i] = newState;

    // Checking for agent termination
    bool hasTerminated = KORALI_GET(bool, agents[i], "Finished");

    // If it finished, then add to the count
    if (hasTerminated)
    {
      // Incrementing finished agent count
      finishedCount++;
    }
    else // Else, get new action and run next episode
    {
      // Getting new action to perform
      getAction(actions[i], states[i]);
      agents[i]["Action"] = actions[i];

      // Run Episode
      _conduit->start(agents[i]);
    }
  }

  // Updating the NN with the gathered results
  for (size_t i = 0; i < _stateHistory.size(); i++)
  {
   printf(" + State  %.3lu: ", i);
   for (size_t j = 0; j < _stateHistory[i].size(); j++) printf("%f ", _stateHistory[i][j]);
   printf("\n");

   printf(" + Action %.3lu: ", i);
   for (size_t j = 0; j < _actionHistory[i].size(); j++) printf("%f ", _actionHistory[i][j]);
   printf("\n");

   printf(" + Reward %.3lu: %f\n", i, _rewardHistory[i]);
  }

  size_t expVar = 0;
  for (size_t i = 0; i < _problem->_stateVectorSize; i++)
  {
   for (size_t j = 0; j < _stateHistory.size(); j++)
   {
   _QExperiment["Variables"][expVar]["Training Data"][j] = _stateHistory[j][i];
   _QExperiment["Variables"][expVar]["Validation Data"][j] = _stateHistory[j][i];
   }
   expVar++;
  }

  for (size_t i = 0; i < _problem->_actionVectorSize; i++)
  {
   for (size_t j = 0; j < _actionHistory.size(); j++)
   {
   _QExperiment["Variables"][expVar]["Training Data"][j] = _actionHistory[j][i];
   _QExperiment["Variables"][expVar]["Validation Data"][j] = _actionHistory[j][i];
   }
   expVar++;
  }

  for (size_t j = 0; j < _rewardHistory.size(); j++)
  {
   _QExperiment["Variables"][expVar]["Training Data"][j] = _rewardHistory[j];
   _QExperiment["Variables"][expVar]["Validation Data"][j] = _rewardHistory[j];
  }

  _QEngine.run(_QExperiment);
}

void DQN::getAction(std::vector<double>& action, const std::vector<double>& state) const
{
 // Getting p = U[0,1] for the epsilon strategy
  double p = _uniformGenerator->getRandomNumber();

  // If p < e, then we choose the action randomly, with a uniform probability, among all possible actions.
  if (p < 1.0) //if (p < _epsilon)
  {
   for (size_t i = 0; i < action.size(); i++)
   {
    size_t varIdx = _problem->_actionVectorIndexes[i];
    double lowerBound = _k->_variables[varIdx]->_lowerBound;
    double upperBound = _k->_variables[varIdx]->_upperBound;
    double x = _uniformGenerator->getRandomNumber();
    action[i] = lowerBound + x*(upperBound - lowerBound);
   }
  }
}

} // namespace solver

} // namespace korali
