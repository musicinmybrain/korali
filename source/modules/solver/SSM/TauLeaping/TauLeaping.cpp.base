#include "modules/solver/SSM/TauLeaping/TauLeaping.hpp"

__startNamespace__;

void __className__::ssaAdvance()
{
  _cumPropensities.resize(_numReactions);

  double a0 = 0.0;

  // Calculate propensities
  for (size_t k = 0; k < _numReactions; ++k)
  {
    const double a = _problem->computePropensity(k, _numReactants);

    a0 += a;
    _cumPropensities[k] = a0;
  }

  // Sample time step from exponential distribution
  const double r1 = _uniformGenerator->getRandomNumber();

  double tau = -std::log(r1) / a0;

  // Advance time
  _time += tau;

  if (_time > _simulationLength)
    _time = _simulationLength;

  // Exit if no reactions fire
  if (a0 == 0)
    return;

  const double r2 = _cumPropensities.back() * _uniformGenerator->getRandomNumber();

  // Sample a reaction
  size_t selection = 0;
  while (r2 > _cumPropensities[selection])
    selection++;

  // Update the reactants according to chosen reaction
  _problem->applyChanges(selection, _numReactants);
}

void __className__::advance()
{
  _propensities.resize(_numReactions);

  double a0 = 0.0;

  // Calculate propensities
  for (size_t k = 0; k < _numReactions; ++k)
  {
    double a = _problem->computePropensity(k, _numReactants);

    a0 += a;
    _propensities[k] = a;
  }

  // Mark critical reactions
  bool allReactionsAreCritical = true;
  _isCriticalReaction.resize(_numReactions);

  for (size_t k = 0; k < _numReactions; ++k)
  {
    const double a = _propensities[k];
    const double L = _problem->calculateMaximumAllowedFirings(k, _numReactants);

    const bool isCritical = !((a > 0) && (L <= _nc));
    _isCriticalReaction[k] = isCritical;

    allReactionsAreCritical = allReactionsAreCritical && isCritical;
  }

  // Estimate maximum tau
  double tauP = allReactionsAreCritical ? std::numeric_limits<double>::infinity() : estimateLargestTau();

  // Accept or reject step
  if (tauP < _acceptanceFactor / a0)
  {
    // reject, execute SSA steps
    for (int i = 0; i < _numSSASteps; ++i)
    {
      ssaAdvance();
      if (_time >= _simulationLength)
        break;
    }
  }
  else
  {
    // accept, perform tau leap

    // calibrate taupp
    double a0c = 0;
    for (size_t k = 0; k < _numReactions; ++k)
    {
      if (_isCriticalReaction[k])
        a0c += _propensities[k];
    }

    const double tauPP = -std::log(_uniformGenerator->getRandomNumber()) / a0c;

    double tau;
    bool anySpeciesNegative = false;

    do
    {
      tau = tauP < tauPP ? tauP : tauPP;
      if (_time + tau > _simulationLength)
        tau = _simulationLength - _time;

      _numFirings.resize(_numReactions, 0);

      for (size_t i = 0; i < _numReactions; ++i)
      {
        if (_isCriticalReaction[i])
        {
          _numFirings[i] = 0;
        }
        else
        {
          _poissonGenerator->_mean = _propensities[i] * tau;
          _numFirings[i] = _poissonGenerator->getRandomNumber();
        }
      }

      if (tauPP <= tauP)
      {
        _cumPropensities.resize(_numReactions);
        double cumulative = 0;
        for (size_t i = 0; i < _numReactions; ++i)
        {
          if (_isCriticalReaction[i])
            cumulative += _propensities[i];
          _cumPropensities[i] = cumulative;
        }

        const double u = a0c * _uniformGenerator->getRandomNumber();
        size_t jc = 0;
        while (jc < _numReactions && (!_isCriticalReaction[jc] || u > _cumPropensities[jc]))
        {
          ++jc;
        }

        _numFirings[jc] = 1;
      }

      _candidateNumReactants = _numReactants;

      for (size_t i = 0; i < _numReactions; ++i)
      {
        const int ki = _numFirings[i];
        if (ki > 0)
          _problem->applyChanges(i, _candidateNumReactants, ki);
      }

      anySpeciesNegative = false;
      for (auto candidate : _candidateNumReactants)
      {
        if (candidate < 0)
        {
          anySpeciesNegative = true;
          tauP /= 2.;
          break;
        }
      }
    } while (anySpeciesNegative);

    _time += tau;
    std::swap(_numReactants, _candidateNumReactants);
  }
}

double __className__::estimateLargestTau()
{
  _mu.resize(_numReactions, 0.);
  _sigmaSquare.resize(_numReactions, 0.);

  double a0 = 0.;
  for (size_t j = 0; j < _numReactions; ++j)
  {
    for (size_t jp = 0; jp < _numReactions; ++jp)
    {
      if (_isCriticalReaction[jp])
        continue;

      const double fjjp = _problem->computeF(j, jp, _numReactants);

      _mu[j] += fjjp * _propensities[jp];
      _sigmaSquare[j] += fjjp * fjjp * _propensities[jp];
    }

    a0 += _propensities[j];
  }

  double tau = std::numeric_limits<double>::max();

  for (size_t i = 0; i < _numReactions; ++i)
  {
    const double muTerm = _eps * a0 / std::abs(_mu[i]);
    const double sigmaTerm = _eps * _eps * a0 * a0 / (_sigmaSquare[i] * _sigmaSquare[i]);

    tau = std::min(tau, std::min(muTerm, sigmaTerm));
  }

  return tau;
}

__moduleAutoCode__;

__endNamespace__;
