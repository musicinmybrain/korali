{
 "Configuration Settings": 
 [ 
   {
    "Name": [ "Population Size" ],
    "Type": "size_t",
    "Description": "Number of live samples."
   }, 
   {
    "Name": [ "Batch Size" ],
    "Type": "size_t",
    "Description": "Number of samples to discard and replace per generation, maximal number of parallel sample evaluation."
   },
   {
    "Name": [ "Resampling Method" ],
    "Type": "std::string",
    "Description": "Method to generate new candidates (can be set to either 'Mutation', 'Box' or 'Ellipse')."
   },
   {
    "Name": [ "Covariance Scaling" ],
    "Type": "double",
    "Description": "Scaling factor of covariance of MCMC proposal during resampling step (only relevant for 'MCMC' proposal)."
   }
 ],
 
 "Termination Criteria":
 [
   {
    "Name": [ "Max Gain Factor" ],
    "Type": "double",
    "Criteria": "_maxEvaluation + _logWidth <= log(_maxGainFactor) + _accumulatedLogEvidence",
    "Description": "Estimated maximal evidence gain smaller than accumulated evidence by given factor."
   }   
 ]
 ,
 "Variables Configuration": 
 [
 ],
 
 "Internal Settings": 
 [
   {
    "Name": [ "Uniform Generator" ],
    "Type": "korali::distribution::univariate::Uniform*",
    "Description": "Uniform random number generator."
   },  
   {
    "Name": [ "Multivariate Generator" ],
    "Type": "korali::distribution::multivariate::Normal*",
    "Description": "Random number generator with a multivariate normal distribution."
   },
   {
    "Name": [ "Accepted Samples" ],
    "Type": "size_t",
    "Description": "Number of accepted samples."
   },  
   {
    "Name": [ "Generated Samples" ],
    "Type": "size_t",
    "Description": "Number of generated samples (after initialization)."
   }, 
   {
    "Name": [ "Log Width" ],
    "Type": "double",
    "Description": "Prior Mass of Current Sample."
   },
   {
    "Name": [ "Log Domain" ],
    "Type": "double",
    "Description": "Remaining Prior Mass."
   },
   {
    "Name": [ "Accumulated Log Evidence" ],
    "Type": "double",
    "Description": "Current estimate of evidence."
   },
   {
    "Name": [ "Information" ],
    "Type": "double",
    "Description": "Accumulated information."
   },
   {
    "Name": [ "Evaluation Constraint" ],
    "Type": "double",
    "Description": "Sum of loglikelihood and logprior from previously discarded sample."
   }, 
   {
    "Name": [ "Max Evaluation" ],
    "Type": "double",
    "Description": "Largest sum of loglikelihood and logprior in live sample set."
   },
   {
    "Name": [ "Candidates" ],
    "Type": "std::vector<std::vector<double>>",
    "Description": "Sample candidates to be evaluated."
   },
   {
    "Name": [ "Candidate LogLikelihoods" ],
    "Type": "std::vector<double>",
    "Description": "Likelihood evaluations of candidates."
   }, 
   {
    "Name": [ "Candidate LogPriors" ],
    "Type": "std::vector<double>",
    "Description": "The logpriors of the candidates."
   },  
   {
    "Name": [ "Candidate Evaluations" ],
    "Type": "std::vector<double>",
    "Description": "Sum of candidate's logprior and loglikelihood."
   },  
   {
    "Name": [ "Live Samples" ],
    "Type": "std::vector<std::vector<double>>",
    "Description": "Current samples."
   },
   {
    "Name": [ "Live LogLikelihoods" ],
    "Type": "std::vector<double>",
    "Description": "Likelihood evaluations of live samples."
   }, 
   {
    "Name": [ "Live LogPriors" ],
    "Type": "std::vector<double>",
    "Description": "Likelihood evaluations of live samples."
   }, 
   {
    "Name": [ "Live Evaluations" ],
    "Type": "std::vector<double>",
    "Description": "Sum of logprior and loglikelihood."
   },
   {
    "Name": [ "Live Samples Rank" ],
    "Type": "std::vector<size_t>",
    "Description": "Ranking of descending sorted live samples based on evaluation."
   },
   {
    "Name": [ "Sample Database" ],
    "Type": "std::vector<std::vector<double>>",
    "Description": "Discarded samples stored in database."
   },
   {
    "Name": [ "Sample LogLikelihood Database" ],
    "Type": "std::vector<double>",
    "Description": "Loglikelihood evaluations associated with discarded samples."
   }, 
   {
    "Name": [ "Sample LogPrior Database" ],
    "Type": "std::vector<double>",
    "Description": "Logprior evaluations associated with discarded samples."
   }, 
   {
    "Name": [ "Sample LogWidth Database" ],
    "Type": "std::vector<double>",
    "Description": "Volume evaluations associated with discarded samples."
   }, 
   {
    "Name": [ "Covariance Matrix" ],
    "Type": "std::vector<double>",
    "Description": "Sample covariance of the live samples."
   }, 
   {
    "Name": [ "Log Domain Size" ],
    "Type": "double",
    "Description": "Log of domain volumne given by uniform prior distribution."
   },
   {
    "Name": [ "Domain Mean" ],
    "Type": "std::vector<double>",
    "Description": "Mean of the domain occupied by live samples (only required for 'Box' and 'Ellipse' domain approximation."
   }
 ],
 
  "Module Defaults":
  {
   "Population Size": 500,
   "Batch Size": 1,
   "Resampling Method": "Mutation", 
   "Covariance Scaling": 0.04, 
   
   "Termination Criteria":
   {
      "Max Gain Factor": 0.01
   },
   
   "Uniform Generator":
    {
     "Type": "Univariate/Uniform",
     "Minimum": 0.0,
     "Maximum": 1.0
    },
     
    "Multivariate Generator":
    {
      "Type": "Multivariate/Normal"
    }
 
  }
}
