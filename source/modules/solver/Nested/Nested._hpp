#ifndef _KORALI_SOLVER_NESTED_HPP_
#define _KORALI_SOLVER_NESTED_HPP_

#include "modules/solver/solver.hpp"
#include "modules/distribution/univariate/normal/normal.hpp"
#include "modules/distribution/univariate/uniform/uniform.hpp"
#include <vector>

namespace korali { namespace solver {

class Nested : public korali::Solver
{
 private: 

 /**
  * @brief Updates internal states.
  */
 void updateState();

 /*
  * @brief Prepare Generation before evaluation.
  */
 void prepareGeneration();

 /*
  * @brief Process evaluation, main Nested Sampling loop
  */
 void processGeneration();
 
 /*
  * @brief Does sample evaluation.
  */
 void processEvaluation(const size_t sampleId);

 public:

 /**
 * @brief Configures MCMC.
 */
 void setInitialConfiguration() override;

 /**
  * @brief Generate a sample and evaluate it.
  */
 void runGeneration() override;

 /**
 * @brief Console Output before generation runs.
 */
 void printGenerationBefore() override;
 
 /**
 * @brief Console output after generation.
 */
 void printGenerationAfter() override;
 
 /**
  * @brief Final console output at termination.
  */
 void finalize() override;


};

} } // namespace korali::solver

#endif // _KORALI_SOLVER_NESTED_HPP_
