#include "modules/solver/Nested/Nested.hpp"
#include "modules/engine/engine.hpp"
#include "modules/conduit/conduit.hpp"
#include "modules/experiment/experiment.hpp"

#include <algorithm> //sort
#include <numeric>
#include <limits>
#include <chrono>

void korali::solver::Nested::setInitialConfiguration()
{
 if(_covarianceScaling <= 0.0) korali::logError("Covariance Scaling must be larger 0.0 (is %lf).\n", _covarianceScaling);
 if(_maxGainFactor < 0.0) korali::logError("Max Gain Factor must be larger equal 0.0 (is %lf).\n", _maxGainFactor);
 
 if(_resamplingMethod != "Mutation") korali::logError("Only accepted Resampling Method is 'Mutation' (is %s).\n", _resamplingMethod.c_str());


 _logDomainSize = 0.0;
 for(size_t d = 0; d < _k->_variables.size(); ++d)
 {
    if (_k->_distributions[_k->_variables[d]->_distributionIndex]->_type != "Univariate/Uniform") korali::logError("Only 'Univariate/Uniform' priors allowed (is %s).\n", _k->_distributions[_k->_variables[d]->_distributionIndex]->_type.c_str());
    double tmp = _k->_distributions[_k->_variables[d]->_distributionIndex]->getRandomNumber();
    _logDomainSize -= _k->_distributions[_k->_variables[d]->_distributionIndex]->getLogDensity(tmp);
 }
 
 _candidateLogLikelihoods.resize(_batchSize);
 _candidateLogPriors.resize(_batchSize);
 _candidateEvaluations.resize(_batchSize);
 _candidates.resize(_batchSize);
 for(size_t i = 0; i < _batchSize; i++) _candidates[i].resize(_k->_variables.size());
 
 _liveLogLikelihoods.resize(_populationSize);
 _liveLogPriors.resize(_populationSize);
 _liveEvaluations.resize(_populationSize);
 _liveSamplesRank.resize(_populationSize);
 _liveSamples.resize(_populationSize);
 for(size_t i = 0; i < _populationSize; i++) _liveSamples[i].resize(_k->_variables.size());
  
 _databaseEntries = 0;
 _sampleLogLikelihoodDatabase.resize(0);
 _sampleLogPriorDatabase.resize(0);
 _sampleLogWidthDatabase.resize(0);
 _sampleDatabase.resize(0);
 
 _finalLogDomain   = -std::numeric_limits<double>::infinity();
 _finalLogWidth    = -std::numeric_limits<double>::infinity();
 _finalLogEvidence = -std::numeric_limits<double>::infinity();
 _finalSampleLogWidth.resize(0);
 
 _covarianceMatrix.resize(_k->_variables.size()*_k->_variables.size());
 _domainMean.resize(_k->_variables.size());

 // Init Generationa
 _logEvidence            = -std::numeric_limits<double>::max();
 _logWidth               = _logDomainSize - log(_populationSize+1);
 _logDomain              = _logDomainSize + log( (double)_populationSize/( (double)_populationSize+1.));
 _information            = 0.0;
 _acceptedSamples        = 0;
 _generatedSamples       = 0;
 _evaluationConstraint   = std::numeric_limits<double>::infinity();
 _maxEvaluation          = std::numeric_limits<double>::infinity();

 (*_k)["Results"]["Posterior Samples"] = {};
}

void korali::solver::Nested::runGeneration()
{
  if (_k->_currentGeneration == 1) 
  { 
    setInitialConfiguration(); 
    runFirstGeneration(); 
    return; 
  };

  // Generation > 1
  prepareGeneration();

  std::vector<korali::Sample> samples(_batchSize);

  for (size_t c = 0; c < _batchSize; c++)
  {
   samples[c]["Operation"]    = "Evaluate";
   samples[c]["Parameters"]   = _candidates[c];
   samples[c]["Sample Id"]    = c;
   _engine->_conduit->start(samples[c]);
   _modelEvaluationCount++;
   _generatedSamples++;
  }


  size_t finishedCandidatesCount = 0;
  while (finishedCandidatesCount < _batchSize)
  {
   size_t finishedId = _engine->_conduit->waitAny(samples);

   _candidateLogLikelihoods[finishedId] = samples[finishedId]["logLikelihood"];
   _candidateLogPriors[finishedId]      = samples[finishedId]["logPrior"];
   _candidateEvaluations[finishedId]    = _candidateLogPriors[finishedId] + _candidateLogLikelihoods[finishedId];
   finishedCandidatesCount++;

  }

  processGeneration();

  return;
}


void korali::solver::Nested::runFirstGeneration()
{
  for(size_t i = 0; i < _populationSize; i++)
     for (size_t d = 0; d < _k->_variables.size(); d++) 
       _liveSamples[i][d] = _k->_distributions[_k->_variables[d]->_distributionIndex]->getRandomNumber();
 
  std::vector<korali::Sample> samples(_populationSize);

  for (size_t c = 0; c < _populationSize; c++)
  {
    samples[c]["Operation"]    = "Evaluate";
    samples[c]["Parameters"]   = _liveSamples[c];
    samples[c]["Sample Id"]    = c;
    _engine->_conduit->start(samples[c]);
    _modelEvaluationCount++;
  }

  size_t finishedCandidatesCount = 0;
  while (finishedCandidatesCount < _populationSize)
  {
   size_t finishedId = _engine->_conduit->waitAny(samples);

   _liveLogLikelihoods[finishedId] = samples[finishedId]["logLikelihood"];
   _liveLogPriors[finishedId]      = samples[finishedId]["logPrior"];
   _liveEvaluations[finishedId]    = _liveLogPriors[finishedId] + _liveLogLikelihoods[finishedId];
   
   finishedCandidatesCount++;
  }

  updateMeanAndCovariance();
  
  sortLiveSamplesDescending();
  return;
}


void korali::solver::Nested::prepareGeneration()
{
  
  _maxEvaluation        = _liveLogLikelihoods[_liveSamplesRank[0]];
  _evaluationConstraint = _liveLogLikelihoods[_liveSamplesRank[_populationSize-1]];

  if      (_resamplingMethod == "Mutation")  generateCandidatesFromMutation();
  else if (_resamplingMethod == "Box")       generateCandidatesFromBox();
  else  /*(_resamplingMethod == "Ellipse")*/ generateCandidatesFromEllipse();
  
  return;
}


void korali::solver::Nested::processGeneration()
{
  size_t sampleIdx;

  for (size_t c = 0; c < _batchSize ; ++c)
  {
    if(_candidateLogLikelihoods[c] < _evaluationConstraint) continue;
    _acceptedSamples++;
    
    // select worst sample
    sampleIdx = _liveSamplesRank[_populationSize-1];

    // add it to db
    updateSampleDatabase(sampleIdx);

    // update evidence & domain
    double logEvidenceOld  = _logEvidence;
    double ak = _logWidth + _liveLogLikelihoods[sampleIdx];

    _logEvidence  = safeLogPlus(_logEvidence, ak);
    _information  = exp(ak - _logEvidence)*_liveLogLikelihoods[sampleIdx]+exp(logEvidenceOld-_logEvidence)*(_information+logEvidenceOld) - _logEvidence;
    _logWidth     = _logDomain - log(_populationSize+1.);
    _logDomain    = _logDomain + log( (double)_populationSize/( (double)_populationSize+1.));
 
    // replace worst sample
    _liveSamples[sampleIdx]        = _candidates[c];
    _liveEvaluations[sampleIdx]    = _candidateEvaluations[c];
    _liveLogPriors[sampleIdx]      = _candidateLogPriors[c];
    _liveLogLikelihoods[sampleIdx] = _candidateLogLikelihoods[c];

    // sort rank vector and update constraint
    sortLiveSamplesDescending();
    _evaluationConstraint = _liveLogLikelihoods[_populationSize-1];

  }
  
  updateMeanAndCovariance();
  
  return;
}

void korali::solver::Nested::generateCandidatesFromMutation() 
{ 
  std::vector<double> zeroMean(_k->_variables.size(), 0.0);
  _multivariateGenerator->_meanVector       = zeroMean;
  _multivariateGenerator->_covarianceMatrix = _covarianceMatrix;
  _multivariateGenerator->updateDistribution();

  for(size_t i = 0; i < _batchSize; i++)
  {
   _multivariateGenerator->getRandomVector(&_candidates[i][0], _k->_variables.size());
   
   size_t cpyIdx = (size_t) (_uniformGenerator->getRandomNumber()*_populationSize);
   for(size_t d = 0; d < _k->_variables.size(); ++d) _candidates[i][d] += _liveSamples[cpyIdx][d];
  }
}

void korali::solver::Nested::generateCandidatesFromBox() { return; }
 
void korali::solver::Nested::generateCandidatesFromEllipse() { return; }

void korali::solver::Nested::updateMeanAndCovariance() 
{

  for (size_t d = 0; d < _k->_variables.size(); d++) _domainMean[d] = 0.0;
  

  double weight = 1.0/((double)_populationSize);

  for (size_t i = 0; i < _populationSize; i++) 
  for (size_t d = 0; d < _k->_variables.size(); d++)
      _domainMean[d] += weight*_liveSamples[i][d];

  for (size_t i = 0; i < _k->_variables.size(); i++){
    for (size_t j = i; j < _k->_variables.size(); ++j){
      double s = 0.0;
      for (size_t k = 0; k < _populationSize; ++k) s += (_liveSamples[k][i] - _domainMean[i])*( _liveSamples[k][j]-_domainMean[j] );
      _covarianceMatrix[i*_k->_variables.size() + j] = _covarianceMatrix[j*_k->_variables.size() + i] = _covarianceScaling * weight * s;
    }
  }

}

void korali::solver::Nested::sortLiveSamplesDescending() 
{
  //TODO: speed up
  std::iota (std::begin(_liveSamplesRank), std::end(_liveSamplesRank), 0);
  sort(_liveSamplesRank.begin(), _liveSamplesRank.end(), [this](const size_t & idx1, const size_t & idx2) -> bool { return this->_liveLogLikelihoods[idx1] > this->_liveLogLikelihoods[idx2]; });

}

void korali::solver::Nested::updateSampleDatabase(size_t sampleIdx) 
{
  _databaseEntries++;
  _sampleDatabase.push_back(_liveSamples[sampleIdx]);
  _sampleLogPriorDatabase.push_back(_liveLogPriors[sampleIdx]);
  _sampleLogLikelihoodDatabase.push_back(_liveLogLikelihoods[sampleIdx]);
  _sampleLogWidthDatabase.push_back(_logWidth+_liveLogLikelihoods[sampleIdx]);
}

void korali::solver::Nested::consumeLiveSamples()
{

  _finalLogDomain   = _logDomain;
  _finalLogEvidence = _logEvidence;
  _finalLogWidth    = _logDomain - log(_populationSize+1.);
  _finalSampleLogWidth.resize(_populationSize);
  
  double ak, finalLogEvidenceOld;
  
  for(size_t i = 0; i < _populationSize; ++i)
  {
    ak = _finalLogWidth + _liveLogLikelihoods[i];
    finalLogEvidenceOld  = _finalLogEvidence;
    
    _finalLogDomain         = safeLogMinus(_finalLogDomain, _finalLogWidth);
    _finalSampleLogWidth[i] = ak;
    _finalLogEvidence       = safeLogPlus(_finalLogEvidence, ak);
 
    _information  = exp(ak - _finalLogEvidence)*_liveLogLikelihoods[i]+exp(finalLogEvidenceOld-_finalLogEvidence)*(_information+finalLogEvidenceOld) - _finalLogEvidence;

  }
  return;

}

void korali::solver::Nested::generatePosterior() 
{
    double maxLogWtDb    = *max_element(std::begin(_sampleLogWidthDatabase), std::end(_sampleLogWidthDatabase));
    double finalMaxLogWt = *max_element(std::begin(_finalSampleLogWidth), std::end(_finalSampleLogWidth));
    
    double maxLogWt = std::max(maxLogWtDb, finalMaxLogWt);

    size_t totalSamples = _databaseEntries+_populationSize;
    
    std::vector<size_t> permutation(totalSamples);
    std::iota(std::begin(permutation), std::end(permutation), 0);
    std::random_shuffle(permutation.begin(), permutation.end());

    size_t rndIdx, localRndIdx;
    _posteriorSamples.clear();
    
    double k = 1.0;
    double sum = _uniformGenerator->getRandomNumber();
    for(size_t i = 0; i < totalSamples; ++i)
    {
        rndIdx = permutation[i];
        localRndIdx = rndIdx % _databaseEntries;

        if(rndIdx < _databaseEntries) sum += exp(_sampleLogWidthDatabase[localRndIdx]-maxLogWt);
        else                          sum += exp(_finalSampleLogWidth[localRndIdx]-maxLogWt);
        
        if(sum > k)
        {
            if(rndIdx < _databaseEntries) _posteriorSamples.push_back(_sampleDatabase[localRndIdx]);
            else                          _posteriorSamples.push_back(_liveSamples[localRndIdx]);
            k++;
        }
    }
    return; 
}

double korali::solver::Nested::safeLogPlus(double logx, double logy) const
{
    if(logx>logy) return logx+log(1.0+exp(logy-logx));
    else          return logy+log(1.0+exp(logx-logy));
}

double korali::solver::Nested::safeLogMinus(double logx, double logy) const
{
    return log(exp(logx-logy) - 1) + logy;
}

void korali::solver::Nested::printGenerationBefore() { return; }

void korali::solver::Nested::printGenerationAfter() 
{ 
  korali::logInfo("Minimal", "Log Evidence: %.4f\n", _logEvidence);
  korali::logInfo("Minimal", "Information: %.4f\n", _information);
  korali::logInfo("Minimal", "Log Domain (shrinkage): %.4f (%.2f%%)\n", _logDomain, 100.*exp(_logDomain - _logDomainSize));
  korali::logInfo("Minimal", "Acceptance Rate: %.2f%%\n", 100.0*_acceptedSamples/((double)_generatedSamples));
  korali::logInfo("Minimal", "Accepted Samples: %zu\n", _acceptedSamples);
  return; 
}

void korali::solver::Nested::finalize()
{
  if (_k->_currentGeneration <= 1) return;
  consumeLiveSamples();
  generatePosterior();
  (*_k)["Results"]["Posterior Samples"] = _posteriorSamples;

  korali::logInfo("Minimal", "Final Log Evidence: %.4f\n", _finalLogEvidence);
  korali::logInfo("Minimal", "Information: %.4f\n", _information);
  korali::logInfo("Minimal", "Posterior Samples: %zu\n", _posteriorSamples.size());
  return; 
}
