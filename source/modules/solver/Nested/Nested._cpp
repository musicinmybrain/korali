#include "modules/solver/Nested/Nested.hpp"
#include "modules/engine/engine.hpp"
#include "modules/conduit/conduit.hpp"
#include "modules/experiment/experiment.hpp"

#include <algorithm> //sort
#include <numeric>
#include <limits>
#include <chrono>

void korali::solver::Nested::setInitialConfiguration()
{
 if(_covarianceScaling <= 0.0) korali::logError("Covariance Scaling must be larger 0.0 (is %lf).\n", _covarianceScaling);
 if(_maxGainFactor < 0.0) korali::logError("Max Gain Factor must be larger equal 0.0 (is %lf).\n", _maxGainFactor);
 
 if(_resamplingMethod != "Mutation") korali::logError("Only accepted Resampling Method is 'Mutation' (is %s).\n", _resamplingMethod.c_str());


 for(size_t d = 0; d < _k->_variables.size(); ++d)
 {
    if (_k->_distributions[_k->_variables[d]->_distributionIndex]->_type != "Univariate/Uniform") korali::logError("Only 'Univariate/Uniform' priors allowed (is %s).\n", _k->_distributions[_k->_variables[d]->_distributionIndex]->_type.c_str());
 }
 
 _candidateLogLikelihoods.resize(_batchSize);
 _candidateLogPriors.resize(_batchSize);
 _candidates.resize(_batchSize);
 for(size_t i = 0; i < _batchSize; i++) _candidates[i].resize(_k->_variables.size());
 
 _liveLogLikelihoods.resize(_numberLivePoints);
 _liveLogPriors.resize(_numberLivePoints);
 _liveSamplesRank.resize(_numberLivePoints);
 _liveSamples.resize(_numberLivePoints);
 for(size_t i = 0; i < _numberLivePoints; i++) _liveSamples[i].resize(_k->_variables.size());
  
 _databaseEntries = 0;
 _sampleLogLikelihoodDatabase.resize(0);
 _sampleLogPriorDatabase.resize(0);
 _sampleLogWeightDatabase.resize(0);
 _sampleDatabase.resize(0);
 
 _covarianceMatrix.resize(_k->_variables.size()*_k->_variables.size());
 _domainMean.resize(_k->_variables.size());

 // Init Generationa
 _logEvidence            = std::numeric_limits<double>::lowest();
 _expectedLogShrinkage   = log((_numberLivePoints+1.)/_numberLivePoints);
 _logVolume              = 0.;
 _logEvidenceVar         = 0.;
 _information            = 0.;
 _lastAccepted           = 0;
 _acceptedSamples        = 0;
 _generatedSamples       = 0;
 _lStarOld               = std::numeric_limits<double>::lowest();
 _lStar                  = std::numeric_limits<double>::lowest();

 (*_k)["Results"]["Posterior Samples"] = {};
}

void korali::solver::Nested::runGeneration()
{
  if (_k->_currentGeneration == 1) 
  { 
    setInitialConfiguration(); 
    runFirstGeneration(); 
    return; 
  };

  // Generation > 1
  prepareGeneration();

  std::vector<korali::Sample> samples(_batchSize);

  for (size_t c = 0; c < _batchSize; c++)
  {
   samples[c]["Operation"]    = "Evaluate";
   samples[c]["Parameters"]   = _candidates[c];
   samples[c]["Sample Id"]    = c;
   _engine->_conduit->start(samples[c]);
   _modelEvaluationCount++;
   _generatedSamples++;
  }


  size_t finishedCandidatesCount = 0;
  while (finishedCandidatesCount < _batchSize)
  {
   size_t finishedId = _engine->_conduit->waitAny(samples);

   _candidateLogLikelihoods[finishedId] = samples[finishedId]["logLikelihood"];
   _candidateLogPriors[finishedId]      = samples[finishedId]["logPrior"];
   finishedCandidatesCount++;

  }

  processGeneration();

  return;
}


void korali::solver::Nested::runFirstGeneration()
{
  for(size_t i = 0; i < _numberLivePoints; i++)
     for (size_t d = 0; d < _k->_variables.size(); d++) 
       _liveSamples[i][d] = _k->_distributions[_k->_variables[d]->_distributionIndex]->getRandomNumber();
 
  std::vector<korali::Sample> samples(_numberLivePoints);

  for (size_t c = 0; c < _numberLivePoints; c++)
  {
    samples[c]["Operation"]    = "Evaluate";
    samples[c]["Parameters"]   = _liveSamples[c];
    samples[c]["Sample Id"]    = c;
    _engine->_conduit->start(samples[c]);
    _modelEvaluationCount++;
    _generatedSamples++;
  }

  size_t finishedCandidatesCount = 0;
  while (finishedCandidatesCount < _numberLivePoints)
  {
   size_t finishedId = _engine->_conduit->waitAny(samples);

   _liveLogLikelihoods[finishedId] = samples[finishedId]["logLikelihood"];
   _liveLogPriors[finishedId]      = samples[finishedId]["logPrior"];
   
   finishedCandidatesCount++;
  }

  updateMeanAndCovariance();
  
  sortLiveSamplesDescending();
 
  _lStar         = _liveLogLikelihoods[_liveSamplesRank[_numberLivePoints-1]];

  return;
}


void korali::solver::Nested::prepareGeneration()
{
  
  _maxEvaluation = _liveLogLikelihoods[_liveSamplesRank[0]];
  _numberEffectiveSamples = calcEffectiveSamples();
  
  if      (_resamplingMethod == "Mutation")  generateCandidatesFromMutation();
  else if (_resamplingMethod == "Box")       generateCandidatesFromBox();
  else  /*(_resamplingMethod == "Ellipse")*/ generateCandidatesFromEllipse();
  
  return;
}


void korali::solver::Nested::processGeneration()
{
  size_t sampleIdx = _liveSamplesRank[_numberLivePoints-1];
  size_t acceptedBefore = _acceptedSamples;
  for (size_t c = 0; c < _batchSize ; ++c)
  {
    if(_candidateLogLikelihoods[c] < _lStar) continue;
    _acceptedSamples++;
    
    // update evidence & domain
    double logVolumeOld   = _logVolume;
    double informationOld = _information;
    double logEvidenceOld = _logEvidence;
    
    _logVolume -= _expectedLogShrinkage;

    double dLogVol = log(0.5*exp(logVolumeOld)-0.5*exp(_logVolume));
    _logWeight   = safeLogPlus(_lStar, _lStarOld) + dLogVol;
    _logEvidence = safeLogPlus(_logEvidence, _logWeight);

    double evidenceTerm = exp(_lStarOld-_logEvidence) * _lStarOld 
        + exp(_lStar-_logEvidence) * _lStar;

    _information  = exp(dLogVol) * evidenceTerm 
       + exp(logEvidenceOld - _logEvidence) * (informationOld + logEvidenceOld) 
       - _logEvidence;
       
    _logEvidenceVar += 2.* (_information - informationOld) * _expectedLogShrinkage;
 
    // add it to db
    updateSampleDatabase(sampleIdx);

    // replace worst sample
    _liveSamples[sampleIdx]        = _candidates[c];
    _liveLogPriors[sampleIdx]      = _candidateLogPriors[c];
    _liveLogLikelihoods[sampleIdx] = _candidateLogLikelihoods[c];

    // sort rank vector and update constraint
    sortLiveSamplesDescending();

    // select new worst sample
    sampleIdx = _liveSamplesRank[_numberLivePoints-1];

    _lStarOld = _lStar;
    _lStar    = _liveLogLikelihoods[sampleIdx];

  }
  
  if (acceptedBefore == _acceptedSamples) _lastAccepted++;
  else                                    _lastAccepted = 0;

  updateMeanAndCovariance();
  
  return;
}

void korali::solver::Nested::generateCandidatesFromMutation() 
{ 
  std::vector<double> zeroMean(_k->_variables.size(), 0.0);
  _multivariateGenerator->_meanVector       = zeroMean;
  _multivariateGenerator->_covarianceMatrix = _covarianceMatrix;
  _multivariateGenerator->updateDistribution();

  for(size_t i = 0; i < _batchSize; i++)
  {
   _multivariateGenerator->getRandomVector(&_candidates[i][0], _k->_variables.size());
   
   size_t cpyIdx = (size_t) (_uniformGenerator->getRandomNumber()*_numberLivePoints);
   for(size_t d = 0; d < _k->_variables.size(); ++d) _candidates[i][d] += _liveSamples[cpyIdx][d];
  }
}

void korali::solver::Nested::generateCandidatesFromBox() { return; }
 
void korali::solver::Nested::generateCandidatesFromEllipse() 
{ 
    return; 
}

void korali::solver::Nested::updateMeanAndCovariance() 
{

  for (size_t d = 0; d < _k->_variables.size(); d++) _domainMean[d] = 0.0;
  

  double weight = 1.0/((double)_numberLivePoints);

  for (size_t i = 0; i < _numberLivePoints; i++) 
  for (size_t d = 0; d < _k->_variables.size(); d++)
      _domainMean[d] += weight*_liveSamples[i][d];

  for (size_t i = 0; i < _k->_variables.size(); i++){
    for (size_t j = i; j < _k->_variables.size(); ++j){
      double s = 0.0;
      for (size_t k = 0; k < _numberLivePoints; ++k) s += (_liveSamples[k][i] - _domainMean[i])*( _liveSamples[k][j]-_domainMean[j] );
      _covarianceMatrix[i*_k->_variables.size() + j] = _covarianceMatrix[j*_k->_variables.size() + i] = _covarianceScaling * weight * s;
    }
  }

}

void korali::solver::Nested::sortLiveSamplesDescending() 
{
  //TODO: speed up
  std::iota (std::begin(_liveSamplesRank), std::end(_liveSamplesRank), 0);
  sort(_liveSamplesRank.begin(), _liveSamplesRank.end(), [this](const size_t & idx1, const size_t & idx2) -> bool { return this->_liveLogLikelihoods[idx1] > this->_liveLogLikelihoods[idx2]; });

}

void korali::solver::Nested::updateSampleDatabase(size_t sampleIdx) 
{
  _databaseEntries++;
  _sampleDatabase.push_back(_liveSamples[sampleIdx]);
  _sampleLogPriorDatabase.push_back(_liveLogPriors[sampleIdx]);
  _sampleLogLikelihoodDatabase.push_back(_liveLogLikelihoods[sampleIdx]);
  _sampleLogWeightDatabase.push_back(_logWeight);
}

void korali::solver::Nested::consumeLiveSamples()
{

  size_t sampleIdx;
  double dLogVol, logEvidenceOld, informationOld, evidenceTerm;
  
  std::vector<double> logvols(_numberLivePoints+1, _logVolume);
  std::vector<double> logdvols(_numberLivePoints);
  std::vector<double> dlvs(_numberLivePoints);

  for(size_t i = 0; i < _numberLivePoints; ++i)
  {
        logvols[i+1] += log(1.-(i+1.)/(_numberLivePoints+1.));
        logdvols[i]  = safeLogMinus(logvols[i], logvols[i+1]);
        dlvs[i]      = logvols[i] - logvols[i+1];
  }
  for(size_t i = 0; i < _numberLivePoints+1; ++i) logdvols[i] += log(0.5);

  for(size_t i = 0; i < _numberLivePoints; ++i)
  //for(size_t i = 0; i < 10; ++i)
  {
    sampleIdx = _liveSamplesRank[_numberLivePoints-i-1];
    
    logEvidenceOld = _logEvidence;
    informationOld = _information;
    
    _lStarOld = _lStar;
    _lStar    = _liveLogLikelihoods[sampleIdx];

    dLogVol = logdvols[i];

    _logVolume   = safeLogMinus(_logVolume, dLogVol);
    _logWeight   = safeLogPlus(_lStar, _lStarOld) + dLogVol;
    _logEvidence = safeLogPlus(_logEvidence, _logWeight);
    
    evidenceTerm = exp(_lStarOld-_logEvidence) * _lStarOld 
        + exp(_lStar-_logEvidence) * _lStar;

    _information  = exp(dLogVol) * evidenceTerm 
       + exp(logEvidenceOld - _logEvidence) * (informationOld + logEvidenceOld) 
       - _logEvidence;
    
    _logEvidenceVar += 2.* (_information - informationOld) * dlvs[i];
    //printf("%f | %f | %f | %f\n", _lStar, dLogVol, _logVolume, _logWeight);
    //printf("%f | %f | %f | %f\n", _logEvidence, evidenceTerm, _information, _logEvidenceVar);
 
    updateSampleDatabase(sampleIdx);
 
  }
  return;

  _numberEffectiveSamples = calcEffectiveSamples();

}

void korali::solver::Nested::generatePosterior() 
{
    double maxLogWtDb = *max_element(std::begin(_sampleLogWeightDatabase), std::end(_sampleLogWeightDatabase));
    
    std::vector<size_t> permutation(_databaseEntries);
    std::iota(std::begin(permutation), std::end(permutation), 0);
    std::random_shuffle(permutation.begin(), permutation.end());

    size_t rndIdx, localRndIdx;
    _posteriorSamples.clear();
    
    double k = 1.0;
    double sum = _uniformGenerator->getRandomNumber();
    for(size_t i = 0; i < _databaseEntries; ++i)
    {
        rndIdx = permutation[i];

        sum += exp(_sampleLogWeightDatabase[localRndIdx]-maxLogWtDb);
        
        if(sum > k)
        {
            _posteriorSamples.push_back(_sampleDatabase[rndIdx]);
            k++;
        }
    }
    return; 
}

double korali::solver::Nested::calcEffectiveSamples() const 
{
    double logwtsum = 0.0;
    double logwt2sum = 0.0;

    //TODO: summation not safe
    for(size_t i = 0; i < _databaseEntries; ++i)
    {
        logwtsum  += exp(_sampleLogWeightDatabase[i]);
        logwt2sum += exp(2.0*_sampleLogWeightDatabase[i]);
    }

    logwtsum  = log(logwtsum);
    logwt2sum = log(logwt2sum);

    return exp(2.0*logwtsum - logwt2sum); 
}

double korali::solver::Nested::safeLogPlus(double logx, double logy) const
{
    if(logx>logy) return logx+log(1.0+exp(logy-logx));
    else          return logy+log(1.0+exp(logx-logy));
}

double korali::solver::Nested::safeLogMinus(double logx, double logy) const
{
    return log(exp(logx-logy) - 1) + logy;
}

void korali::solver::Nested::printGenerationBefore() { return; }

void korali::solver::Nested::printGenerationAfter() 
{ 
  korali::logInfo("Minimal", "Log Evidence: %.4f (+- %.4f)\n", _logEvidence, sqrt(_logEvidenceVar));
  korali::logInfo("Minimal", "Accepted Samples: %zu (+%zu) \n", _acceptedSamples, _numberLivePoints);
  korali::logInfo("Minimal", "Effective Samples: %.2f\n", _numberEffectiveSamples);
  korali::logInfo("Minimal", "Sampling Efficiency: %.2f%%\n", 100.0*(_acceptedSamples+_numberLivePoints)/((double)_generatedSamples));
  korali::logInfo("Minimal", "lStar: %.2f\n", _lStar);
  korali::logInfo("Minimal", "Last Accepted: %zu\n", _lastAccepted);
  korali::logInfo("Minimal", "Information: %.4f\n", _information);
  korali::logInfo("Minimal", "Log Volume (shrinkage): %.4f (%.2f%%)\n", _logVolume, 100.*(1.-exp(_logVolume)));
  return; 
}

void korali::solver::Nested::finalize()
{
  if (_k->_currentGeneration <= 1 || (_addLivePoints == false) ) return;
  consumeLiveSamples();
  generatePosterior();
  (*_k)["Results"]["Posterior Samples"] = _posteriorSamples;

  korali::logInfo("Minimal", "Final Log Evidence: %.4f (+- %.4F)\n", _logEvidence, sqrt(_logEvidenceVar));
  korali::logInfo("Minimal", "Information: %.4f\n", _information);
  korali::logInfo("Minimal", "Posterior Samples: %zu\n", _posteriorSamples.size());
  return; 
}
