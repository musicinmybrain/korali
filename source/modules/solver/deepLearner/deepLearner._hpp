#ifndef _KORALI_SOLVER_DEEP_LEARNER_TRAIN_HPP_
#define _KORALI_SOLVER_DEEP_LEARNER_TRAIN_HPP_

#include "engine.hpp"
#include "modules/experiment/experiment.hpp"
#include "modules/neuralNetwork/neuralNetwork.hpp"
#include "modules/problem/supervisedLearning/supervisedLearning.hpp"
#include "modules/solver/solver.hpp"

namespace korali
{
namespace solver
{
class DeepLearner : public Solver
{
  public:
  /**
 * @brief Korali engine for optimizing NN weights and biases
 */
  problem::SupervisedLearning *_problem;

  std::vector<std::vector<double>> evaluate(const std::vector<std::vector<double>> &inputBatch) override;

  void initialize() override;
  void runGeneration() override;
  void printGenerationAfter() override;
};
} // namespace solver
} // namespace korali

#endif // _KORALI_SOLVER_DEEP_LEARNER_TRAIN_HPP_
