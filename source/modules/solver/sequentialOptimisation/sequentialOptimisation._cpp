#include "modules/conduit/conduit.hpp"
#include "modules/solver/sequentialOptimisation/sequentialOptimisation.hpp"

void korali::solver::SequentialOptimisation::setInitialConfiguration()
{
  if (_numberOfSensors < 1) _k->_logger->logError("Number of Sensors %lu must be larger then 0.", _numberOfSensors);
  _numberOfLocations = 1;
  for (size_t i = 0; i < _locationsPerVariable.size(); i++)
    _numberOfLocations *= _locationsPerVariable[i];
  if (_numberOfLocations > _maxModelEvaluations)
    _k->_logger->logError("%lu > %lu. To many evaluations of the Utility per Sensor", _numberOfLocations, _maxModelEvaluations);
  _k->_logger->logInfo("Normal", "Evaluating a total of %lu locations per sensor...\n", _numberOfLocations);
  _maxModelEvaluations = _numberOfSensors * _numberOfLocations;

  _optimalSensorLocations.resize(_numberOfSensors);
  for (size_t i = 0; i < _numberOfSensors; i++)
  {
    _optimalSensorLocations[i].resize(_locationsPerVariable.size());
  }

  _utility.resize(_numberOfSensors);
  for (size_t i = 0; i < _numberOfSensors; i++)
  {
    _utility[i].resize(_numberOfLocations);
  }
  _maximumUtility.resize(_numberOfSensors);

  if (_locationsPerVariable.size() > 0)
  {
    _indicesHelper.resize(_locationsPerVariable.size());
    _indicesHelper[0] = _locationsPerVariable[0];
    _indicesHelper[1] = _locationsPerVariable[0];
    for (size_t i = 2; i < _locationsPerVariable.size(); i++)
    {
      _indicesHelper[i] = _indicesHelper[i - 1] * _k->_variables[i - 1]->_samplePoints.size();
    }
  }
}

void korali::solver::SequentialOptimisation::runGeneration()
{
  if (_k->_currentGeneration == 1) setInitialConfiguration();

  _k->_logger->logInfo("Normal", "Placing sensor %lu...\n", _k->_currentGeneration);

  // Example: Evaluating a sample
  std::vector<korali::Sample> samples(_numberOfLocations);
  std::vector<size_t> sampleData(_locationsPerVariable.size() * _k->_currentGeneration);

  size_t rest, index;
  for (size_t i = 0; i < _numberOfLocations; i++)
  {
    rest = i;
    for (int d = _locationsPerVariable.size() - 1; d >= 0; d--)
    {
      // We assume i = _index[0] + _index[1]*_sample[0].size() + _index[1]*_index[2]*_sample[1].size() + .....
      if (d == 0)
        index = rest % _indicesHelper[d];
      else
        index = rest / _indicesHelper[d];
      rest -= index * _indicesHelper[d];

      sampleData[d] = index;
    }
    for (int d = _locationsPerVariable.size(); d < _locationsPerVariable.size() * _k->_currentGeneration; d++)
    {
      sampleData[d] = _optimalSensorLocations[d / _locationsPerVariable.size() - 1][d % _locationsPerVariable.size()];
    }

    _k->_logger->logInfo("Detailed", "Running sample %zu/%zu with values:\n         ", i + 1, _numberOfLocations);
    for (auto &x : sampleData) _k->_logger->logData("Detailed", " %lu   ", x);
    _k->_logger->logData("Detailed", "\n");

    samples[i]["Module"] = "Problem";
    samples[i]["Operation"] = "Evaluate";
    samples[i]["Parameters"] = sampleData;
    _conduit->start(samples[i]);
    _modelEvaluationCount++;
  }
  _conduit->waitAll(samples);
  for (size_t i = 0; i < _numberOfLocations; i++)
  {
    _utility[_k->_currentGeneration - 1][i] = samples[i]["F(x)"];
  }

  std::vector<double>::iterator maximum = std::max_element(_utility[_k->_currentGeneration - 1].begin(), _utility[_k->_currentGeneration - 1].end());
  size_t maxIndex = std::distance(_utility[_k->_currentGeneration - 1].begin(), maximum);

  std::vector<size_t> bestLocation = samples[maxIndex]["Parameters"];
  _optimalSensorLocations[_k->_currentGeneration - 1] = bestLocation;

  _maximumUtility[_k->_currentGeneration - 1] = samples[maxIndex]["F(x)"];
}

void korali::solver::SequentialOptimisation::printGenerationBefore()
{
}

void korali::solver::SequentialOptimisation::printGenerationAfter()
{
  _k->_logger->logInfo("Normal", "Placed sensor %lu with utility %+6.3e at location:\n", _k->_currentGeneration, _maximumUtility[_k->_currentGeneration - 1]);
  for (size_t i = 0; i < _locationsPerVariable.size(); i++)
    _k->_logger->logData("Normal", " %lu", _optimalSensorLocations[_k->_currentGeneration - 1][i]);
  _k->_logger->logData("Normal", "\n");
}

void korali::solver::SequentialOptimisation::finalize()
{
  _k->_logger->logInfo("Minimal", "Optimal Sequence of Sensor Locations Calculated:\n");
  for (size_t i = 0; i < _numberOfSensors; i++)
  {
    _k->_logger->logData("Normal", "sensor %lu: ", i);
    for (size_t j = 0; j < _locationsPerVariable.size(); j++)
      _k->_logger->logData("Minimal", " %lu", _optimalSensorLocations[i][j]);
    _k->_logger->logData("Normal", "\n");
  }
}
