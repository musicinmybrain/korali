#include "modules/solver/executor/executor.hpp"
#include "modules/conduit/conduit.hpp"

void korali::solver::Executor::runGeneration()
{
  _sampleCount   = _k->_variables[0]->_precomputedValues.size();

  _maxModelEvaluations     = std::min(_maxModelEvaluations, _sampleCount);
  _executionsPerGeneration = std::min(_executionsPerGeneration, _maxModelEvaluations - _modelEvaluationCount);
  
  std::vector<double> sampleData(_k->_variables.size());
  std::vector<korali::Sample> samples(_executionsPerGeneration);

  for (size_t i = 0; i < _executionsPerGeneration; i++)
  {
    for (size_t j = 0; j < _k->_variables.size(); j++) sampleData[j] = _k->_variables[j]->_precomputedValues[_modelEvaluationCount];

    _k->_logger->logInfo("Detailed", "Running sample %zu with values:\n         ", _modelEvaluationCount);
    for(auto& x : sampleData) _k->_logger->logData("Detailed", " %le   ", x);
    _k->_logger->logData("Detailed", "\n");

    samples[i]["Module"] = "Problem";
    samples[i]["Operation"]  = "Execute";
    samples[i]["Parameters"] = sampleData;
    samples[i]["Sample Id"]  = _modelEvaluationCount;
    _conduit->start(samples[i]);
    _modelEvaluationCount++;
  }

  _conduit->waitAll(samples);
}

void korali::solver::Executor::printGenerationBefore()
{
}

void korali::solver::Executor::printGenerationAfter()
{
 _k->_logger->logInfo("Minimal", "Total Executions %lu.\n", _modelEvaluationCount);
}
