#include "engine.hpp"
#include "modules/solver/executor/executor.hpp"
#include "sample/sample.hpp"

@startNamespace

void @className::runGeneration()
{
  _variableCount = _k->_variables.size();
  _sampleCount = std::max(_k->_variables[0]->_precomputedValues.size(), _k->_variables[0]->_sampledValues.size());

  _maxModelEvaluations = std::min(_maxModelEvaluations, _sampleCount);
  _executionsPerGeneration = std::min(_executionsPerGeneration, _maxModelEvaluations - _modelEvaluationCount);

  std::vector<Sample> samples(_executionsPerGeneration);
  std::vector<double> sampleData(_variableCount);

  for (size_t i = 0; i < _executionsPerGeneration; i++)
  {
    for (size_t d = 0; d < _variableCount; d++)
    {
      if (_k->_variables[0]->_precomputedValues.size() > 0)
        sampleData[d] = _k->_variables[d]->_precomputedValues[_modelEvaluationCount];
      else
        sampleData[d] = _k->_distributions[_k->_variables[d]->_distributionIndex]->getRandomNumber();
    }

    _k->_logger->logInfo("Detailed", "Running sample %zu with values:\n         ", _modelEvaluationCount);
    for (auto &x : sampleData) _k->_logger->logData("Detailed", " %le   ", x);
    _k->_logger->logData("Detailed", "\n");

    samples[i]["Module"] = "Problem";
    samples[i]["Operation"] = "Execute";
    samples[i]["Parameters"] = sampleData;
    samples[i]["Sample Id"] = _modelEvaluationCount;
    KORALI_START(samples[i]);
    _modelEvaluationCount++;
  }

  KORALI_WAITALL(samples);
}

void @className::printGenerationBefore()
{
}

void @className::printGenerationAfter()
{
  _k->_logger->logInfo("Minimal", "Total Executions %lu.\n", _modelEvaluationCount);
}

@moduleAutoCode

@endNamespace