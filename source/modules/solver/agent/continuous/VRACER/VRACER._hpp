#ifndef _KORALI_AGENT_CONTINUOUS_VRACER_HPP_
#define _KORALI_AGENT_CONTINUOUS_VRACER_HPP_

#include "modules/distribution/univariate/normal/normal.hpp"
#include "modules/problem/reinforcementLearning/continuous/continuous.hpp"
#include "modules/solver/agent/continuous/continuous.hpp"

namespace korali
{
namespace solver
{
namespace agent
{
namespace continuous
{
class VRACER : public Continuous
{
  public:
  /**
   * @brief Pointer to training the actor network
   */
  learner::DeepSupervisor *_criticPolicyLearner;

  /**
  * @brief Korali experiment for obtaining the agent's action
  */
  korali::Experiment _criticPolicyExperiment;

  /**
   * @brief Pointer to actor's experiment problem
   */
  problem::SupervisedLearning *_criticPolicyProblem;

  /**
   * @brief Calculates the state value function V(s,a)
   * @param state state to evaluate
   * @return The value of V(s)
   */
  float stateValueFunction(const std::vector<float> &state);

  /**
   * @brief Update the V-target or current and previous experiences in the episode
   * @param expId Current Experience Id
   */
  void updateVtbc(size_t expId);

  /**
   * @brief Calculates the gradient of policy wrt to the parameter of the 2nd (current) distribution evaluated at old action.
   * @param oldAction Action from memory
   * @param curParamsOne cur means for Normal distribution, beta for Beta distribution
   * @param curParamsTwo cur sigmas for Normal distribution, alpha for Beta distribution
   * @param oldParamsOne old means for Normal distribution, beta for Beta distribution
   * @param oldParamsTwo old sigmas for Normal distribution, alpha for Beta distribution
   * @return gradient of policy wrt curParamsOne and curParamsTwo
   */
  std::vector<float> calculateImportanceWeightGradient(const std::vector<float> &oldAction, const std::vector<float> &curParamsOne, const std::vector<float> &curParamsTwo, const std::vector<float> &oldParamsOne, const std::vector<float> &oldParamsTwo);

  knlohmann::json getAgentPolicy() override;
  void setAgentPolicy(const knlohmann::json &hyperparameters) override;
  void setTrainingState(const knlohmann::json &state) override;
  knlohmann::json getTrainingState() override;
  knlohmann::json runPolicy(const std::vector<std::vector<float>> &stateSequence) override;
  void trainPolicy() override;
  void printAgentInformation() override;
  void initializeAgent() override;
};

} // namespace continuous
} // namespace agent
} // namespace solver
} // namespace korali

#endif // _KORALI_AGENT_CONTINUOUS_VRACER_HPP_
