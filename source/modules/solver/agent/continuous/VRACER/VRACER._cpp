#include "engine.hpp"
#include "modules/solver/agent/continuous/VRACER/VRACER.hpp"
#include "sample/sample.hpp"

namespace korali
{
namespace solver
{
namespace agent
{
namespace continuous
{
void VRACER::initializeAgent()
{
  // Initializing common discrete agent configuration
  Continuous::initializeAgent();

  /*********************************************************************
  * Initializing Normal Distributions for the Policy
  *********************************************************************/

  for (size_t i = 0; i < _problem->_actionVectorSize; i++)
  {
    knlohmann::json jsNormal;
    jsNormal["Type"] = "Univariate/Normal";
    jsNormal["Mean"] = 0.0;
    jsNormal["Standard Deviation"] = 1.0;

    auto d = dynamic_cast<distribution::univariate::Normal *>(getModule(jsNormal, _k));
    _policyDistributions.push_back(d);
  }

  /*********************************************************************
 * Initializing Neural Network
 *********************************************************************/

  _criticPolicyExperiment["Problem"]["Type"] = "Supervised Learning";
  _criticPolicyExperiment["Solver"]["Type"] = "Learner/DeepSupervisor";
  _criticPolicyExperiment["Solver"]["Optimizer"] = _criticOptimizer;
  _criticPolicyExperiment["Solver"]["Learning Rate"] = _criticLearningRate;
  _criticPolicyExperiment["Solver"]["Loss Function"] = "Direct Gradient";
  _criticPolicyExperiment["Solver"]["Steps Per Generation"] = 1;
  _criticPolicyExperiment["Solver"]["Neural Network"] = _criticNeuralNetwork;

  // Initializing experiment with an initial zero set
  size_t dimAction = _problem->_actionVectorSize;
  for (size_t i = 0; i < _criticMiniBatchSize; i++)
  {
    for (size_t j = 0; j < _problem->_stateVectorSize; j++)
      _criticPolicyExperiment["Problem"]["Inputs"][i][j] = 0.0;

    // V(s), mean(s) and Sigma(s)
    _criticPolicyExperiment["Problem"]["Solution"][i][0] = 0.0; // V
    for (size_t j = 0; j < dimAction; j++)
    {
      _criticPolicyExperiment["Problem"]["Solution"][i][1 + j] = 0.0;             // Mean(i)
      _criticPolicyExperiment["Problem"]["Solution"][i][dimAction + 1 + j] = 0.0; // Sigma(i)
    }
  }

  // No output mask for value
  _criticPolicyExperiment["Solver"]["Neural Network"]["Output"]["Scale"][0] = 1.0f;
  _criticPolicyExperiment["Solver"]["Neural Network"]["Output"]["Shift"][0] = 0.0f;
  _criticPolicyExperiment["Solver"]["Neural Network"]["Output"]["Absolute Mask"][0] = false;
  _criticPolicyExperiment["Solver"]["Neural Network"]["Output"]["Tanh Mask"][0] = false;
  _criticPolicyExperiment["Solver"]["Neural Network"]["Output"]["Softplus Mask"][0] = false;
  for (size_t i = 0; i < dimAction; i++)
  {
    size_t varIdx = _problem->_actionVectorIndexes[i];
    auto lowerBound = _k->_variables[varIdx]->_lowerBound;
    auto upperBound = _k->_variables[varIdx]->_upperBound;
    float scale = (upperBound - lowerBound) * 0.5;
    float shift = (upperBound + lowerBound) * 0.5;

    if (_policyDistribution == "Normal")
    {
      // Tanh mask for Mean
      _criticPolicyExperiment["Solver"]["Neural Network"]["Output"]["Scale"][i + 1] = scale;
      _criticPolicyExperiment["Solver"]["Neural Network"]["Output"]["Shift"][i + 1] = shift;
      _criticPolicyExperiment["Solver"]["Neural Network"]["Output"]["Absolute Mask"][i + 1] = false;
      _criticPolicyExperiment["Solver"]["Neural Network"]["Output"]["Tanh Mask"][i + 1] = true;
      _criticPolicyExperiment["Solver"]["Neural Network"]["Output"]["Softplus Mask"][i + 1] = false;

      // Softplus mask for Sigma
      _criticPolicyExperiment["Solver"]["Neural Network"]["Output"]["Scale"][dimAction + i + 1] = 1.0;
      _criticPolicyExperiment["Solver"]["Neural Network"]["Output"]["Shift"][dimAction + i + 1] = 0.0;
      _criticPolicyExperiment["Solver"]["Neural Network"]["Output"]["Absolute Mask"][dimAction + i + 1] = false;
      _criticPolicyExperiment["Solver"]["Neural Network"]["Output"]["Tanh Mask"][dimAction + i + 1] = false;
      _criticPolicyExperiment["Solver"]["Neural Network"]["Output"]["Softplus Mask"][dimAction + i + 1] = true;
    }
    else /* _policyDistribution == "Beta" */
    {
      // Softplus mask for Alpha
      _criticPolicyExperiment["Solver"]["Neural Network"]["Output"]["Scale"][i + 1] = 1.0;
      _criticPolicyExperiment["Solver"]["Neural Network"]["Output"]["Shift"][i + 1] = 1.0;
      _criticPolicyExperiment["Solver"]["Neural Network"]["Output"]["Absolute Mask"][i + 1] = false;
      _criticPolicyExperiment["Solver"]["Neural Network"]["Output"]["Tanh Mask"][i + 1] = false;
      _criticPolicyExperiment["Solver"]["Neural Network"]["Output"]["Softplus Mask"][i + 1] = true;

      // Softplus mask for Beta
      _criticPolicyExperiment["Solver"]["Neural Network"]["Output"]["Scale"][dimAction + i + 1] = 1.0;
      _criticPolicyExperiment["Solver"]["Neural Network"]["Output"]["Shift"][dimAction + i + 1] = 1.0;
      _criticPolicyExperiment["Solver"]["Neural Network"]["Output"]["Absolute Mask"][dimAction + i + 1] = false;
      _criticPolicyExperiment["Solver"]["Neural Network"]["Output"]["Tanh Mask"][dimAction + i + 1] = false;
      _criticPolicyExperiment["Solver"]["Neural Network"]["Output"]["Softplus Mask"][dimAction + i + 1] = true;
    }

  }

  // Running initialization to verify that the configuration is correct
  korali::Engine engine;
  engine.initialize(_criticPolicyExperiment);

  // Getting learner and problem pointers
  _criticPolicyProblem = dynamic_cast<problem::SupervisedLearning *>(_criticPolicyExperiment._problem);
  _criticPolicyLearner = dynamic_cast<solver::learner::DeepSupervisor *>(_criticPolicyExperiment._solver);

  // Get initial learning rate
  _referInitialLearningRate = _criticPolicyLearner->_learningRate;
  _referCutoff = _referCutoffScale + 1.0f;
  _referOffPolicyFraction = 0.0f;

  /*********************************************************************
  * Loading/Setting Hyperparameters
  *********************************************************************/

  // Get the initial set of policy NN hyperparameters
  _hyperparameters["Policy"] = _criticPolicyLearner->getHyperparameters();
}

void VRACER::updateAgentPolicy(const knlohmann::json &hyperparameters)
{
  _criticPolicyLearner->setHyperparameters(hyperparameters["Policy"].get<std::vector<float>>());
}

void VRACER::trainAgent()
{
  // Resetting statistics
  _cumulativeQStar = 0.0;
  _cumulativeQStarSquared = 0.0;

  float cumulativeTdError = 0.0;
  float cumulativeTdErrorSquared = 0.0;

  float cumulativePolicyError = 0.0;
  float cumulativePolicyErrorSquared = 0.0;
  size_t policyErrorCounter = 0;

  /***************************************************************************
   * Adjusting REFER off-policiness and learning rate parameters
   **************************************************************************/

  // Update REFER parameters only after reaching this number of experiences in memory
  if (_experienceReplay.size() > _referStartSize)
  {
    // Updating cutoff
    _referCutoff = 1.0f + _referCutoffScale / (1.0f + _referAnnealingRate * (float)_optimizationStepCount);

    // Update learning rate
    _criticPolicyLearner->_learningRate = _referInitialLearningRate / (1.0f + _referAnnealingRate * _optimizationStepCount);

    // Updating beta parameter
    if (_referOffPolicyFraction > _referTargetOffPolicyFraction)
      _referBeta = (1.0f - _criticPolicyLearner->_learningRate) * _referBeta;
    else
      _referBeta = (1.0f - _criticPolicyLearner->_learningRate) * _referBeta + _criticPolicyLearner->_learningRate;
  }

  /****************************************************************************
  * Training the critic/learner network with a mini-batch
  ***************************************************************************/

  // Creating a minibatch of starting experiences for the trajectories update
  auto miniBatchIndexes = generateMiniBatch(_criticMiniBatchSize);

  // Fill Minibatch
  for (size_t step = 0; step < _criticMiniBatchSize; step++)
  {
    // Getting index of current experiment
    size_t curId = miniBatchIndexes[step];

    // Get state, action, mean, Sigma and importance weight for this experience
    auto expState = _experienceReplay[curId].state;
    auto expAction = _experienceReplay[curId].action;
    auto expMeans = _experienceReplay[curId].policy["Action Means"].get<std::vector<float>>();
    auto expSigmas = _experienceReplay[curId].policy["Action Sigmas"].get<std::vector<float>>();

    // Forward the neural network for this state to get current means and sigmas and Value
    auto policy = runPolicy(expState);
    auto curMeans = policy["Action Means"].get<std::vector<float>>();
    auto curSigmas = policy["Action Sigmas"].get<std::vector<float>>();
    auto V = policy["State Value"].get<float>();

    // Update State Value in Metadata
    _experienceReplay[curId].policy["State Value"] = V;

    // Compute importance weight
    float importanceWeight = calculateImportanceWeight(expAction, curMeans, curSigmas, expMeans, expSigmas);

    // Update Importance Weight in Metadata
    _experienceReplay[curId].policy["Importance Weight"] = importanceWeight;

    // Update off-policy fraction
    size_t expCount = _experienceReplay.size();
    size_t offPolicyCount = 0;
    for (size_t expId = 0; expId < expCount; expId++)
    {
      float expImportanceWeight = _experienceReplay[expId].policy["Importance Weight"];
      if (expImportanceWeight > _referCutoff || expImportanceWeight < (1.0f / _referCutoff))
        offPolicyCount++;
    }

    _referOffPolicyFraction = (float)offPolicyCount / (float)expCount;

    /******************************************************
    * Gradient calculation
    *******************************************************/

    // Storage for the update gradient
    std::vector<float> gradientLoss(2 * _problem->_actionVectorSize + 1, 0.0f);

    // Compute Vtbc
    float expVtbc = computeVtbc(curId);

    // update critic statistics
    _cumulativeQStar += expVtbc;
    _cumulativeQStarSquared += expVtbc * expVtbc;

    // Gradient of Value Function V(s) (eq. (9); *-1 because the optimizer is maximizing)
    gradientLoss[0] = -(V - expVtbc);

    cumulativeTdError -= (V - expVtbc);
    cumulativeTdErrorSquared += gradientLoss[0] * gradientLoss[0];

    // Compute policy gradient only if inside trust region
    if (importanceWeight < _referCutoff || importanceWeight > (1.0f / _referCutoff))
    {
      // Qret for terminal state is just reward
      float Qret = _experienceReplay[curId].reward;

      // Check whether experience is non-terminal
      bool isNormal = _experienceReplay[curId].termination == e_nonTerminal;

      // In this case add Vtbc
      if (isNormal == true)
      {
        float nextExpVtbc = computeVtbc(curId + 1);
        Qret += _criticDiscountFactor * nextExpVtbc;
      }

      // Check whether experience is truncated
      bool isTrucated = _experienceReplay[curId].termination == e_truncated;

      // For truncated state add value
      if (isTrucated == true)
      {
        // get truncated state
        auto truncatedState = _experienceReplay[curId].truncatedState;

        // for truncated state, Vtbc == V - forward network
        auto policy = runPolicy(truncatedState);
        auto nextExpVtbc = policy["State Value"].get<float>();

        // add value to Qret
        Qret += _criticDiscountFactor * nextExpVtbc;
      }

      // Compute Off-Policy Objective (eq. 5)
      float lossOffPolicy = -(Qret - V);

      cumulativePolicyError += lossOffPolicy;
      cumulativePolicyErrorSquared += lossOffPolicy * lossOffPolicy;
      policyErrorCounter++;

      // Compute Policy Gradient wrt Params
      auto polGrad = calculateImportanceWeightGradient(expAction, curMeans, curSigmas, expMeans, expSigmas);

      // Set Gradient of Loss wrt Params
      for (size_t i = 0; i < 2 * _problem->_actionVectorSize; i++)
      {
        // '-' because the optimizer is maximizing
        gradientLoss[1 + i] = -_referBeta * lossOffPolicy * polGrad[i];
      }
    }

    // Compute derivative of kullback-leibler divergence wrt current distribution params
    auto klGrad = calculateKLDivergenceGradient(expMeans, expSigmas, curMeans, curSigmas);

    for (size_t i = 0; i < 2 * _problem->_actionVectorSize; i++)
    {
      // Step towards old policy (gradient pointing to larger difference between old and current policy)
      gradientLoss[1 + i] -= (1.0f - _referBeta) * klGrad[i];
    }

    // Set status as learning problem input
    _criticPolicyProblem->_inputs[step] = expState;

    // Set Gradient of Loss as Solution
    _criticPolicyProblem->_solution[step] = gradientLoss;
  }

  // Compute average and std of Value target
  _averageQStar = _cumulativeQStar / (float)_criticMiniBatchSize;
  _stdevQStar = sqrt(_cumulativeQStarSquared / (float)_criticMiniBatchSize - _averageQStar * _averageQStar);
  // Compute average and std of Value Loss
  _averageTDError = cumulativeTdError / (float)_criticMiniBatchSize;
  _stdevTDError = std::sqrt(cumulativeTdErrorSquared / (float)_criticMiniBatchSize - _averageTDError * _averageTDError);
  // Compute average and std of Off-Policy Gradient Objective
  _averagePolicyError = cumulativePolicyError / (float)policyErrorCounter;
  _stdevPolicyError = std::sqrt(cumulativePolicyErrorSquared / (float)policyErrorCounter - _averagePolicyError * _averagePolicyError);

  // Running one generation of the optimization method with the given mini-batch
  _criticPolicyLearner->initialize();
  _criticPolicyLearner->runGeneration();
  _criticPolicyLearner->finalize();

  /****************************************************************************
  * If batch normalization is being used, we need to adjust mean and variances
  * by sampling a few more mini-batches after the optimization steps
  ******************************************************************************/

  normalizeStateNeuralNetwork(_criticPolicyLearner->_trainingNeuralNetwork, _criticMiniBatchSize, _criticNormalizationSteps);

  // Storing average policy hyperparameters
  _hyperparameters["Policy"] = _criticPolicyLearner->getHyperparameters();
}

float VRACER::computeVtbc(size_t expId)
{
  // Finding last experience in the episode that corresponds to expId
  ssize_t startId = expId;
  ssize_t endId = startId;
  while (_experienceReplay[endId].termination == e_nonTerminal) endId++;

  // get importance weight
  auto importanceWeight = _experienceReplay[endId].policy["Importance Weight"].get<float>();

  // truncate importance weight
  float truncatedImportanceWeight = std::min(1.0f, importanceWeight);

  // Initializing vTbc to weighted reward of the last
  float vTbc = truncatedImportanceWeight * _experienceReplay[endId].reward;

  // If the episode was truncated add contribution
  if (_experienceReplay[endId].termination == e_truncated)
  {
    // get truncated state
    auto truncatedState = _experienceReplay[endId].truncatedState;

    // for truncated state, Vtbc == V - forward network
    auto policy = runPolicy(truncatedState);
    auto nextExpVtbc = policy["State Value"].get<float>();

    float curV = _experienceReplay[endId].policy["State Value"].get<float>();
    vTbc += curV + truncatedImportanceWeight * (_criticDiscountFactor * nextExpVtbc - curV);
  }

  // Now iterating backwards to calculate the rest of vTbc
  for (ssize_t curId = endId - 1; curId >= startId; curId--)
  {
    // Getting current reward
    float curReward = _experienceReplay[curId].reward;

    // Get state value function
    float curV = _experienceReplay[curId].policy["State Value"].get<float>();

    // get importance weight
    auto importanceWeight = _experienceReplay[curId].policy["Importance Weight"].get<float>();

    // truncate importance weight
    float truncatedImportanceWeight = std::min(1.0f, importanceWeight);

    // Calculating vTbc
    vTbc = curV + truncatedImportanceWeight * (curReward + _criticDiscountFactor * vTbc - curV);
  }

  // Returning vTbc
  return vTbc;
}

std::vector<float> VRACER::calculateImportanceWeightGradient(const std::vector<float> &oldAction, const std::vector<float> &curParamsOne, const std::vector<float> &curParamsTwo, const std::vector<float> &oldParamsOne, const std::vector<float> &oldParamsTwo)
{
  std::vector<float> grad(2 * _problem->_actionVectorSize, 0.0);

  if (_policyDistribution == "Normal")
  {
    float logImportanceWeight = 0.0;

    // ParamsOne are the Means, ParamsTwo are the Sigmas
    for (size_t i = 0; i < _problem->_actionVectorSize; i++)
    {
      // Deviation from expAction and current Mean
      float curActionDiff = (oldAction[i] - curParamsOne[i]);

      // Deviation from expAction and old Mean
      float oldActionDiff = (oldAction[i] - oldParamsOne[i]);

      // Inverse Variances
      float curInvVar = 1. / (curParamsTwo[i] * curParamsTwo[i]);
      float oldInvVar = 1. / (oldParamsTwo[i] * oldParamsTwo[i]);

      // Calc Imp Weight
      logImportanceWeight += std::log(oldParamsTwo[i] / curParamsTwo[i]);
      logImportanceWeight += 0.5 * (oldActionDiff * oldActionDiff * oldInvVar - curActionDiff * curActionDiff * curInvVar);

      // Gradient with respect to Mean
      grad[i] = curActionDiff * curInvVar;

      // Gradient with respect to Sigma
      grad[_problem->_actionVectorSize + i] = (curActionDiff * curActionDiff) * (curInvVar / curParamsTwo[i]) - 1.0f / curParamsTwo[i];
    }

    float importanceWeight = std::exp(logImportanceWeight);

    // Scale by importance weight to get gradient
    for (size_t i = 0; i < 2 * _problem->_actionVectorSize; i++)
      grad[i] *= importanceWeight;
  }
  else /* _policyDistribution == "Beta" */
  {
    // ParamsOne are the Alphas, ParamsTwo are the Betas
    for (size_t i = 0; i < _problem->_actionVectorSize; i++)
    {
      float logpOldPolicy = betaLogDensity(oldAction[i], oldParamsOne[i], oldParamsTwo[i]);
      float invpOldPolicy = std::exp(-logpOldPolicy);

      const float x = (oldAction[i]-_actionLowerBounds[i])/_actionScalings[i];
      const float a = curParamsOne[i];
      const float b = curParamsTwo[i];
      const float Bab = gsl_sf_beta(a, b);
      const float psiAb = gsl_sf_psi(a + b);

      // Gradient wrt alpha
      grad[i] = (x - 1.) * std::pow(x, a - 2.);
      grad[i] -= std::pow(x, a - 1.) * (gsl_sf_psi(a) - psiAb);
      grad[i] *= std::pow(1. - x, b - 1.) * invpOldPolicy / ( Bab * _actionScalings[i] );

      // Gradient wrt beta
      grad[_problem->_actionVectorSize + i] = (b - 1.) * std::pow(1. - x, b - 2.);
      grad[_problem->_actionVectorSize + i] -= std::pow(1. - x, b - 1.) * (gsl_sf_psi(b) - psiAb);
      grad[_problem->_actionVectorSize + i] *= std::pow(x, a - 1.) * invpOldPolicy / ( Bab * _actionScalings[i] );
    }
  }
  return grad;
}

knlohmann::json VRACER::runPolicy(const std::vector<float> &state)
{
  // Forward the neural network for this state
  std::vector<float> evaluation = _criticPolicyLearner->getEvaluation(state);
  auto stateValue = evaluation[0];

  std::vector<float> actionMeans(_problem->_actionVectorSize);
  std::vector<float> actionSigmas(_problem->_actionVectorSize);
  for (size_t i = 0; i < _problem->_actionVectorSize; i++)
  {
    actionMeans[i] = evaluation[i + 1];
    actionSigmas[i] = evaluation[_problem->_actionVectorSize + i + 1];
  }

  knlohmann::json policy;
  policy["Action Means"] = actionMeans;
  policy["Action Sigmas"] = actionSigmas;
  policy["State Value"] = stateValue;
  policy["Importance Weight"] = 1.0f;
  return policy;
}

void VRACER::printAgentInformation()
{
  _k->_logger->logInfo("Normal", "Critic Information:\n");
  _k->_logger->logInfo("Normal", " + Average (Std) Vtbc in Mini-Batch:  %f (%f)\n", _averageQStar, _stdevQStar);
  _k->_logger->logInfo("Normal", " + Average (Std) TD-Error in Mini-Batch:  %f (%f)\n", _averageTDError, _stdevTDError);
  _k->_logger->logInfo("Normal", " + Average (Std) Off-Policy Objective in Mini-Batch:  %f (%f)\n", _averagePolicyError, _stdevPolicyError);

  _k->_logger->logInfo("Normal", "Neural Network Information:\n");
  _criticPolicyExperiment._logger->_verbosityLevel = _k->_logger->_verbosityLevel;
  _criticPolicyExperiment._solver->printGenerationAfter();
  _criticPolicyExperiment._logger->setVerbosityLevel("Silent");

  _k->_logger->logInfo("Normal", "REF-ER Information\n");
  _k->_logger->logInfo("Normal", " + Off-Policy Fraction: %.6f (Target: %.6f)\n", _referOffPolicyFraction, _referTargetOffPolicyFraction);
  _k->_logger->logInfo("Normal", " + Policy Learning Rate: %.6f\n", _criticPolicyLearner->_learningRate);
  _k->_logger->logInfo("Normal", " + Beta: %.6f\n", _referBeta);
  _k->_logger->logInfo("Normal", " + Cut-off: %.6f\n", _referCutoff);
}

} // namespace continuous
} // namespace agent
} // namespace solver
} // namespace korali
