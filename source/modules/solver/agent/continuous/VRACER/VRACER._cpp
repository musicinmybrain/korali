#include "engine.hpp"
#include "modules/solver/agent/continuous/VRACER/VRACER.hpp"
#include "sample/sample.hpp"

namespace korali
{
namespace solver
{
namespace agent
{
namespace continuous
{
void VRACER::initializeAgent()
{
  // Initializing common discrete agent configuration
  Continuous::initializeAgent();

  /*********************************************************************
 * Initializing Critic/Policy Experiment
 *********************************************************************/

  _criticPolicyExperiment["Problem"]["Type"] = "Supervised Learning";
  _criticPolicyExperiment["Problem"]["Max Timesteps"] = _timeSequenceLength;
  _criticPolicyExperiment["Problem"]["Training Batch Size"] = _miniBatchSize;
  _criticPolicyExperiment["Problem"]["Inference Batch Size"] = 1;
  _criticPolicyExperiment["Problem"]["Input"]["Size"] = _problem->_stateVectorSize;
  _criticPolicyExperiment["Problem"]["Solution"]["Size"] = 1 + 2 * _problem->_actionVectorSize;

  _criticPolicyExperiment["Solver"]["Type"] = "Learner/DeepSupervisor";
  _criticPolicyExperiment["Solver"]["Optimizer"] = _optimizer;

  _criticPolicyExperiment["Solver"]["L2 Regularization"]["Enabled"] = _l2RegularizationEnabled;
  _criticPolicyExperiment["Solver"]["L2 Regularization"]["Importance"] = _l2RegularizationImportance;
  _criticPolicyExperiment["Solver"]["Learning Rate"] = _currentLearningRate;
  _criticPolicyExperiment["Solver"]["Loss Function"] = "Direct Gradient";
  _criticPolicyExperiment["Solver"]["Steps Per Generation"] = 1;
  _criticPolicyExperiment["Solver"]["Neural Network"]["Engine"] = _neuralNetworkEngine;
  _criticPolicyExperiment["Solver"]["Neural Network"]["Hidden Layers"] = _neuralNetworkHiddenLayers;
  _criticPolicyExperiment["Solver"]["Output Weights Scaling"] = 0.001;

  // Masks to normalize and rescaling output to fit the action's [lower, upper] bounds (and sigmas/P)
  _criticPolicyExperiment["Solver"]["Neural Network"]["Output Layer"]["Scale"][0] = 1.0f;
  _criticPolicyExperiment["Solver"]["Neural Network"]["Output Layer"]["Shift"][0] = 0.0f;
  _criticPolicyExperiment["Solver"]["Neural Network"]["Output Layer"]["Tanh Mask"][0] = false;
  _criticPolicyExperiment["Solver"]["Neural Network"]["Output Layer"]["Softplus Mask"][0] = false;
  _criticPolicyExperiment["Solver"]["Neural Network"]["Output Layer"]["Sigmoid Mask"][0] = false;

  // Normalizing and rescaling output to fit the action's [lower, upper] bounds
  for (size_t i = 0; i < _problem->_actionVectorSize; i++)
  {
    size_t varIdx = _problem->_actionVectorIndexes[i];
    auto lowerBound = _k->_variables[varIdx]->_lowerBound;
    auto upperBound = _k->_variables[varIdx]->_upperBound;
    float scale = (upperBound - lowerBound) * 0.5;
    float shift = (upperBound + lowerBound) * 0.5;
    float sigma = _k->_variables[varIdx]->_initialExplorationNoise;

    // Checking correct noise configuration
    if (sigma <= 0.0f) KORALI_LOG_ERROR("Provided initial noise (%f) for action variable %lu is not defined or negative.\n", sigma, varIdx);

    // Tanh mask for Mean
    _criticPolicyExperiment["Solver"]["Neural Network"]["Output Layer"]["Scale"][i + 1] = scale;
    _criticPolicyExperiment["Solver"]["Neural Network"]["Output Layer"]["Shift"][i + 1] = shift;
    _criticPolicyExperiment["Solver"]["Neural Network"]["Output Layer"]["Tanh Mask"][i + 1] = true;
    _criticPolicyExperiment["Solver"]["Neural Network"]["Output Layer"]["Softplus Mask"][i + 1] = false;
    _criticPolicyExperiment["Solver"]["Neural Network"]["Output Layer"]["Sigmoid Mask"][i + 1] = false;

    if (_policyDistribution == "Normal")
    {
      // Softplus mask for Sigma
      _criticPolicyExperiment["Solver"]["Neural Network"]["Output Layer"]["Scale"][_problem->_actionVectorSize + i + 1] = sigma * 2.0f;
      _criticPolicyExperiment["Solver"]["Neural Network"]["Output Layer"]["Shift"][_problem->_actionVectorSize + i + 1] = 0.0f;
      _criticPolicyExperiment["Solver"]["Neural Network"]["Output Layer"]["Tanh Mask"][_problem->_actionVectorSize + i + 1] = false;
      _criticPolicyExperiment["Solver"]["Neural Network"]["Output Layer"]["Softplus Mask"][_problem->_actionVectorSize + i + 1] = true;
      _criticPolicyExperiment["Solver"]["Neural Network"]["Output Layer"]["Sigmoid Mask"][_problem->_actionVectorSize + i + 1] = false;
    }

    if (_policyDistribution == "Beta")
    {
      // Sigmoid in mask for Variance Coefficients in (0,1)
      _criticPolicyExperiment["Solver"]["Neural Network"]["Output Layer"]["Scale"][_problem->_actionVectorSize + i + 1] = sigma * 2.0f;
      _criticPolicyExperiment["Solver"]["Neural Network"]["Output Layer"]["Shift"][_problem->_actionVectorSize + i + 1] = 0.0f;
      _criticPolicyExperiment["Solver"]["Neural Network"]["Output Layer"]["Tanh Mask"][_problem->_actionVectorSize + i + 1] = false;
      _criticPolicyExperiment["Solver"]["Neural Network"]["Output Layer"]["Softplus Mask"][_problem->_actionVectorSize + i + 1] = false;
      _criticPolicyExperiment["Solver"]["Neural Network"]["Output Layer"]["Sigmoid Mask"][_problem->_actionVectorSize + i + 1] = true;
    }
  }

  // Running initialization to verify that the configuration is correct
  _criticPolicyExperiment.initialize();
  _criticPolicyProblem = dynamic_cast<problem::SupervisedLearning *>(_criticPolicyExperiment._problem);
  _criticPolicyLearner = dynamic_cast<solver::learner::DeepSupervisor *>(_criticPolicyExperiment._solver);

  // Init statistics
  _statisticsAverageActionSigmas.resize(_problem->_actionVectorSize);
}

void VRACER::trainPolicy()
{
  // Resetting statistics
  float cumulativeQStar = 0.0;
  float cumulativeQStarSquared = 0.0;

  float cumulativeTdError = 0.0;
  float cumulativeTdErrorSquared = 0.0;

  float cumulativePolicyError = 0.0;
  float cumulativePolicyErrorSquared = 0.0;
  size_t policyErrorCounter = 0;

  std::fill(_statisticsAverageActionSigmas.begin(), _statisticsAverageActionSigmas.end(), 0.0);

  /****************************************************************************
  * Training the critic/learner network with a mini-batch
  ***************************************************************************/

  // Creating a minibatch of starting experiences for the trajectories update
  auto miniBatchIndexes = generateMiniBatch(_miniBatchSize);

  // Fill Minibatch
#pragma omp parallel for schedule(dynamic, 1)
  for (size_t b = 0; b < _miniBatchSize; b++)
  {
    // Getting index of current experiment
    size_t expId = miniBatchIndexes[b];

    // Get state, action and policy for this experience
    auto expStateSequence = getStateTimeSequence(expId);
    auto expAction = _experienceReplay[expId].action;
    auto expPolicy = _experienceReplay[expId].metadata["Experience Policy"];

    // Gathering metadata
    float V = _experienceReplay[expId].stateValue;
    auto curPolicy = _experienceReplay[expId].metadata["Current Policy"];
    float expVtbc = _experienceReplay[expId].retraceValue;

    /******************************************************
    * Gradient calculation
    *******************************************************/

    // Storage for the update gradient
    std::vector<float> gradientLoss(1 + 2 * _problem->_actionVectorSize);

    // Keeping critic statistics
    cumulativeQStar += expVtbc;
    cumulativeQStarSquared += expVtbc * expVtbc;

    // Gradient of Value Function V(s) (eq. (9); *-1 because the optimizer is maximizing)
    gradientLoss[0] = -(V - expVtbc);

    cumulativeTdError -= gradientLoss[0];
    cumulativeTdErrorSquared += gradientLoss[0] * gradientLoss[0];

    // Compute policy gradient only if inside trust region (or offPolicy disabled)
    if (_experienceReplay[expId].isOnPolicy)
    {
      // Qret for terminal state is just reward
      float Qret = _experienceReplay[expId].reward;

      // Check whether experience is non-terminal
      bool isNormal = _experienceReplay[expId].termination == e_nonTerminal;

      // In this case add Vtbc
      if (isNormal == true)
      {
        float nextExpVtbc = _experienceReplay[expId + 1].retraceValue;
        Qret += _discountFactor * nextExpVtbc;
      }

      // Check whether experience is truncated
      bool isTrucated = _experienceReplay[expId].termination == e_truncated;

      // For truncated state add value
      if (isTrucated == true)
      {
        float nextExpVtbc = _experienceReplay[expId].truncatedStateValue;
        Qret += _discountFactor * nextExpVtbc;
      }

      // Compute Off-Policy Objective (eq. 5)
      float lossOffPolicy = -(Qret - V);

      // Compute statistics
      cumulativePolicyError += lossOffPolicy;
      cumulativePolicyErrorSquared += lossOffPolicy * lossOffPolicy;
      policyErrorCounter++;

      // Compute Policy Gradient wrt Params
      auto polGrad = calculateImportanceWeightGradient(expAction, curPolicy, expPolicy);

      // Set Gradient of Loss wrt Params
      for (size_t i = 0; i < 2 * _problem->_actionVectorSize; i++)
        gradientLoss[1 + i] = -_experienceReplayOffPolicyREFERBeta * lossOffPolicy * polGrad[i];
    }

    // Compute derivative of kullback-leibler divergence wrt current distribution params
    auto klGrad = calculateKLDivergenceGradient(expPolicy, curPolicy);

    // Step towards old policy (gradient pointing to larger difference between old and current policy)
    for (size_t i = 0; i < 2 * _problem->_actionVectorSize; i++)
      gradientLoss[1 + i] -= (1.0f - _experienceReplayOffPolicyREFERBeta) * klGrad[i];

    // Compute statistics
    for (size_t i = 0; i < _problem->_actionVectorSize; i++) _statisticsAverageActionSigmas[i] += curPolicy["Action Sigmas"][i].get<float>();

    // Set status as learning problem input
    _criticPolicyProblem->_inputData[b] = expStateSequence;

    // Set Gradient of Loss as Solution
    _criticPolicyProblem->_solutionData[b] = gradientLoss;
  }

  /******************************************************************
   * Computing Statistics
   *****************************************************************/

  // Compute average and std of Value target
  _statisticsAverageQStar = cumulativeQStar / (float)_miniBatchSize;
  _statisticsStdevQStar = sqrt(cumulativeQStarSquared / (float)_miniBatchSize - _statisticsAverageQStar * _statisticsAverageQStar);

  // Compute average and std of Value Loss
  _statisticsAverageTDError = cumulativeTdError / (float)_miniBatchSize;
  _statisticsStdevTDError = std::sqrt(cumulativeTdErrorSquared / (float)_miniBatchSize - _statisticsAverageTDError * _statisticsAverageTDError);

  // Compute average and std of Off-Policy Gradient Objective
  _statisticsAveragePolicyError = cumulativePolicyError / (float)policyErrorCounter;
  _statisticsStdevPolicyError = std::sqrt(cumulativePolicyErrorSquared / (float)policyErrorCounter - _statisticsAveragePolicyError * _statisticsAveragePolicyError);

  // Compute average action stadard deviation
  for (size_t j = 0; j < _problem->_actionVectorSize; j++) _statisticsAverageActionSigmas[j] /= (float)_miniBatchSize;

  // Updating learning rate for critic/policy learner guided by REFER
  _criticPolicyLearner->_learningRate = _currentLearningRate;

  // Running one generation of the optimization method with the given mini-batch
  _criticPolicyLearner->runGeneration();
}

float VRACER::stateValueFunction(const std::vector<std::vector<float>> &state)
{
  // Calculating V(s_i)
  float V = _criticPolicyLearner->getEvaluation({state})[0][0];
  return V;
}

knlohmann::json VRACER::runPolicy(const std::vector<std::vector<float>> &state)
{
  // Storage for policy
  knlohmann::json policy;

  // Forward the neural network for this state
  auto evaluation = _criticPolicyLearner->getEvaluation({state})[0];

  // Getting state value
  float V = evaluation[0];
  policy["State Value"] = V;

  // Getting distribution parameters
  if (_policyDistribution == "Normal")
  {
    std::vector<float> actionMeans(_problem->_actionVectorSize);
    std::vector<float> actionSigmas(_problem->_actionVectorSize);

    for (size_t i = 0; i < _problem->_actionVectorSize; i++)
    {
      actionMeans[i] = evaluation[i + 1];
      actionSigmas[i] = evaluation[_problem->_actionVectorSize + i + 1];
    }

    policy["Action Means"] = actionMeans;
    policy["Action Sigmas"] = actionSigmas;
  }

  if (_policyDistribution == "Beta")
  {
    std::vector<float> actionAlpha(_problem->_actionVectorSize);
    std::vector<float> actionBeta(_problem->_actionVectorSize);

    for (size_t i = 0; i < _problem->_actionVectorSize; i++)
    {
      actionAlpha[i] = evaluation[i + 1];
      actionBeta[i] = evaluation[_problem->_actionVectorSize + i + 1];
    }

    policy["Action Alpha"] = actionAlpha;
    policy["Action Beta"] = actionBeta;
  }

  return policy;
}

knlohmann::json VRACER::getAgentPolicy()
{
  knlohmann::json hyperparameters;
  hyperparameters["Policy"] = _criticPolicyLearner->getInferenceHyperparameters();
  return hyperparameters;
}

void VRACER::setAgentPolicy(const knlohmann::json &hyperparameters)
{
  _criticPolicyLearner->setInferenceHyperparameters(hyperparameters["Policy"].get<std::vector<float>>());
}

void VRACER::setTrainingState(const knlohmann::json &state)
{
  _criticPolicyLearner->setTrainingHyperparameters(state["Critic/Policy"]["Training"]);
  _criticPolicyLearner->setInferenceHyperparameters(state["Critic/Policy"]["Inference"]);
}

knlohmann::json VRACER::getTrainingState()
{
  knlohmann::json state;
  state["Critic/Policy"]["Training"] = _criticPolicyLearner->getTrainingHyperparameters();
  state["Critic/Policy"]["Inference"] = _criticPolicyLearner->getInferenceHyperparameters();
  return state;
}

void VRACER::printAgentInformation()
{
  _k->_logger->logInfo("Normal", "Critic Information:\n");
  _k->_logger->logInfo("Normal", " + Average (Std) Vtbc in Mini-Batch:                  %f (%f)\n", _statisticsAverageQStar, _statisticsStdevQStar);
  _k->_logger->logInfo("Normal", " + Average (Std) TD-Error in Mini-Batch:              %f (%f)\n", _statisticsAverageTDError, _statisticsStdevTDError);
  _k->_logger->logInfo("Normal", " + Average (Std) Off-Policy Objective in Mini-Batch:  %f (%f)\n", _statisticsAveragePolicyError, _statisticsStdevPolicyError);
  _k->_logger->logInfo("Normal", " + Average Action Noise (Sigma) in Mini-Batch: \n");
  for (size_t i = 0; i < _problem->_actionVectorSize; ++i) _k->_logger->logInfo("Normal", " +  [ %f ]\n", _statisticsAverageActionSigmas[i]);

  _k->_logger->logInfo("Normal", "Neural Network Information:\n");
  _criticPolicyExperiment._logger->_verbosityLevel = _k->_logger->_verbosityLevel;
  _criticPolicyExperiment._solver->printGenerationAfter();
  _criticPolicyExperiment._logger->setVerbosityLevel("Silent");
}

} // namespace continuous
} // namespace agent
} // namespace solver
} // namespace korali
