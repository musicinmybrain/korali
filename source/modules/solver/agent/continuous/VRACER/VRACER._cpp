#include "engine.hpp"
#include "modules/solver/agent/continuous/VRACER/VRACER.hpp"
#include "sample/sample.hpp"

namespace korali
{
namespace solver
{
namespace agent
{
namespace continuous
{
void VRACER::initializeAgent()
{
  // Initializing common discrete agent configuration
  Continuous::initializeAgent();

  /*********************************************************************
  * Initializing Normal Distributions for the Policy
  *********************************************************************/

  for (size_t i = 0; i < _problem->_actionVectorSize; i++)
  {
    knlohmann::json js;
    js["Type"] = "Univariate/Normal";
    js["Mean"] = 0.0;
    js["Standard Deviation"] = 1.0;

    auto d = dynamic_cast<distribution::univariate::Normal *>(getModule(js, _k));

    _policyDistributions.push_back(d);
  }

  /*********************************************************************
 * Initializing Neural Network
 *********************************************************************/

  _criticPolicyExperiment["Problem"]["Type"] = "Supervised Learning";
  _criticPolicyExperiment["Solver"]["Type"] = "Learner/DeepSupervisor";
  _criticPolicyExperiment["Solver"]["Optimizer"] = _criticOptimizer;
  _criticPolicyExperiment["Solver"]["Learning Rate"] = _criticLearningRate;
  _criticPolicyExperiment["Solver"]["Loss Function"] = "Direct Gradient";
  _criticPolicyExperiment["Solver"]["Steps Per Generation"] = 1;
  _criticPolicyExperiment["Solver"]["Neural Network"] = _criticNeuralNetwork;

  // Initializing experiment with an initial zero set
  size_t dimAction = _problem->_actionVectorSize;
  for (size_t i = 0; i < _criticMiniBatchSize; i++)
  {
    for (size_t j = 0; j < _problem->_stateVectorSize; j++)
      _criticPolicyExperiment["Problem"]["Inputs"][i][j] = 0.0;
    
    // V(s), mean(s) and Sigma(s)
    _criticPolicyExperiment["Problem"]["Solution"][i][0] = 0.0; // V
    for( size_t j = 0; j < dimAction; j++ )
    {
      _criticPolicyExperiment["Problem"]["Solution"][i][1 + j] = 0.0; // Mean(i)
      _criticPolicyExperiment["Problem"]["Solution"][i][dimAction + 1 + j] = 0.0; // Sigma(i)
    }
  }

  // No output mask for value
  _criticPolicyExperiment["Solver"]["Neural Network"]["Output"]["Scale"][0] = 1.0f;
  _criticPolicyExperiment["Solver"]["Neural Network"]["Output"]["Shift"][0] = 0.0f;
  _criticPolicyExperiment["Solver"]["Neural Network"]["Output"]["Absolute Mask"][0] = false;
  _criticPolicyExperiment["Solver"]["Neural Network"]["Output"]["Tanh Mask"][0] = false;
  _criticPolicyExperiment["Solver"]["Neural Network"]["Output"]["Softplus Mask"][0] = false;
  for (size_t i = 0; i < dimAction; i++)
  {
   size_t varIdx = _problem->_actionVectorIndexes[i];
   auto lowerBound = _k->_variables[varIdx]->_lowerBound;
   auto upperBound = _k->_variables[varIdx]->_upperBound;
   float scale = (upperBound - lowerBound) * 0.5;
   float shift = (upperBound + lowerBound) * 0.5;
   // Tanh mask for Mean
   _criticPolicyExperiment["Solver"]["Neural Network"]["Output"]["Scale"][i+1] = scale;
   _criticPolicyExperiment["Solver"]["Neural Network"]["Output"]["Shift"][i+1] = shift;
   _criticPolicyExperiment["Solver"]["Neural Network"]["Output"]["Absolute Mask"][i+1] = false;
   _criticPolicyExperiment["Solver"]["Neural Network"]["Output"]["Tanh Mask"][i+1] = true;
   _criticPolicyExperiment["Solver"]["Neural Network"]["Output"]["Softplus Mask"][i+1] = false;
   // Softplus mask for Sigma
   _criticPolicyExperiment["Solver"]["Neural Network"]["Output"]["Scale"][dimAction+i+1] = 1.0;
   _criticPolicyExperiment["Solver"]["Neural Network"]["Output"]["Shift"][dimAction+i+1] = 0.0;
   _criticPolicyExperiment["Solver"]["Neural Network"]["Output"]["Absolute Mask"][dimAction+i+1] = false;
   _criticPolicyExperiment["Solver"]["Neural Network"]["Output"]["Tanh Mask"][dimAction+i+1] = false;
   _criticPolicyExperiment["Solver"]["Neural Network"]["Output"]["Softplus Mask"][dimAction+i+1] = true;
  }

  // Running initialization to verify that the configuration is correct
  korali::Engine engine;
  engine.initialize(_criticPolicyExperiment);

  // Getting learner and problem pointers
  _criticPolicyProblem = dynamic_cast<problem::SupervisedLearning *>(_criticPolicyExperiment._problem);
  _criticPolicyLearner = dynamic_cast<solver::learner::DeepSupervisor *>(_criticPolicyExperiment._solver);

  // Get initial learning rate
  _referInitialLearningRate = _criticPolicyLearner->_learningRate;
  _referBeta = 0.0f;
  _referCutoff = _referCutoffScale + 1.0f;
  _referOffPolicyFraction = 0.0f;

  /*********************************************************************
  * Loading/Setting Hyperparameters
  *********************************************************************/

  // Get the initial set of policy NN hyperparameters
  _hyperparameters["Policy"] = _criticPolicyLearner->getHyperparameters();
}

void VRACER::updateAgentPolicy(const knlohmann::json &hyperparameters)
{
  _criticPolicyLearner->setHyperparameters(hyperparameters["Policy"].get<std::vector<float>>());
}

void VRACER::trainAgent()
{
  // Resetting statistics
  _cumulativeQStar = 0.0;
  _cumulativeQStarSquared = 0.0;

  float cumulativeTdError = 0.0;
  float cumulativeTdErrorSquared = 0.0;

  float cumulativePolicyError = 0.0;
  float cumulativePolicyErrorSquared = 0.0;
  size_t policyErrorCounter = 0;

  /***************************************************************************
   * Adjusting REFER off-policiness and learning rate parameters
   **************************************************************************/

   // Update REFER parameters only after reaching this number of experiences in memory
  if (_experienceReplay.size() > _referStartSize)
  {
   // Updating cutoff
   _referCutoff = 1.0f+_referCutoffScale/(1.0f+_referAnnealingRate*(float)_optimizationStepCount);

   // Update learning rate
   _criticPolicyLearner->_learningRate = _referInitialLearningRate/(1.0f+_referAnnealingRate*_optimizationStepCount);

   // Updating beta parameter
   if(_referOffPolicyFraction > _referTargetOffPolicyFraction)
    _referBeta=(1.0f-_criticPolicyLearner->_learningRate)*_referBeta;
   else
    _referBeta=(1.0f-_criticPolicyLearner->_learningRate)*_referBeta + _criticPolicyLearner->_learningRate;
  }

 /****************************************************************************
  * Training the critic/learner network with a mini-batch
  ***************************************************************************/

  // Creating a minibatch of starting experiences for the trajectories update
  auto miniBatchIndexes = generateMiniBatch(_criticMiniBatchSize);

  // Fill Minibatch
  for(size_t step = 0; step < _criticMiniBatchSize; step++)
  {
    // Getting index of current experiment
    size_t curId = miniBatchIndexes[step];

    // Get state, action, mean, Sigma and importance weight for this experience
    auto expState = _experienceReplay[curId].state;
    auto expAction = _experienceReplay[curId].action;
    auto expMean = _experienceReplay[curId].metadata["Action Means"].get<std::vector<float>>();
    auto expSigma = _experienceReplay[curId].metadata["Action Sigmas"].get<std::vector<float>>();

    // Forward the neural network for this state to get current means and sigmas and Value
    forwardPolicy(expState);
    auto curMean = _actionMeans;
    auto curSigma = _actionSigmas;
    auto V = _stateValue;

    // Compute inverse variance for current policy
    std::vector<float> curInvVariance(_problem->_actionVectorSize);
    for( size_t i = 0; i<_problem->_actionVectorSize; i++ )
      curInvVariance[i] = 1.0f/(_actionSigmas[i]*_actionSigmas[i]);

    // Update State Value in Metadata
    _experienceReplay[curId].metadata["State Value"] = V;

    // Compute importance weight
    float importanceWeight = calculateImportanceWeight(expAction, curMean, curSigma, expMean, expSigma);

    // Update Importance Weight in Metadata
    _experienceReplay[curId].metadata["Importance Weight"] = importanceWeight;

    // Update off-policy fraction
    size_t expCount = _experienceReplay.size();
    size_t offPolicyCount = 0;
    for( size_t expId = 0; expId<expCount; expId++ )
    {
      float expImportanceWeight = _experienceReplay[expId].metadata["Importance Weight"];
      // std::cout << "expImportanceWeight = " << expImportanceWeight << "\n";
      if( expImportanceWeight > _referCutoff || expImportanceWeight < (1.0f/_referCutoff) )
        offPolicyCount++;

    }
    // std::cout << "offPolicyCount = " << offPolicyCount << "\n";
    // std::cout << "expCount = " << expCount << "\n";
    // if( '.' == getchar())
    //   abort();
    _referOffPolicyFraction = (float)offPolicyCount / (float)expCount;


    /******************************************************
    * Gradient calculation
    *******************************************************/

    // Storage for the update gradient
    std::vector<float> gradientLoss(2*_problem->_actionVectorSize+1, 0.0f);

    // Compute Vtbc
    float expVtbc = computeVtbc( curId );

    // update critic statistics
    _cumulativeQStar += expVtbc;
    _cumulativeQStarSquared += expVtbc*expVtbc;

    // Gradient of Value Function V(s) (eq. (9); *-1 for minimisation)
    gradientLoss[0] = -( V - expVtbc );

    cumulativeTdError -= ( V - expVtbc );
    cumulativeTdErrorSquared += gradientLoss[0]*gradientLoss[0];

    // std::cout << "dL_V=" << gradientLoss[0] << "\n";
    // getchar();

    // Compute policy gradient only if inside trust region
    if ( importanceWeight > _referCutoff || importanceWeight < (1.0f/_referCutoff) )
    {
      // Qret for terminal state is just reward
      float Qret = _experienceReplay[curId].reward;

      // Check whether experience is non-terminal
      bool isNormal = _experienceReplay[curId].termination == e_nonTerminal;

      // In this case add Vtbc
      if(isNormal == true )
      {
        float nextExpVtbc = computeVtbc(curId+1);
        Qret += _criticDiscountFactor*nextExpVtbc;
      }

      // Check whether experience is truncated
      bool isTrucated = _experienceReplay[curId].termination == e_truncated;

      // For truncated state add value
      if(isTrucated == true)
      {
        // get truncated state
        auto truncatedState = _experienceReplay[curId].metadata["Terminal State"].get<std::vector<float>>();
        // for truncated state, Vtbc == V - forward network
        forwardPolicy(truncatedState);
        float nextExpVtbc = _stateValue;
        // add value to Qret
        Qret += _criticDiscountFactor*nextExpVtbc;
      }

      // Compute Off-Policy Objective (eq. 5)
      float lossOffPolicyGradient = importanceWeight * ( Qret - V );

      cumulativePolicyError += lossOffPolicyGradient;
      cumulativePolicyErrorSquared += lossOffPolicyGradient*lossOffPolicyGradient;
      policyErrorCounter++;
      // std::cout << "dL_p=" << valueDiff << "\n";
      // getchar();

      // Compute Off-Policy Gradient
      for( size_t i = 0; i<_problem->_actionVectorSize; i++ )
      {
        // Deviation from expAction and current Mean
        float actionDiff = ( expAction[i] - curMean[i] );

        // Gradient with respect to Mean
        float gradMean = actionDiff * curInvVariance[i];

        // Set gradient for Mean (no -1 because we want to maximize Off-Policy Objective)
        gradientLoss[1+i] = _referBeta * lossOffPolicyGradient * gradMean;
        // std::cout << "without KL: dL_p/dmu=" << gradientLoss[1+i] << "\n";

        // Gradient with respect to Sigma
        float gradSigma = (actionDiff * actionDiff) * (curInvVariance[i] / curSigma[i]) - 1.0f / curSigma[i];

        // Set gradient for Sigma (no -1 because we want to maximize Off-Policy Objective)
        gradientLoss[_problem->_actionVectorSize+1+i] = _referBeta*lossOffPolicyGradient * gradSigma; 
        // std::cout << "dL_p/dsigma=" << gradientLoss[_problem->_actionVectorSize+1+i] << "\n";
      }
    }

    // Compute inverse variance for experience
    std::vector<float> expInvVariance(_problem->_actionVectorSize);
    std::vector<float> expVariance(_problem->_actionVectorSize);
    for( size_t i = 0; i<_problem->_actionVectorSize; i++ )
    {
      expVariance[i] = expSigma[i]*expSigma[i];
      expInvVariance[i] = 1.0f/expVariance[i];
    }

    // Compute derivative of Kullback-Leibler Divergence
    for( size_t i = 0; i<_problem->_actionVectorSize; i++ )
    {
      float actionDiff = ( curMean[i] - expMean[i] );

      //// KL-Gradient with respect to Mean ///

      // KL-Gradient with respect to Mean
      float gradMean = actionDiff * curInvVariance[i];

      // Set KL-gradient for Mean (no -1 because we want to maximize Off-Policy Objective)
      gradientLoss[1+i] -= ( 1.0f - _referBeta ) * gradMean;

      /// KL-Gradient with respect to Sigma ///

      // Contribution to Sigma from Trace
      float gradTr = - (curInvVariance[i] / curSigma[i] ) * expVariance[i];

      // Contribution to Sigma from Quadratic form
      float gradQuad = - (actionDiff * actionDiff) * (curInvVariance[i] / curSigma[i]);

      // Contribution to Sigma from Determinant
      float gradDet = 1.0f / curSigma[i];

      // KL-Gradient with respect to Mean
      float gradSigma = gradTr + gradQuad + gradDet;

      // Set KL-gradient for Sigma (no -1 because we want to maximize Off-Policy Objective)
      gradientLoss[_problem->_actionVectorSize+1+i] -= ( 1.0f - _referBeta ) * gradSigma;
      // std::cout << "with KL part 1: dL_p/dsigma=" << gradientLoss[_problem->_actionVectorSize+1+i] << "\n";
    }

    // Set status as learning problem input
    _criticPolicyProblem->_inputs[step] = expState;

    // Set Gradient of Loss as Solution
    _criticPolicyProblem->_solution[step] = gradientLoss;
  }

  // Compute average and std of Value target
  _averageQStar = _cumulativeQStar / (float)_criticMiniBatchSize;
  _stdevQStar = sqrt(_cumulativeQStarSquared / (float)_criticMiniBatchSize - _averageQStar * _averageQStar);
  // Compute average and std of Value Loss
  _averageTDError = cumulativeTdError / (float)_criticMiniBatchSize;
  _stdevTDError = std::sqrt(cumulativeTdErrorSquared / (float)_criticMiniBatchSize - _averageTDError * _averageTDError);
  // Compute average and std of Off-Policy Gradient Objective
  _averagePolicyError = cumulativePolicyError / (float)policyErrorCounter;
  _stdevPolicyError = std::sqrt(cumulativePolicyErrorSquared / (float)policyErrorCounter - _averagePolicyError * _averagePolicyError); 

  // Running one generation of the optimization method with the given mini-batch
  _criticPolicyLearner->initialize();
  _criticPolicyLearner->runGeneration();
  _criticPolicyLearner->finalize();

  /****************************************************************************
  * If batch normalization is being used, we need to adjust mean and variances
  * by sampling a few more mini-batches after the optimization steps
  ******************************************************************************/

  normalizeStateNeuralNetwork(_criticPolicyLearner->_trainingNeuralNetwork, _criticMiniBatchSize, _criticNormalizationSteps);

  // Storing average policy hyperparameters
  _hyperparameters["Policy"] = _criticPolicyLearner->getHyperparameters();
}

float VRACER::computeVtbc(size_t expId)
{
  // Finding last experience in the episode that corresponds to expId
  ssize_t startId = expId;
  ssize_t endId = startId;
  while (_experienceReplay[endId].termination == e_nonTerminal) endId++;

  // get importance weight
  auto importanceWeight = _experienceReplay[endId].metadata["Importance Weight"].get<float>();

  // truncate importance weight
  float truncatedImportanceWeight = std::min(1.0f, importanceWeight);

  // Initializing vTbc to weighted reward of the last
  float vTbc = truncatedImportanceWeight * _experienceReplay[endId].reward;

  // If the episode was truncated, then add also the weighted state value function
  if (_experienceReplay[endId].termination == e_truncated)
  {
   auto curState = _experienceReplay[endId].state;
   float curV = _experienceReplay[endId].metadata["State Value"].get<float>();
   vTbc += (1 - truncatedImportanceWeight) * curV;
  }

  // Now iterating backwards to calculate the rest of vTbc
  for (ssize_t curId = endId-1; curId >= startId; curId--)
  {
    // Getting current reward
    float curReward = _experienceReplay[curId].reward;

    // Get state value function
    float curV = _experienceReplay[curId].metadata["State Value"].get<float>();

    // get importance weight
    auto importanceWeight = _experienceReplay[curId].metadata["Importance Weight"].get<float>();

    // truncate importance weight
    float truncatedImportanceWeight = std::min(1.0f, importanceWeight);

    // Calculating vTbc
    vTbc = curV +  truncatedImportanceWeight * (curReward + _criticDiscountFactor * vTbc - curV);
  }

  // Returning vTbc
  return vTbc;
}

void VRACER::forwardPolicy(const std::vector<float> &state)
{
  // Forward the neural network for this state
  std::vector<float> evaluation = _criticPolicyLearner->getEvaluation(state);
  _stateValue = evaluation[0];
  size_t dimAction = _problem->_actionVectorSize;
  for( size_t i = 0; i<dimAction; i++ )
  {
    _actionMeans[i] = evaluation[1+i];
    _actionSigmas[i] = evaluation[dimAction+1+i];
  }
}

void VRACER::getAction(korali::Sample &sample)
{
  // Here the neural network is forwarded, the action selected and mean, standard deviation stored
  Continuous::getAction(sample);
  // For VRACER also store state-value and importance weight
  sample["Metadata"]["State Value"] = _stateValue;
  sample["Metadata"]["Importance Weight"] = 1.0f;
}

void VRACER::printAgentInformation()
{
  _k->_logger->logInfo("Normal", "Critic Information:\n");
  _k->_logger->logInfo("Normal", " + Average (Std) Vtbc in Mini-Batch:  %f (%f)\n", _averageQStar, _stdevQStar);
  _k->_logger->logInfo("Normal", " + Average (Std) TD-Error in Mini-Batch:  %f (%f)\n", _averageTDError, _stdevTDError);
  _k->_logger->logInfo("Normal", " + Average (Std) Off-Policy Objective in Mini-Batch:  %f (%f)\n", _averagePolicyError, _stdevPolicyError);

  _k->_logger->logInfo("Normal", "Neural Network Information:\n");
  _criticPolicyExperiment._logger->_verbosityLevel = _k->_logger->_verbosityLevel;
  _criticPolicyExperiment._solver->printGenerationAfter();
  _criticPolicyExperiment._logger->setVerbosityLevel("Silent");

  _k->_logger->logInfo("Normal", "REF-ER Information\n");
  _k->_logger->logInfo("Normal", " + Off-Policy Fraction: %.6f (Goal: %.6f)\n", _referOffPolicyFraction, _referTargetOffPolicyFraction);
  _k->_logger->logInfo("Normal", " + Policy Learning Rate: %.6f\n", _criticPolicyLearner->_learningRate);
  _k->_logger->logInfo("Normal", " + Beta: %.6f\n", _referBeta);
  _k->_logger->logInfo("Normal", " + Cut-off: %.6f\n", _referCutoff);
}

} // namespace continuous
} // namespace agent
} // namespace solver
} // namespace korali
