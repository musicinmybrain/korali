#include "engine.hpp"
#include "modules/solver/agent/continuous/VRACER/VRACER.hpp"
#include "sample/sample.hpp"

namespace korali
{
namespace solver
{
namespace agent
{
namespace continuous
{
void VRACER::initializeAgent()
{
  // Initializing common discrete agent configuration
  Continuous::initializeAgent();

  /*********************************************************************
  * Initializing Normal Distributions for the Policy
  *********************************************************************/

  for (size_t i = 0; i < _problem->_actionVectorSize; i++)
  {
    knlohmann::json js;
    js["Type"] = "Univariate/Normal";
    js["Mean"] = 0.0;
    js["Standard Deviation"] = 1.0;

    auto d = dynamic_cast<distribution::univariate::Normal *>(getModule(js, _k));

    _policyDistributions.push_back(d);
  }

  /*********************************************************************
 * Initializing Neural Network
 *********************************************************************/

  _criticPolicyExperiment["Problem"]["Type"] = "Supervised Learning";

  _criticPolicyExperiment["Solver"]["Type"] = "Learner/DeepSupervisor";
  _criticPolicyExperiment["Solver"]["Optimizer"] = _criticOptimizer;
  _criticPolicyExperiment["Solver"]["Learning Rate"] = _criticLearningRate;
  _criticPolicyExperiment["Solver"]["Loss Function"] = "Direct Gradient";
  _criticPolicyExperiment["Solver"]["Steps Per Generation"] = 1;
  _criticPolicyExperiment["Solver"]["Neural Network"] = _criticNeuralNetwork;

  // Initializing experiment with an initial zero set
  size_t dimAction = _problem->_actionVectorSize;
  for (size_t i = 0; i < _criticMiniBatchSize; i++)
  {
    for (size_t j = 0; j < _problem->_stateVectorSize; j++)
      _criticPolicyExperiment["Problem"]["Inputs"][i][j] = 0.0;
    
    // V(s), mean(s) and Sigma(s)
    _criticPolicyExperiment["Problem"]["Solution"][i][0] = 0.0; // V
    for( size_t j = 0; j < dimAction; j++ )
    {
      _criticPolicyExperiment["Problem"]["Solution"][i][1 + j] = 0.0; // Mean(i)
      _criticPolicyExperiment["Problem"]["Solution"][i][dimAction + 1 + j] = 0.0; // Sigma(i)
    }
  }

  // Assigning absolute value mask for the sigma outputs
  _criticPolicyExperiment["Solver"]["Neural Network"]["Output"]["Absolute Mask"][0] = false; // V is not masked
  for(size_t i = 0; i < dimAction; i++)
  {
   _criticPolicyExperiment["Solver"]["Neural Network"]["Output"]["Absolute Mask"][1 + i] = false; // Means are not masked
   _criticPolicyExperiment["Solver"]["Neural Network"]["Output"]["Absolute Mask"][dimAction + 1 + i] = true; // Sigmas are masked
  }

  // Assigning epsilon shift to sigmas to prevent them to become zero
  _criticPolicyExperiment["Solver"]["Neural Network"]["Output"]["Shift"][0] = 0.0f; // V requires no shift
  for(size_t i = 0; i < dimAction; i++)
  {
   _criticPolicyExperiment["Solver"]["Neural Network"]["Output"]["Shift"][1 + i] = 0.0f; // Means require no shift
   _criticPolicyExperiment["Solver"]["Neural Network"]["Output"]["Shift"][dimAction + 1 + i] = 1e-7f; // Sigmas require epsilon shift
  }

  // Running initialization to verify that the configuration is correct
  korali::Engine engine;
  engine.initialize(_criticPolicyExperiment);

  // Getting learner and problem pointers
  _criticPolicyProblem = dynamic_cast<problem::SupervisedLearning *>(_criticPolicyExperiment._problem);
  _criticPolicyLearner = dynamic_cast<solver::learner::DeepSupervisor *>(_criticPolicyExperiment._solver);

  // Get initial learning rate
  _initialLearningRate = _criticPolicyLearner->_learningRate;

  /*********************************************************************
  * Loading/Setting Hyperparameters
  *********************************************************************/

  // Get the initial set of policy NN hyperparameters
  _hyperparameters["Policy"] = _criticPolicyLearner->getHyperparameters();
}

void VRACER::updateAgentPolicy(const knlohmann::json &hyperparameters)
{
  _criticPolicyLearner->setHyperparameters(hyperparameters["Policy"].get<std::vector<float>>());
}

void VRACER::trainAgent()
{
  // Resetting critic statistics
  _cumulativeQStar = 0;

  /****************************************************************************
   * Adjusting VRACER off-policiness and learning rate parameters
   ***************************************************************************/

  // Updating cutoff
  _cutoff = 1.0f+_cutoffScale/(1.0f+_annealingRate*(float)_optimizationStepCount);

  // Count the number of off-policy samples in the entire replay memory
  size_t offPolicyCount = 0;

  size_t expCount = _experienceReplay.size();
  for(size_t expId = 0; expId < expCount; expId++)
  {
   float expImportanceWeight = 0.0f;

   if (_experienceReplay[expId].cache.contains("Importance Weight"))
   {
    expImportanceWeight = _experienceReplay[expId].cache.get("Importance Weight");
   }
   else
   {
    // Getting state and action from the selected experience
    auto expState = _experienceReplay[expId].state;
    auto expAction = _experienceReplay[expId].action;
    auto expMean = _experienceReplay[expId].metadata["Action Means"].get<std::vector<float>>();
    auto expSigma = _experienceReplay[expId].metadata["Action Sigmas"].get<std::vector<float>>();

    // Forward the neural network for this state to get current means and sigmas
    forwardPolicy(expState);
    auto curMean = _actionMeans;
    auto curSigma = _actionSigmas;

    // Now calculating importance weight for the experience
    expImportanceWeight = calculateImportanceWeight(expAction, curMean, curSigma, expMean, expSigma);

    // Setting the recalculated value to cache
    _experienceReplay[expId].cache.set("Importance Weight", expImportanceWeight);
   }

    // Counting the number of off-policy experiences
    if (expImportanceWeight < _cutoff && expImportanceWeight > (1.0f/_cutoff) ) offPolicyCount++;
  }

  // Calculating off-policy fraction
  float offPolicyFraction = (float)offPolicyCount / (float)expCount;

  // Update learning rate
  _criticPolicyLearner->_learningRate = _initialLearningRate/(1.0f+_annealingRate*_optimizationStepCount);

  // Updating beta parameter
  if( offPolicyFraction > _targetOffPolicyFraction)
    _beta=(1.0f-_criticPolicyLearner->_learningRate)*_beta;
  else
    _beta=(1.0f-_criticPolicyLearner->_learningRate)*_beta + _criticPolicyLearner->_learningRate;

 /****************************************************************************
  * Training the critic/learner network with a mini-batch
  ***************************************************************************/

  // Creating a minibatch of starting experiences for the trajectories update
  auto miniBatchIndexes = generateMiniBatch(_criticMiniBatchSize);

  // Fill Minibatch
  for(size_t step = 0; step < _criticMiniBatchSize; step++)
  {
    // Getting index of current experiment
    size_t curId = miniBatchIndexes[step];

    // Getting Vtbc from retrace function
    float expVtbc = retraceFunction(curId);

    // Get state, action,  mean and Sigma for this experience
    auto expState = _experienceReplay[curId].state;
    auto expAction = _experienceReplay[curId].action;
    auto expMean = _experienceReplay[curId].metadata["Action Means"].get<std::vector<float>>();
    auto expSigma = _experienceReplay[curId].metadata["Action Sigmas"].get<std::vector<float>>();

    // Make sure sigma!=0 and take absolute value; compute inverse variance
    std::vector<float> expInvVariance(_problem->_actionVectorSize);
    for( size_t i = 0; i<_problem->_actionVectorSize; i++ )
      expInvVariance[i] = 1.0f/(expSigma[i]*expSigma[i]);

    // Set action probability distributions to follow mean/sigma for old policy
    // and compute probability of action under current policy
    float pExpActionOldPolicy = 1.0;
    for (size_t i = 0; i < _problem->_actionVectorSize; i++)
    {
      _policyDistributions[i]->_mean = expMean[i];
      _policyDistributions[i]->_standardDeviation = expSigma[i];
      _policyDistributions[i]->updateDistribution();
      pExpActionOldPolicy *= _policyDistributions[i]->getDensity(expAction[i]);
    }

    // Forward the neural network for this state to get current means and sigmas and Value
    forwardPolicy(expState);
    auto curMean = _actionMeans;
    auto curSigma = _actionSigmas;
    auto V = _stateValue;

    // Separate V(s), mean(s), Sigma(s) and compute variance for current policy
    std::vector<float> curInvVariance(_problem->_actionVectorSize);
    for( size_t i = 0; i<_problem->_actionVectorSize; i++ )
      curInvVariance[i] = 1.0f/(_actionSigmas[i]*_actionSigmas[i]);

    // Compute importance weight
    float importanceWeight = calculateImportanceWeight(expAction, curMean, curSigma, expMean, expSigma);

    /******************************************************
    * Gradient calculation
    *******************************************************/

    // Storage for the update gradient
    std::vector<float> gradientLoss(2*_problem->_actionVectorSize+1, 0.0f);

    // Gradient of Value Function V(s)
    gradientLoss[0] = ( expVtbc - V );
    // std::cout << "dL_V=" << gradientLoss[0] << "\n";

    // Compute policy gradient only if inside trust region
    if(importanceWeight < _cutoff && importanceWeight > 1.0f/_cutoff)
    {
      // Compute -rho(Qret-V) = rho(V-Qret)
      float Qret = _experienceReplay[curId].reward;

      bool isTerminal = _experienceReplay[curId].isTerminal;

      if(isTerminal == false)
      {
        float nextExpVtbc = retraceFunction(curId+1);
        Qret += _criticDiscountFactor*nextExpVtbc;
      }

      float valueDiff = importanceWeight * (V - Qret);
      // std::cout << "dL_p=" << valueDiff << "\n";

      // Compute gradient[rho(V-Qret)]
      for( size_t i = 0; i<_problem->_actionVectorSize; i++ )
      {
        // Deviation from expAction and current Mean
        float actionDiff = ( expAction[i] - curMean[i] );

        // Gradient with respect to Mean
        gradientLoss[1+i] =  valueDiff * actionDiff * curInvVariance[i];
        // std::cout << "without KL: dL_p/dmu=" << gradientLoss[1+i] << "\n";

        // Gradient with respect to Sigma
        gradientLoss[_problem->_actionVectorSize+1+i] = valueDiff * ( actionDiff * actionDiff * curInvVariance[i] - 1.0f / curSigma[i] ); 
        // std::cout << "dL_p/dsigma=" << gradientLoss[_problem->_actionVectorSize+1+i] << "\n";
      }
    }

    // Compute derivative of Kullback-Leibler Divergence
    for( size_t i = 0; i<_problem->_actionVectorSize; i++ )
    {
      // Gradient with respect to Mean
      gradientLoss[1+i] -= ( 1.0f - _beta ) * ( expMean[i] - curMean[i] ) * curInvVariance[i];

      //// Gradient with respect to Sigma
      // Contribution to Sigma from Trace
      float gradTr = -1.0f / expInvVariance[i] * curInvVariance[i] / curSigma[i];

      // Contribution to Sigma from Determinant
      float gradDet = 0.0f;
      for( size_t i = 0; i<_problem->_actionVectorSize; i++ )
        gradDet += curInvVariance[i];
      gradDet /= -curSigma[i];

      // Setting total contribution to Sigma
      gradientLoss[_problem->_actionVectorSize+1+i] -= ( 1.0f - _beta ) * (gradTr + gradDet );
      // std::cout << "with KL part 1: dL_p/dsigma=" << gradientLoss[_problem->_actionVectorSize+1+i] << "\n";
    }

    // Set status as learning problem input
    _criticPolicyProblem->_inputs[step] = expState;

    // Set Gradient of Loss as Solution
    _criticPolicyProblem->_solution[step] = gradientLoss;
  }

  // Running one generation of the optimization method with the given mini-batch
  _criticPolicyLearner->initialize();
  _criticPolicyLearner->runGeneration();
  _criticPolicyLearner->finalize();

  /****************************************************************************
  * If batch normalization is being used, we need to adjust mean and variances
  * by sampling a few more mini-batches after the optimization steps
  ******************************************************************************/

  normalizeStateNeuralNetwork(_criticPolicyLearner->_trainingNeuralNetwork, _criticMiniBatchSize, _criticNormalizationSteps);

  // Storing average policy hyperparameters
  _hyperparameters["Policy"] = _criticPolicyLearner->getHyperparameters();
}

float VRACER::stateValueFunction(const std::vector<float> &state)
{
  // Calculating V(s)
  float v = _criticPolicyLearner->getEvaluation(state)[0];

  return v;
}

float VRACER::retraceFunction(size_t expId)
{
  // Finding last experience in the episode that corresponds to expId
  ssize_t startId = expId;
  ssize_t endId = startId;
  while (_experienceReplay[endId].isTerminal == false) endId++;

  // vTbc for terminal experience is weighted reward
  float vTbc = 0.0;

  // Setting starting experience as the second to last
  ssize_t curId = endId;

  // Looking in the cache for saved retrace values of any of the required experiences
  for (ssize_t i = startId; i < endId; i++)
  {
    // If the difference in age is within the range, then it's a cache hit
    if (_experienceReplay[i+1].cache.contains("vTbc"))
    {
      vTbc = _experienceReplay[i+1].cache.get("vTbc");
      curId = i;
      break;
    }
  }

  // Now iterating backwards to calculate the rest of vTbc
  for (; curId >= startId; curId--)
  {
    // Getting current state, action and reward
    auto curReward = _experienceReplay[curId].reward;
    auto curAction = _experienceReplay[curId].action;
    auto curState = _experienceReplay[curId].state;

    // Storage for state value
    float stateValue = 0.0f;

    // Calculating state value if this is not a terminal state
    if (_experienceReplay[curId].isTerminal == false)
    {
     // Now getting state value from cache or (if not there) recalculating it.
     if (_experienceReplay[curId].cache.contains("State Value"))
     {
      stateValue = _experienceReplay[curId].cache.get("State Value");
     }
     else
     {
      forwardPolicy(curState);
      stateValue = _stateValue;
      _experienceReplay[curId].cache.set("State Value", stateValue);
     }
    }

    // Now calculating getting importance weight from cache (we know it's there because we refreshed them at the beginning)
    float importanceWeight = _experienceReplay[curId].cache.get("Importance Weight");

    // Now calculating truncated importance weight with 1.0 as truncation factor
    float truncatedImportanceWeight = std::min(1.0f, importanceWeight);

    // Re-calculating vTbc
    if (_experienceReplay[curId].isTerminal == true)
     vTbc = truncatedImportanceWeight * curReward;
    else
     vTbc = stateValue +  truncatedImportanceWeight*(curReward + _criticDiscountFactor * vTbc - stateValue);

    // Refreshing cache with the calculated value
    _experienceReplay[curId].cache.set("vTbc", vTbc);
  }

  // Returning vTbc
  return vTbc;
}

void VRACER::forwardPolicy(const std::vector<float> &state)
{
  // Forward the neural network for this state
  std::vector<float> evaluation = _criticPolicyLearner->getEvaluation(state);
  _stateValue = evaluation[0];
  size_t dimAction = _problem->_actionVectorSize;
  for( size_t i = 0; i<dimAction; i++ )
  {
    _actionMeans[i] = evaluation[1+i];
    _actionSigmas[i] = evaluation[dimAction+1+i];
  }
}

void VRACER::printAgentInformation()
{
  _k->_logger->logInfo("Normal", "Neural Network Information:\n");
  _criticPolicyExperiment._logger->_verbosityLevel = _k->_logger->_verbosityLevel;
  _criticPolicyExperiment._solver->printGenerationAfter();
  _criticPolicyExperiment._logger->setVerbosityLevel("Silent");
}

} // namespace continuous
} // namespace agent
} // namespace solver
} // namespace korali
