#include "engine.hpp"
#include "modules/solver/agent/continuous/VRACER/VRACER.hpp"
#include "sample/sample.hpp"

#include <gsl/gsl_sf_psi.h>


@startNamespace

void @className::initializeAgent()
{
  // Initializing common discrete agent configuration
  Continuous::initializeAgent();

  /*********************************************************************
 * Initializing Critic/Policy Experiment
 *********************************************************************/

  _criticPolicyExperiment["Problem"]["Type"] = "Supervised Learning";
  _criticPolicyExperiment["Problem"]["Max Timesteps"] = _timeSequenceLength;
  _criticPolicyExperiment["Problem"]["Training Batch Size"] = _miniBatchSize;
  _criticPolicyExperiment["Problem"]["Inference Batch Size"] = 1;
  _criticPolicyExperiment["Problem"]["Input"]["Size"] = _problem->_stateVectorSize;
  _criticPolicyExperiment["Problem"]["Solution"]["Size"] = 1 + 2 * _problem->_actionVectorSize;

  _criticPolicyExperiment["Solver"]["Type"] = "Learner/DeepSupervisor";
  _criticPolicyExperiment["Solver"]["Optimizer"] = _optimizer;
  _criticPolicyExperiment["Solver"]["Learning Rate"] = _learningRate;
  _criticPolicyExperiment["Solver"]["Loss Function"] = "Direct Gradient";
  _criticPolicyExperiment["Solver"]["Steps Per Generation"] = 1;
  _criticPolicyExperiment["Solver"]["Neural Network"]["Engine"] = _neuralNetworkEngine;
  _criticPolicyExperiment["Solver"]["Neural Network"]["Hidden Layers"] = _neuralNetworkHiddenLayers;
  _criticPolicyExperiment["Solver"]["Output Weights Scaling"] = 0.001;

  // Masks to normalize and rescaling output to fit the action's [lower, upper] bounds (and sigmas/P)
  _criticPolicyExperiment["Solver"]["Neural Network"]["Output Layer"]["Scale"][0] = 1.0f;
  _criticPolicyExperiment["Solver"]["Neural Network"]["Output Layer"]["Shift"][0] = 0.0f;
  _criticPolicyExperiment["Solver"]["Neural Network"]["Output Layer"]["Tanh Mask"][0] = false;
  _criticPolicyExperiment["Solver"]["Neural Network"]["Output Layer"]["Softplus Mask"][0] = false;
  _criticPolicyExperiment["Solver"]["Neural Network"]["Output Layer"]["Sigmoid Mask"][0] = false;

  // Normalizing and rescaling output to fit the action's [lower, upper] bounds
  for (size_t i = 0; i < _problem->_actionVectorSize; i++)
  {
    size_t varIdx = _problem->_actionVectorIndexes[i];
    auto lowerBound = _k->_variables[varIdx]->_lowerBound;
    auto upperBound = _k->_variables[varIdx]->_upperBound;
    float scale = (upperBound - lowerBound) * 0.5;
    float shift = (upperBound + lowerBound) * 0.5;
    float sigma = _k->_variables[varIdx]->_initialExplorationNoise;

    // Checking correct noise configuration
    if (sigma <= 0.0f) KORALI_LOG_ERROR("Provided initial noise (%f) for action variable %lu is not defined or negative.\n", sigma, varIdx);

    // Tanh mask for Mean
    _criticPolicyExperiment["Solver"]["Neural Network"]["Output Layer"]["Scale"][i + 1] = scale;
    _criticPolicyExperiment["Solver"]["Neural Network"]["Output Layer"]["Shift"][i + 1] = shift;
    _criticPolicyExperiment["Solver"]["Neural Network"]["Output Layer"]["Tanh Mask"][i + 1] = true;
    _criticPolicyExperiment["Solver"]["Neural Network"]["Output Layer"]["Softplus Mask"][i + 1] = false;
    _criticPolicyExperiment["Solver"]["Neural Network"]["Output Layer"]["Sigmoid Mask"][i + 1] = false;

    if (_policyDistribution == "Normal")
    {
      // Softplus mask for Sigma
      _criticPolicyExperiment["Solver"]["Neural Network"]["Output Layer"]["Scale"][_problem->_actionVectorSize + i + 1] = sigma * 2.0f;
      _criticPolicyExperiment["Solver"]["Neural Network"]["Output Layer"]["Shift"][_problem->_actionVectorSize + i + 1] = 0.0f;
      _criticPolicyExperiment["Solver"]["Neural Network"]["Output Layer"]["Tanh Mask"][_problem->_actionVectorSize + i + 1] = false;
      _criticPolicyExperiment["Solver"]["Neural Network"]["Output Layer"]["Softplus Mask"][_problem->_actionVectorSize + i + 1] = true;
      _criticPolicyExperiment["Solver"]["Neural Network"]["Output Layer"]["Sigmoid Mask"][_problem->_actionVectorSize + i + 1] = false;
    }

    if (_policyDistribution == "Beta")
    {
      // Sigmoid in mask for Variance Coefficients in (0,1)
      _criticPolicyExperiment["Solver"]["Neural Network"]["Output Layer"]["Scale"][_problem->_actionVectorSize + i + 1] = sigma * 2.0f;
      _criticPolicyExperiment["Solver"]["Neural Network"]["Output Layer"]["Shift"][_problem->_actionVectorSize + i + 1] = 0.0f;
      _criticPolicyExperiment["Solver"]["Neural Network"]["Output Layer"]["Tanh Mask"][_problem->_actionVectorSize + i + 1] = false;
      _criticPolicyExperiment["Solver"]["Neural Network"]["Output Layer"]["Softplus Mask"][_problem->_actionVectorSize + i + 1] = false;
      _criticPolicyExperiment["Solver"]["Neural Network"]["Output Layer"]["Sigmoid Mask"][_problem->_actionVectorSize + i + 1] = true;
    }
  }

  // Running initialization to verify that the configuration is correct
  _criticPolicyExperiment.initialize();
  _criticPolicyProblem = dynamic_cast<problem::SupervisedLearning *>(_criticPolicyExperiment._problem);
  _criticPolicyLearner = dynamic_cast<solver::learner::DeepSupervisor *>(_criticPolicyExperiment._solver);

  // Init statistics
  _statisticsAverageActionSigmas.resize(_problem->_actionVectorSize);
}

void @className::trainPolicy()
{
  // Resetting statistics
  float cumulativeQStar = 0.0;
  float cumulativeQStarSquared = 0.0;

  float cumulativeTdError = 0.0;
  float cumulativeTdErrorSquared = 0.0;

  float cumulativePolicyError = 0.0;
  float cumulativePolicyErrorSquared = 0.0;
  size_t policyErrorCounter = 0;

  std::fill(_statisticsAverageActionSigmas.begin(), _statisticsAverageActionSigmas.end(), 0.0);

  /****************************************************************************
  * Training the critic/learner network with a mini-batch
  ***************************************************************************/

  // Creating a minibatch of starting experiences for the trajectories update
  auto miniBatchIndexes = generateMiniBatch(_miniBatchSize);

  // Fill Minibatch
#pragma omp parallel for schedule(dynamic, 1)
  for (size_t b = 0; b < _miniBatchSize; b++)
  {
    // Getting index of current experiment
    size_t expId = miniBatchIndexes[b];

    // Get state, action, mean, Sigma for this experience
    auto expStateSequence = getStateTimeSequence(expId);
    auto expAction = _experienceReplay[expId].action;
    auto expMeans = _experienceReplay[expId].policy["Action Means"].get<std::vector<float>>();
    auto expSigmas = _experienceReplay[expId].policy["Action Sigmas"].get<std::vector<float>>();

    // Forward the neural network for this state to get current means and sigmas and Value
    auto policy = runPolicy(expStateSequence);
    float V = policy["State Value"].get<float>();
    auto curMeans = policy["Action Means"].get<std::vector<float>>();
    auto curSigmas = policy["Action Sigmas"].get<std::vector<float>>();

    // Compute importance weight
    float importanceWeight = calculateImportanceWeight(expAction, curMeans, curSigmas, expMeans, expSigmas);
    _experienceReplay[expId].policy["Importance Weight"] = importanceWeight;

    /******************************************************
    * Gradient calculation
    *******************************************************/

    // Storage for the update gradient
    std::vector<float> gradientLoss(1 + 2 * _problem->_actionVectorSize);

    // Get Vtbc before update
    float expVtbc = retraceFunction(expId);

    // Keeping critic statistics
    cumulativeQStar += expVtbc;
    cumulativeQStarSquared += expVtbc * expVtbc;

    // Gradient of Value Function V(s) (eq. (9); *-1 because the optimizer is maximizing)
    gradientLoss[0] = -(V - expVtbc);

    cumulativeTdError -= gradientLoss[0];
    cumulativeTdErrorSquared += gradientLoss[0] * gradientLoss[0];

    // Checking whether the experience is on policy (i.e., it is within the [1/cutoff, cutoff] region)
    bool isOnPolicy = (importanceWeight > (1.0f / _experienceReplayREFERCutoffScale)) && (importanceWeight < _experienceReplayREFERCutoffScale);

    // Compute policy gradient only if inside trust region (or REFER disabled)
    if (isOnPolicy || _experienceReplayREFEREnabled == false)
    {
      // Qret for terminal state is just reward
      float Qret = _experienceReplay[expId].reward;

      // Check whether experience is non-terminal
      bool isNormal = _experienceReplay[expId].termination == e_nonTerminal;

      // In this case add Vtbc
      if (isNormal == true)
      {
        float nextExpVtbc = retraceFunction(expId + 1);
        Qret += _discountFactor * nextExpVtbc;
      }

      // Check whether experience is truncated
      bool isTrucated = _experienceReplay[expId].termination == e_truncated;

      // For truncated state add value
      if (isTrucated == true)
      {
        // get truncated state
        auto truncatedState = getTruncatedStateTimeSequence(expId);

        // for truncated state, Vtbc == V - forward network
        float nextExpVtbc = stateValueFunction(truncatedState);

        // add value to Qret
        Qret += _discountFactor * nextExpVtbc;
      }

      // Compute Off-Policy Objective (eq. 5)
      float lossOffPolicy = -(Qret - V);

      // Compute statistics
      cumulativePolicyError += lossOffPolicy;
      cumulativePolicyErrorSquared += lossOffPolicy * lossOffPolicy;
      policyErrorCounter++;

      // Compute Policy Gradient wrt Params
      auto polGrad = calculateImportanceWeightGradient(expAction, curMeans, curSigmas, expMeans, expSigmas);

      // Set Gradient of Loss wrt Params
      for (size_t i = 0; i < 2 * _problem->_actionVectorSize; i++)
      {
        // '-' because the optimizer is maximizing
        gradientLoss[1 + i] = -_experienceReplayREFERCurrentBeta * lossOffPolicy * polGrad[i];
      }
    }

    if (_experienceReplayREFEREnabled)
    {
      // Compute derivative of kullback-leibler divergence wrt current distribution params
      auto klGrad = calculateKLDivergenceGradient(expMeans, expSigmas, curMeans, curSigmas);

      // Step towards old policy (gradient pointing to larger difference between old and current policy)
      for (size_t i = 0; i < 2 * _problem->_actionVectorSize; i++)
      {
        gradientLoss[1 + i] -= (1.0f - _experienceReplayREFERCurrentBeta) * klGrad[i];
      }
    }

    // Compute statistics
    for (size_t i = 0; i < _problem->_actionVectorSize; i++) _statisticsAverageActionSigmas[i] += curSigmas[i];

    // Set status as learning problem input
    _criticPolicyProblem->_inputData[b] = expStateSequence;

    // Set Gradient of Loss as Solution
    _criticPolicyProblem->_solutionData[b] = gradientLoss;
  }

  /******************************************************************
   * Computing Statistics
   *****************************************************************/

  // Compute average and std of Value target
  _statisticsAverageQStar = cumulativeQStar / (float)_miniBatchSize;
  _statisticsStdevQStar = sqrt(cumulativeQStarSquared / (float)_miniBatchSize - _statisticsAverageQStar * _statisticsAverageQStar);

  // Compute average and std of Value Loss
  _statisticsAverageTDError = cumulativeTdError / (float)_miniBatchSize;
  _statisticsStdevTDError = std::sqrt(cumulativeTdErrorSquared / (float)_miniBatchSize - _statisticsAverageTDError * _statisticsAverageTDError);

  // Compute average and std of Off-Policy Gradient Objective
  _statisticsAveragePolicyError = cumulativePolicyError / (float)policyErrorCounter;
  _statisticsStdevPolicyError = std::sqrt(cumulativePolicyErrorSquared / (float)policyErrorCounter - _statisticsAveragePolicyError * _statisticsAveragePolicyError);

  // Compute average action stadard deviation
  for (size_t j = 0; j < _problem->_actionVectorSize; j++) _statisticsAverageActionSigmas[j] /= (float)_miniBatchSize;

  // Updating learning rate for critic/policy learner guided by REFER
  _criticPolicyLearner->_learningRate = _experienceReplayREFERCurrentLearningRate;

  // Running one generation of the optimization method with the given mini-batch
  _criticPolicyLearner->runGeneration();
}

std::vector<float> @className::calculateImportanceWeightGradient(const std::vector<float> &action, const std::vector<float> &curParamsOne, const std::vector<float> &curParamsTwo, const std::vector<float> &oldParamsOne, const std::vector<float> &oldParamsTwo)
{
  std::vector<float> grad(2 * _problem->_actionVectorSize, 0.0);

  if (_policyDistribution == "Normal")
  {
    float logImportanceWeight = 0.0;

    // ParamsOne are the Means, ParamsTwo are the Sigmas
    for (size_t i = 0; i < _problem->_actionVectorSize; i++)
    {
      // Deviation from expAction and current Mean
      float curActionDiff = (action[i] - curParamsOne[i]);

      // Deviation from expAction and old Mean
      float oldActionDiff = (action[i] - oldParamsOne[i]);

      // Inverse Variances
      float curInvVar = 1. / (curParamsTwo[i] * curParamsTwo[i]);
      float oldInvVar = 1. / (oldParamsTwo[i] * oldParamsTwo[i]);

      // Calc Imp Weight
      logImportanceWeight += std::log(oldParamsTwo[i] / curParamsTwo[i]);
      logImportanceWeight += 0.5 * (oldActionDiff * oldActionDiff * oldInvVar - curActionDiff * curActionDiff * curInvVar);

      // Gradient with respect to Mean
      grad[i] = curActionDiff * curInvVar;

      // Gradient with respect to Sigma
      grad[_problem->_actionVectorSize + i] = (curActionDiff * curActionDiff) * (curInvVar / curParamsTwo[i]) - 1.0f / curParamsTwo[i];
    }

    float importanceWeight = std::exp(logImportanceWeight);

    // Scale by importance weight to get gradient
    for (size_t i = 0; i < 2 * _problem->_actionVectorSize; i++)
      grad[i] *= importanceWeight;
  }
  else /* _policyDistribution == "Beta" */
  {
    // ParamsOne are the Means, ParamsTwo are the Variance Coefficients
    for (size_t i = 0; i < _problem->_actionVectorSize; i++)
    {
      // Variable preparation
      const float muCur = curParamsOne[i];
      const float varcoefCur = curParamsTwo[i];

      float alphaCur;
      float betaCur;
      std::tie(alphaCur, betaCur) = betaParamTransformAlt(muCur, varcoefCur, _actionLowerBounds[i], _actionUpperBounds[i]);

      const float muOld = oldParamsOne[i];
      const float varcoefOld = oldParamsTwo[i];

      float alphaOld;
      float betaOld;
      std::tie(alphaOld, betaOld) = betaParamTransformAlt(muOld, varcoefOld, _actionLowerBounds[i], _actionUpperBounds[i]);

      // Log probability of action with old policy params
      const float logpOldPolicy = betaLogDensityAlt(action[i], muOld, varcoefOld, _actionLowerBounds[i], _actionUpperBounds[i]);
      const float invpOldPolicy = std::exp(-logpOldPolicy);

      // Variable preparation
      const float Bab = gsl_sf_beta(alphaCur, betaCur);

      const float psiAb = gsl_sf_psi(alphaCur + betaCur);

      const float logscale = std::log(_actionScalings[i]);
      const float powscale = std::pow(_actionScalings[i], -betaCur - alphaCur + 1.);
      const float factor = -1. * std::pow(action[i] - _actionLowerBounds[i], alphaCur - 1.) * powscale * std::pow(_actionUpperBounds[i] - action[i], betaCur - 1.) * invpOldPolicy / Bab;

      // Rho Grad wrt alpha and beta
      const float daBab = gsl_sf_psi(alphaCur) - psiAb;
      const float drhoda = ((logscale - std::log(action[i] - _actionLowerBounds[i])) + daBab) * factor;
      const float dbBab = gsl_sf_psi(betaCur) - psiAb;
      const float drhodb = (logscale - std::log(_actionUpperBounds[i] - action[i]) + dbBab) * factor;

      // Derivatives of alpha and beta wrt mu and varc
      float dadmu, dadvarc, dbdmu, dbdvarc;
      std::tie(dadmu, dadvarc, dbdmu, dbdvarc) = derivativesBetaParamTransformAlt(muCur, varcoefCur, _actionLowerBounds[i], _actionUpperBounds[i]);

      // Rho Grad wrt mu and varc
      grad[i] = drhoda * dadmu + drhodb * dbdmu;
      grad[_problem->_actionVectorSize + i] = drhoda * dadvarc + drhodb * dbdvarc;
    }
  }

  return grad;
}

float @className::stateValueFunction(const std::vector<std::vector<float>> &state)
{
  // Calculating V(s_i)
  float v = _criticPolicyLearner->getEvaluation({state})[0][0];
  return v;
}

knlohmann::json @className::runPolicy(const std::vector<std::vector<float>> &state)
{
  // Forward the neural network for this state
  auto evaluation = _criticPolicyLearner->getEvaluation({state})[0];
  auto stateValue = evaluation[0];

  std::vector<float> actionMeans(_problem->_actionVectorSize);
  std::vector<float> actionSigmas(_problem->_actionVectorSize);
  for (size_t i = 0; i < _problem->_actionVectorSize; i++)
  {
    actionMeans[i] = evaluation[i + 1];
    actionSigmas[i] = evaluation[_problem->_actionVectorSize + i + 1];
  }

  knlohmann::json policy;
  policy["Action Means"] = actionMeans;
  policy["Action Sigmas"] = actionSigmas;
  policy["State Value"] = stateValue;
  return policy;
}

knlohmann::json @className::getAgentPolicy()
{
  knlohmann::json hyperparameters;
  hyperparameters["Policy"] = _criticPolicyLearner->getInferenceHyperparameters();
  return hyperparameters;
}

void @className::setAgentPolicy(const knlohmann::json &hyperparameters)
{
  _criticPolicyLearner->setInferenceHyperparameters(hyperparameters["Policy"].get<std::vector<float>>());
}

void @className::setTrainingState(const knlohmann::json &state)
{
  _criticPolicyLearner->setTrainingHyperparameters(state["Critic/Policy"]["Training"]);
  _criticPolicyLearner->setInferenceHyperparameters(state["Critic/Policy"]["Inference"]);
}

knlohmann::json @className::getTrainingState()
{
  knlohmann::json state;
  state["Critic/Policy"]["Training"] = _criticPolicyLearner->getTrainingHyperparameters();
  state["Critic/Policy"]["Inference"] = _criticPolicyLearner->getInferenceHyperparameters();
  return state;
}

void @className::printAgentInformation()
{
  _k->_logger->logInfo("Normal", "Critic Information:\n");
  _k->_logger->logInfo("Normal", " + Learning Rate:                                     %.3e\n", _criticPolicyLearner->_learningRate);
  _k->_logger->logInfo("Normal", " + Average (Std) Vtbc in Mini-Batch:                  %f (%f)\n", _statisticsAverageQStar, _statisticsStdevQStar);
  _k->_logger->logInfo("Normal", " + Average (Std) TD-Error in Mini-Batch:              %f (%f)\n", _statisticsAverageTDError, _statisticsStdevTDError);
  _k->_logger->logInfo("Normal", " + Average (Std) Off-Policy Objective in Mini-Batch:  %f (%f)\n", _statisticsAveragePolicyError, _statisticsStdevPolicyError);
  _k->_logger->logInfo("Normal", " + Average Action Noise (Sigma) in Mini-Batch: \n");
  for (size_t i = 0; i < _problem->_actionVectorSize; ++i) _k->_logger->logInfo("Normal", " +  [ %f ]\n", _statisticsAverageActionSigmas[i]);

  _k->_logger->logInfo("Normal", "Neural Network Information:\n");
  _criticPolicyExperiment._logger->_verbosityLevel = _k->_logger->_verbosityLevel;
  _criticPolicyExperiment._solver->printGenerationAfter();
  _criticPolicyExperiment._logger->setVerbosityLevel("Silent");
}

@moduleAutoCode

@endNamespace
