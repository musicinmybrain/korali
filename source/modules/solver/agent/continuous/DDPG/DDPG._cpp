#include "engine.hpp"
#include "modules/solver/agent/continuous/DDPG/DDPG.hpp"
#include "sample/sample.hpp"

namespace korali
{
namespace solver
{
namespace agent
{
namespace continuous
{
void DDPG::initializeAgent()
{
  // Initializing common discrete agent configuration
  Continuous::initializeAgent();

  korali::Engine engine; // Engine to initialize experiments with

  /*********************************************************************
 * Initializing Critic-Related Structures
 *********************************************************************/

  _criticExperiment["Problem"]["Type"] = "Supervised Learning";
  _criticExperiment["Solver"]["Type"] = "Learner/DeepSupervisor";
  _criticExperiment["Solver"]["Optimizer"] = _criticOptimizer;
  _criticExperiment["Solver"]["Learning Rate"] = _criticLearningRate;
  _criticExperiment["Solver"]["Loss Function"] = "Mean Squared Error";
  _criticExperiment["Solver"]["Steps Per Generation"] = 1;
  _criticExperiment["Solver"]["Neural Network"] = _criticNeuralNetwork;

  // Initializing experiment with an initial zero set
  for (size_t i = 0; i < _criticMiniBatchSize; i++)
  {
    _criticExperiment["Problem"]["Solution"][i][0] = 0.0;

    for (size_t j = 0; j < _k->_variables.size(); j++)
      _criticExperiment["Problem"]["Inputs"][i][j] = 0.0;
  }

  size_t criticOutputLayerId = _criticNeuralNetwork["Layers"].size() - 1;
  _criticNeuralNetwork["Solver"]["Neural Network"]["Layers"][criticOutputLayerId]["Weight Scaling"] = 0.1;

  // Running initialization to verify that the configuration is correct
  engine.initialize(_criticExperiment);

  // Getting learner pointers
  _criticProblem = dynamic_cast<problem::SupervisedLearning *>(_criticExperiment._problem);
  _criticLearner = dynamic_cast<solver::learner::DeepSupervisor *>(_criticExperiment._solver);

  /*********************************************************************
  * Initializing Policy-Related Structures
  *********************************************************************/

  // Creating and running Actor Learning Experiments

  _policyExperiment["Problem"]["Type"] = "Supervised Learning";
  _policyExperiment["Solver"]["Type"] = "Learner/DeepSupervisor";
  _policyExperiment["Solver"]["Loss Function"] = "Direct Gradient";
  _policyExperiment["Solver"]["Optimizer"] = _policyOptimizer;
  _policyExperiment["Solver"]["Learning Rate"] = _policyLearningRate;
  _policyExperiment["Solver"]["Steps Per Generation"] = 1;
  _policyExperiment["Solver"]["Neural Network"] = _policyNeuralNetwork;

  // Initializing experiment with an initial zero set
  for (size_t i = 0; i < _criticMiniBatchSize; i++)
  {
    for (size_t j = 0; j < _problem->_stateVectorSize; j++)
      _policyExperiment["Problem"]["Inputs"][i][j] = 0.0;

    for (size_t j = 0; j < _problem->_actionVectorSize; j++)
      _policyExperiment["Problem"]["Solution"][i][j] = 0.0;
  }

  size_t policyOutputLayerId = _policyNeuralNetwork["Layers"].size() - 1;
  _policyNeuralNetwork["Solver"]["Neural Network"]["Layers"][policyOutputLayerId]["Weight Scaling"] = 0.1;

  // Running initialization to verify that the configuration is correct
  engine.initialize(_policyExperiment);

  // Getting learner pointers
  _policyProblem = dynamic_cast<problem::SupervisedLearning *>(_policyExperiment._problem);
  _policyLearner = dynamic_cast<solver::learner::DeepSupervisor *>(_policyExperiment._solver);

  /*********************************************************************
  * Loading/Setting Hyperparameters
  *********************************************************************/

  _hyperparameters["Policy"] = _policyLearner->getTrainingHyperparameters();
}

float DDPG::stateActionValueFunction(const std::vector<float> &state, const std::vector<float> &action)
{
  // Storage to put together state and action
  std::vector<float> stateActionInput(_problem->_stateVectorSize + _problem->_actionVectorSize);

  // Forward propagating state/action through the critic
  for (size_t j = 0; j < state.size(); j++) stateActionInput[j] = state[j];
  for (size_t j = 0; j < action.size(); j++) stateActionInput[j + state.size()] = action[j];
  auto evaluation = _criticLearner->getEvaluation(stateActionInput);

  // Getting the value of V(Xt), i.e., Q(xt, best action)
  return evaluation[0];
}

void DDPG::trainPolicy()
{
  /***************************************************************************************
  * Updating Critic Network
  ***************************************************************************************/

  // Calculating cumulative Q*, for statistical purposes
  _cumulativeQStar = 0.0;

  // Creating minibatch for the critic update
  auto miniBatchIndexes = generateMiniBatch(_criticMiniBatchSize);

  for (size_t i = 0; i < _criticMiniBatchSize; i++)
  {
    // Selecting a uniformly random selected, yet not repeated experience
    size_t expId = miniBatchIndexes[i];

    // Check if it is a terminal state
    bool isTerminal = _experienceReplay[expId].termination != e_nonTerminal;

    // Getting experience's current state and action
    std::vector<float> curState = _experienceReplay[expId].state;
    std::vector<float> curAction = _experienceReplay[expId].action;
    std::vector<float> nextState = isTerminal ? std::vector<float>() : _experienceReplay[expId + 1].state;
    std::vector<float> bestAction;

    if (isTerminal)
      bestAction = std::vector<float>();
    else
    {
      // Updating action distributions for the current state
      auto policy = runPolicy(curState);
      auto curMeans = policy["Action Means"].get<std::vector<float>>();
      auto curSigmas = policy["Action Sigmas"].get<std::vector<float>>();

      bestAction = curMeans;
    }

    // Getting current reward
    float curReward = _experienceReplay[expId].reward;

    /*****************************************
    * Critic Section
    *****************************************/

    // Calculating target Q value (solution) for Qnew on selected batch
    float qStar = curReward;

    // If state is not terminal (next state is filled) then add Qnew to the Q value.
    if (isTerminal == false) qStar += _criticDiscountFactor * stateActionValueFunction(nextState, bestAction);

    // Updating inputs to training learner
    _criticProblem->_inputs[i] = curState;
    _criticProblem->_inputs[i].insert(_criticProblem->_inputs[i].end(), curAction.begin(), curAction.end());
    _criticProblem->_solution[i][0] = qStar;

    // Keeping statistics
    _cumulativeQStar += qStar;
  }

  // Running one generation of the optimization method with the given mini-batch
  _criticLearner->initialize();
  _criticLearner->runGeneration();
  _criticLearner->finalize();

  // Keeping critic statistics
  _averageQStar = (float)_cumulativeQStar / (float)(_criticMiniBatchSize);

  /***************************************************************************************
   * Updating Policy Network
   ***************************************************************************************/

  // Creating minibatch for the policy update
  miniBatchIndexes = generateMiniBatch(_policyMiniBatchSize);

  for (size_t i = 0; i < _policyMiniBatchSize; i++)
  {
    // Selecting a uniformly random selected, yet not repeated experience
    size_t expId = miniBatchIndexes[i];

    // Getting experience's current state and action
    std::vector<float> curState = _experienceReplay[expId].state;
    std::vector<float> curAction = _experienceReplay[expId].action;

    // Storage to put together state and action
    std::vector<float> stateActionInput = curState;
    stateActionInput.insert(stateActionInput.end(), curAction.begin(), curAction.end());

    // Now calculating Gradient of q with respect to state+action for the critic NN
    _criticLearner->getEvaluation(stateActionInput);

    // Passing 1.0 (identity), to estimate the exact gradient dQ/dAS. The minus sign is to ensure that we maximize Q in this case, do not remove.
    auto qGradients = _criticLearner->getGradients({{-1.0f}});
    std::vector<float> aGradients = std::vector<float>(qGradients.begin() + _problem->_stateVectorSize, qGradients.end());

    // Setting input and gradient for policy update
    _policyProblem->_inputs[i] = curState;
    _policyProblem->_solution[i] = aGradients;
  }

  // Getting current hyperparameters for soft adoption later
  auto curPolicyHyperparameters = _policyLearner->getTrainingHyperparameters();

  // Running one generation of the optimization method with the given mini-batch
  _policyLearner->initialize();
  _policyLearner->runGeneration();
  _policyLearner->finalize();

  // Softly adopting the new critic parameters, using the adoption rate
  auto newPolicyHyperparameters = _policyLearner->getTrainingHyperparameters();
  for (size_t i = 0; i < newPolicyHyperparameters.size(); i++)
    newPolicyHyperparameters[i] = _policyAdoptionRate * curPolicyHyperparameters[i] + (1.0f - _policyAdoptionRate) * newPolicyHyperparameters[i];
  _policyLearner->setInferenceHyperparameters(newPolicyHyperparameters);

  // Storing average policy hyperparameters for workers to use
  _hyperparameters["Policy"] = newPolicyHyperparameters;
}

knlohmann::json DDPG::runPolicy(const std::vector<float> &state)
{
  auto eval = _policyLearner->getEvaluation({state});

  std::vector<float> actionMeans(_problem->_actionVectorSize);
  std::vector<float> actionSigmas(_problem->_actionVectorSize);

  for (size_t i = 0; i < _problem->_actionVectorSize; ++i)
  {
    auto varIdx = _problem->_actionVectorIndexes[i];
    float sigma = _k->_variables[varIdx]->_explorationSigma;

    actionMeans[i] = eval[i];
    actionSigmas[i] = sigma;
  }

  knlohmann::json policy;
  policy["Action Means"] = actionMeans;
  policy["Action Sigmas"] = actionSigmas;
  return policy;
}

void DDPG::updateAgentPolicy(const knlohmann::json &hyperparameters)
{
  auto policyHyperparameters = hyperparameters["Policy"].get<std::vector<float>>();
  _policyLearner->setInferenceHyperparameters(policyHyperparameters);
}

void DDPG::setTrainingState(const knlohmann::json &state)
{
  _criticLearner->setTrainingHyperparameters(state["Critic"]["Training"]);
  _criticLearner->setInferenceHyperparameters(state["Critic"]["Inference"]);

  _policyLearner->setTrainingHyperparameters(state["Policy"]["Training"]);
  _policyLearner->setInferenceHyperparameters(state["Policy"]["Inference"]);
}

knlohmann::json DDPG::getTrainingState()
{
  knlohmann::json state;
  state["Critic"]["Training"] = _criticLearner->getTrainingHyperparameters();
  state["Critic"]["Inference"] = _criticLearner->getInferenceHyperparameters();

  state["Policy"]["Training"] = _policyLearner->getTrainingHyperparameters();
  state["Policy"]["Inference"] = _policyLearner->getInferenceHyperparameters();
  return state;
}

void DDPG::printAgentInformation()
{
  _k->_logger->logInfo("Normal", "Critic Information:\n");

  _k->_logger->logInfo("Normal", " + Cumulative Expected Q-Value:     %f\n", _cumulativeQStar);
  _k->_logger->logInfo("Normal", " + Average Expected Q-Value:        %f\n", _averageQStar);

  _criticExperiment._logger->_verbosityLevel = _k->_logger->_verbosityLevel;
  _criticExperiment._solver->printGenerationAfter();
  _criticExperiment._logger->setVerbosityLevel("Silent");

  _k->_logger->logInfo("Normal", "Policy Information:\n");

  _policyExperiment._logger->_verbosityLevel = _k->_logger->_verbosityLevel;
  _policyExperiment._solver->printGenerationAfter();
  _policyExperiment._logger->setVerbosityLevel("Silent");
}

} // namespace continuous
} // namespace agent
} // namespace solver
} // namespace korali
