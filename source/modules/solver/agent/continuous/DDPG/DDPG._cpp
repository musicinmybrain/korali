#include "engine.hpp"
#include "modules/solver/agent/continuous/DDPG/DDPG.hpp"
#include "sample/sample.hpp"
#include <omp.h>

namespace korali
{
namespace solver
{
namespace agent
{
namespace continuous
{
void DDPG::initializeAgent()
{
  // Initializing common discrete agent configuration
  Continuous::initializeAgent();

  /*********************************************************************
  * State Value Function Learner
  *********************************************************************/

  _vExperiment["Problem"]["Type"] = "Supervised Learning";
  _vExperiment["Problem"]["Max Timesteps"] = _timeSequenceLength;
  _vExperiment["Problem"]["Training Batch Size"] = _miniBatchSize;
  _vExperiment["Problem"]["Inference Batch Size"] = 1;
  _vExperiment["Problem"]["Input"]["Size"] = _problem->_stateVectorSize;
  _vExperiment["Problem"]["Solution"]["Size"] = 1;

  _vExperiment["Solver"]["Type"] = "Learner/DeepSupervisor";
  _vExperiment["Solver"]["Optimizer"] = _optimizer;
  _vExperiment["Solver"]["Learning Rate"] = _learningRate;
  _vExperiment["Solver"]["Loss Function"] = "Mean Squared Error";
  _vExperiment["Solver"]["Steps Per Generation"] = 1;
  _vExperiment["Solver"]["Neural Network"]["Engine"] = _neuralNetworkEngine;
  _vExperiment["Solver"]["Neural Network"]["Hidden Layers"] = _neuralNetworkHiddenLayers;
  _vExperiment["Solver"]["Output Weights Scaling"] = 0.001;

  // Running initialization to verify that the configuration is correct
  _vExperiment.initialize();
  _vProblem = dynamic_cast<problem::SupervisedLearning *>(_vExperiment._problem);
  _vLearner = dynamic_cast<solver::learner::DeepSupervisor *>(_vExperiment._solver);

  /*********************************************************************
  * Advantage Function learner
  *********************************************************************/

  _qExperiment["Problem"]["Type"] = "Supervised Learning";
  _qExperiment["Problem"]["Max Timesteps"] = _timeSequenceLength;
  _qExperiment["Problem"]["Training Batch Size"] = _miniBatchSize;
  _qExperiment["Problem"]["Inference Batch Size"] = 1;
  _qExperiment["Problem"]["Input"]["Size"] = _problem->_stateVectorSize + _problem->_actionVectorSize;
  _qExperiment["Problem"]["Solution"]["Size"] = 1;

  _qExperiment["Solver"]["Type"] = "Learner/DeepSupervisor";
  _qExperiment["Solver"]["Optimizer"] = _optimizer;
  _qExperiment["Solver"]["Learning Rate"] = _learningRate * _advantageLearningRateScale;
  _qExperiment["Solver"]["Loss Function"] = "Mean Squared Error";
  _qExperiment["Solver"]["Steps Per Generation"] = 1;
  _qExperiment["Solver"]["Neural Network"]["Engine"] = _neuralNetworkEngine;
  _qExperiment["Solver"]["Neural Network"]["Hidden Layers"] = _neuralNetworkHiddenLayers;

  // Running initialization to verify that the configuration is correct
  _qExperiment.initialize();
  _qProblem = dynamic_cast<problem::SupervisedLearning *>(_qExperiment._problem);
  _qLearner = dynamic_cast<solver::learner::DeepSupervisor *>(_qExperiment._solver);

  /*********************************************************************
  * Policy Learner
  *********************************************************************/

  _pExperiment["Problem"]["Type"] = "Supervised Learning";
  _pExperiment["Problem"]["Max Timesteps"] = _timeSequenceLength;
  _pExperiment["Problem"]["Training Batch Size"] = _miniBatchSize;
  _pExperiment["Problem"]["Inference Batch Size"] = 1;
  _pExperiment["Problem"]["Input"]["Size"] = _problem->_stateVectorSize;
  _pExperiment["Problem"]["Solution"]["Size"] = _problem->_actionVectorSize;

  _pExperiment["Solver"]["Type"] = "Learner/DeepSupervisor";
  _pExperiment["Solver"]["Optimizer"] = _optimizer;
  _pExperiment["Solver"]["Learning Rate"] = _learningRate * _policyLearningRateScale;
  _pExperiment["Solver"]["Loss Function"] = "Direct Gradient";
  _pExperiment["Solver"]["Steps Per Generation"] = 1;
  _pExperiment["Solver"]["Neural Network"]["Engine"] = _neuralNetworkEngine;
  _pExperiment["Solver"]["Neural Network"]["Hidden Layers"] = _neuralNetworkHiddenLayers;
  _pExperiment["Solver"]["Output Weights Scaling"] = 0.001;

  // Adding policy masks, with masks to normalize and rescale the output to fit the action's [lower, upper] bounds
  for (size_t i = 0; i < _problem->_actionVectorSize; i++)
  {
    size_t varIdx = _problem->_actionVectorIndexes[i];
    auto lowerBound = _k->_variables[varIdx]->_lowerBound;
    auto upperBound = _k->_variables[varIdx]->_upperBound;
    float shift = (upperBound + lowerBound) * 0.5;
    float scale = (upperBound - lowerBound) * 0.5;
    float sigma = _k->_variables[varIdx]->_initialExplorationNoise;

    // Checking correct noise configuration
    if (sigma <= 0.0f) KORALI_LOG_ERROR("Provided initial noise (%f) for action variable %lu is not defined or negative.\n", sigma, varIdx);

    _pExperiment["Solver"]["Neural Network"]["Output Layer"]["Scale"][i] = scale;
    _pExperiment["Solver"]["Neural Network"]["Output Layer"]["Shift"][i] = shift;
    _pExperiment["Solver"]["Neural Network"]["Output Layer"]["Tanh Mask"][i] = true;
  }

  // Running initialization to verify that the configuration is correct
  _pExperiment.initialize();
  _pProblem = dynamic_cast<problem::SupervisedLearning *>(_pExperiment._problem);
  _pLearner = dynamic_cast<solver::learner::DeepSupervisor *>(_pExperiment._solver);
}

float DDPG::stateValueFunction(const std::vector<std::vector<float>> &stateSequence)
{
  return _vLearner->getEvaluation({stateSequence})[0][0];
}

float DDPG::getActionAdvantage(const std::vector<std::vector<float>> &stateActionSequence)
{
  return _qLearner->getEvaluation({stateActionSequence})[0][0];
}

void DDPG::trainPolicy()
{
  // Creating minibatch for the critic update
  auto miniBatchIndexes = generateMiniBatch(_miniBatchSize);

#pragma omp parallel for schedule(dynamic, 1)
  for (size_t b = 0; b < _miniBatchSize; b++)
  {
    /******************************************************************************************
    * Gathering experience information
    *******************************************************************************************/

    // Getting index of current experiment
    size_t expId = miniBatchIndexes[b];

    // Get state, action and policy for this experience
    auto expStateSequence = getStateTimeSequence(expId);
    auto expStateActionSequence = getStateActionTimeSequence(expId);
    auto expAction = _experienceReplay[expId].action;
    auto expPolicy = _experienceReplay[expId].experiencePolicy;

    // Gathering metadata
    float curV = _experienceReplay[expId].stateValue;
    auto curPolicy = _experienceReplay[expId].currentPolicy;
    float retV = _experienceReplay[expId].retraceValue;

    // Gathering policy information
    auto expMeans = expPolicy.actionMeans;
    auto expSigmas = expPolicy.actionSigmas;
    auto curMeans = curPolicy.actionMeans;
    auto curSigmas = curPolicy.actionSigmas;

    /*****************************************
    * Calculating Critic Gradients
    *****************************************/

    // Storage for the V+policy gradients
    std::vector<float> vpGradients(1 + 2 * _problem->_actionVectorSize, 0.0f);

    // Qret for terminal state is just reward
    float retQ = _experienceReplay[expId].reward;

    // Check whether experience is non-terminal
    bool isNormal = _experienceReplay[expId].termination == e_nonTerminal;

    // In this case add Vtbc
    if (isNormal == true)
    {
      float nextExpVtbc = _experienceReplay[expId + 1].retraceValue;
      retQ += _discountFactor * nextExpVtbc;
    }

    // Check whether experience is truncated
    bool isTrucated = _experienceReplay[expId].termination == e_truncated;

    // For truncated state add value
    if (isTrucated == true)
    {
      float nextExpVtbc = _experienceReplay[expId].truncatedStateValue;
      retQ += _discountFactor * nextExpVtbc;
    }

    _vProblem->_inputData[b] = expStateSequence;
    _vProblem->_solutionData[b] = {retV};

    _qProblem->_inputData[b] = expStateActionSequence;
    _qProblem->_solutionData[b] = {retQ - curV};

    /******************************************************************************************
    * Calculating Policy Gradients
    *******************************************************************************************/

    // Storage for the policy gradients
    std::vector<float> pGradients(_problem->_actionVectorSize, 0.0f);

    // If it's on policy, we do calculate the policy gradients
    if (_experienceReplay[expId].isOnPolicy)
    {
      // Storage for the DDPG and REFER gradients
      std::vector<float> DDPGGradients(_problem->_actionVectorSize, 0.0f);

      auto eval = _qLearner->getEvaluation({expStateActionSequence});
      auto dataGradients = _qLearner->getDataGradients({expStateActionSequence}, {{{1.0f}}});

      for (size_t i = 0; i < _problem->_actionVectorSize; i++)
        DDPGGradients[i] = dataGradients[0][_problem->_stateVectorSize + i];

      // If the experiment if on-policy, we use it for the calculation of the gradients
      for (size_t i = 0; i < _problem->_actionVectorSize; i++)
        pGradients[i] += _experienceReplayOffPolicyREFERBeta * DDPGGradients[i];
    }

    std::vector<float> referGradients(_problem->_actionVectorSize, 0.0f);

    // Getting REFER gradients
    for (size_t i = 0; i < _problem->_actionVectorSize; i++)
      referGradients[i] = expMeans[i] - curMeans[i];

    // Applying REFER gradients
    for (size_t i = 0; i < _problem->_actionVectorSize; i++)
      pGradients[i] += (1.0f - _experienceReplayOffPolicyREFERBeta) * referGradients[i];

    // Adding means to the policy update
    _pProblem->_inputData[b] = expStateSequence;
    _pProblem->_solutionData[b] = pGradients;
  }

  // Updating learning rate for critic/policy learner guided by REFER
  _vLearner->_learningRate = _currentLearningRate;
  _qLearner->_learningRate = _currentLearningRate * _advantageLearningRateScale;
  _pLearner->_learningRate = _currentLearningRate * _policyLearningRateScale;

  // Running policy update
  _vLearner->runGeneration();
  _qLearner->runGeneration();

  // Softly adapting the policy hyperparameters
  auto curPolicyHyperparameters = _pLearner->getTrainingHyperparameters();
  _pLearner->runGeneration();
  auto newPolicyHyperparameters = _pLearner->getTrainingHyperparameters();
  for (size_t i = 0; i < newPolicyHyperparameters.size(); i++)
    newPolicyHyperparameters[i] = (1.0f - _policyAdoptionRate) * curPolicyHyperparameters[i] + _policyAdoptionRate * newPolicyHyperparameters[i];
  _pLearner->setTrainingHyperparameters(newPolicyHyperparameters);
  _pLearner->setInferenceHyperparameters(newPolicyHyperparameters);
}

policy_t DDPG::runPolicy(const std::vector<std::vector<float>> &state)
{
  auto eval = _pLearner->getEvaluation({state})[0];

  std::vector<float> actionMeans(_problem->_actionVectorSize);
  std::vector<float> actionSigmas(_problem->_actionVectorSize);

  for (size_t i = 0; i < _problem->_actionVectorSize; i++)
  {
    size_t varIdx = _problem->_actionVectorIndexes[i];
    float sigma = _k->_variables[varIdx]->_initialExplorationNoise;

    // Checking correct noise configuration
    if (sigma <= 0.0f) KORALI_LOG_ERROR("Provided initial noise (%f) for action variable %lu is not defined or negative.\n", sigma, varIdx);

    actionMeans[i] = eval[i];
    actionSigmas[i] = sigma;
  }

  policy_t policy;
  policy.actionMeans = actionMeans;
  policy.actionSigmas = actionSigmas;
  return policy;
}

knlohmann::json DDPG::getAgentPolicy()
{
  knlohmann::json hyperparameters;
  hyperparameters["Policy"] = _pLearner->getInferenceHyperparameters();
  return hyperparameters;
}

void DDPG::setAgentPolicy(const knlohmann::json &hyperparameters)
{
  auto policyHyperparameters = hyperparameters["Policy"].get<std::vector<float>>();
  _pLearner->setInferenceHyperparameters(policyHyperparameters);
}

void DDPG::setTrainingState(const knlohmann::json &state)
{
  _qLearner->setTrainingHyperparameters(state["Q"]["Training"]);
  _qLearner->setInferenceHyperparameters(state["Q"]["Inference"]);

  _vLearner->setTrainingHyperparameters(state["V"]["Training"]);
  _vLearner->setInferenceHyperparameters(state["V"]["Inference"]);

  _pLearner->setTrainingHyperparameters(state["P"]["Training"]);
  _pLearner->setInferenceHyperparameters(state["P"]["Inference"]);
}

knlohmann::json DDPG::getTrainingState()
{
  knlohmann::json state;

  state["Q"]["Training"] = _qLearner->getTrainingHyperparameters();
  state["Q"]["Inference"] = _qLearner->getInferenceHyperparameters();

  state["V"]["Training"] = _vLearner->getTrainingHyperparameters();
  state["V"]["Inference"] = _vLearner->getInferenceHyperparameters();

  state["P"]["Training"] = _pLearner->getTrainingHyperparameters();
  state["P"]["Inference"] = _pLearner->getInferenceHyperparameters();

  return state;
}

void DDPG::printAgentInformation()
{
  _k->_logger->logInfo("Normal", " + Training Loss: [V = %.3e] [Q = %.3e] [P = %.3e]\n", _vLearner->_currentLoss, _qLearner->_currentLoss, _pLearner->_currentLoss);
  _k->_logger->logInfo("Normal", " + Learning Rate: [V = %.3e] [Q = %.3e] [P = %.3e]\n", _vLearner->_learningRate, _qLearner->_learningRate, _pLearner->_learningRate);
}

} // namespace continuous
} // namespace agent
} // namespace solver
} // namespace korali
