#ifndef _KORALI_AGENT_CONTINUOUS_HPP_
#define _KORALI_AGENT_CONTINUOUS_HPP_

#include "modules/problem/reinforcementLearning/continuous/continuous.hpp"
#include "modules/solver/agent/agent.hpp"

namespace korali
{
namespace solver
{
namespace agent
{
class Continuous : public Agent
{
  public:

  /**
 * @brief Storage for the pointer to the (continuous) learning problem
 */
  problem::reinforcementLearning::Continuous *_problem;

  /**
   * @brief Calculates importance weight of current action from old and new policies
   * @param action The action taken
   * @param curMeans Gaussian means of current policy
   * @param curSigmas Gaussian sigmas of current policy
   * @param oldMeans Gaussian means of old policy
   * @param oldSigmas Gaussian sigmas of old policy
   * @return The importance weight
   */
  float calculateImportanceWeight(const std::vector<float> &action, const std::vector<float> &curMeans, const std::vector<float> &curSigmas, const std::vector<float> &oldMeans, const std::vector<float> &oldSigmas);

  /**
  * @brief Function to pass state through the NN and prepares the Gaussian means and sigmas of the actions (updates members _actionMeans and _actionSigmas)
  * @param state The current state
  * @return Two vectors, one for the Gaussian means, and the other for the sigmas
  */
  virtual std::pair<std::vector<float>, std::vector<float>> getPolicyDistribution(const std::vector<float> &state) = 0;

  std::vector<float> generateAction(const std::vector<float> &curMeans, const std::vector<float> &curSigmas);
  virtual void getAction(korali::Sample &sample) override;
  virtual void initializeAgent();
};

} // namespace agent
} // namespace solver
} // namespace korali

#endif // _KORALI_AGENT_CONTINUOUS_HPP_
