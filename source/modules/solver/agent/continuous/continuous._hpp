#ifndef _KORALI_AGENT_CONTINUOUS_HPP_
#define _KORALI_AGENT_CONTINUOUS_HPP_

#include "modules/problem/reinforcementLearning/continuous/continuous.hpp"
#include "modules/solver/agent/agent.hpp"

namespace korali
{
namespace solver
{
namespace agent
{
class Continuous : public Agent
{
  public:
  /**
 * @brief Stores experience replay action probability gaussian means.
 */
  cBuffer<std::vector<float>> _experienceReplayActionMeans;
  /**
 * @brief Stores experience replay action probability gaussian standard deviations.
 */
  cBuffer<std::vector<float>> _experienceReplayActionSigmas;

  /**
  * @brief Vector with inverse variance for the action variables
  */
  std::vector<float> _inverseVariances;

  /**
  * @brief Vector with means for the action variables
  */
  std::vector<float> _actionMeans;

  /**
  * @brief Vector with exploration standard deviation for the action variables
  */
  std::vector<float> _actionSigmas;

  /**
 * @brief Storage for the pointer to the (continuous) learning problem
 */
  problem::reinforcementLearning::Continuous *_problem;


  /**
  * @brief Function to update the Gaussian means and sigmas of the actions
  * @param state The current state
  * @return Updated members _actionMeans and _actionSigmas
  */
  virtual void forwardPolicy(const std::vector<float> &state) = 0;

  virtual void getAction(korali::Sample &sample) override;
  virtual void processExperience(knlohmann::json &experience) override;
  virtual void initializeAgent();
};

} // namespace agent
} // namespace solver
} // namespace korali

#endif // _KORALI_AGENT_CONTINUOUS_HPP_
