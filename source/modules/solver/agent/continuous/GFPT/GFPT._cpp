#include "engine.hpp"
#include "modules/solver/agent/continuous/GFPT/GFPT.hpp"
#include "sample/sample.hpp"
#include <omp.h>

namespace korali
{
namespace solver
{
namespace agent
{
namespace continuous
{
void GFPT::initializeAgent()
{
  // Initializing common discrete agent configuration
  Continuous::initializeAgent();

  // Engine to initialize experiments with
  korali::Engine engine;

  /*********************************************************************
  * State Value Function Learner
  *********************************************************************/

  _vExperiment["Problem"]["Type"] = "Supervised Learning";
  _vExperiment["Solver"]["Type"] = "Learner/DeepSupervisor";
  _vExperiment["Solver"]["Optimizer"] = _criticOptimizer;
  _vExperiment["Solver"]["Learning Rate"] = _criticLearningRate;
  _vExperiment["Solver"]["Loss Function"] = "Mean Squared Error";
  _vExperiment["Solver"]["Steps Per Generation"] = 1;
  _vExperiment["Solver"]["Neural Network"] = _criticNeuralNetwork;

  // Initializing experiment with an initial zero set
  for (size_t i = 0; i < _criticMiniBatchSize; i++)
  {
    _vExperiment["Problem"]["Solution"][i][0] = 0.0;

    for (size_t j = 0; j < _problem->_stateVectorSize; j++)
      _vExperiment["Problem"]["Inputs"][i][j] = 0.0;
  }

  // Running initialization to verify that the configuration is correct
  engine.initialize(_vExperiment);

  // Getting learner pointers
  _vProblem = dynamic_cast<problem::SupervisedLearning *>(_vExperiment._problem);
  _vLearner = dynamic_cast<solver::learner::DeepSupervisor *>(_vExperiment._solver);

  /*********************************************************************
  * Advantage Function learner
  *********************************************************************/

  _aExperiment["Problem"]["Type"] = "Supervised Learning";
  _aExperiment["Solver"]["Type"] = "Learner/DeepSupervisor";
  _aExperiment["Solver"]["Optimizer"] = _criticOptimizer;
  _aExperiment["Solver"]["Learning Rate"] = _criticLearningRate;
  _aExperiment["Solver"]["Loss Function"] = "Mean Squared Error";
  _aExperiment["Solver"]["Steps Per Generation"] = 1;
  _aExperiment["Solver"]["Neural Network"] = _criticNeuralNetwork;

  // Initializing experiment with an initial zero set
  for (size_t i = 0; i < _criticMiniBatchSize; i++)
  {
    _aExperiment["Problem"]["Solution"][i][0] = 0.0;

    for (size_t j = 0; j < _problem->_stateVectorSize + _problem->_actionVectorSize; j++)
      _aExperiment["Problem"]["Inputs"][i][j] = 0.0;
  }

  // Running initialization to verify that the configuration is correct
  engine.initialize(_aExperiment);

  // Getting learner pointers
  _aProblem = dynamic_cast<problem::SupervisedLearning *>(_aExperiment._problem);
  _aLearner = dynamic_cast<solver::learner::DeepSupervisor *>(_aExperiment._solver);

  /*********************************************************************
  * Initializing Action Optimizers (one per thread)
  *********************************************************************/

  _actionOptimizers.resize(_maxThreads);
  for (size_t threadIdx = 0; threadIdx < _maxThreads; threadIdx++)
  {
    _actionOptimizers[threadIdx] = new korali::fCMAES(_problem->_actionVectorSize);
    _actionOptimizers[threadIdx]->setSeed(_k->_randomSeed++);

    // Initializing experiment with an initial zero set
    for (size_t i = 0; i < _problem->_actionVectorSize; i++)
    {
      size_t varIdx = _problem->_actionVectorIndexes[i];
      _actionOptimizers[threadIdx]->_lowerBounds[i] = _k->_variables[varIdx]->_lowerBound;
      _actionOptimizers[threadIdx]->_upperBounds[i] = _k->_variables[varIdx]->_upperBound;
      _actionOptimizers[threadIdx]->_initialMeans[i] = (_k->_variables[varIdx]->_lowerBound + _k->_variables[varIdx]->_upperBound) * 0.5;
      _actionOptimizers[threadIdx]->_initialStandardDeviations[i] = (_k->_variables[varIdx]->_upperBound - _k->_variables[varIdx]->_lowerBound) * 0.5;
      _actionOptimizers[threadIdx]->_minMeanUpdates[i] = (_k->_variables[varIdx]->_upperBound - _k->_variables[varIdx]->_lowerBound) * _policyTargetAccuracy;
    }
  }

  /*********************************************************************
   * Initializing Policy-Related Structures
   *********************************************************************/

  // Creating and running Actor Learning Experiments

  _policyExperiment["Problem"]["Type"] = "Supervised Learning";
  _policyExperiment["Solver"]["Type"] = "Learner/DeepSupervisor";
  _policyExperiment["Solver"]["Loss Function"] = "Direct Gradient";
  _policyExperiment["Solver"]["Optimizer"] = _policyOptimizer;
  _policyExperiment["Solver"]["Learning Rate"] = _policyLearningRate;
  _policyExperiment["Solver"]["Steps Per Generation"] = 1;
  _policyExperiment["Solver"]["Neural Network"] = _policyNeuralNetwork;

  for (size_t i = 0; i < _problem->_actionVectorSize; i++)
  {
    size_t varIdx = _problem->_actionVectorIndexes[i];
    auto lowerBound = _k->_variables[varIdx]->_lowerBound;
    auto upperBound = _k->_variables[varIdx]->_upperBound;
    float scale = (upperBound - lowerBound) * 0.5;
    float shift = (upperBound + lowerBound) * 0.5;
    _policyExperiment["Solver"]["Neural Network"]["Output"]["Scale"][i] = scale;
    _policyExperiment["Solver"]["Neural Network"]["Output"]["Shift"][i] = shift;
    _policyExperiment["Solver"]["Neural Network"]["Output"]["Tanh Mask"][i] = true;
  }

  // Initializing experiment with an initial zero set
  for (size_t i = 0; i < _criticMiniBatchSize; i++)
  {
    for (size_t j = 0; j < _problem->_stateVectorSize; j++)
      _policyExperiment["Problem"]["Inputs"][i][j] = 0.0;

    for (size_t j = 0; j < _problem->_actionVectorSize; j++)
      _policyExperiment["Problem"]["Solution"][i][j] = 0.0;
  }

  // Running initialization to verify that the configuration is correct
  engine.initialize(_policyExperiment);

  // Getting learner pointers
  _policyProblem = dynamic_cast<problem::SupervisedLearning *>(_policyExperiment._problem);
  _policyLearner = dynamic_cast<solver::learner::DeepSupervisor *>(_policyExperiment._solver);

  // Get initial learning rate
  _referInitialLearningRate = _policyLearner->_learningRate;
  _referBeta = 1.0f;
  _referCutoff = _referCutoffScale + 1.0f;

  /*********************************************************************
  * Creating special evaluation networks for cases with different mini batch sizes (one per thread)
  *********************************************************************/

  // NN For calculating samples from CMAES
  auto batchOptimizationNetworkConfig = _criticNeuralNetwork;
  batchOptimizationNetworkConfig["Layers"][0]["Node Count"] = _problem->_stateVectorSize + _problem->_actionVectorSize;
  batchOptimizationNetworkConfig["Layers"][batchOptimizationNetworkConfig["Layers"].size() - 1]["Node Count"] = 1;
  batchOptimizationNetworkConfig["Use Preloaded Normalization Data"] = true;

  _batchOptimizationNetworks.resize(_maxThreads);
  for (size_t threadIdx = 0; threadIdx < _maxThreads; threadIdx++)
  {
    auto nnConfig = batchOptimizationNetworkConfig;
    _batchOptimizationNetworks[threadIdx] = dynamic_cast<NeuralNetwork *>(getModule(nnConfig, _k));
  }

  /*********************************************************************
  * Loading/Setting Hyperparameters
  *********************************************************************/

  _hyperparameters["Policy"] = _policyLearner->getHyperparameters();

  // Profiling
  _criticUpdateTime = 0.0;
  _policyUpdateTime = 0.0;
}

float GFPT::retraceFunction(size_t expId)
{
  // Finding last experience in the episode that corresponds to expId
  ssize_t startId = expId;
  ssize_t endId = startId;
  while (_experienceReplay[endId].termination == e_nonTerminal) endId++;

  // Calculating initial Vtbc
  float Vtbc = 0.0f;

  // If it was a truncated episode, add the value function for the terminal state to Vtbc
  if (_experienceReplay[endId].termination == e_truncated)
  {
    auto truncatedState = _experienceReplay[endId].truncatedState;
    float terminalV = _experienceReplay[endId].cache.access("Terminal State Value", [this, truncatedState]() { return this->stateValueFunction(truncatedState); });
    Vtbc = terminalV;
  }

  // Now iterating backwards to calculate the rest of vTbc
  for (ssize_t curId = endId; curId >= startId; curId--)
  {
    // Getting current reward, action, and state
    auto curReward = _experienceReplay[curId].reward;
    auto curState = _experienceReplay[curId].state;
    auto curAction = _experienceReplay[curId].action;

    // Calculating state value function
    float curV = _experienceReplay[curId].cache.access("State Value", [this, curState]() { return this->stateValueFunction(curState); });

    //    // Updating action distributions for the current state to get its current means
    //    forwardPolicy(curState);
    //
    //    // Getting means and sigmas for current and old policy for the given state
    //    auto oldMean = _experienceReplay[curId].policy["Action Means"].get<std::vector<float>>();
    //    auto oldSigma = _experienceReplay[curId].policy["Action Sigmas"].get<std::vector<float>>();
    //    auto curMean = _actionMeans;
    //    auto curSigma = _actionSigmas;
    //
    //    // Calculate importance weight
    //    float importanceWeight = calculateImportanceWeight(curAction, curMean, curSigma, oldMean, oldSigma);
    float importanceWeight = 1.0f;

    // Truncate importance weight
    float truncatedImportanceWeight = std::min(1.0f, importanceWeight);

    // Calculating Vtbc
    Vtbc = curV + truncatedImportanceWeight * (curReward + _criticDiscountFactor * Vtbc - curV);
  }

  // Returning Vtbc
  return Vtbc;
}

float GFPT::stateValueFunction(const std::vector<float> &state)
{
  // Calculating V(s_i+1)
  float v = _vLearner->getEvaluation(state)[0];

  return v;
}

float GFPT::currentActionAdvantageFunction(const std::vector<float> &state, const std::vector<float> &action)
{
  // Storage to put together state and action
  std::vector<float> stateActionInput(_problem->_stateVectorSize + _problem->_actionVectorSize);

  // Calculating max_a A(s_i+1, a)
  for (size_t j = 0; j < _problem->_stateVectorSize; j++) stateActionInput[j] = state[j];
  for (size_t j = 0; j < _problem->_actionVectorSize; j++) stateActionInput[j + _problem->_stateVectorSize] = action[j];
  float a = _aLearner->getEvaluation(stateActionInput)[0];

  return a;
}

float GFPT::averageActionAdvantageFunction(const std::vector<float> &curMeans, const std::vector<float> &curSigmas, const std::vector<float> &state)
{
  // Creating storage for average action minibatch
  std::vector<float> aResults(_criticAdvantageFunctionPopulation);

  // Filling minibatch to calculate average action Q
  for (size_t i = 0; i < _criticAdvantageFunctionPopulation; i++)
  {
    // Generating random a'
    auto newAction = generateTrainingAction(curMeans, curSigmas);

    // Running evaluation of the entire minibatch
    aResults[i] = currentActionAdvantageFunction(state, newAction);
  }

  // Initializing average A(s,a) counter
  float avgA = 0.0;

  // Summing A(s_i+1, a') for many a'
  for (size_t i = 0; i < _criticAdvantageFunctionPopulation; i++)
    avgA += aResults[i];

  // Normalizing Average
  avgA /= (float)_criticAdvantageFunctionPopulation;

  return avgA;
}

void GFPT::trainAgent()
{
  /****************************************************************************
   * Adjusting REFER off-policiness and learning rate parameters
   ***************************************************************************/

  // Update REFER parameters only after reaching this number of experiences in memory
  if (_experienceReplay.size() > _referStartSize)
  {
    // Updating cutoff
    _referCutoff = 1.0f + _referCutoffScale / (1.0f + _referAnnealingRate * (float)_optimizationStepCount);

    // Update learning rate
    _policyLearner->_learningRate = _referInitialLearningRate / (1.0f + _referAnnealingRate * _optimizationStepCount);

    // Updating beta parameter
    //  if(offPolicyFraction > _referTargetOffPolicyFraction)
    //    _referBeta=(1.0f-_policyLearner->_learningRate)*_referBeta;
    //  else
    //    _referBeta=(1.0f-_policyLearner->_learningRate)*_referBeta + _policyLearner->_learningRate;
    if (_referOffPolicyFraction > _referTargetOffPolicyFraction)
      _referBeta = (1.0f - 0.01f) * _referBeta;
    else
      _referBeta = (1.0f - 0.01f) * _referBeta + 0.01f;
  }

  /***************************************************************************************
  * Updating Policy Network by performing a Gradient descent step with latest experiences
  ***************************************************************************************/

  auto beginTime = std::chrono::steady_clock::now(); // Profiling

  // Calculating cumulative Q*, for statistical purposes
  _cumulativeQStar = 0.0;

  // Creating minibatch for the critic update
  auto miniBatchIndexes = generateMiniBatch(_criticMiniBatchSize);

#pragma omp parallel for schedule(dynamic, 1)
  for (size_t i = 0; i < _criticMiniBatchSize; i++)
  {
    // Selecting a uniformly random selected, yet not repeated experience
    size_t expId = miniBatchIndexes[i];

    /*****************************************
    * Critic Section
    *****************************************/

    // We calculate qStar depending on whether we use retrace or not
    float Vtbc = retraceFunction(expId);

    // Getting experience's current state, action
    auto curState = _experienceReplay[expId].state;
    auto curAction = _experienceReplay[expId].action;

    // Updating action distributions for the current state
    auto policy = runPolicy(curState);
    auto curMeans = policy["Action Means"].get<std::vector<float>>();
    auto curSigmas = policy["Action Sigmas"].get<std::vector<float>>();

    // Now calculating V, A, and avgA for current state/action
    float curA = currentActionAdvantageFunction(curState, curAction);
    float avgA = averageActionAdvantageFunction(curMeans, curSigmas, curState);
    float curV = stateValueFunction(curState);

    // Now calculating targets for V(s) and A(s,a)
    float vTarget = Vtbc - curV + curA;
    float aTarget = Vtbc - curV + avgA;

    // Updating inputs to training learners
    for (size_t j = 0; j < curState.size(); j++) _aProblem->_inputs[i][j] = curState[j];
    for (size_t j = 0; j < curAction.size(); j++) _aProblem->_inputs[i][j + curState.size()] = curAction[j];
    _aProblem->_solution[i][0] = aTarget;

    _vProblem->_inputs[i] = curState;
    _vProblem->_solution[i][0] = vTarget;

    // Keeping statistics
    _cumulativeQStar += Vtbc;
  }

  // Running one generation of the optimization method with the given mini-batch
  _aLearner->initialize();
  _aLearner->runGeneration();
  _aLearner->finalize();

  _vLearner->initialize();
  _vLearner->runGeneration();
  _vLearner->finalize();

  // Keeping critic/policy statistics
  _averageQStar = _cumulativeQStar / (float)_criticMiniBatchSize;

  /****************************************************************************
  * Updating parameters for batch optimization
  ******************************************************************************/

  auto aHyperparameters = _aLearner->getHyperparameters();

  // Updating thread-local configuration
  for (size_t threadIdx = 0; threadIdx < _maxThreads; threadIdx++)
  {
    // Updating batch evaluation network for the advantage function for CMAES steps
    _batchOptimizationNetworks[threadIdx]->setHyperparameters(aHyperparameters);
  }

  auto endTime = std::chrono::steady_clock::now();                                                        // Profiling
  _criticUpdateTime += std::chrono::duration_cast<std::chrono::nanoseconds>(endTime - beginTime).count(); // Profiling

  /*******************************************************************
  * Now computing new policy gradients with a stochastic method (CMAES)
  ******************************************************************/

  beginTime = std::chrono::steady_clock::now(); // Profiling

  size_t onPolicySamples = 0;

// Accumulating states for evaluation in the policy
#pragma omp parallel for schedule(dynamic, 1)
  for (size_t idx = 0; idx < _criticMiniBatchSize; idx++)
  {
    // Getting current thread ID and corresponding optimizer and batch optimization NN
    size_t curThread = omp_get_thread_num();
    auto actionOptimizer = _actionOptimizers[curThread];
    auto batchOptimizationNetwork = _batchOptimizationNetworks[curThread];

    //printf("Thread %lu - Processing %lu\n", curThread, idx);

    // Getting experience id
    size_t expId = miniBatchIndexes[idx];

    // Getting current state
    std::vector<float> curState = _experienceReplay[expId].state;
    std::vector<float> curAction = _experienceReplay[expId].action;

    size_t candidateCount = actionOptimizer->_populationSize;
    std::vector<float> candidateEvaluations(candidateCount);
    std::vector<std::vector<float>> candidateMiniBatch(candidateCount);
    for (size_t i = 0; i < candidateCount; i++)
    {
      candidateMiniBatch[i].resize(_problem->_stateVectorSize + _problem->_actionVectorSize);
      for (size_t j = 0; j < _problem->_stateVectorSize; j++) candidateMiniBatch[i][j] = curState[j];
    }

    // Updating action distributions for the current state to get its current means
    auto policy = runPolicy(curState);
    auto curMeans = policy["Action Means"].get<std::vector<float>>();
    auto curSigmas = policy["Action Sigmas"].get<std::vector<float>>();

    // Getting means and sigmas for current and old policy for the given state
    auto oldMean = _experienceReplay[expId].policy["Action Means"].get<std::vector<float>>();
    auto oldSigma = _experienceReplay[expId].policy["Action Sigmas"].get<std::vector<float>>();

    //    // Calculating inverse variances of the current policy for this state
    //    std::vector<float> oldInvVariance(_problem->_actionVectorSize);
    //    std::vector<float> curInvVariance(_problem->_actionVectorSize);
    //
    //    for (size_t i = 0; i < _problem->_actionVectorSize; i++)
    //    {
    //     curInvVariance[i] = 1.0f / (curSigma[i] * curSigma[i]);
    //     oldInvVariance[i] = 1.0f / (oldSigma[i] * oldSigma[i]);
    //    }

    // Storage for policy gradients
    std::vector<float> meanGradients(_problem->_actionVectorSize, 0.0f);

    // Now calculating importance weight for the experience (if REFER has not started, just assume 1.0)
    //float expImportanceWeight = _experienceReplay.size() > _referStartSize ? calculateImportanceWeight(curAction, curMean, curSigma, oldMean, oldSigma) : 1.0f;

    // If the experiment if on-policy, we use it for the calculation of the gradients
    //if (expImportanceWeight < _referCutoff && expImportanceWeight > (1.0f/_referCutoff))
    {
      // Setting initial means from the previous policy estimates
      actionOptimizer->_initialMeans = curMeans;

      // To prevent CMAES from failing.
      actionOptimizer->reset();

      // Run the CMAES experiment until the desired convergence
      while (actionOptimizer->checkTermination() == false)
      {
        // Asking CMAES to generate candidates
        actionOptimizer->prepareGeneration();

        // Gathering candidate states into a single minibatch
        for (size_t i = 0; i < candidateCount; i++)
          for (size_t j = 0; j < _problem->_actionVectorSize; j++)
            candidateMiniBatch[i][j + _problem->_stateVectorSize] = actionOptimizer->_samplePopulation[i][j];

        // Running evaluation of the entire set of candidates
        batchOptimizationNetwork->setInput(candidateMiniBatch);
        batchOptimizationNetwork->forward();
        auto criticEvaluations = batchOptimizationNetwork->_outputValues;

        // Getting the advantage function for all candidates
        for (size_t i = 0; i < candidateCount; i++)
          candidateEvaluations[i] = criticEvaluations[i][0];

        // Running one more CMAES iteration
        actionOptimizer->updateDistribution(candidateEvaluations);
        actionOptimizer->_currentGeneration++;
      }

      // Calculating gradient of means that maximize advantage for the given state
      auto bestMean = actionOptimizer->_bestEverVariables;
      for (size_t j = 0; j < _problem->_actionVectorSize; j++)
        //meanGradients[j] += _referBeta * (bestMean[j] - curMeans[j]);
        meanGradients[j] += bestMean[j] - curMeans[j];

      onPolicySamples++;
    }

    // Applying off-policy penalty (Following KL gradient towards old policies)
    //for (size_t i = 0; i < _problem->_actionVectorSize; i++)
    //  meanGradients[i] += ( 1.0f - _referBeta ) * (oldMean[i] - curMean[i]) * curInvVariance[i];

    // Adding means to the policy update
    _policyProblem->_inputs[idx] = curState;
    _policyProblem->_solution[idx] = meanGradients;
  }

  size_t offPolicySamples = _criticMiniBatchSize - onPolicySamples;
  _referOffPolicyFraction = (float)offPolicySamples / (float)_criticMiniBatchSize;

  // Running one generation of the optimization method with the given mini-batch
  _policyLearner->initialize();
  _policyLearner->runGeneration();
  _policyLearner->finalize();

  /*******************************************************************
   * Soft adoption of new hyperparameters wrt to adoption rate
   ******************************************************************/

  // Getting new hyperparameters
  auto newPolicyHyperparameters = _policyLearner->getHyperparameters();

  // Updating hyperparameters
  _policyLearner->setHyperparameters(newPolicyHyperparameters);

  // Storing average policy hyperparameters for workers to use
  _hyperparameters["Policy"] = newPolicyHyperparameters;

  endTime = std::chrono::steady_clock::now();                                                             // Profiling
  _policyUpdateTime += std::chrono::duration_cast<std::chrono::nanoseconds>(endTime - beginTime).count(); // Profiling
}

knlohmann::json GFPT::runPolicy(const std::vector<float> &state)
{
  auto eval = _policyLearner->getEvaluation({state});

  std::vector<float> actionMeans(_problem->_actionVectorSize);
  std::vector<float> actionSigmas(_problem->_actionVectorSize);

  for (size_t i = 0; i < _problem->_actionVectorSize; ++i)
  {
    auto varIdx = _problem->_actionVectorIndexes[i];
    float sigma = _k->_variables[varIdx]->_explorationSigma;

    actionMeans[i] = eval[i];
    actionSigmas[i] = sigma;
  }

  knlohmann::json policy;
  policy["Action Means"] = actionMeans;
  policy["Action Sigmas"] = actionSigmas;
  return policy;
}

void GFPT::updateAgentPolicy(const knlohmann::json &hyperparameters)
{
  auto policyHyperparameters = hyperparameters["Policy"].get<std::vector<float>>();
  _policyLearner->setHyperparameters(policyHyperparameters);
}

void GFPT::printAgentInformation()
{
  _k->_logger->logInfo("Normal", "Critic Information:\n");

  _k->_logger->logInfo("Normal", " + Average Q-Value in Mini-Batch:  %f\n", _averageQStar);

  _k->_logger->logInfo("Normal", "A Function Information:\n");

  _aExperiment._logger->_verbosityLevel = _k->_logger->_verbosityLevel;
  _aExperiment._solver->printGenerationAfter();
  _aExperiment._logger->setVerbosityLevel("Silent");

  _k->_logger->logInfo("Normal", "V Function Information:\n");

  _vExperiment._logger->_verbosityLevel = _k->_logger->_verbosityLevel;
  _vExperiment._solver->printGenerationAfter();
  _vExperiment._logger->setVerbosityLevel("Silent");

  _k->_logger->logInfo("Normal", "Policy Information:\n");

  _policyExperiment._logger->_verbosityLevel = _k->_logger->_verbosityLevel;
  _policyExperiment._solver->printGenerationAfter();
  _policyExperiment._logger->setVerbosityLevel("Silent");

  _k->_logger->logInfo("Normal", "REF-ER Information\n");
  _k->_logger->logInfo("Normal", " + Off-Policy Fraction: %.6f (Goal: %.6f)\n", _referOffPolicyFraction, _referTargetOffPolicyFraction);
  _k->_logger->logInfo("Normal", " + Policy Learning Rate: %.6f\n", _policyLearner->_learningRate);
  _k->_logger->logInfo("Normal", " + Beta: %.6f\n", _referBeta);
  _k->_logger->logInfo("Normal", " + Cut-off: %.6f\n", _referCutoff);

  _k->_logger->logInfo("Normal", " + Critic Update Time:         %fs\n", _criticUpdateTime / 1.0e+9f);
  _k->_logger->logInfo("Normal", " + Policy Update Time:         %fs\n", _policyUpdateTime / 1.0e+9f);
}

} // namespace continuous
} // namespace agent
} // namespace solver
} // namespace korali
