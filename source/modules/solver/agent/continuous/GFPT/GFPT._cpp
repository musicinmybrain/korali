#include "engine.hpp"
#include "modules/solver/agent/continuous/GFPT/GFPT.hpp"
#include "sample/sample.hpp"
#include <omp.h>

namespace korali
{
namespace solver
{
namespace agent
{
namespace continuous
{
void GFPT::initializeAgent()
{
  // Initializing common discrete agent configuration
  Continuous::initializeAgent();

  /*********************************************************************
  * State Value Function Learner
  *********************************************************************/

  _vpExperiment["Problem"]["Type"] = "Supervised Learning";
  _vpExperiment["Problem"]["Max Timesteps"] = _timeSequenceLength;
  _vpExperiment["Problem"]["Training Batch Size"] = _miniBatchSize;
  _vpExperiment["Problem"]["Inference Batch Size"] = 1;
  _vpExperiment["Problem"]["Input"]["Size"] = _problem->_stateVectorSize;
  _vpExperiment["Problem"]["Solution"]["Size"] = 1 + _problem->_actionVectorSize;

  _vpExperiment["Solver"]["Type"] = "Learner/DeepSupervisor";
  _vpExperiment["Solver"]["Optimizer"] = _optimizer;
  _vpExperiment["Solver"]["Learning Rate"] = _learningRate;
  _vpExperiment["Solver"]["Loss Function"] = "Direct Gradient";
  _vpExperiment["Solver"]["Steps Per Generation"] = 1;
  _vpExperiment["Solver"]["Neural Network"]["Engine"] = _neuralNetworkEngine;
  _vpExperiment["Solver"]["Neural Network"]["Hidden Layers"] = _neuralNetworkHiddenLayers;
  _vpExperiment["Solver"]["Output Weights Scaling"] = 0.001;

  _vpExperiment["Solver"]["Neural Network"]["Output Layer"]["Scale"][0] = 1.0f;
  _vpExperiment["Solver"]["Neural Network"]["Output Layer"]["Shift"][0] = 0.0f;
  _vpExperiment["Solver"]["Neural Network"]["Output Layer"]["Tanh Mask"][0] = false;

  // Adding policy masks, with masks to normalize and rescale the output to fit the action's [lower, upper] bounds
  for (size_t i = 0; i < _problem->_actionVectorSize; i++)
  {
    size_t varIdx = _problem->_actionVectorIndexes[i];
    auto lowerBound = _k->_variables[varIdx]->_lowerBound;
    auto upperBound = _k->_variables[varIdx]->_upperBound;
    float shift = (upperBound + lowerBound) * 0.5;
    float scale = (upperBound - lowerBound) * 0.5;
    float sigma = _k->_variables[varIdx]->_initialExplorationNoise;

    // Checking correct noise configuration
    if (sigma <= 0.0f) KORALI_LOG_ERROR("Provided initial noise (%f) for action variable %lu is not defined or negative.\n", sigma, varIdx);

    _vpExperiment["Solver"]["Neural Network"]["Output Layer"]["Scale"][i + 1] = scale;
    _vpExperiment["Solver"]["Neural Network"]["Output Layer"]["Shift"][i + 1] = shift;
    _vpExperiment["Solver"]["Neural Network"]["Output Layer"]["Tanh Mask"][i + 1] = true;
  }

  // Running initialization to verify that the configuration is correct
  _vpExperiment.initialize();
  _vpProblem = dynamic_cast<problem::SupervisedLearning *>(_vpExperiment._problem);
  _vpLearner = dynamic_cast<solver::learner::DeepSupervisor *>(_vpExperiment._solver);

  /*********************************************************************
  * Advantage Function learner
  *********************************************************************/

  _qExperiment["Problem"]["Type"] = "Supervised Learning";
  _qExperiment["Problem"]["Max Timesteps"] = _timeSequenceLength;
  _qExperiment["Problem"]["Training Batch Size"] = _miniBatchSize;
  _qExperiment["Problem"]["Inference Batch Size"] = 1;
  _qExperiment["Problem"]["Input"]["Size"] = _problem->_stateVectorSize + _problem->_actionVectorSize;
  _qExperiment["Problem"]["Solution"]["Size"] = 1;

  _qExperiment["Solver"]["Type"] = "Learner/DeepSupervisor";
  _qExperiment["Solver"]["Optimizer"] = _optimizer;
  _qExperiment["Solver"]["Learning Rate"] = _learningRate;
  _qExperiment["Solver"]["Loss Function"] = "Mean Squared Error";
  _qExperiment["Solver"]["Steps Per Generation"] = 1;
  _qExperiment["Solver"]["Neural Network"]["Engine"] = _neuralNetworkEngine;
  _qExperiment["Solver"]["Neural Network"]["Hidden Layers"] = _neuralNetworkHiddenLayers;

  // Running initialization to verify that the configuration is correct
  _qExperiment.initialize();
  _qProblem = dynamic_cast<problem::SupervisedLearning *>(_qExperiment._problem);
  _qLearner = dynamic_cast<solver::learner::DeepSupervisor *>(_qExperiment._solver);

  /*********************************************************************
  * Initializing Action Optimizers (one per thread)
  *********************************************************************/

  _actionOptimizers.resize(_maxThreads);
  for (size_t threadIdx = 0; threadIdx < _maxThreads; threadIdx++)
  {
    _actionOptimizers[threadIdx] = new korali::fCMAES(_problem->_actionVectorSize, _policyOptimizationCandidates);
    _actionOptimizers[threadIdx]->setSeed(_k->_randomSeed++);

    // Initializing experiment with an initial zero set
    for (size_t i = 0; i < _problem->_actionVectorSize; i++)
    {
      size_t varIdx = _problem->_actionVectorIndexes[i];
      _actionOptimizers[threadIdx]->_lowerBounds[i] = _k->_variables[varIdx]->_lowerBound;
      _actionOptimizers[threadIdx]->_upperBounds[i] = _k->_variables[varIdx]->_upperBound;
      _actionOptimizers[threadIdx]->_initialMeans[i] = (_k->_variables[varIdx]->_lowerBound + _k->_variables[varIdx]->_upperBound) * 0.5;
      _actionOptimizers[threadIdx]->_initialStandardDeviations[i] = (_k->_variables[varIdx]->_upperBound - _k->_variables[varIdx]->_lowerBound) * 0.5;
    }
  }

  /*********************************************************************
  * Creating special evaluation networks for cases with different mini
  * batch sizes (one per thread) -- This is only for performance
  *********************************************************************/

  _batchOptimizationNetworks.resize(_maxThreads);
  for (size_t threadIdx = 0; threadIdx < _maxThreads; threadIdx++)
  {
    knlohmann::json nnConfig;
    _qLearner->_trainingNeuralNetwork->getConfiguration(nnConfig);
    nnConfig["Batch Size"] = _policyOptimizationCandidates;
    _batchOptimizationNetworks[threadIdx] = dynamic_cast<NeuralNetwork *>(getModule(nnConfig, _k));
    _batchOptimizationNetworks[threadIdx]->applyModuleDefaults(nnConfig);
    _batchOptimizationNetworks[threadIdx]->setConfiguration(nnConfig);
    _batchOptimizationNetworks[threadIdx]->initialize();
  }

  /*********************************************************************
  * Allocating storage for statistics
  *********************************************************************/

  if (_k->_currentGeneration == 0)
  {
    _statisticsAverageTargetSigmas.resize(_problem->_actionVectorSize, 0.0f);
    _statisticsAverageActionSigmas.resize(_problem->_actionVectorSize, 0.0f);
  }
}

float GFPT::stateValueFunction(const std::vector<std::vector<float>> &stateSequence)
{
  return _vpLearner->getEvaluation({stateSequence})[0][0];
}

float GFPT::getActionAdvantage(const std::vector<std::vector<float>> &stateActionSequence)
{
  return _qLearner->getEvaluation({stateActionSequence})[0][0];
}

void GFPT::trainPolicy()
{
  // Creating minibatch for the critic update
  auto miniBatchIndexes = generateMiniBatch(_miniBatchSize);

  // [Statistics] Zeroing average diagonal covariance
  for (size_t i = 0; i < _problem->_actionVectorSize; i++)
  {
    _statisticsAverageActionSigmas[i] = 0.0f;
    _statisticsAverageTargetSigmas[i] = 0.0f;
  }

#pragma omp parallel for schedule(dynamic, 1)
  for (size_t b = 0; b < _miniBatchSize; b++)
  {
    // Storage for the v+policy gradients
    std::vector<float> vpGradients(_problem->_actionVectorSize + 1, 0.0f);

    /******************************************************************************************
    * Gathering experience information
    *******************************************************************************************/

    // Selecting a uniformly random selected, yet not repeated experience
    size_t expId = miniBatchIndexes[b];

    // Getting experience's current state, state/action sequences
    auto expStateSequence = getStateTimeSequence(expId);
    auto expStateActionSequence = getStateActionTimeSequence(expId);
    auto expAction = _experienceReplay[expId].action;

    // Getting Experience's policy distribution
    auto expMeans = _experienceReplay[expId].policy["Action Means"].get<std::vector<float>>();
    auto expSigmas = _experienceReplay[expId].policy["Action Sigmas"].get<std::vector<float>>();

    // Updating action distributions for the current state
    auto policy = runPolicy(expStateSequence);
    auto curV = policy["State Value"].get<float>();
    auto curMeans = policy["Action Means"].get<std::vector<float>>();
    auto curSigmas = policy["Action Sigmas"].get<std::vector<float>>();

    /*****************************************
    * Calculating Critic Gradients
    *****************************************/

    // Using retrace to obtain a better estimation of the state value function
    float retV = retraceFunction(expId);

    // Qret for terminal state is just reward
    float retQ = _experienceReplay[expId].reward;

    // Check whether experience is non-terminal
    bool isNormal = _experienceReplay[expId].termination == e_nonTerminal;

    // In this case add Vtbc
    if (isNormal == true)
    {
      float nextExpVtbc = retraceFunction(expId + 1);
      retQ += _discountFactor * nextExpVtbc;
    }

    // Check whether experience is truncated
    bool isTrucated = _experienceReplay[expId].termination == e_truncated;

    // For truncated state add value
    if (isTrucated == true)
    {
      // get truncated state
      auto truncatedState = getTruncatedStateTimeSequence(expId);

      // for truncated state, Vtbc == V - forward network
      float nextExpVtbc = stateValueFunction(truncatedState);

      // add value to Qret
      retQ += _discountFactor * nextExpVtbc;
    }

    vpGradients[0] = retV - curV;

    _qProblem->_inputData[b] = expStateActionSequence;
    _qProblem->_solutionData[b] = {retQ};

    /*****************************************
    * Calculating Policy Gradients
    *****************************************/

    // Storage for the GFPT and REFER gradients
    std::vector<float> gfptGradients(_problem->_actionVectorSize, 0.0f);
    std::vector<float> referGradients(_problem->_actionVectorSize, 0.0f);

    // Optimizing best action for the selected experience
    auto optResults = optimizeAction(expStateActionSequence, curMeans);
    auto bstMeans = optResults["Best Means"].get<std::vector<float>>();
    auto bstSigmas = optResults["Best Sigmas"].get<std::vector<float>>();
    auto bstValue = optResults["Average Value"].get<float>();

    for (size_t i = 0; i < _problem->_actionVectorSize; i++)
     gfptGradients[i] =  bstMeans[i] - curMeans[i];
     //(bstValue - retQ)

    // Getting REFER gradients
    for (size_t i = 0; i < _problem->_actionVectorSize; i++)
     referGradients[i] = expMeans[i] - curMeans[i];

    // Re-computing importance weight for the experiment and storing it into cache
    float importanceWeight = calculateImportanceWeight(expAction, curMeans, curSigmas, expMeans, expSigmas);
    _experienceReplay[expId].cache.set("Importance Weight", importanceWeight);

    // Checking whether the experience is on policy (i.e., it is within the [1/cutoff, cutoff] region)
    bool isOnPolicy = (importanceWeight > (1.0f / _experienceReplayREFERCutoffScale)) && (importanceWeight < _experienceReplayREFERCutoffScale);

    // If the experiment if on-policy, we use it for the calculation of the gradients
    for (size_t i = 0; i < _problem->_actionVectorSize; i++)
    if (isOnPolicy) vpGradients[i + 1] += _experienceReplayREFERCurrentBeta * gfptGradients[i];

    // Applying REFER gradients
    for (size_t i = 0; i < _problem->_actionVectorSize; i++)
    vpGradients[i + 1] += (1.0f - _experienceReplayREFERCurrentBeta) * referGradients[i];

    for (size_t i = 0; i < _problem->_actionVectorSize; i++)
     vpGradients[i + 1] *= _policyLearningRateScale;

// Computing statistics
#pragma omp critical
    for (size_t i = 0; i < _problem->_actionVectorSize; i++)
    {
      _statisticsAverageTargetSigmas[i] += curSigmas[i];
      _statisticsAverageActionSigmas[i] += curSigmas[i];
    }

    // Adding means to the policy update
    _vpProblem->_inputData[b] = expStateSequence;
    _vpProblem->_solutionData[b] = vpGradients;
  }

  // Running one generation of the optimization method with the given mini-batch
  _qLearner->runGeneration();
  _vpLearner->runGeneration();

  // Updating batch evaluation network for the advantage function for CMAES steps
  auto aHyperparameters = _qLearner->getTrainingHyperparameters();
  for (size_t threadIdx = 0; threadIdx < _maxThreads; threadIdx++)
    _batchOptimizationNetworks[threadIdx]->setHyperparameters(aHyperparameters);

  // Updating statistics
  for (size_t i = 0; i < _problem->_actionVectorSize; i++)
  {
    _statisticsAverageActionSigmas[i] /= (float)_miniBatchSize;
    _statisticsAverageTargetSigmas[i] /= (float)_miniBatchSize;
  }
}

knlohmann::json GFPT::optimizeAction(const std::vector<std::vector<float>> stateActionSequence, const std::vector<float> &curMeans)
{
  // Getting current thread ID and corresponding optimizer and batch optimization NN
  size_t curThread = omp_get_thread_num();
  auto actionOptimizer = _actionOptimizers[curThread];
  auto batchOptimizationNetwork = _batchOptimizationNetworks[curThread];

  // Creating storage for CMAES optimization candidates (input)
  std::vector<std::vector<std::vector<float>>> candidateMiniBatch(_policyOptimizationCandidates);

  // Creating storage for CMAES optimization candidate evaluations (results)
  std::vector<float> candidateEvaluations(_policyOptimizationCandidates);

  // Creating minibatch of input state/action sequences
  for (size_t c = 0; c < _policyOptimizationCandidates; c++) candidateMiniBatch[c] = stateActionSequence;

  // Setting initial action means from the current means
  actionOptimizer->_initialMeans = curMeans;

  // Resetting the state of the CMAES optimizer for the new batch
  actionOptimizer->reset();

  // Storage for the average of the advantage value from the last iteration
  float prvAverageAdvantage = -std::numeric_limits<float>::infinity();
  float curAverageAdvantage = 0;

  // Run the CMAES experiment until the desired convergence
  while (std::abs(curAverageAdvantage - prvAverageAdvantage) > _policyTargetAccuracy)
  {
    // Asking CMAES to generate candidates
    actionOptimizer->prepareGeneration();

    // Gathering candidate states into a single minibatch -- replacing last action of each state/action sequence
    for (size_t c = 0; c < _policyOptimizationCandidates; c++)
    {
      // Getting final timestep of the input
      size_t t = candidateMiniBatch[c].size() - 1;

      // Replacing the action of the last timestep
      for (size_t i = 0; i < _problem->_actionVectorSize; i++)
        candidateMiniBatch[c][t][_problem->_stateVectorSize + i] = actionOptimizer->_samplePopulation[c][i];
    }

    // Running evaluation of the entire set of candidates
    batchOptimizationNetwork->forward(candidateMiniBatch);
    auto criticEvaluations = batchOptimizationNetwork->_outputValues;

    // Getting the advantage function for all candidates
    for (size_t i = 0; i < _policyOptimizationCandidates; i++)
      candidateEvaluations[i] = criticEvaluations[i][0];

    // Re-calculating average advantage value from the last generation
    prvAverageAdvantage = curAverageAdvantage;
    curAverageAdvantage = 0.0f;
    for (size_t i = 0; i < _policyOptimizationCandidates; i++)
     curAverageAdvantage += candidateEvaluations[i];
    curAverageAdvantage /= (float)_policyOptimizationCandidates;

    // Running one more CMAES iteration
    actionOptimizer->updateDistribution(candidateEvaluations);
    actionOptimizer->_currentGeneration++;
  }

  //if (curThread == 0) printf("Current Generation: %lu. averageAdvantage: %f\n", actionOptimizer->_currentGeneration, curAverageAdvantage);

  // Grabbing diagonal covariances
  std::vector<float> bstSigmas(_problem->_actionVectorSize);
  for (size_t i = 0; i < _problem->_actionVectorSize; i++)
    bstSigmas[i] = actionOptimizer->_sigma * sqrtf(actionOptimizer->_covarianceMatrix[i * _problem->_actionVectorSize + i]);

  // Returning optimization results
  knlohmann::json result;
  result["Best Sigmas"] = bstSigmas;
  result["Best Means"] = actionOptimizer->_currentMean;
  result["Average Value"] = curAverageAdvantage;

  //  if (curThread == 0)
  //   printf("Last Gen: %lu - Bestf: %f - Diff: %f\n",  actionOptimizer->_currentGeneration, actionOptimizer->_bestEverValue, averageAdvantage - actionOptimizer->_bestEverValue);

  return result;
}

knlohmann::json GFPT::runPolicy(const std::vector<std::vector<float>> &state)
{
  auto eval = _vpLearner->getEvaluation({state})[0];

  std::vector<float> actionMeans(_problem->_actionVectorSize);
  std::vector<float> actionSigmas(_problem->_actionVectorSize);

  for (size_t i = 0; i < _problem->_actionVectorSize; i++)
  {
   size_t varIdx = _problem->_actionVectorIndexes[i];
   float sigma = _k->_variables[varIdx]->_initialExplorationNoise;

   // Checking correct noise configuration
   if (sigma <= 0.0f) KORALI_LOG_ERROR("Provided initial noise (%f) for action variable %lu is not defined or negative.\n", sigma, varIdx);

    actionMeans[i] = eval[i + 1];
    actionSigmas[i] = sigma; //eval[_problem->_actionVectorSize + i + 1];
  }

  knlohmann::json policy;
  policy["State Value"] = eval[0];
  policy["Action Means"] = actionMeans;
  policy["Action Sigmas"] = actionSigmas;
  return policy;
}

knlohmann::json GFPT::getAgentPolicy()
{
  knlohmann::json hyperparameters;
  hyperparameters["Policy"] = _vpLearner->getInferenceHyperparameters();
  return hyperparameters;
}

void GFPT::setAgentPolicy(const knlohmann::json &hyperparameters)
{
  auto policyHyperparameters = hyperparameters["Policy"].get<std::vector<float>>();
  _vpLearner->setInferenceHyperparameters(policyHyperparameters);
}

void GFPT::setTrainingState(const knlohmann::json &state)
{
  _qLearner->setTrainingHyperparameters(state["Q"]["Training"]);
  _qLearner->setInferenceHyperparameters(state["Q"]["Inference"]);

  _vpLearner->setTrainingHyperparameters(state["VP"]["Training"]);
  _vpLearner->setInferenceHyperparameters(state["VP"]["Inference"]);
}

knlohmann::json GFPT::getTrainingState()
{
  knlohmann::json state;

  state["Q"]["Training"] = _qLearner->getTrainingHyperparameters();
  state["Q"]["Inference"] = _qLearner->getInferenceHyperparameters();

  state["VP"]["Training"] = _vpLearner->getTrainingHyperparameters();
  state["VP"]["Inference"] = _vpLearner->getInferenceHyperparameters();

  return state;
}

void GFPT::printAgentInformation()
{
  _k->_logger->logInfo("Normal", " + Training Loss: [VP = %.3e] [Q = %.3e]\n", _vpLearner->_currentLoss, _qLearner->_currentLoss);
  _k->_logger->logInfo("Normal", " + Learning Rate: [VP = %.3e] [Q = %.3e]\n", _vpLearner->_learningRate, _qLearner->_learningRate);
  _k->_logger->logInfo("Normal", " + Average Action Sigma: [ Current ] -> [ Target ]\n");
  for (size_t i = 0; i < _problem->_actionVectorSize; ++i) _k->_logger->logInfo("Normal", " +  [ %f ] -> [ %f ] \n", _statisticsAverageActionSigmas[i], _statisticsAverageTargetSigmas[i]);
}

} // namespace continuous
} // namespace agent
} // namespace solver
} // namespace korali
