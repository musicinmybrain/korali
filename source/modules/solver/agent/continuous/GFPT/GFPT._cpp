#include "engine.hpp"
#include "modules/solver/agent/continuous/GFPT/GFPT.hpp"
#include "sample/sample.hpp"
#include <omp.h>

namespace korali
{
namespace solver
{
namespace agent
{
namespace continuous
{
void GFPT::initializeAgent()
{
  // Initializing common discrete agent configuration
  Continuous::initializeAgent();

  /*********************************************************************
  * State Value Function Learner
  *********************************************************************/

  _vExperiment["Problem"]["Type"] = "Supervised Learning";
  _vExperiment["Problem"]["Max Timesteps"] = _timeSequenceLength;
  _vExperiment["Problem"]["Training Batch Size"] = _miniBatchSize;
  _vExperiment["Problem"]["Inference Batch Size"] = 1;
  _vExperiment["Problem"]["Input"]["Size"] = _problem->_stateVectorSize;
  _vExperiment["Problem"]["Solution"]["Size"] = 1;

  _vExperiment["Solver"]["Type"] = "Learner/DeepSupervisor";
  _vExperiment["Solver"]["Optimizer"] = _optimizer;
  _vExperiment["Solver"]["Learning Rate"] = _criticLearningRate;
  _vExperiment["Solver"]["Loss Function"] = "Mean Squared Error";
  _vExperiment["Solver"]["Steps Per Generation"] = 1;
  _vExperiment["Solver"]["Neural Network"]["Engine"] = _neuralNetworkEngine;
  _vExperiment["Solver"]["Neural Network"]["Hidden Layers"] = _neuralNetworkHiddenLayers;

  // Running initialization to verify that the configuration is correct
  _vExperiment.initialize();
  _vProblem = dynamic_cast<problem::SupervisedLearning *>(_vExperiment._problem);
  _vLearner = dynamic_cast<solver::learner::DeepSupervisor *>(_vExperiment._solver);

  /*********************************************************************
  * Advantage Function learner
  *********************************************************************/

  _aExperiment["Problem"]["Type"] = "Supervised Learning";
  _aExperiment["Problem"]["Max Timesteps"] = _timeSequenceLength;
  _aExperiment["Problem"]["Training Batch Size"] = _miniBatchSize;
  _aExperiment["Problem"]["Inference Batch Size"] = 1;
  _aExperiment["Problem"]["Input"]["Size"] = _problem->_stateVectorSize + _problem->_actionVectorSize;
  _aExperiment["Problem"]["Solution"]["Size"] = 1;

  _aExperiment["Solver"]["Type"] = "Learner/DeepSupervisor";
  _aExperiment["Solver"]["Optimizer"] = _optimizer;
  _aExperiment["Solver"]["Learning Rate"] = _criticLearningRate;
  _aExperiment["Solver"]["Loss Function"] = "Mean Squared Error";
  _aExperiment["Solver"]["Steps Per Generation"] = 1;
  _aExperiment["Solver"]["Neural Network"]["Engine"] = _neuralNetworkEngine;
  _aExperiment["Solver"]["Neural Network"]["Hidden Layers"] = _neuralNetworkHiddenLayers;

  // Running initialization to verify that the configuration is correct
  _aExperiment.initialize();
  _aProblem = dynamic_cast<problem::SupervisedLearning *>(_aExperiment._problem);
  _aLearner = dynamic_cast<solver::learner::DeepSupervisor *>(_aExperiment._solver);

  /*********************************************************************
   * Initializing Policy Experiment
   *********************************************************************/

  _policyExperiment["Problem"]["Type"] = "Supervised Learning";
  _policyExperiment["Problem"]["Max Timesteps"] = _timeSequenceLength;
  _policyExperiment["Problem"]["Training Batch Size"] = _miniBatchSize;
  _policyExperiment["Problem"]["Inference Batch Size"] = 1;
  _policyExperiment["Problem"]["Input"]["Size"] = _problem->_stateVectorSize;
  _policyExperiment["Problem"]["Solution"]["Size"] = _problem->_actionVectorSize;

  _policyExperiment["Solver"]["Type"] = "Learner/DeepSupervisor";
  _policyExperiment["Solver"]["Optimizer"] = _optimizer;
  _policyExperiment["Solver"]["Learning Rate"] = _policyLearningRate;
  _policyExperiment["Solver"]["Loss Function"] = "Direct Gradient";
  _policyExperiment["Solver"]["Steps Per Generation"] = 1;
  _policyExperiment["Solver"]["Neural Network"]["Engine"] = _neuralNetworkEngine;
  _policyExperiment["Solver"]["Neural Network"]["Hidden Layers"] = _neuralNetworkHiddenLayers;

  // Finally adding the output layer, with masks to normalize and rescale the output to fit the action's [lower, upper] bounds
  for (size_t i = 0; i < _problem->_actionVectorSize; i++)
  {
    size_t varIdx = _problem->_actionVectorIndexes[i];
    auto lowerBound = _k->_variables[varIdx]->_lowerBound;
    auto upperBound = _k->_variables[varIdx]->_upperBound;
    float scale = (upperBound - lowerBound) * 0.5;
    float shift = (upperBound + lowerBound) * 0.5;
    _policyExperiment["Solver"]["Neural Network"]["Output Layer"]["Tanh Mask"][i] = true; // Step 1) Regularize to [-1, +1]
    _policyExperiment["Solver"]["Neural Network"]["Output Layer"]["Scale"][i] = scale;    // Step 2) Rescale to real spread
    _policyExperiment["Solver"]["Neural Network"]["Output Layer"]["Shift"][i] = shift;    // Step 3) Shift to fit
  }

  // Running initialization to verify that the configuration is correct
  _policyExperiment.initialize();
  _policyProblem = dynamic_cast<problem::SupervisedLearning *>(_policyExperiment._problem);
  _policyLearner = dynamic_cast<solver::learner::DeepSupervisor *>(_policyExperiment._solver);

  /*********************************************************************
  * Initializing Action Optimizers (one per thread)
  *********************************************************************/

  _actionOptimizers.resize(_maxThreads);
  for (size_t threadIdx = 0; threadIdx < _maxThreads; threadIdx++)
  {
    _actionOptimizers[threadIdx] = new korali::fCMAES(_problem->_actionVectorSize, _policyOptimizationCandidates);
    _actionOptimizers[threadIdx]->setSeed(_k->_randomSeed++);

    // Initializing experiment with an initial zero set
    for (size_t i = 0; i < _problem->_actionVectorSize; i++)
    {
      size_t varIdx = _problem->_actionVectorIndexes[i];
      _actionOptimizers[threadIdx]->_lowerBounds[i] = _k->_variables[varIdx]->_lowerBound;
      _actionOptimizers[threadIdx]->_upperBounds[i] = _k->_variables[varIdx]->_upperBound;
      _actionOptimizers[threadIdx]->_initialMeans[i] = (_k->_variables[varIdx]->_lowerBound + _k->_variables[varIdx]->_upperBound) * 0.5;
      _actionOptimizers[threadIdx]->_initialStandardDeviations[i] = (_k->_variables[varIdx]->_upperBound - _k->_variables[varIdx]->_lowerBound) * 0.5;
      _actionOptimizers[threadIdx]->_minMeanUpdates[i] = (_k->_variables[varIdx]->_upperBound - _k->_variables[varIdx]->_lowerBound) * _policyTargetAccuracy;
    }
  }

  /*********************************************************************
  * Creating special evaluation networks for cases with different mini batch sizes (one per thread)
  *********************************************************************/

  _batchOptimizationNetworks.resize(_maxThreads);
  for (size_t threadIdx = 0; threadIdx < _maxThreads; threadIdx++)
  {
    knlohmann::json nnConfig;
    _aLearner->_trainingNeuralNetwork->getConfiguration(nnConfig);
    nnConfig["Batch Size"] = _policyOptimizationCandidates;
    _batchOptimizationNetworks[threadIdx] = dynamic_cast<NeuralNetwork *>(getModule(nnConfig, _k));
    _batchOptimizationNetworks[threadIdx]->initialize();
  }

  // Profiling
  _criticUpdateTime = 0.0;
  _policyUpdateTime = 0.0;
}

float GFPT::retraceFunction(size_t expId)
{
  // Finding last experience in the episode that corresponds to expId
  ssize_t startId = expId;
  ssize_t endId = startId;
  while (_experienceReplay[endId].termination == e_nonTerminal) endId++;

  // Calculating initial Vtbc
  float Vtbc = 0.0f;

  // If it was a truncated episode, add the value function for the terminal state to Vtbc
  if (_experienceReplay[endId].termination == e_truncated)
  {
    // Get truncated state sequence, adding the truncated state to it and removing first time element
    auto expTruncatedStateSequence = getTruncatedStateTimeSequence(endId);
    float terminalV = _experienceReplay[endId].cache.access("Terminal State Value", [this, expTruncatedStateSequence]() { return this->stateValueFunction(expTruncatedStateSequence); });
    Vtbc = terminalV;
  }

  // Now iterating backwards to calculate the rest of vTbc
  for (ssize_t curId = endId; curId >= startId; curId--)
  {
    // Getting current reward, action, and state
    auto curReward = _experienceReplay[curId].reward;
    auto expStateSequence = getStateTimeSequence(curId);
    auto expAction = _experienceReplay[curId].action;

    // Calculating state value function
    float curV = _experienceReplay[curId].cache.access("State Value", [this, expStateSequence]() { return this->stateValueFunction(expStateSequence); });

    // Calculating importance weight
    float importanceWeight = _experienceReplay[curId].cache.access("Importance Weight", [this, curId]() { return getExperienceImportanceWeight(curId); });

    // Truncate importance weight
    float truncatedImportanceWeight = std::min(1.0f, importanceWeight);

    // Calculating Vtbc
    Vtbc = curV + truncatedImportanceWeight * (curReward + _discountFactor * Vtbc - curV);
  }

  // Returning Vtbc
  return Vtbc;
}

float GFPT::stateValueFunction(const std::vector<std::vector<float>> &stateSequence)
{
  // Calculating V(s_i)
  float v = _vLearner->getEvaluation({stateSequence})[0][0];

  return v;
}

float GFPT::currentActionAdvantageFunction(const std::vector<std::vector<float>> &stateActionSequence, const std::vector<float> &action)
{
  // Creating a copy of the input state/action sequence
  auto sequenceCopy = stateActionSequence;

  // Getting final timestep of the input
  size_t t = sequenceCopy.size() - 1;

  // Replacing last action with the one provided for evaluation
  for (size_t i = 0; i < _problem->_actionVectorSize; i++) sequenceCopy[t][_problem->_stateVectorSize + i] = action[i];

  // Getting evaluation
  float a = _aLearner->getEvaluation({sequenceCopy})[0][0];

  return a;
}

float GFPT::averageActionAdvantageFunction(const std::vector<float> &expMeans, const std::vector<float> &curSigmas, const std::vector<std::vector<float>> &stateActionSequence)
{
  // Creating storage for average action minibatch
  std::vector<float> aResults(_criticAdvantageFunctionPopulation);

  // Filling minibatch to calculate average action Q
  for (size_t i = 0; i < _criticAdvantageFunctionPopulation; i++)
  {
    // Generating random a'
    auto newAction = generateTrainingAction(expMeans, curSigmas);

    // Running evaluation of the entire minibatch
    aResults[i] = currentActionAdvantageFunction(stateActionSequence, newAction);
  }

  // Initializing average A(s,a) counter
  float avgA = 0.0;

  // Summing A(s_i+1, a') for many a'
  for (size_t i = 0; i < _criticAdvantageFunctionPopulation; i++)
    avgA += aResults[i];

  // Normalizing Average
  avgA /= (float)_criticAdvantageFunctionPopulation;

  return avgA;
}

void GFPT::trainPolicy()
{
 /*******************************************************************
 * Adapting learning rates based on current off-policy ratio
 ******************************************************************/

 // If there are more off-policy experiences than the target, slowly decrease learning rates
 if (_experienceReplayOffPolicyCurrentRatio > _experienceReplayOffPolicyTarget)
 {
  _vLearner->_learningRate *= 0.99;
  _aLearner->_learningRate *= 0.99;
  _policyLearner->_learningRate *= 0.99;
 }
 else // Otherwise, start recovering it towards the maximum
 {
  _vLearner->_learningRate *= 1.01;
  _aLearner->_learningRate *= 1.01;
  _policyLearner->_learningRate *= 1.01;

  if (_vLearner->_learningRate > _criticLearningRate) _vLearner->_learningRate = _criticLearningRate;
  if (_aLearner->_learningRate > _criticLearningRate) _aLearner->_learningRate = _criticLearningRate;
  if (_policyLearner->_learningRate > _policyLearningRate) _policyLearner->_learningRate = _policyLearningRate;
 }

  /***************************************************************************************
  * Updating Policy Network by performing a Gradient descent step with latest experiences
  ***************************************************************************************/

  auto beginTime = std::chrono::steady_clock::now(); // Profiling

  // Calculating cumulative Q*, for statistical purposes
  _cumulativeQStar = 0.0;

  // Creating minibatch for the critic update
  auto miniBatchIndexes = generateMiniBatch(_miniBatchSize);

#pragma omp parallel for schedule(dynamic, 1)
  for (size_t b = 0; b < _miniBatchSize; b++)
  {
    // Selecting a uniformly random selected, yet not repeated experience
    size_t expId = miniBatchIndexes[b];

    /*****************************************
    * Critic Section
    *****************************************/

    // We calculate qStar depending on whether we use retrace or not
    float Vtbc = retraceFunction(expId);

    // Getting experience's current state, state/action sequences
    auto expStateSequence = getStateTimeSequence(expId);
    auto expStateActionSequence = getStateActionTimeSequence(expId);
    auto expAction = _experienceReplay[expId].action;

    // Updating action distributions for the current state
    auto policy = runPolicy(expStateSequence);
    auto expMeans = policy["Action Means"].get<std::vector<float>>();
    auto curSigmas = policy["Action Sigmas"].get<std::vector<float>>();

    // Now calculating V, A, and avgA for current state/action
    float curA = currentActionAdvantageFunction(expStateActionSequence, expAction);
    float avgA = averageActionAdvantageFunction(expMeans, curSigmas, expStateActionSequence);
    float curV = stateValueFunction(expStateSequence);

    // Now calculating targets for V(s) and A(s,a)
    float vTarget = Vtbc - curV + curA;
    float aTarget = Vtbc - curV + avgA;

    // Updating inputs to training learners
    _aProblem->_inputData[b] = expStateActionSequence;
    _aProblem->_solutionData[b] = {aTarget};

    _vProblem->_inputData[b] = expStateSequence;
    _vProblem->_solutionData[b] = {vTarget};

    // Keeping statistics
    _cumulativeQStar += Vtbc;
  }

  // Running one generation of the optimization method with the given mini-batch
  _aLearner->runGeneration();
  _vLearner->runGeneration();

  // Keeping critic/policy statistics
  _averageQStar = _cumulativeQStar / (float)_miniBatchSize;

  auto endTime = std::chrono::steady_clock::now();                                                        // Profiling
  _criticUpdateTime += std::chrono::duration_cast<std::chrono::nanoseconds>(endTime - beginTime).count(); // Profiling

  /*******************************************************************
  * Now computing new policy gradients with a stochastic method (CMAES)
  ******************************************************************/

  beginTime = std::chrono::steady_clock::now(); // Profiling

  // Updating parameters for batch optimization

  auto aHyperparameters = _aLearner->getTrainingHyperparameters();

  // Updating thread-local configuration
  for (size_t threadIdx = 0; threadIdx < _maxThreads; threadIdx++)
  {
    // Updating batch evaluation network for the advantage function for CMAES steps
    _batchOptimizationNetworks[threadIdx]->setHyperparameters(aHyperparameters);
  }

#pragma omp parallel for schedule(dynamic, 1)
  for (size_t b = 0; b < _miniBatchSize; b++)
  {
    // Getting current thread ID and corresponding optimizer and batch optimization NN
    size_t curThread = omp_get_thread_num();
    auto actionOptimizer = _actionOptimizers[curThread];
    auto batchOptimizationNetwork = _batchOptimizationNetworks[curThread];

    // Getting experience id
    size_t expId = miniBatchIndexes[b];

    // Getting current state time sequence
    auto expStateSequence = getStateTimeSequence(expId);

    // Creating storage for action gradients
    std::vector<float> meanGradients(_problem->_actionVectorSize, 0.0f);

    // Getting experience's importance weight (or recalculating it if not in cache memory)
    float importanceWeight = _experienceReplay[expId].cache.access("Importance Weight", [this, expId]() { return getExperienceImportanceWeight(expId); });

    // Checking whether the experience is on policy (i.e., it is within the [1/cutoff, cutoff] region)
    bool isOnPolicy = (importanceWeight > (1.0f / _experienceReplayOffPolicyCutoffScale)) && (importanceWeight < _experienceReplayOffPolicyCutoffScale);

    // If the experiment if on-policy, we use it for the calculation of the gradients
    if (isOnPolicy)
    {
      // Getting current sate/action time sequence
      auto expStateActionSequence = getStateActionTimeSequence(expId);

      // Creating storage for CMAES optimization candidates (input)
      std::vector<std::vector<std::vector<float>>> candidateMiniBatch(_policyOptimizationCandidates);

      // Creating storage for CMAES optimization candidate evaluations (results)
      std::vector<float> candidateEvaluations(_policyOptimizationCandidates);

      // Creating minibatch of input state/action sequences
      for (size_t c = 0; c < _policyOptimizationCandidates; c++) candidateMiniBatch[c] = expStateActionSequence;

      // Updating action distributions for the current state to get its current means
      auto policy = runPolicy(expStateSequence);
      auto expMeans = policy["Action Means"].get<std::vector<float>>();

      // Setting initial action means from the experience's own action
      actionOptimizer->_initialMeans = expMeans;

      // To prevent CMAES from failing.
      actionOptimizer->reset();

      // Run the CMAES experiment until the desired convergence
      while (actionOptimizer->checkTermination() == false)
      {
        // Asking CMAES to generate candidates
        actionOptimizer->prepareGeneration();

        // Gathering candidate states into a single minibatch -- replacing last action of each state/action sequence
        for (size_t c = 0; c < _policyOptimizationCandidates; c++)
        {
          // Getting final timestep of the input
          size_t t = candidateMiniBatch[c].size() - 1;

          // Replacing the action of the last timestep
          for (size_t i = 0; i < _problem->_actionVectorSize; i++)
            candidateMiniBatch[c][t][_problem->_stateVectorSize + i] = actionOptimizer->_samplePopulation[c][i];
        }

        // Running evaluation of the entire set of candidates
        batchOptimizationNetwork->forward(candidateMiniBatch);
        auto criticEvaluations = batchOptimizationNetwork->_outputValues;

        // Getting the advantage function for all candidates
        for (size_t i = 0; i < _policyOptimizationCandidates; i++)
          candidateEvaluations[i] = criticEvaluations[i][0];

        // Running one more CMAES iteration
        actionOptimizer->updateDistribution(candidateEvaluations);
        actionOptimizer->_currentGeneration++;
      }

      // Calculating gradient of means that maximize advantage for the given state
      auto bestMean = actionOptimizer->_bestEverVariables;
      for (size_t j = 0; j < _problem->_actionVectorSize; j++)
        meanGradients[j] += (bestMean[j] - expMeans[j]);
    }

    // Adding means to the policy update
    _policyProblem->_inputData[b] = expStateSequence;
    _policyProblem->_solutionData[b] = meanGradients;
  }

  // Running one generation of the optimization method with the given mini-batch
  _policyLearner->runGeneration();

  // Getting new hyperparameters
  auto newPolicyHyperparameters = _policyLearner->getTrainingHyperparameters();

  // Updating hyperparameters
  _policyLearner->setInferenceHyperparameters(newPolicyHyperparameters);

  endTime = std::chrono::steady_clock::now();                                                             // Profiling
  _policyUpdateTime += std::chrono::duration_cast<std::chrono::nanoseconds>(endTime - beginTime).count(); // Profiling
}

knlohmann::json GFPT::runPolicy(const std::vector<std::vector<float>> &state)
{
  auto eval = _policyLearner->getEvaluation({state})[0];

  std::vector<float> actionMeans(_problem->_actionVectorSize);
  std::vector<float> actionSigmas(_problem->_actionVectorSize);

  for (size_t i = 0; i < _problem->_actionVectorSize; ++i)
  {
    auto varIdx = _problem->_actionVectorIndexes[i];
    float sigma = _k->_variables[varIdx]->_explorationSigma;

    actionMeans[i] = eval[i];
    actionSigmas[i] = sigma;
  }

  knlohmann::json policy;
  policy["Action Means"] = actionMeans;
  policy["Action Sigmas"] = actionSigmas;
  return policy;
}

knlohmann::json GFPT::getAgentPolicy()
{
  knlohmann::json hyperparameters;
  hyperparameters["Policy"] = _policyLearner->getInferenceHyperparameters();
  return hyperparameters;
}

void GFPT::setAgentPolicy(const knlohmann::json &hyperparameters)
{
  auto policyHyperparameters = hyperparameters["Policy"].get<std::vector<float>>();
  _policyLearner->setInferenceHyperparameters(policyHyperparameters);
}

void GFPT::setTrainingState(const knlohmann::json &state)
{
  _aLearner->setTrainingHyperparameters(state["A"]["Training"]);
  _aLearner->setInferenceHyperparameters(state["A"]["Inference"]);

  _vLearner->setTrainingHyperparameters(state["V"]["Training"]);
  _vLearner->setInferenceHyperparameters(state["V"]["Inference"]);

  _policyLearner->setTrainingHyperparameters(state["Policy"]["Training"]);
  _policyLearner->setInferenceHyperparameters(state["Policy"]["Inference"]);
}

knlohmann::json GFPT::getTrainingState()
{
  knlohmann::json state;
  state["A"]["Training"] = _aLearner->getTrainingHyperparameters();
  state["A"]["Inference"] = _aLearner->getInferenceHyperparameters();

  state["V"]["Training"] = _vLearner->getTrainingHyperparameters();
  state["V"]["Inference"] = _vLearner->getInferenceHyperparameters();

  state["Policy"]["Training"] = _policyLearner->getTrainingHyperparameters();
  state["Policy"]["Inference"] = _policyLearner->getInferenceHyperparameters();
  return state;
}

void GFPT::printAgentInformation()
{
  _k->_logger->logInfo("Normal", "Critic Information:\n");

  _k->_logger->logInfo("Normal", " + Average Q-Value in Mini-Batch:  %.4e\n", _averageQStar);

  _k->_logger->logInfo("Normal", "V Function Information:\n");

  _k->_logger->logInfo("Normal", " + Learning Rate:                  %.4e (Max: %.4e)\n", _vLearner->_learningRate, _criticLearningRate);
  _vExperiment._logger->_verbosityLevel = _k->_logger->_verbosityLevel;
  _vExperiment._solver->printGenerationAfter();
  _vExperiment._logger->setVerbosityLevel("Silent");

  _k->_logger->logInfo("Normal", "A Function Information:\n");

  _k->_logger->logInfo("Normal", " + Learning Rate:                  %.4e (Max: %.4e)\n", _aLearner->_learningRate, _criticLearningRate);
  _aExperiment._logger->_verbosityLevel = _k->_logger->_verbosityLevel;
  _aExperiment._solver->printGenerationAfter();
  _aExperiment._logger->setVerbosityLevel("Silent");

  _k->_logger->logInfo("Normal", "Policy Information:\n");

  _k->_logger->logInfo("Normal", " + Learning Rate:                  %.4e (Max: %.4e)\n", _policyLearner->_learningRate, _policyLearningRate);
  _policyExperiment._logger->_verbosityLevel = _k->_logger->_verbosityLevel;
  _policyExperiment._solver->printGenerationAfter();
  _policyExperiment._logger->setVerbosityLevel("Silent");

  _k->_logger->logInfo("Normal", " + Critic Update Time:         %fs\n", _criticUpdateTime / 1.0e+9f);
  _k->_logger->logInfo("Normal", " + Policy Update Time:         %fs\n", _policyUpdateTime / 1.0e+9f);
}

} // namespace continuous
} // namespace agent
} // namespace solver
} // namespace korali
