#include "engine.hpp"
#include "modules/solver/agent/continuous/GFPT/GFPT.hpp"
#include "sample/sample.hpp"
#include <omp.h>

namespace korali
{
namespace solver
{
namespace agent
{
namespace continuous
{
void GFPT::initializeAgent()
{
  // Initializing common discrete agent configuration
  Continuous::initializeAgent();

  /*********************************************************************
  * State Value Function Learner
  *********************************************************************/

  _vExperiment["Problem"]["Type"] = "Supervised Learning";
  _vExperiment["Problem"]["Max Timesteps"] = _timeSequenceLength;
  _vExperiment["Problem"]["Training Batch Size"] = _miniBatchSize;
  _vExperiment["Problem"]["Inference Batch Size"] = 1;
  _vExperiment["Problem"]["Input"]["Size"] = _problem->_stateVectorSize;
  _vExperiment["Problem"]["Solution"]["Size"] = 1;

  _vExperiment["Solver"]["Type"] = "Learner/DeepSupervisor";
  _vExperiment["Solver"]["Optimizer"] = _optimizer;
  _vExperiment["Solver"]["Learning Rate"] = _learningRate;
  _vExperiment["Solver"]["Loss Function"] = "Mean Squared Error";
  _vExperiment["Solver"]["Steps Per Generation"] = 1;
  _vExperiment["Solver"]["Neural Network"]["Engine"] = _neuralNetworkEngine;
  _vExperiment["Solver"]["Neural Network"]["Hidden Layers"] = _neuralNetworkHiddenLayers;

  // Running initialization to verify that the configuration is correct
  _vExperiment.initialize();
  _vProblem = dynamic_cast<problem::SupervisedLearning *>(_vExperiment._problem);
  _vLearner = dynamic_cast<solver::learner::DeepSupervisor *>(_vExperiment._solver);

  /*********************************************************************
  * Advantage Function learner
  *********************************************************************/

  _aExperiment["Problem"]["Type"] = "Supervised Learning";
  _aExperiment["Problem"]["Max Timesteps"] = _timeSequenceLength;
  _aExperiment["Problem"]["Training Batch Size"] = _miniBatchSize;
  _aExperiment["Problem"]["Inference Batch Size"] = 1;
  _aExperiment["Problem"]["Input"]["Size"] = _problem->_stateVectorSize + _problem->_actionVectorSize;
  _aExperiment["Problem"]["Solution"]["Size"] = 1;

  _aExperiment["Solver"]["Type"] = "Learner/DeepSupervisor";
  _aExperiment["Solver"]["Optimizer"] = _optimizer;
  _aExperiment["Solver"]["Learning Rate"] = _learningRate;
  _aExperiment["Solver"]["Loss Function"] = "Mean Squared Error";
  _aExperiment["Solver"]["Steps Per Generation"] = 1;
  _aExperiment["Solver"]["Neural Network"]["Engine"] = _neuralNetworkEngine;
  _aExperiment["Solver"]["Neural Network"]["Hidden Layers"] = _neuralNetworkHiddenLayers;

  // Running initialization to verify that the configuration is correct
  _aExperiment.initialize();
  _aProblem = dynamic_cast<problem::SupervisedLearning *>(_aExperiment._problem);
  _aLearner = dynamic_cast<solver::learner::DeepSupervisor *>(_aExperiment._solver);

  /*********************************************************************
   * Initializing Policy Experiment
   *********************************************************************/

  _policyExperiment["Problem"]["Type"] = "Supervised Learning";
  _policyExperiment["Problem"]["Max Timesteps"] = _timeSequenceLength;
  _policyExperiment["Problem"]["Training Batch Size"] = _miniBatchSize;
  _policyExperiment["Problem"]["Inference Batch Size"] = 1;
  _policyExperiment["Problem"]["Input"]["Size"] = _problem->_stateVectorSize;
  _policyExperiment["Problem"]["Solution"]["Size"] = 2 * _problem->_actionVectorSize;

  _policyExperiment["Solver"]["Type"] = "Learner/DeepSupervisor";
  _policyExperiment["Solver"]["Optimizer"] = _optimizer;
  _policyExperiment["Solver"]["Learning Rate"] = _learningRate;
  _policyExperiment["Solver"]["Loss Function"] = "Direct Gradient";
  _policyExperiment["Solver"]["Steps Per Generation"] = 1;
  _policyExperiment["Solver"]["Neural Network"]["Engine"] = _neuralNetworkEngine;
  _policyExperiment["Solver"]["Neural Network"]["Hidden Layers"] = _neuralNetworkHiddenLayers;
  _policyExperiment["Solver"]["Output Weights Scaling"] = 0.001;

  // Finally adding the output layer, with masks to normalize and rescale the output to fit the action's [lower, upper] bounds
  for (size_t i = 0; i < _problem->_actionVectorSize; i++)
  {
    size_t varIdx = _problem->_actionVectorIndexes[i];
    auto lowerBound = _k->_variables[varIdx]->_lowerBound;
    auto upperBound = _k->_variables[varIdx]->_upperBound;
    float shift = (upperBound + lowerBound) * 0.5;
    float sigma = _k->_variables[varIdx]->_initialExplorationNoise;

    // Checking correct noise configuration
    if (sigma <= 0.0f) KORALI_LOG_ERROR("Provided initial noise (%f) for action variable %lu is not defined or negative.\n", sigma, varIdx);

    _policyExperiment["Solver"]["Neural Network"]["Output Layer"]["Tanh Mask"][i] = false;    // Step 1) Regularize to [-1, +1]
    _policyExperiment["Solver"]["Neural Network"]["Output Layer"]["Sigmoid Mask"][i] = false; // Do not apply sigmoid mask to sigmas
    _policyExperiment["Solver"]["Neural Network"]["Output Layer"]["Scale"][i] = 1.0f;         // Step 2)Do not rescale
    _policyExperiment["Solver"]["Neural Network"]["Output Layer"]["Shift"][i] = shift;        // Step 3) Shift to fit mid point

    _policyExperiment["Solver"]["Neural Network"]["Output Layer"]["Tanh Mask"][_problem->_actionVectorSize + i] = false;    // Do not apply tanh mask to sigmas
    _policyExperiment["Solver"]["Neural Network"]["Output Layer"]["Sigmoid Mask"][_problem->_actionVectorSize + i] = true;  // Step 1) Regularize to [0, +inf]
    _policyExperiment["Solver"]["Neural Network"]["Output Layer"]["Scale"][_problem->_actionVectorSize + i] = sigma * 2.0f; // Step 2) With an initial value of 0.5, rescale sigma by multiplying by two
    _policyExperiment["Solver"]["Neural Network"]["Output Layer"]["Shift"][_problem->_actionVectorSize + i] = 0.0f;         // Step 3) Shift to fit
  }

  // Running initialization to verify that the configuration is correct
  _policyExperiment.initialize();
  _policyProblem = dynamic_cast<problem::SupervisedLearning *>(_policyExperiment._problem);
  _policyLearner = dynamic_cast<solver::learner::DeepSupervisor *>(_policyExperiment._solver);

  /*********************************************************************
  * Initializing Action Optimizers (one per thread)
  *********************************************************************/

  _actionOptimizers.resize(_maxThreads);
  for (size_t threadIdx = 0; threadIdx < _maxThreads; threadIdx++)
  {
    _actionOptimizers[threadIdx] = new korali::fCMAES(_problem->_actionVectorSize, _policyOptimizationCandidates);
    _actionOptimizers[threadIdx]->setSeed(_k->_randomSeed++);

    // Initializing experiment with an initial zero set
    for (size_t i = 0; i < _problem->_actionVectorSize; i++)
    {
      size_t varIdx = _problem->_actionVectorIndexes[i];
      _actionOptimizers[threadIdx]->_lowerBounds[i] = _k->_variables[varIdx]->_lowerBound;
      _actionOptimizers[threadIdx]->_upperBounds[i] = _k->_variables[varIdx]->_upperBound;
      _actionOptimizers[threadIdx]->_initialMeans[i] = (_k->_variables[varIdx]->_lowerBound + _k->_variables[varIdx]->_upperBound) * 0.5;
      _actionOptimizers[threadIdx]->_initialStandardDeviations[i] = (_k->_variables[varIdx]->_upperBound - _k->_variables[varIdx]->_lowerBound) * 0.5;
    }

    // Setting termination criterion for optimizer -- stop when the given accuracy has been reached for the advantage estimation
    //_actionOptimizers[threadIdx]->_targetMaxStandardDeviation = _policyTargetAccuracy;
      _actionOptimizers[threadIdx]->_minValueDifferenceThreshold = _policyTargetAccuracy;
  }

  /*********************************************************************
  * Creating special evaluation networks for cases with different mini
  * batch sizes (one per thread) -- This is only for performance
  *********************************************************************/

  _batchOptimizationNetworks.resize(_maxThreads);
  for (size_t threadIdx = 0; threadIdx < _maxThreads; threadIdx++)
  {
    knlohmann::json nnConfig;
    _aLearner->_trainingNeuralNetwork->getConfiguration(nnConfig);
    nnConfig["Batch Size"] = _policyOptimizationCandidates;
    _batchOptimizationNetworks[threadIdx] = dynamic_cast<NeuralNetwork *>(getModule(nnConfig, _k));
    _batchOptimizationNetworks[threadIdx]->applyModuleDefaults(nnConfig);
    _batchOptimizationNetworks[threadIdx]->setConfiguration(nnConfig);
    _batchOptimizationNetworks[threadIdx]->initialize();
  }

  /*********************************************************************
  * Allocating storage for statistics
  *********************************************************************/

  if (_k->_currentGeneration == 0)
  {
    _statisticsAverageTargetSigmas.resize(_problem->_actionVectorSize, 0.0f);
    _statisticsAverageActionSigmas.resize(_problem->_actionVectorSize, 0.0f);
  }
}

float GFPT::stateValueFunction(const std::vector<std::vector<float>> &stateSequence)
{
  return _vLearner->getEvaluation({stateSequence})[0][0];
}

float GFPT::currentActionAdvantageFunction(const std::vector<std::vector<float>> &stateActionSequence)
{
  return _aLearner->getEvaluation({stateActionSequence})[0][0];
}

void GFPT::trainPolicy()
{
  // Creating minibatch for the critic update
  auto miniBatchIndexes = generateMiniBatch(_miniBatchSize);

  // [Statistics] Zeroing average diagonal covariance
  for (size_t i = 0; i < _problem->_actionVectorSize; i++)
  {
   _statisticsAverageActionSigmas[i] = 0.0f;
   _statisticsAverageTargetSigmas[i] = 0.0f;
  }

#pragma omp parallel for schedule(dynamic, 1)
  for (size_t b = 0; b < _miniBatchSize; b++)
  {
    /******************************************************************************************
    * Gathering experience information
    *******************************************************************************************/

    // Selecting a uniformly random selected, yet not repeated experience
    size_t expId = miniBatchIndexes[b];

    // Getting experience's current state, state/action sequences
    auto expStateSequence = getStateTimeSequence(expId);
    auto expStateActionSequence = getStateActionTimeSequence(expId);
    auto expAction = _experienceReplay[expId].action;

    // Getting Experience's policy distribution
    auto expMeans = _experienceReplay[expId].policy["Action Means"].get<std::vector<float>>();
    auto expSigmas = _experienceReplay[expId].policy["Action Sigmas"].get<std::vector<float>>();

    // Updating action distributions for the current state
    auto policy = runPolicy(expStateSequence);
    auto curMeans = policy["Action Means"].get<std::vector<float>>();
    auto curSigmas = policy["Action Sigmas"].get<std::vector<float>>();

    /******************************************************************************************
    * Optimizing action with a gradient-free method (CMAES) based on it's advantage function
    *******************************************************************************************/

    // Re-computing importance weight for the experiment and storing it into cache
    float importanceWeight = calculateImportanceWeight(expAction, curMeans, curSigmas, expMeans, expSigmas);
    _experienceReplay[expId].cache.set("Importance Weight", importanceWeight);

    // Checking whether the experience is on policy (i.e., it is within the [1/cutoff, cutoff] region)
    bool isOnPolicy = (importanceWeight > (1.0f / _experienceReplayREFERCutoffScale)) && (importanceWeight < _experienceReplayREFERCutoffScale);

    // Optimizing best action for the selected experience
    auto optResults = optimizeAction(expId, curMeans);
    auto bstMeans = optResults["Best Means"].get<std::vector<float>>();
    auto bstSigmas = optResults["Best Sigmas"].get<std::vector<float>>();
    auto bstA = optResults["Best Value"].get<float>();

    // Computing statistics
    #pragma omp critical
    for (size_t i = 0; i < _problem->_actionVectorSize; i++)
    {
     _statisticsAverageTargetSigmas[i] += bstSigmas[i];
     _statisticsAverageActionSigmas[i] += curSigmas[i];
    }

    /*****************************************
    * Calculating Critic Gradients
    *****************************************/

    // Using retrace to obtain a better estimation of the state value function
    float retV = retraceFunction(expId);

    // Now calculating V, A, and avgA for current state/action
    float curA = currentActionAdvantageFunction(expStateActionSequence);
    float curV = stateValueFunction(expStateSequence);

    // Now calculating targets for V(s) and A(s,a)
    float vTarget = retV - curV + curA;
    float aTarget = retV - curV + bstA;

    // Updating inputs to training learners
    _aProblem->_inputData[b] = expStateActionSequence;
    _aProblem->_solutionData[b] = {aTarget};

    _vProblem->_inputData[b] = expStateSequence;
    _vProblem->_solutionData[b] = {vTarget};

    /*****************************************
    * Calculating Policy Gradients
    *****************************************/

    // Storage for the policy gradients
    std::vector<float> policyGradients(2 * _problem->_actionVectorSize, 0.0f);

    // Calculating the KL divergence gradients to prevent off-policiness (REFER)
    std::vector<float> referKLDivGrads(2 * _problem->_actionVectorSize, 0.0f);
    for (size_t i = 0; i < _problem->_actionVectorSize; i++)
    {
       referKLDivGrads[i] = expMeans[i] - curMeans[i];
       referKLDivGrads[_problem->_actionVectorSize + i] = (expSigmas[i] - curSigmas[i]);
    }

    // If the experiment if on-policy, we use it for the calculation of the gradients
    std::vector<float> gfptGradients(2 * _problem->_actionVectorSize, 0.0f);
    if (isOnPolicy)
     for (size_t i = 0; i < _problem->_actionVectorSize; i++)
     {
        gfptGradients[i] = bstMeans[i] - curMeans[i];
        gfptGradients[_problem->_actionVectorSize + i] = (bstSigmas[i] - curSigmas[i]);
     }

    // Now adding slowdown factor to prevent from deviating too much into off-policy (REFER)
    for (size_t i = 0; i < 2 * _problem->_actionVectorSize; i++)
      policyGradients[i] += _experienceReplayREFERCurrentBeta * gfptGradients[i] +
                            (1.0f - _experienceReplayREFERCurrentBeta) * referKLDivGrads[i];

    // Adding means to the policy update
    _policyProblem->_inputData[b] = expStateSequence;
    _policyProblem->_solutionData[b] = policyGradients;
  }

  // Updating learning rate for critic/policy learners guided by REFER
  _aLearner->_learningRate = _experienceReplayREFERCurrentLearningRate;
  _vLearner->_learningRate = _experienceReplayREFERCurrentLearningRate;
  _policyLearner->_learningRate = _experienceReplayREFERCurrentLearningRate * _policyLearningRateScale;

  // Running one generation of the optimization method with the given mini-batch
  _aLearner->runGeneration();
  _vLearner->runGeneration();
  _policyLearner->runGeneration();

  // Updating batch evaluation network for the advantage function for CMAES steps
  auto aHyperparameters = _aLearner->getTrainingHyperparameters();
  for (size_t threadIdx = 0; threadIdx < _maxThreads; threadIdx++)
    _batchOptimizationNetworks[threadIdx]->setHyperparameters(aHyperparameters);

  // Updating statistics
  for (size_t i = 0; i < _problem->_actionVectorSize; i++)
  {
    _statisticsAverageActionSigmas[i] /= (float)_miniBatchSize;
    _statisticsAverageTargetSigmas[i] /= (float)_miniBatchSize;
  }
}

knlohmann::json GFPT::optimizeAction(const size_t expId, const std::vector<float> &curMeans)
{
  // Getting current thread ID and corresponding optimizer and batch optimization NN
  size_t curThread = omp_get_thread_num();
  auto actionOptimizer = _actionOptimizers[curThread];
  auto batchOptimizationNetwork = _batchOptimizationNetworks[curThread];

  // Getting current sate/action time sequence
  auto expStateActionSequence = getStateActionTimeSequence(expId);

  // Creating storage for CMAES optimization candidates (input)
  std::vector<std::vector<std::vector<float>>> candidateMiniBatch(_policyOptimizationCandidates);

  // Creating storage for CMAES optimization candidate evaluations (results)
  std::vector<float> candidateEvaluations(_policyOptimizationCandidates);

  // Creating minibatch of input state/action sequences
  for (size_t c = 0; c < _policyOptimizationCandidates; c++) candidateMiniBatch[c] = expStateActionSequence;

  // Setting initial action means from the current means
  actionOptimizer->_initialMeans = curMeans;

  // Resetting the state of the CMAES optimizer for the new batch
  actionOptimizer->reset();

  // Run the CMAES experiment until the desired convergence
  while (actionOptimizer->checkTermination() == false)
  {
    // Asking CMAES to generate candidates
    actionOptimizer->prepareGeneration();

    // Gathering candidate states into a single minibatch -- replacing last action of each state/action sequence
    for (size_t c = 0; c < _policyOptimizationCandidates; c++)
    {
      // Getting final timestep of the input
      size_t t = candidateMiniBatch[c].size() - 1;

      // Replacing the action of the last timestep
      for (size_t i = 0; i < _problem->_actionVectorSize; i++)
        candidateMiniBatch[c][t][_problem->_stateVectorSize + i] = actionOptimizer->_samplePopulation[c][i];
    }

    // Running evaluation of the entire set of candidates
    batchOptimizationNetwork->forward(candidateMiniBatch);
    auto criticEvaluations = batchOptimizationNetwork->_outputValues;

    // Getting the advantage function for all candidates
    for (size_t i = 0; i < _policyOptimizationCandidates; i++)
      candidateEvaluations[i] = criticEvaluations[i][0];

    // Running one more CMAES iteration
    actionOptimizer->updateDistribution(candidateEvaluations);
    actionOptimizer->_currentGeneration++;
  }

  // Grabbing diagonal covariances
  std::vector<float> bstSigmas(_problem->_actionVectorSize);
  for (size_t i = 0; i < _problem->_actionVectorSize; i++)
   bstSigmas[i] = actionOptimizer->_sigma * sqrtf(actionOptimizer->_covarianceMatrix[i * _problem->_actionVectorSize + i]);

  // Returning optimization results
  knlohmann::json result;
  result["Best Sigmas"] = bstSigmas;
  result["Best Means"] = actionOptimizer->_bestEverVariables;
  result["Best Value"] = actionOptimizer->_bestEverValue;

  return result;
}

knlohmann::json GFPT::runPolicy(const std::vector<std::vector<float>> &state)
{
  auto eval = _policyLearner->getEvaluation({state})[0];

  std::vector<float> actionMeans(_problem->_actionVectorSize);
  std::vector<float> actionSigmas(_problem->_actionVectorSize);

  for (size_t i = 0; i < _problem->_actionVectorSize; ++i)
  {
    actionMeans[i] = eval[i];
    actionSigmas[i] = eval[_problem->_actionVectorSize + i];
  }

  knlohmann::json policy;
  policy["Action Means"] = actionMeans;
  policy["Action Sigmas"] = actionSigmas;
  return policy;
}

knlohmann::json GFPT::getAgentPolicy()
{
  knlohmann::json hyperparameters;
  hyperparameters["Policy"] = _policyLearner->getInferenceHyperparameters();
  return hyperparameters;
}

void GFPT::setAgentPolicy(const knlohmann::json &hyperparameters)
{
  auto policyHyperparameters = hyperparameters["Policy"].get<std::vector<float>>();
  _policyLearner->setInferenceHyperparameters(policyHyperparameters);
}

void GFPT::setTrainingState(const knlohmann::json &state)
{
  _aLearner->setTrainingHyperparameters(state["A"]["Training"]);
  _aLearner->setInferenceHyperparameters(state["A"]["Inference"]);

  _vLearner->setTrainingHyperparameters(state["V"]["Training"]);
  _vLearner->setInferenceHyperparameters(state["V"]["Inference"]);

  _policyLearner->setTrainingHyperparameters(state["Policy"]["Training"]);
  _policyLearner->setInferenceHyperparameters(state["Policy"]["Inference"]);
}

knlohmann::json GFPT::getTrainingState()
{
  knlohmann::json state;
  state["A"]["Training"] = _aLearner->getTrainingHyperparameters();
  state["A"]["Inference"] = _aLearner->getInferenceHyperparameters();

  state["V"]["Training"] = _vLearner->getTrainingHyperparameters();
  state["V"]["Inference"] = _vLearner->getInferenceHyperparameters();

  state["Policy"]["Training"] = _policyLearner->getTrainingHyperparameters();
  state["Policy"]["Inference"] = _policyLearner->getInferenceHyperparameters();
  return state;
}

void GFPT::printAgentInformation()
{
  _k->_logger->logInfo("Normal", "V Function Information:\n");

  _k->_logger->logInfo("Normal", " + Learning Rate:                  %.4e (Max: %.4e)\n", _vLearner->_learningRate, _learningRate);
  _vExperiment._logger->_verbosityLevel = _k->_logger->_verbosityLevel;
  _vExperiment._solver->printGenerationAfter();
  _vExperiment._logger->setVerbosityLevel("Silent");

  _k->_logger->logInfo("Normal", "A Function Information:\n");

  _k->_logger->logInfo("Normal", " + Learning Rate:                  %.4e (Max: %.4e)\n", _aLearner->_learningRate, _learningRate);
  _aExperiment._logger->_verbosityLevel = _k->_logger->_verbosityLevel;
  _aExperiment._solver->printGenerationAfter();
  _aExperiment._logger->setVerbosityLevel("Silent");

  _k->_logger->logInfo("Normal", "Policy Information:\n");

  _k->_logger->logInfo("Normal", " + Learning Rate:                  %.4e (Max: %.4e)\n", _policyLearner->_learningRate, _learningRate * _policyLearningRateScale);
  _policyExperiment._logger->_verbosityLevel = _k->_logger->_verbosityLevel;
  _policyExperiment._solver->printGenerationAfter();
  _policyExperiment._logger->setVerbosityLevel("Silent");

  _k->_logger->logInfo("Normal", " + Average Action Sigma in Mini-Batch: [ Current ] -> [ Target ]\n");
    for (size_t i = 0; i < _problem->_actionVectorSize; ++i) _k->_logger->logInfo("Normal", " +  [ %f ] -> [ %f ] \n", _statisticsAverageActionSigmas[i], _statisticsAverageTargetSigmas[i]);
}

} // namespace continuous
} // namespace agent
} // namespace solver
} // namespace korali
