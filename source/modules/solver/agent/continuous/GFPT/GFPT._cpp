#include "engine.hpp"
#include "modules/solver/agent/continuous/GFPT/GFPT.hpp"
#include "sample/sample.hpp"

namespace korali
{
namespace solver
{
namespace agent
{
namespace continuous
{
void GFPT::initializeAgent()
{
  // Initializing common discrete agent configuration
  Continuous::initializeAgent();

  // Engine to initialize experiments with
  korali::Engine engine;

  /*********************************************************************
  * State Value Function Learner
  *********************************************************************/

  _vExperiment["Problem"]["Type"] = "Supervised Learning";
  _vExperiment["Solver"]["Type"] = "Learner/DeepSupervisor";
  _vExperiment["Solver"]["Optimizer"] = _criticOptimizer;
  _vExperiment["Solver"]["Learning Rate"] = _criticLearningRate;
  _vExperiment["Solver"]["Loss Function"] = "Mean Squared Error";
  _vExperiment["Solver"]["Steps Per Generation"] = 1;
  _vExperiment["Solver"]["Neural Network"] = _criticNeuralNetwork;

  // Initializing experiment with an initial zero set
  for (size_t i = 0; i < _criticMiniBatchSize; i++)
  {
    _vExperiment["Problem"]["Solution"][i][0] = 0.0;

    for (size_t j = 0; j < _problem->_stateVectorSize; j++)
      _vExperiment["Problem"]["Inputs"][i][j] = 0.0;
  }

  // Running initialization to verify that the configuration is correct
  engine.initialize(_vExperiment);

  // Getting learner pointers
  _vProblem = dynamic_cast<problem::SupervisedLearning *>(_vExperiment._problem);
  _vLearner = dynamic_cast<solver::learner::DeepSupervisor *>(_vExperiment._solver);

  /*********************************************************************
  * Advantage Function learner
  *********************************************************************/

  _aExperiment["Problem"]["Type"] = "Supervised Learning";
  _aExperiment["Solver"]["Type"] = "Learner/DeepSupervisor";
  _aExperiment["Solver"]["Optimizer"] = _criticOptimizer;
  _aExperiment["Solver"]["Learning Rate"] = _criticLearningRate;
  _aExperiment["Solver"]["Loss Function"] = "Mean Squared Error";
  _aExperiment["Solver"]["Steps Per Generation"] = 1;
  _aExperiment["Solver"]["Neural Network"] = _criticNeuralNetwork;

  // Initializing experiment with an initial zero set
  for (size_t i = 0; i < _criticMiniBatchSize; i++)
  {
    _aExperiment["Problem"]["Solution"][i][0] = 0.0;

    for (size_t j = 0; j < _problem->_stateVectorSize + _problem->_actionVectorSize; j++)
      _aExperiment["Problem"]["Inputs"][i][j] = 0.0;
  }

  // Running initialization to verify that the configuration is correct
  engine.initialize(_aExperiment);

  // Getting learner pointers
  _aProblem = dynamic_cast<problem::SupervisedLearning *>(_aExperiment._problem);
  _aLearner = dynamic_cast<solver::learner::DeepSupervisor *>(_aExperiment._solver);

  /*********************************************************************
  * Initializing Action Optimizing Experiment
  *********************************************************************/

  _actionOptimizer = new korali::fCMAES(_problem->_actionVectorSize);
  _actionOptimizer->setSeed(_k->_randomSeed++);

  // Initializing experiment with an initial zero set
  for (size_t i = 0; i < _problem->_actionVectorSize; i++)
  {
    size_t varIdx = _problem->_actionVectorIndexes[i];
    _actionOptimizer->_lowerBounds[i] = _k->_variables[varIdx]->_lowerBound;
    _actionOptimizer->_upperBounds[i] = _k->_variables[varIdx]->_upperBound;
    _actionOptimizer->_initialMeans[i] = (_k->_variables[varIdx]->_lowerBound + _k->_variables[varIdx]->_upperBound) * 0.5;
    _actionOptimizer->_initialStandardDeviations[i] = abs(_k->_variables[varIdx]->_upperBound - _k->_variables[varIdx]->_lowerBound) * 1.0;
  }

  // Termination Criteria
  _actionOptimizer->_minValueDifferenceThreshold = _policyTargetAccuracy;

  /*********************************************************************
   * Initializing Policy-Related Structures
   *********************************************************************/

  // Creating and running Actor Learning Experiments

  _policyExperiment["Problem"]["Type"] = "Supervised Learning";
  _policyExperiment["Solver"]["Type"] = "Learner/DeepSupervisor";
  _policyExperiment["Solver"]["Loss Function"] = "Mean Squared Error";
  _policyExperiment["Solver"]["Optimizer"] = _policyOptimizer;
  _policyExperiment["Solver"]["Learning Rate"] = _policyLearningRate;
  _policyExperiment["Solver"]["Steps Per Generation"] = 1;
  _policyExperiment["Solver"]["Neural Network"] = _policyNeuralNetwork;

  for (size_t i = 0; i < _problem->_actionVectorSize; i++)
  {
   size_t varIdx = _problem->_actionVectorIndexes[i];
   auto lowerBound = _k->_variables[varIdx]->_lowerBound;
   auto upperBound = _k->_variables[varIdx]->_upperBound;
   float scale = (upperBound - lowerBound) * 0.5;
   float shift = (upperBound + lowerBound) * 0.5;
   _policyExperiment["Solver"]["Neural Network"]["Output"]["Scale"][i] = scale;
   _policyExperiment["Solver"]["Neural Network"]["Output"]["Shift"][i] = shift;
   _policyExperiment["Solver"]["Neural Network"]["Output"]["Tanh Mask"][i] = true;
  }

  // Initializing experiment with an initial zero set
  for (size_t i = 0; i < _policyMiniBatchSize; i++)
  {
    for (size_t j = 0; j < _problem->_stateVectorSize; j++)
      _policyExperiment["Problem"]["Inputs"][i][j] = 0.0;

    for (size_t j = 0; j < _problem->_actionVectorSize; j++)
      _policyExperiment["Problem"]["Solution"][i][j] = 0.0;
  }

  // Running initialization to verify that the configuration is correct
  engine.initialize(_policyExperiment);

  // Getting learner pointers
  _policyProblem = dynamic_cast<problem::SupervisedLearning *>(_policyExperiment._problem);
  _policyLearner = dynamic_cast<solver::learner::DeepSupervisor *>(_policyExperiment._solver);

  /*********************************************************************
  * Creating special evaluation networks for cases with different mini batch sizes
  *********************************************************************/

  // NN For action average calculation (required in dueling DQN)
  auto actionAverageEvaluationNetworkConfig = _criticNeuralNetwork;
  actionAverageEvaluationNetworkConfig["Layers"][0]["Node Count"] = _problem->_stateVectorSize + _problem->_actionVectorSize;
  actionAverageEvaluationNetworkConfig["Layers"][actionAverageEvaluationNetworkConfig["Layers"].size() - 1]["Node Count"] = 1;
  actionAverageEvaluationNetworkConfig["Use Preloaded Normalization Data"] = true;
  _actionAverageEvaluationNetwork = dynamic_cast<NeuralNetwork *>(getModule(actionAverageEvaluationNetworkConfig, _k));

  // NN For calculating samples from CMAES
  auto batchOptimizationNetworkConfig = _criticNeuralNetwork;
  batchOptimizationNetworkConfig["Layers"][0]["Node Count"] = _problem->_stateVectorSize + _problem->_actionVectorSize;
  batchOptimizationNetworkConfig["Layers"][batchOptimizationNetworkConfig["Layers"].size() - 1]["Node Count"] = 1;
  batchOptimizationNetworkConfig["Use Preloaded Normalization Data"] = true;
  _batchOptimizationNetwork = dynamic_cast<NeuralNetwork *>(getModule(batchOptimizationNetworkConfig, _k));

  /*********************************************************************
  * Loading/Setting Hyperparameters
  *********************************************************************/

  _hyperparameters["Policy"] = _policyLearner->getHyperparameters();
}

float GFPT::retraceFunction(size_t expId)
{
  // Finding last experience in the episode that corresponds to expId
  ssize_t startId = expId;
  ssize_t endId = startId;
  while (_experienceReplay[endId].termination == e_nonTerminal) endId++;

  // Initializing qRet to reward of the last
  float qRet = _experienceReplay[endId].reward;

  // If the episode was truncated, then add also the state value function
  if (_experienceReplay[endId].termination == e_truncated)
  {
   auto curState = _experienceReplay[endId].state;
   float curV = _experienceReplay[endId].cache.access("State Value", [this, curState](){return this->stateValueFunction(curState);});
   qRet += _criticDiscountFactor * curV;
  }

  // Now iterating backwards to calculate the rest of qRet
  for (ssize_t curId = endId-1; curId >= startId; curId--)
  {
    // Getting current reward
    float curReward = _experienceReplay[curId].reward;

    // Calculating qRet
    qRet = curReward + _criticDiscountFactor * qRet;

    // If this is the starting experience, return the current value
    if (curId == startId) break;

    // Getting current state
    auto curState = _experienceReplay[curId].state;

    // Getting current action index
    auto curAction = _experienceReplay[curId].action;

    // If we don't have the current and average advantage values in cache, we need to re-calculate means (forward policy)
    if (_experienceReplay[curId].cache.contains("Average Advantage") == false) forwardPolicy(curState);

    // Now calculating V, A, and avgA for current state/action
    float curA = _experienceReplay[curId].cache.access("Current Advantage", [this, curState, curAction](){return this->currentActionAdvantageFunction(curState, curAction);});
    float avgA = _experienceReplay[curId].cache.access("Average Advantage", [this, curState](){return this->averageActionAdvantageFunction(curState);});

    // Updating qRet for the next experience
    qRet = qRet - curA + avgA;
  }

  // Returning qRet
  return qRet;
}

float GFPT::stateValueFunction(const std::vector<float> &state)
{
  // Calculating V(s_i+1)
  float v = _vLearner->getEvaluation(state)[0];

  return v;
}

float GFPT::currentActionAdvantageFunction(const std::vector<float> &state, const std::vector<float> &action)
{
  // Storage to put together state and action
  std::vector<float> stateActionInput(_problem->_stateVectorSize + _problem->_actionVectorSize);

  // Calculating max_a A(s_i+1, a)
  for (size_t j = 0; j < _problem->_stateVectorSize; j++) stateActionInput[j] = state[j];
  for (size_t j = 0; j < _problem->_actionVectorSize; j++) stateActionInput[j + _problem->_stateVectorSize] = action[j];
  float a = _aLearner->getEvaluation(stateActionInput)[0];

  return a;
}

float GFPT::averageActionAdvantageFunction(const std::vector<float> &state)
{
  // Storage to put together state and action
  std::vector<float> stateActionInput(_problem->_stateVectorSize + _problem->_actionVectorSize);
  for (size_t j = 0; j < _problem->_stateVectorSize; j++) stateActionInput[j] = state[j];

  // Creating storage for average action minibatch
  std::vector<std::vector<float>> avgActionMinibatch(_criticAdvantageFunctionPopulation);

  // Filling minibatch to calculate average action Q
  for (size_t i = 0; i < _criticAdvantageFunctionPopulation; i++)
  {
    avgActionMinibatch[i].resize(_problem->_stateVectorSize + _problem->_actionVectorSize);

    // Setting state (same for all)
    for (size_t j = 0; j < _problem->_stateVectorSize; j++) avgActionMinibatch[i][j] = state[j];

    // Generating random a'
    for (size_t j = 0; j < _problem->_actionVectorSize; j++)
    {
      // Updating normal distribution for the current action element
      _normalGenerator->_mean = _actionMeans[j];
      _normalGenerator->_standardDeviation = _actionSigmas[j];

      // Generating action from the updated normal distribution
      avgActionMinibatch[i][j + _problem->_stateVectorSize] = _normalGenerator->getRandomNumber();
    }
  }

  // Running evaluation of the entire minibatch
  _actionAverageEvaluationNetwork->setInput(avgActionMinibatch);
  _actionAverageEvaluationNetwork->forward();
  auto avgActionEvaluation = _actionAverageEvaluationNetwork->_outputValues;

  // Initializing average A(s,a) counter
  float avgA = 0.0;

  // Summing A(s_i+1, a') for many a'
  for (size_t i = 0; i < _criticAdvantageFunctionPopulation; i++) avgA += avgActionEvaluation[i][0];

  // Normalizing Average
  avgA /= (float)_criticAdvantageFunctionPopulation;

  return avgA;
}

void GFPT::trainAgent()
{
  /***************************************************************************************
  * Updating Policy Network by performing a Gradient descent step with latest experiences
  ***************************************************************************************/

  // Calculating cumulative Q*, for statistical purposes
  _cumulativeQStar = 0.0;

  // Getting current policy hyperparameters
  auto curPolicyHyperparameters = _policyLearner->getHyperparameters();

  // Getting current Advantage hyperparameters
  auto curAdvantageHyperparameters = _aLearner->getHyperparameters();

  // Updating action average NN hyperparameters
  _actionAverageEvaluationNetwork->setHyperparameters(curAdvantageHyperparameters);

  // Updating batch evaluation network for the advantage function for CMAES steps
  _batchOptimizationNetwork->setHyperparameters(curAdvantageHyperparameters);

  // Creating minibatch for the critic update
  auto miniBatchIndexes = generateMiniBatch(_criticMiniBatchSize);

  for (size_t i = 0; i < _criticMiniBatchSize; i++)
  {
    // Selecting a uniformly random selected, yet not repeated experience
    size_t expId = miniBatchIndexes[i];

    // Check if it is a terminal state
    bool isTerminal = _experienceReplay[expId].termination != e_nonTerminal;

    /*****************************************
    * Critic Section
    *****************************************/

    // Getting the reward for the current experience
    float curReward = _experienceReplay[expId].reward;

    // We calculate qStar depending on whether we use retrace or not
    float qRet = retraceFunction(expId);

    // Getting experience's current state, action
    auto curState = _experienceReplay[expId].state;
    auto curAction = _experienceReplay[expId].action;

    // Updating action distributions for the current state
    forwardPolicy(curState);

    // Now calculating V, A, and avgA for current state/action
    float curA = currentActionAdvantageFunction(curState, curAction);
    float avgA = averageActionAdvantageFunction(curState);
    float curV = stateValueFunction(curState);

    // Current Q = V + A - avgA
    float curQ = curV + curA - avgA;

    // Now calculating targets for V(s) and A(s,a)
    float vTarget = qRet - curQ + avgA;
    float aTarget = qRet - curV + avgA;

    // Updating inputs to training learners
    for (size_t j = 0; j < curState.size(); j++) _aProblem->_inputs[i][j] = curState[j];
    for (size_t j = 0; j < curAction.size(); j++) _aProblem->_inputs[i][j + curState.size()] = curAction[j];
    _aProblem->_solution[i][0] = aTarget;

    _vProblem->_inputs[i] = curState;
    _vProblem->_solution[i][0] = vTarget;

    // Keeping statistics
    _cumulativeQStar += qRet;
  }

  // Running one generation of the optimization method with the given mini-batch
  _aLearner->initialize();
  _aLearner->runGeneration();
  _aLearner->finalize();

  _vLearner->initialize();
  _vLearner->runGeneration();
  _vLearner->finalize();

  // Keeping critic/policy statistics
  _averageQStar = _cumulativeQStar / (float)_criticMiniBatchSize;

  /****************************************************************************
  * Critic Normalization
  ******************************************************************************/

  normalizeStateActionNeuralNetwork(_aLearner->_trainingNeuralNetwork, _criticMiniBatchSize, _criticNormalizationSteps);
  normalizeStateNeuralNetwork(_vLearner->_trainingNeuralNetwork, _criticMiniBatchSize, _criticNormalizationSteps);

  // Updating critic inference hyperparameters
  auto aHyperparameters = _aLearner->getHyperparameters();
  _aLearner->setHyperparameters(aHyperparameters);

  auto vHyperparameters = _vLearner->getHyperparameters();
  _vLearner->setHyperparameters(vHyperparameters);

  /*******************************************************************
  * Now computing new policy gradients with a stochastic method (CMAES)
  ******************************************************************/

  // Creating minibatch for the policy update
  miniBatchIndexes = generateMiniBatch(_policyMiniBatchSize);

  // Accumulating states for evaluation in the policy
  for (size_t i = 0; i < _policyMiniBatchSize; i++)
  {
    size_t expId = miniBatchIndexes[i];

    // Getting current state
    std::vector<float> curState = _experienceReplay[expId].state;

    size_t candidateCount = _actionOptimizer->_populationSize;
    std::vector<float> candidateEvaluations(candidateCount);
    std::vector<std::vector<float>> candidateMiniBatch(candidateCount);
    for (size_t i = 0; i < candidateCount; i++)
    {
      candidateMiniBatch[i].resize(_problem->_stateVectorSize + _problem->_actionVectorSize);
      for (size_t j = 0; j < _problem->_stateVectorSize; j++) candidateMiniBatch[i][j] = curState[j];
    }

    // To prevent CMAES from failing.
    _actionOptimizer->reset();

    // Run the CMAES experiment until the desired convergence
    while (_actionOptimizer->checkTermination() == false)
    {
      // Asking CMAES to generate candidates
      _actionOptimizer->prepareGeneration();

      // Gathering candidate states into a single minibatch
      for (size_t i = 0; i < candidateCount; i++)
        for (size_t j = 0; j < _problem->_actionVectorSize; j++)
          candidateMiniBatch[i][j + _problem->_stateVectorSize] = _actionOptimizer->_samplePopulation[i][j];

      // Running evaluation of the entire set of candidates
      _batchOptimizationNetwork->setInput(candidateMiniBatch);
      _batchOptimizationNetwork->forward();
      auto criticEvaluations = _batchOptimizationNetwork->_outputValues;

      // Getting the advantage function for all candidates
      for (size_t i = 0; i < candidateCount; i++)
        candidateEvaluations[i] = criticEvaluations[i][0];

      // Running one more CMAES iteration
      _actionOptimizer->updateDistribution(candidateEvaluations);
      _actionOptimizer->_currentGeneration++;
    }

    // Getting set of means that maximize advantage for the given state
    auto bestMeans = _actionOptimizer->_bestEverVariables;

    // Adding means to the policy update
    _policyProblem->_inputs[i] = curState;
    _policyProblem->_solution[i] = bestMeans;
  }

  // Running one generation of the optimization method with the given mini-batch
  _policyLearner->initialize();
  _policyLearner->runGeneration();
  _policyLearner->finalize();

  /****************************************************************************
  * Policy Normalization
  ******************************************************************************/

  normalizeStateNeuralNetwork(_policyLearner->_trainingNeuralNetwork, _policyMiniBatchSize, _policyNormalizationSteps);

  /*******************************************************************
   * Soft adoption of new hyperparameters wrt to adoption rate
   ******************************************************************/

  // Getting new hyperparameters
  auto newPolicyHyperparameters = _policyLearner->getHyperparameters();

  // Updating hyperparameters
  _policyLearner->setHyperparameters(newPolicyHyperparameters);

  // Storing average policy hyperparameters for workers to use
  _hyperparameters["Policy"] = newPolicyHyperparameters;
}

void GFPT::forwardPolicy(const std::vector<float> &state)
{
  _actionMeans = _policyLearner->getEvaluation({state});
}

void GFPT::updateAgentPolicy(const knlohmann::json &hyperparameters)
{
  auto policyHyperparameters = hyperparameters["Policy"].get<std::vector<float>>();
  _policyLearner->setHyperparameters(policyHyperparameters);
}

void GFPT::printAgentInformation()
{
  _k->_logger->logInfo("Normal", "Critic Information:\n");

  _k->_logger->logInfo("Normal", " + Average Q-Value in Mini-Batch:  %f\n", _averageQStar);

  _k->_logger->logInfo("Normal", "A Function Information:\n");

  _aExperiment._logger->_verbosityLevel = _k->_logger->_verbosityLevel;
  _aExperiment._solver->printGenerationAfter();
  _aExperiment._logger->setVerbosityLevel("Silent");

  _k->_logger->logInfo("Normal", "V Function Information:\n");

  _vExperiment._logger->_verbosityLevel = _k->_logger->_verbosityLevel;
  _vExperiment._solver->printGenerationAfter();
  _vExperiment._logger->setVerbosityLevel("Silent");

  _k->_logger->logInfo("Normal", "Policy Information:\n");

  _policyExperiment._logger->_verbosityLevel = _k->_logger->_verbosityLevel;
  _policyExperiment._solver->printGenerationAfter();
  _policyExperiment._logger->setVerbosityLevel("Silent");
}

} // namespace continuous
} // namespace agent
} // namespace solver
} // namespace korali
