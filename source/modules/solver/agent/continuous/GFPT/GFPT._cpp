#include "engine.hpp"
#include "modules/solver/agent/continuous/GFPT/GFPT.hpp"
#include "sample/sample.hpp"
#include <omp.h>

namespace korali
{
namespace solver
{
namespace agent
{
namespace continuous
{
void GFPT::initializeAgent()
{
  // Initializing common discrete agent configuration
  Continuous::initializeAgent();

  _vpExperiment["Problem"]["Type"] = "Supervised Learning";
  _vpExperiment["Problem"]["Max Timesteps"] = _timeSequenceLength;
  _vpExperiment["Problem"]["Training Batch Size"] = _miniBatchSize;
  _vpExperiment["Problem"]["Inference Batch Size"] = 1;
  _vpExperiment["Problem"]["Input"]["Size"] = _problem->_stateVectorSize;
  _vpExperiment["Problem"]["Solution"]["Size"] = 1 + 2 * _problem->_actionVectorSize;

  _vpExperiment["Solver"]["Type"] = "Learner/DeepSupervisor";
  _vpExperiment["Solver"]["Optimizer"] = _optimizer;
  _vpExperiment["Solver"]["Learning Rate"] = _learningRate;
  _vpExperiment["Solver"]["Loss Function"] = "Direct Gradient";
  _vpExperiment["Solver"]["Steps Per Generation"] = 1;
  _vpExperiment["Solver"]["Neural Network"]["Engine"] = _neuralNetworkEngine;
  _vpExperiment["Solver"]["Neural Network"]["Hidden Layers"] = _neuralNetworkHiddenLayers;
  _vpExperiment["Solver"]["Output Weights Scaling"] = 0.001;

  // Masks to normalize and rescaling output to fit the action's [lower, upper] bounds (and sigmas/P)
  _vpExperiment["Solver"]["Neural Network"]["Output Layer"]["Scale"][0] = 1.0f;
  _vpExperiment["Solver"]["Neural Network"]["Output Layer"]["Shift"][0] = 0.0f;
  _vpExperiment["Solver"]["Neural Network"]["Output Layer"]["Tanh Mask"][0] = false;
  _vpExperiment["Solver"]["Neural Network"]["Output Layer"]["Softplus Mask"][0] = false;
  _vpExperiment["Solver"]["Neural Network"]["Output Layer"]["Sigmoid Mask"][0] = false;

  // Normalizing and rescaling output to fit the action's [lower, upper] bounds
  for (size_t i = 0; i < _problem->_actionVectorSize; i++)
  {
    size_t varIdx = _problem->_actionVectorIndexes[i];
    auto lowerBound = _k->_variables[varIdx]->_lowerBound;
    auto upperBound = _k->_variables[varIdx]->_upperBound;
    float scale = (upperBound - lowerBound) * 0.5;
    float shift = (upperBound + lowerBound) * 0.5;
    float sigma = _k->_variables[varIdx]->_initialExplorationNoise;

    // Checking correct noise configuration
    if (sigma <= 0.0f) KORALI_LOG_ERROR("Provided initial noise (%f) for action variable %lu is not defined or negative.\n", sigma, varIdx);

    // Tanh mask for Mean
    _vpExperiment["Solver"]["Neural Network"]["Output Layer"]["Scale"][i + 1] = scale;
    _vpExperiment["Solver"]["Neural Network"]["Output Layer"]["Shift"][i + 1] = shift;
    _vpExperiment["Solver"]["Neural Network"]["Output Layer"]["Tanh Mask"][i + 1] = true;
    _vpExperiment["Solver"]["Neural Network"]["Output Layer"]["Softplus Mask"][i + 1] = false;
    _vpExperiment["Solver"]["Neural Network"]["Output Layer"]["Sigmoid Mask"][i + 1] = false;

    if (_policyDistribution == "Normal")
    {
      // Softplus mask for Sigma
      _vpExperiment["Solver"]["Neural Network"]["Output Layer"]["Scale"][_problem->_actionVectorSize + i + 1] = sigma * 2.0f;
      _vpExperiment["Solver"]["Neural Network"]["Output Layer"]["Shift"][_problem->_actionVectorSize + i + 1] = 0.0f;
      _vpExperiment["Solver"]["Neural Network"]["Output Layer"]["Tanh Mask"][_problem->_actionVectorSize + i + 1] = false;
      _vpExperiment["Solver"]["Neural Network"]["Output Layer"]["Softplus Mask"][_problem->_actionVectorSize + i + 1] = true;
      _vpExperiment["Solver"]["Neural Network"]["Output Layer"]["Sigmoid Mask"][_problem->_actionVectorSize + i + 1] = false;
    }

    if (_policyDistribution == "Beta")
    {
      // Sigmoid in mask for Variance Coefficients in (0,1)
      _vpExperiment["Solver"]["Neural Network"]["Output Layer"]["Scale"][_problem->_actionVectorSize + i + 1] = sigma * 2.0f;
      _vpExperiment["Solver"]["Neural Network"]["Output Layer"]["Shift"][_problem->_actionVectorSize + i + 1] = 0.0f;
      _vpExperiment["Solver"]["Neural Network"]["Output Layer"]["Tanh Mask"][_problem->_actionVectorSize + i + 1] = false;
      _vpExperiment["Solver"]["Neural Network"]["Output Layer"]["Softplus Mask"][_problem->_actionVectorSize + i + 1] = false;
      _vpExperiment["Solver"]["Neural Network"]["Output Layer"]["Sigmoid Mask"][_problem->_actionVectorSize + i + 1] = true;
    }
  }

  // Running initialization to verify that the configuration is correct
  _vpExperiment.initialize();
  _vpProblem = dynamic_cast<problem::SupervisedLearning *>(_vpExperiment._problem);
  _vpLearner = dynamic_cast<solver::learner::DeepSupervisor *>(_vpExperiment._solver);

  /*********************************************************************
  * Advantage Function learner
  *********************************************************************/

  _qExperiment["Problem"]["Type"] = "Supervised Learning";
  _qExperiment["Problem"]["Max Timesteps"] = 1;
  _qExperiment["Problem"]["Training Batch Size"] = _miniBatchSize;
  _qExperiment["Problem"]["Inference Batch Size"] = 1;
  _qExperiment["Problem"]["Input"]["Size"] = 1 + _problem->_stateVectorSize + _problem->_actionVectorSize;
  _qExperiment["Problem"]["Solution"]["Size"] = 1;

  _qExperiment["Solver"]["Type"] = "Learner/DeepSupervisor";
  _qExperiment["Solver"]["Optimizer"] = _optimizer;
  _qExperiment["Solver"]["Learning Rate"] = _learningRate;
  _qExperiment["Solver"]["Loss Function"] = "Mean Squared Error";
  _qExperiment["Solver"]["Steps Per Generation"] = 1;
  _qExperiment["Solver"]["Neural Network"]["Engine"] = _neuralNetworkEngine;
  _qExperiment["Solver"]["Neural Network"]["Hidden Layers"] = _neuralNetworkHiddenLayers;

  // Running initialization to verify that the configuration is correct
  _qExperiment.initialize();
  _qProblem = dynamic_cast<problem::SupervisedLearning *>(_qExperiment._problem);
  _qLearner = dynamic_cast<solver::learner::DeepSupervisor *>(_qExperiment._solver);

  /*********************************************************************
  * Initializing Action Optimizers (one per thread)
  *********************************************************************/

  _actionOptimizers.resize(_maxThreads);
  for (size_t threadIdx = 0; threadIdx < _maxThreads; threadIdx++)
  {
    _actionOptimizers[threadIdx] = new korali::fCMAES(_problem->_actionVectorSize, _policyOptimizationCandidates);
    _actionOptimizers[threadIdx]->setSeed(_k->_randomSeed++);
  }

  /*********************************************************************
  * Creating special evaluation networks for cases with different mini
  * batch sizes (one per thread) -- This is only for performance
  *********************************************************************/

  _batchOptimizationNetworks.resize(_maxThreads);
  for (size_t threadIdx = 0; threadIdx < _maxThreads; threadIdx++)
  {
    knlohmann::json nnConfig;
    _qLearner->_trainingNeuralNetwork->getConfiguration(nnConfig);
    nnConfig["Batch Size"] = _policyOptimizationCandidates;
    _batchOptimizationNetworks[threadIdx] = dynamic_cast<NeuralNetwork *>(getModule(nnConfig, _k));
    _batchOptimizationNetworks[threadIdx]->applyModuleDefaults(nnConfig);
    _batchOptimizationNetworks[threadIdx]->setConfiguration(nnConfig);
    _batchOptimizationNetworks[threadIdx]->initialize();
  }
}

float GFPT::stateValueFunction(const std::vector<std::vector<float>> &stateSequence)
{
  return _vpLearner->getEvaluation({stateSequence})[0][0];
}

float GFPT::getActionAdvantage(const std::vector<std::vector<float>> &stateActionSequence)
{
  return _qLearner->getEvaluation({stateActionSequence})[0][0];
}

void GFPT::trainPolicy()
{
  // Creating minibatch for the critic update
  auto miniBatchIndexes = generateMiniBatch(_miniBatchSize);

#pragma omp parallel for schedule(dynamic, 1)
  for (size_t b = 0; b < _miniBatchSize; b++)
  {
    /******************************************************************************************
    * Gathering experience information
    *******************************************************************************************/

    // Getting index of current experiment
    size_t expId = miniBatchIndexes[b];

    // Get state, action and policy for this experience
    auto expStateSequence = getStateTimeSequence(expId);
    auto expState = _experienceReplay[expId].state;
    auto expAction = _experienceReplay[expId].action;
    auto expPolicy = _experienceReplay[expId].metadata["Experience Policy"];

    // Gathering metadata
    float curV = _experienceReplay[expId].stateValue;
    auto curPolicy = _experienceReplay[expId].metadata["Current Policy"];
    float retV = _experienceReplay[expId].retraceValue;

    // Gathering policy information
    auto expMeans = expPolicy["Action Means"].get<std::vector<float>>();
    auto expSigmas = expPolicy["Action Sigmas"].get<std::vector<float>>();
    auto curMeans = curPolicy["Action Means"].get<std::vector<float>>();
    auto curSigmas = curPolicy["Action Sigmas"].get<std::vector<float>>();

    /*****************************************
    * Calculating Critic Gradients
    *****************************************/

    // Storage for the V+policy gradients
    std::vector<float> vpGradients(1 + 2 * _problem->_actionVectorSize, 0.0f);

    // Qret for terminal state is just reward
    float retQ = _experienceReplay[expId].reward;

    // Check whether experience is non-terminal
    bool isNormal = _experienceReplay[expId].termination == e_nonTerminal;

    // In this case add Vtbc
    if (isNormal == true)
    {
      float nextExpVtbc = _experienceReplay[expId + 1].retraceValue;
      retQ += _discountFactor * nextExpVtbc;
    }

    // Check whether experience is truncated
    bool isTrucated = _experienceReplay[expId].termination == e_truncated;

    // For truncated state add value
    if (isTrucated == true)
    {
      float nextExpVtbc = _experienceReplay[expId].truncatedStateValue;
      retQ += _discountFactor * nextExpVtbc;
    }

    vpGradients[0] = retV - curV;

    std::vector<float> qInput(1 + _problem->_stateVectorSize + _problem->_actionVectorSize);
    qInput[0] = retV;
    for (size_t i = 0; i < _problem->_stateVectorSize; i++) qInput[1 + i] = expState[i];
    for (size_t i = 0; i < _problem->_actionVectorSize; i++) qInput[1 + _problem->_stateVectorSize + i] = expMeans[i];
    _qProblem->_inputData[b] = {qInput};
    _qProblem->_solutionData[b] = {retQ - curV};

    /*****************************************
   * Calculating Policy Gradients
   *****************************************/

    // If it's on policy, we do calculate the policy gradients
    if (_experienceReplay[expId].isOnPolicy)
    {
      // Storage for the GFPT and REFER gradients
      std::vector<float> gfptGradients(2 * _problem->_actionVectorSize, 0.0f);

      auto actionValue = _qLearner->getEvaluation({{qInput}})[0][0];
      auto importanceWeightGradients = calculateImportanceWeightGradient(expAction, curPolicy, expPolicy);

      for (size_t i = 0; i < 2 * _problem->_actionVectorSize; i++)
        gfptGradients[i] += actionValue * importanceWeightGradients[i];

      // If the experiment if on-policy, we use it for the calculation of the gradients
      for (size_t i = 0; i < 2 * _problem->_actionVectorSize; i++)
        vpGradients[1 + i] += _experienceReplayOffPolicyREFERBeta * gfptGradients[i];
    }

    // Getting REFER gradients
    auto referGradients = calculateKLDivergenceGradient(expPolicy, curPolicy);

    // Applying REFER gradients
    for (size_t i = 0; i < 2 * _problem->_actionVectorSize; i++)
      vpGradients[1 + i] -= (1.0f - _experienceReplayOffPolicyREFERBeta) * referGradients[i];

    // Adding means to the policy update
    _vpProblem->_inputData[b] = expStateSequence;
    _vpProblem->_solutionData[b] = vpGradients;
  }

  // Updating learning rate for critic/policy learner guided by REFER
  _vpLearner->_learningRate = _currentLearningRate;
  _qLearner->_learningRate = _currentLearningRate * _advantageLearningRateScale;

  // Running one generation of the optimization method with the given mini-batch
  _vpLearner->runGeneration();
  _qLearner->runGeneration();

  // Updating batch evaluation network for the advantage function for CMAES steps
  auto aHyperparameters = _qLearner->getTrainingHyperparameters();
  for (size_t threadIdx = 0; threadIdx < _maxThreads; threadIdx++)
    _batchOptimizationNetworks[threadIdx]->setHyperparameters(aHyperparameters);
}

knlohmann::json GFPT::optimizeAction(const std::vector<std::vector<float>> stateActionSequence, const std::vector<float> &curMeans)
{
  // Getting current thread ID and corresponding optimizer and batch optimization NN
  size_t curThread = omp_get_thread_num();
  auto actionOptimizer = _actionOptimizers[curThread];
  auto batchOptimizationNetwork = _batchOptimizationNetworks[curThread];

  // Creating storage for CMAES optimization candidates (input)
  std::vector<std::vector<std::vector<float>>> candidateMiniBatch(_policyOptimizationCandidates);

  // Creating storage for CMAES optimization candidate evaluations (results)
  std::vector<float> candidateEvaluations(_policyOptimizationCandidates);

  // Creating minibatch of input state/action sequences
  for (size_t c = 0; c < _policyOptimizationCandidates; c++) candidateMiniBatch[c] = stateActionSequence;

  // Setting initial action means from the current means
  actionOptimizer->_initialMeans = curMeans;
  for (size_t i = 0; i < _problem->_actionVectorSize; i++)
  {
    actionOptimizer->_initialStandardDeviations[i] = 0.50f;
    actionOptimizer->_lowerBounds[i] = curMeans[i] - 0.25f;
    actionOptimizer->_upperBounds[i] = curMeans[i] + 0.25f;
  }

  // Resetting the state of the CMAES optimizer for the new batch
  actionOptimizer->reset();

  // Storage for the average of the advantage value from the last iteration
  float prvBestValue = -std::numeric_limits<float>::infinity();
  float curBestValue = 0;

  // Run the CMAES experiment until the desired convergence
  while (std::abs(curBestValue - prvBestValue) > _policyTargetAccuracy || actionOptimizer->_currentGeneration < 10)
  {
    // Asking CMAES to generate candidates
    actionOptimizer->prepareGeneration();

    // Gathering candidate states into a single minibatch -- replacing last action of each state/action sequence
    for (size_t c = 0; c < _policyOptimizationCandidates; c++)
    {
      // Getting final timestep of the input
      size_t t = candidateMiniBatch[c].size() - 1;

      // Replacing the action of the last timestep
      for (size_t i = 0; i < _problem->_actionVectorSize; i++)
        candidateMiniBatch[c][t][_problem->_stateVectorSize + i] = actionOptimizer->_samplePopulation[c][i];
    }

    // Running evaluation of the entire set of candidates
    batchOptimizationNetwork->forward(candidateMiniBatch);
    auto criticEvaluations = batchOptimizationNetwork->_outputValues;

    // Getting the advantage function for all candidates
    for (size_t i = 0; i < _policyOptimizationCandidates; i++)
      candidateEvaluations[i] = criticEvaluations[i][0];

    // Re-calculating average advantage value from the last generation
    prvBestValue = curBestValue;
    curBestValue = actionOptimizer->_bestEverValue;

    // Running one more CMAES iteration
    actionOptimizer->updateDistribution(candidateEvaluations);
    actionOptimizer->_currentGeneration++;
  }

  // Returning optimization results
  knlohmann::json result;
  result["Best Means"] = actionOptimizer->_bestEverVariables;
  result["Best Value"] = actionOptimizer->_bestEverValue;

  return result;
}

knlohmann::json GFPT::runPolicy(const std::vector<std::vector<float>> &state)
{
  // Forward the neural network for this state
  auto evaluation = _vpLearner->getEvaluation({state})[0];
  auto stateValue = evaluation[0];

  std::vector<float> actionMeans(_problem->_actionVectorSize);
  std::vector<float> actionSigmas(_problem->_actionVectorSize);
  for (size_t i = 0; i < _problem->_actionVectorSize; i++)
  {
    actionMeans[i] = evaluation[i + 1];
    actionSigmas[i] = evaluation[_problem->_actionVectorSize + i + 1];
  }

  knlohmann::json policy;
  policy["Action Means"] = actionMeans;
  policy["Action Sigmas"] = actionSigmas;
  policy["State Value"] = stateValue;
  return policy;
}

knlohmann::json GFPT::getAgentPolicy()
{
  knlohmann::json hyperparameters;
  hyperparameters["Policy"] = _vpLearner->getInferenceHyperparameters();
  return hyperparameters;
}

void GFPT::setAgentPolicy(const knlohmann::json &hyperparameters)
{
  auto policyHyperparameters = hyperparameters["Policy"].get<std::vector<float>>();
  _vpLearner->setInferenceHyperparameters(policyHyperparameters);
}

void GFPT::setTrainingState(const knlohmann::json &state)
{
  _qLearner->setTrainingHyperparameters(state["Q"]["Training"]);
  _qLearner->setInferenceHyperparameters(state["Q"]["Inference"]);

  _vpLearner->setTrainingHyperparameters(state["VP"]["Training"]);
  _vpLearner->setInferenceHyperparameters(state["VP"]["Inference"]);
}

knlohmann::json GFPT::getTrainingState()
{
  knlohmann::json state;

  state["Q"]["Training"] = _qLearner->getTrainingHyperparameters();
  state["Q"]["Inference"] = _qLearner->getInferenceHyperparameters();

  state["VP"]["Training"] = _vpLearner->getTrainingHyperparameters();
  state["VP"]["Inference"] = _vpLearner->getInferenceHyperparameters();

  return state;
}

void GFPT::printAgentInformation()
{
  _k->_logger->logInfo("Normal", " + Training Loss: [VP = %.3e] [Q = %.3e]\n", _vpLearner->_currentLoss, _qLearner->_currentLoss);
  _k->_logger->logInfo("Normal", " + Learning Rate: [VP = %.3e] [Q = %.3e]\n", _vpLearner->_learningRate, _qLearner->_learningRate);
}

} // namespace continuous
} // namespace agent
} // namespace solver
} // namespace korali
