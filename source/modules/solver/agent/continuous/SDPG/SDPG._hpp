#ifndef _KORALI_AGENT_CONTINUOUS_SDPG_HPP_
#define _KORALI_AGENT_CONTINUOUS_SDPG_HPP_

#include "auxiliar/optimizers/fCMAES.hpp"
#include "modules/solver/agent/continuous/continuous.hpp"
#include "modules/problem/reinforcementLearning/continuous/continuous.hpp"

namespace korali
{
namespace solver
{
namespace agent
{
namespace continuous
{

class SDPG : public Continuous
{
  public:

  /**
   * @brief Pointer to training experiment's problem
   */
  problem::SupervisedLearning *_criticProblem;

  /**
  * @brief Pointer to training experiment's learner
  */
  learner::DeepGD *_criticLearner;

  /**
   * @brief Korali experiment for the training of the Qvalue-estimator
   */
  korali::Experiment _criticExperiment;

  /**
   * @brief Korali optimizer for finding the optimal action as per the critic
   */
  korali::fCMAES *_actionOptimizer;

  /**
  * @brief Korali experiment for argmax_action(Q) based on a trained Q-Network
  */
  korali::Experiment _policyExperiment;

  /**
   * @brief Pointer to training the actor network
   */
  learner::DeepGD *_policyLearner;

  /**
   * @brief Pointer to actor's experiment problem
   */
  problem::SupervisedLearning *_policyProblem;

  /**
   * @brief Calculates the state+action value function Q(s,a) = Expectation_s,a [ R | s,a ] of a given experience using the latest critic
   * @param state state to evaluate
   * @param action action to evaluate
   * @return The value of Q(s,a)
   */
  float stateActionValueFunction(const std::vector<float> &state, const std::vector<float> &action);

  std::vector<float> getActionMeans(const std::vector<float> &state) override;
  std::vector<float> getActionSigmas(const std::vector<float> &state) override;
  void updateHyperparameters(const knlohmann::json &hyperparameters) override;
  void trainAgent() override;
  void printAgentInformation() override;
  void initializeAgent() override;
};

} // namespace continuous
} // namespace agent
} // namespace solver
} // namespace korali

#endif // _KORALI_AGENT_CONTINUOUS_SDPG_HPP_
