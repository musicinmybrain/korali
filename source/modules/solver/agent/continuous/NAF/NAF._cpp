#include "engine.hpp"
#include "modules/solver/agent/continuous/NAF/NAF.hpp"
#include "sample/sample.hpp"

namespace korali
{
namespace solver
{
namespace agent
{
namespace continuous
{
void NAF::initializeAgent()
{
  // Initializing common continuous agent configuration
  Continuous::initializeAgent();

  /*********************************************************************
  * Initializing Normal Distributions for the Policy
  *********************************************************************/

  korali::Engine engine; // Engine to initialize experiments with

  // Allocating space for the Cholesky decomposition of the quadratic advantage Term
  // _choleskyDecompVariance.resize(_problem->_actionVectorSize*(_problem->_actionVectorSize/2.0 + 1.0/2.0), 0.0);
  _actionSigmas.resize(_problem->_actionVectorSize);

  //size_t sigIdx = 0.0;
  for (size_t i = 0; i < _problem->_actionVectorSize; i++)
  {
    auto varIdx = _problem->_actionVectorIndexes[i];
    float sigma = _k->_variables[varIdx]->_explorationSigma;
    if (sigma <= 0.0) KORALI_LOG_ERROR("Value of Noise Sigma (%f) for action variable %lu is not defined or invalid.\n", sigma, i);

    knlohmann::json js;
    js["Type"] = "Univariate/Normal";
    js["Mean"] = 0.0;
    js["Standard Deviation"] = 1.0;

    auto d = dynamic_cast<distribution::univariate::Normal *>(getModule(js, _k));

    _policyDistributions.push_back(d);

    //sigIdx += i;
    //_choleskyDecompVariance[sigIdx] = sigma; // Fill Diagonal Elements of Lower Triangular Matrix
    _actionSigmas[i] = sigma;
  }

  /*********************************************************************
 * Initializing Q(a,s) = A(a,s) + V(s)
 *********************************************************************/

  _qExperiment["Problem"]["Type"] = "Supervised Learning";
  _qExperiment["Solver"]["Type"] = "Learner/DeepSupervisor";
  _qExperiment["Solver"]["Optimizer"] = _criticOptimizer;
  _qExperiment["Solver"]["Learning Rate"] = _criticLearningRate;
  _qExperiment["Solver"]["Loss Function"] = "Direct Gradient";
  _qExperiment["Solver"]["Steps Per Generation"] = 1;
  _qExperiment["Solver"]["Neural Network"] = _criticNeuralNetwork;

  // Running initialization to verify that the configuration is correct
  engine.initialize(_qExperiment);

  // Getting learner pointers
  _qProblem = dynamic_cast<problem::SupervisedLearning *>(_qExperiment._problem);
  _qLearner = dynamic_cast<solver::learner::DeepSupervisor *>(_qExperiment._solver);

  // Initializing experiment with an initial zero set
  for (size_t i = 0; i < _problem->_stateVectorSize; i++)
  {
    _qExperiment["Problem"]["Inputs"][0][i] = 0.0;

    for (size_t j = 0; j < 1 + 2 * _problem->_stateVectorSize; j++)
      _qExperiment["Problem"]["Solution"][i][j] = 0.0;
  }

  /*********************************************************************
  * Loading/Setting Hyperparameters
  *********************************************************************/

  // Setting Initial Hyperparameters
  _hyperparameters["Critic"] = _qLearner->getHyperparameters();
  _qHatHyperparameter = _qLearner->getHyperparameters();
}

void NAF::trainAgent()
{
  /***********************************************************************************
   * Training Phase
   **********************************************************************************/

  // Calculating cumulative Q*, for statistical purposes
  _cumulativeQStar = 0.0;
  _cumulativeQStarSquared = 0.0;

  // Creating minibatch for the critic update
  auto miniBatchIndexes = generateMiniBatch(_criticMiniBatchSize);

  // Evaluating Q on Minibatch
  std::vector<std::vector<float>> qEvaluations(_criticMiniBatchSize);
  for (size_t i = 0; i < _criticMiniBatchSize; i++)
  {
    // Selecting a uniformly random selected, yet not repeated experience
    size_t expId = miniBatchIndexes[i];

    auto curState = _experienceReplayStates[expId];
    qEvaluations[i] = _qLearner->getEvaluation(curState);
  }

  // Temporary storage of hyperparams
  auto qHyperparam = _qLearner->getHyperparameters();

  // Set Hyperparameter from target network
  _qLearner->setHyperparameters(_qHatHyperparameter);

  // Reevaluating minibatch with Qhat
  for (size_t i = 0; i < _criticMiniBatchSize; i++)
  {
    // Selecting a uniformly random selected, yet not repeated experience
    size_t expId = miniBatchIndexes[i];

    // Qhat = max_a(qhat) with s' fixed
    // Q* = r + y*Qhat -- If not terminal state
    // Q* = r -- If terminal state

    // Calculating target y value
    float yHat = 0.0;

    // Reward is the first factor in the QLearning algorithm
    yHat = _experienceReplayRewards[expId];

    // Getting experience's current state and action
    auto curState = _experienceReplayStates[expId];
    auto curAction = _experienceReplayActions[expId];

    // If state is not terminal (next state is filled) then add Qnew to the Q value.
    if (_experienceReplayTerminal[expId] == false)
    {
      // Getting experience's next state
      auto nextState = _experienceReplayStates[expId + 1];

      // Calculate target y
      float vHat = _qLearner->getEvaluation(nextState)[i];
      yHat += _criticDiscountFactor * vHat;
    }

    float qval = quadraticQFunction(curAction, qEvaluations[i]);
    float diff = yHat - qval;

    std::vector<float> policyGradient(1 + 2 * _problem->_stateVectorSize);

    // Calculating Gradients of Loss Li wrt. V(s)
    policyGradient[0] = -diff;

    // Calculating Gradients of Li wrt. mu(s)
    for (size_t j = 0; j < curState.size(); j++)
    {
      float sig = qEvaluations[i][1 + curState.size() + j];
      policyGradient[j + 1] = -diff * (curAction[j] - qEvaluations[i][j + 1]) * sig * sig;
    }

    // Calculating Gradients of Li wrt P(s)
    for (size_t j = 0; j < curState.size(); j++)
    {
      float sig = qEvaluations[i][1 + curState.size() + j];
      float dmu = curAction[j] - qEvaluations[i][1 + j];
      policyGradient[1 + curState.size() + j] = diff * dmu * dmu * sig;
    }

    // Updating inputs to training learner
    for (size_t j = 0; j < curState.size(); j++)
    {
      _qProblem->_inputs[i] = curState;
      _qProblem->_solution[i] = policyGradient;
    }

    // Keeping statistics
    _cumulativeQStar += yHat;
    _cumulativeQStarSquared += yHat * yHat;
  }

  // Set Hyperparameter from q network
  _qLearner->setHyperparameters(qHyperparam);

  // Running one generation of the optimization method with the given mini-batch
  _qLearner->initialize();
  _qLearner->runGeneration();
  _qLearner->finalize();

  // Keeping statistics
  _averageQStar = (float)_cumulativeQStar / (float)_criticMiniBatchSize;
  _stdevQStar = sqrt(_cumulativeQStarSquared / (float)_criticMiniBatchSize - _averageQStar * _averageQStar);

  /****************************************************************************
  * If batch normalization is being used, we need to adjust mean and variances
  * by sampling a few more mini-batches after the optimization steps
  ******************************************************************************/

  // TODO: evaluate if this improves training (D.W)
  normalizeStateActionNeuralNetwork(_qLearner->_trainingNeuralNetwork, _criticMiniBatchSize, _criticNormalizationSteps);

  /*********************************************************************
   * Updating hyperparameters and broadcasting them to the workers
   *********************************************************************/

  // Storing new Critics' hyperparameters
  _hyperparameters["Critic"] = _qLearner->getHyperparameters();
}

void NAF::updateHyperparameters(const knlohmann::json &hyperparameters)
{
  auto qHyperparam = hyperparameters["Critic"].get<std::vector<float>>();

  // Update the target network
  for (size_t i = 0; i < qHyperparam.size(); ++i)
    _qHatHyperparameter[i] = _targetLearningRate * qHyperparam[i] + (1. - _targetLearningRate) * _qHatHyperparameter[i];
  _qLearner->setHyperparameters(_qHatHyperparameter);
}

std::vector<float> NAF::getActionMeans(const std::vector<float> &state)
{
  auto qNNoutput = _qLearner->getEvaluation(state);
  auto mean = std::vector<float>(_problem->_actionVectorSize);
  for (size_t i = 0; i < mean.size(); ++i) mean[i] = qNNoutput[i + 1];
  return mean;
}

std::vector<float> NAF::getActionSigmas(const std::vector<float> &state)
{
  auto qNNoutput = _qLearner->getEvaluation(state);
  auto sigmas = std::vector<float>(_problem->_actionVectorSize);
  for (size_t i = 0; i < sigmas.size(); ++i) sigmas[i] = qNNoutput[i + 1 + sigmas.size()];
  return sigmas;
}

float NAF::quadraticQFunction(const std::vector<float> &action, const std::vector<float> &qEvaluation)
{
  double qval = 0;
  for (size_t i = 0; i < action.size(); ++i)
  {
    float dmu = (action[i] - qEvaluation[i + 1]);
    float sig = qEvaluation[i + 1 + action.size()];
    qval += dmu * sig * sig * dmu;
  }
  return 0.5 * qval;
}

void NAF::printAgentInformation()
{
  _k->_logger->logInfo("Normal", "Critic Information:\n");
  _k->_logger->logInfo("Normal", " + Average (Std) Q-Value in Mini-Batch:  %f (%f)\n", _averageQStar, _stdevQStar);

  _qExperiment._logger->_verbosityLevel = _k->_logger->_verbosityLevel;
  _qExperiment._solver->printGenerationAfter();
  _qExperiment._logger->setVerbosityLevel("Silent");
}

} // namespace continuous
} // namespace agent
} // namespace solver
} // namespace korali
// Updating qRet (equation 5 in ACER paper)
