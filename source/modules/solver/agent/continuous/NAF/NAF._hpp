@startIncludeGuard

#include "modules/problem/reinforcementLearning/continuous/continuous.hpp"
#include "modules/solver/agent/continuous/continuous.hpp"

@startNamespace

class @className : public @parentClassName
{
  public:
  /**
   * @brief Pointer to training experiment's Q(a,s) = A(a,s) + V(s)  problem
   */
  problem::SupervisedLearning *_qProblem;

  /**
  * @brief Pointer to training experiment's Q(a,s) critic learner
  */
  learner::DeepSupervisor *_qLearner;

  /**
   * @brief Korali experiment for the training of Q(a,s)
   */
  korali::Experiment _qExperiment;

  /**
   * @brief Pointer to target problem
   */
  problem::SupervisedLearning *_criticProblem;

  /**
  * @brief Pointer to target learner
  */
  learner::DeepSupervisor *_criticLearner;

  /**
   * @brief Korali experiment for target
   */
  korali::Experiment _criticExperiment;

  /**
  * @brief Function to calculate the advantage A(s,a).
  * @param action The current action a
  * @param mean Output of the NN evaluated for state s
  * @param diagP The quadratic term of the advantage function
  * @return value of Q(s,a)
  */
  float quadraticAdvantageFunction(const std::vector<float> &action, const std::vector<float> &mean, const std::vector<float> &diagP);

  float stateValueFunction(const std::vector<std::vector<float>> &state) override;
  knlohmann::json getAgentPolicy() override;
  void setAgentPolicy(const knlohmann::json &hyperparameters) override;
  void setTrainingState(const knlohmann::json &state) override;
  knlohmann::json getTrainingState() override;
  knlohmann::json runPolicy(const std::vector<std::vector<float>> &stateSequence) override;
  void trainPolicy() override;
  void printAgentInformation() override;
  void initializeAgent() override;
};

@endNamespace

@endIncludeGuard