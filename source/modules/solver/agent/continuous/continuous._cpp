#include "engine.hpp"
#include "modules/solver/agent/continuous/continuous.hpp"
#include "sample/sample.hpp"

#include <gsl/gsl_sf_psi.h>

@startNamespace

void @className::initializeAgent()
{
  // Getting continuous problem pointer
  _problem = dynamic_cast<problem::reinforcementLearning::Continuous *>(_k->_problem);

  if ((_policyDistribution != "Normal") && (_policyDistribution != "Beta"))
    KORALI_LOG_ERROR("Policy Distribution must be either 'Normal' or 'Beta' (is '%s').", _policyDistribution.c_str());

  /*********************************************************************
  * Initializing Action Noise Sigmas
  *********************************************************************/

  // Allocating space for the inverse variance calculation
  _actionScalings.resize(_problem->_actionVectorSize);
  _actionLowerBounds.resize(_problem->_actionVectorSize);
  _actionUpperBounds.resize(_problem->_actionVectorSize);

  for (size_t i = 0; i < _problem->_actionVectorSize; i++)
  {
    auto varIdx = _problem->_actionVectorIndexes[i];
    float lowerBound = _k->_variables[varIdx]->_lowerBound;
    float upperBound = _k->_variables[varIdx]->_upperBound;

    if (upperBound - lowerBound <= 0.0) KORALI_LOG_ERROR("Upper (%f) and Lower Bound (%f) of action variable %lu invalid.\n", upperBound, lowerBound, i);

    // Obtaining lower and upper bounds for the action
    _actionLowerBounds[i] = lowerBound;
    _actionUpperBounds[i] = upperBound;
    _actionScalings[i] = upperBound - lowerBound;
  }
}

void @className::getAction(korali::Sample &sample)
{
  // Getting current state
  auto state = sample["State"].get<std::vector<float>>();

  // Adding state to the state time sequence
  _stateTimeSequence.add(state);

  // Storage for the action to select
  std::vector<float> action(_problem->_actionVectorSize);

  // Forward state sequence to get the Gaussian means and sigmas from policy
  auto policy = runPolicy(_stateTimeSequence.getVector());
  auto curMeans = policy["Action Means"].get<std::vector<float>>();
  auto curSigmas = policy["Action Sigmas"].get<std::vector<float>>();

  /*****************************************************************************
  * During Training we select action according to policy's probability
  * distribution
  ****************************************************************************/

  if (sample["Mode"] == "Training") action = generateTrainingAction(curMeans, curSigmas);

  /*****************************************************************************
  * During testing, we select the means (point of highest density) for all
  * elements of the action vector
  ****************************************************************************/

  if (sample["Mode"] == "Testing") action = generateTestingAction(curMeans, curSigmas);

  /*****************************************************************************
  * Storing the action and it's policy
  ****************************************************************************/

  sample["Policy"] = policy;
  sample["Policy"]["Importance Weight"] = 1.0f;
  sample["Policy"]["KL Divergence Gradient"] = std::vector<float>(_problem->_actionVectorSize, 0.0f);

  sample["Action"] = action;
}

std::vector<float> @className::generateTrainingAction(const std::vector<float> &paramsOne, const std::vector<float> &paramsTwo)
{
  std::vector<float> action(_problem->_actionVectorSize);
  if (_policyDistribution == "Normal")
  {
    // ParamsOne are the Means, ParamsTwo are the Sigmas
    for (size_t i = 0; i < _problem->_actionVectorSize; i++)
      action[i] = paramsOne[i] + paramsTwo[i] * _normalGenerator->getRandomNumber();
  }
  else /* _policyDistribution == "Beta" */
  {
    // ParamsOne are the Means, ParamsTwo are the Variance Coefficients
    for (size_t i = 0; i < _problem->_actionVectorSize; i++)
      action[i] = ranBetaAlt(_normalGenerator->_range, paramsOne[i], paramsTwo[i], _actionLowerBounds[i], _actionUpperBounds[i]);
  }

  return action;
}

std::vector<float> @className::generateTestingAction(const std::vector<float> &paramsOne, const std::vector<float> &paramsTwo)
{
  std::vector<float> action(_problem->_actionVectorSize);
  if (_policyDistribution == "Normal")
  {
    // ParamsOne are the Means, ParamsTwo are the Sigmas
    for (size_t i = 0; i < _problem->_actionVectorSize; i++)
      action[i] = paramsOne[i];
  }
  else /* _policyDistribution == "Beta" */
  {
    // ParamsOne are the Means, ParamsTwo are the Variance Coefficients
    for (size_t i = 0; i < _problem->_actionVectorSize; i++)
    {
      float alpha;
      float beta;
      std::tie(alpha, beta) = betaParamTransformAlt(paramsOne[i], paramsTwo[i], _actionLowerBounds[i], _actionUpperBounds[i]);

      if (alpha > 1. && beta > 1.)
        action[i] = _actionLowerBounds[i] + (_actionUpperBounds[i] - _actionLowerBounds[i]) * (alpha - 1) / (alpha + beta - 2);
      else if (alpha <= 1. && beta > 1.)
        action[i] = _actionLowerBounds[i];
      else if (alpha > 1. && beta <= 1.)
        action[i] = _actionUpperBounds[i];
      else
        KORALI_LOG_ERROR("Case (a,b <=1) not yet treated (a,b = %f,%f)", alpha, beta);
    }
  }

  return action;
}

float @className::calculateImportanceWeight(const std::vector<float> &action, const std::vector<float> &curParamsOne, const std::vector<float> &curParamsTwo, const std::vector<float> &oldParamsOne, const std::vector<float> &oldParamsTwo)
{
  float logpCurPolicy = 0.0f;
  float logpOldPolicy = 0.0f;

  // Getting probability densities for current and past action given current policy
  if (_policyDistribution == "Normal")
  {
    // ParamsOne are the Means, ParamsTwo are the Sigmas
    for (size_t i = 0; i < action.size(); i++)
    {
      logpOldPolicy += normalLogDensity(action[i], oldParamsOne[i], oldParamsTwo[i]);
      logpCurPolicy += normalLogDensity(action[i], curParamsOne[i], curParamsTwo[i]);
    }
  }
  else /* _policyDistribution == "Beta" */
  {
    // ParamsOne are the Means, ParamsTwo are the Variance Coefficients
    for (size_t i = 0; i < action.size(); i++)
    {
      logpOldPolicy += betaLogDensityAlt(action[i], oldParamsOne[i], oldParamsTwo[i], _actionLowerBounds[i], _actionUpperBounds[i]);
      logpCurPolicy += betaLogDensityAlt(action[i], curParamsOne[i], curParamsTwo[i], _actionLowerBounds[i], _actionUpperBounds[i]);
    }
  }

  // Now calculating importance weight for the old s,a experience
  float logImportanceWeight = logpCurPolicy - logpOldPolicy;

  // Normalizing extreme values to prevent loss of precision
  if (logImportanceWeight > +7.0f) logImportanceWeight = +7.0f;
  if (logImportanceWeight < -7.0f) logImportanceWeight = -7.0f;

  // Calculating actual importance weight by exp
  float importanceWeight = std::exp(logImportanceWeight);
  return importanceWeight;
}

std::vector<float> @className::calculateKLDivergenceGradient(const std::vector<float> &oldParamsOne, const std::vector<float> &oldParamsTwo, const std::vector<float> &curParamsOne, const std::vector<float> &curParamsTwo)
{
  std::vector<float> klGrad(2.0 * _problem->_actionVectorSize, 0.0);

  if (_policyDistribution == "Normal")
  {
    // ParamsOne are the Means, ParamsTwo are the Sigmas
    for (size_t i = 0; i < _problem->_actionVectorSize; ++i)
    {
      float curInvVar = 1. / (curParamsTwo[i] * curParamsTwo[i]);
      float actionDiff = (curParamsOne[i] - oldParamsOne[i]);

      // KL-Gradient with respect to Mean
      klGrad[i] = actionDiff * curInvVar;

      // Contribution to Sigma from Trace
      float gradTr = -(curInvVar / curParamsTwo[i]) * oldParamsTwo[i] * oldParamsTwo[i];

      // Contribution to Sigma from Quadratic term
      float gradQuad = -(actionDiff * actionDiff) * (curInvVar / curParamsTwo[i]);

      // Contribution to Sigma from Determinant
      float gradDet = 1.0f / curParamsTwo[i];

      // KL-Gradient with respect to Sigma
      klGrad[_problem->_actionVectorSize + i] = gradTr + gradQuad + gradDet;
    }
  }
  else /* _policyDistribution == "Beta" */
  {
    // ParamsOne are the Means, ParamsTwo are the Variance Coefficients
    for (size_t i = 0; i < _problem->_actionVectorSize; ++i)
    {
      // Variable preparation
      const float muCur = curParamsOne[i];
      const float varcoefCur = curParamsTwo[i];

      float alphaCur;
      float betaCur;
      std::tie(alphaCur, betaCur) = betaParamTransformAlt(muCur, varcoefCur, _actionLowerBounds[i], _actionUpperBounds[i]);

      const float muOld = oldParamsOne[i];
      const float varcoefOld = oldParamsTwo[i];

      float alphaOld;
      float betaOld;
      std::tie(alphaOld, betaOld) = betaParamTransformAlt(muOld, varcoefOld, _actionLowerBounds[i], _actionUpperBounds[i]);

      const float psiAbCur = gsl_sf_psi(alphaCur + betaCur);
      const float psiAbOld = gsl_sf_psi(alphaOld + betaOld);

      // KL Grad wrt alpha
      const float dklda = (gsl_sf_psi(alphaCur) - psiAbCur - gsl_sf_psi(alphaOld) - psiAbOld) / _actionScalings[i];

      // KL Grad wrt beta
      const float dkldb = (gsl_sf_psi(betaCur) - psiAbCur - gsl_sf_psi(betaOld) - psiAbOld) / _actionScalings[i];

      // Derivatives of alpha and beta wrt mu and varc
      float dadmu, dadvarc, dbdmu, dbdvarc;
      std::tie(dadmu, dadvarc, dbdmu, dbdvarc) = derivativesBetaParamTransformAlt(muCur, varcoefCur, _actionLowerBounds[i], _actionUpperBounds[i]);

      // KL Grad wrt mu and varc
      klGrad[i] = dklda * dadmu + dkldb * dbdmu;
      klGrad[_problem->_actionVectorSize + i] = dklda * dadvarc + dkldb * dbdvarc;
    }
  }

  return klGrad;
}

float @className::getExperienceImportanceWeight(size_t expId)
{
  // Getting the state sequence and action for the given experience
  auto expStateSequence = getStateTimeSequence(expId);
  auto expAction = _experienceReplay[expId].action;

  // Get means and sigmas for the given experience
  auto expMeans = _experienceReplay[expId].policy["Action Means"].get<std::vector<float>>();
  auto expSigmas = _experienceReplay[expId].policy["Action Sigmas"].get<std::vector<float>>();

  // Getting current policy and calculating its means and sigmas for the given experience
  auto policy = runPolicy(expStateSequence);
  auto curMeans = policy["Action Means"].get<std::vector<float>>();
  auto curSigmas = policy["Action Sigmas"].get<std::vector<float>>();

  // Now calculating importance weight
  auto expImportanceWeight = calculateImportanceWeight(expAction, expMeans, expSigmas, curMeans, curSigmas);

  // Updating the impiortance weight value in the experience replay memory
  _experienceReplay[expId].policy["Importance Weight"] = expImportanceWeight;

  // Returning experience's importance weight
  return expImportanceWeight;
}

@moduleAutoCode

@endNamespace
