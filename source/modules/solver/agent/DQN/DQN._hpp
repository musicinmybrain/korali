#ifndef _KORALI_AGENT_DQN_HPP_
#define _KORALI_AGENT_DQN_HPP_

#include "modules/solver/agent/agent.hpp"

namespace korali
{
namespace solver
{
namespace agent
{
class DQN : public Agent
{
  public:
  /**
  * @brief Korali experiment for argmax_action(Q) based on a trained Q-Network
  */
  korali::Experiment _policyExperiment;

  /**
   * @brief Function to evaluate the Q* of a given action
   * @param sample Sample containing the action to evaluate
   * @param getGradients Indicates whether the gradients are required
   */
  void evaluateAction(Sample &sample, bool getGradients);

  double getStateActionProbabilityDensity(const std::vector<double>& state, const std::vector<double>& action) override;
  std::vector<double> queryPolicy(const std::vector<double> &state) override;
  void updatePolicyHyperparameters(const knlohmann::json &hyperparameters) override;
  void trainPolicy() override;
  void printPolicyInformation() override;
  void initializePolicy() override;
};

} // namespace agent
} // namespace solver
} // namespace korali

#endif // _KORALI_AGENT_DQN_HPP_
