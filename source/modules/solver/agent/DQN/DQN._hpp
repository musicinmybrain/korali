#ifndef _KORALI_AGENT_DQN_HPP_
#define _KORALI_AGENT_DQN_HPP_

#include "modules/solver/agent/agent.hpp"

namespace korali
{
namespace solver
{
namespace agent
{
class DQN : public Agent
{
  public:
  /**
   * @brief Function to evaluate the Q* of a given action
   * @param sample Sample containing the action to evaluate
   * @param getGradients Indicates whether the gradients are required
   */
  void evaluateAction(Sample &sample, bool getGradients);

  std::vector<double> queryPolicy(const std::vector<double> &state) override;
  void updateHyperparameters(const knlohmann::json &hyperparameters) override;
  void updatePolicy() override;
  void printGenerationAfter() override;
  void initializePolicy() override;
};

} // namespace agent
} // namespace solver
} // namespace korali

#endif // _KORALI_AGENT_DQN_HPP_
