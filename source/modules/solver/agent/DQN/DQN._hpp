#ifndef _KORALI_AGENT_DQN_HPP_
#define _KORALI_AGENT_DQN_HPP_

#include "modules/problem/supervisedLearning/supervisedLearning.hpp"
#include "modules/solver/agent/agent.hpp"
#include "modules/solver/learner/deepGD/deepGD.hpp"
#include "modules/solver/learner/learner.hpp"
#include "modules/distribution/univariate/univariate.hpp"

namespace korali
{
namespace solver
{
namespace agent
{
class DQN : public Agent
{
  public:
  /**
 * @brief Korali engine for running internal experiments
 */
  korali::Engine _engine;

  /**
   * @brief Pointer to training experiment's problem
   */
  problem::SupervisedLearning *_criticTrainingProblem;

  /**
  * @brief Pointer to training experiment's learner
  */
  learner::DeepGD *_criticLearner;

  /**
   * @brief Korali experiment for the training of the Qvalue-estimator
   */
  korali::Experiment _criticExperiment;

  /**
 * @brief Korali experiment for argmax_action(Q) based on a trained Q-Network
 */
  korali::Experiment _actorExperiment;

  /**
   * @brief Function to evaluate the Q* of a given action
   * @param sample Sample containing the action to evaluate
   * @param getGradients Indicates whether the gradients are required
   */
  void evaluateAction(Sample &sample, bool getGradients);

  std::vector<double> getTrainingAction(const std::vector<double> &state) override;
  std::vector<double> queryPolicy(const std::vector<double>& state) override;
  void updateHyperparameters(const knlohmann::json& hyperparameters) override;
  void updatePolicy() override;
  void printGenerationAfter() override;
  void initialize() override;
};

} // namespace agent
} // namespace solver
} // namespace korali

#endif // _KORALI_AGENT_DQN_HPP_
