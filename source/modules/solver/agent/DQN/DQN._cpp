#include "modules/solver/agent/DQN/DQN.hpp"

/****************************************
 * Things to fix:
 * - All samples use their own pseudorandom generators
 * - All seeds must be replicable when restarting a job
 *****************************************/

namespace korali
{
namespace solver
{
namespace agent
{
void DQN::initializePolicy()
{
  /*********************************************************************
  * Creating Q-Maximizing argmax(Action) Experiment
  *********************************************************************/

  // Creating evaluation lambda function for optimization
  auto fc = [this](Sample &sample) { this->evaluateAction(sample, true); };

  _actorExperiment["Problem"]["Type"] = "Optimization";
  _actorExperiment["Problem"]["Objective Function"] = fc;

  for (size_t i = 0; i < _problem->_actionVectorSize; i++)
  {
    size_t varIdx = _problem->_actionVectorIndexes[i];

    _actorExperiment["Variables"][i]["Name"] = _k->_variables[varIdx]->_name;
    _actorExperiment["Variables"][i]["Lower Bound"] = _k->_variables[varIdx]->_lowerBound;
    _actorExperiment["Variables"][i]["Upper Bound"] = _k->_variables[varIdx]->_upperBound;

    double initialGuess = (_k->_variables[varIdx]->_upperBound + _k->_variables[varIdx]->_lowerBound) * 0.5;
    double initialStdDev = abs((_k->_variables[varIdx]->_upperBound - _k->_variables[varIdx]->_lowerBound));

    _actorExperiment["Variables"][i]["Initial Value"] = initialGuess;
    _actorExperiment["Variables"][i]["Initial Mean"] = initialGuess;
    _actorExperiment["Variables"][i]["Initial Standard Deviation"] = initialStdDev;
    _actorExperiment["Variables"][i]["Values"] = _k->_variables[varIdx]->_values;
  }

  _actorExperiment["Solver"] = _actionOptimizer;

  _actorExperiment["Console Output"]["Frequency"] = 0;
  _actorExperiment["Console Output"]["Verbosity"] = "Silent";
  _actorExperiment["File Output"]["Enabled"] = false;
  _actorExperiment["Random Seed"] = _k->_randomSeed++;

  // Running initialization to verify that the configuration is correct
  _engine.initialize(_actorExperiment);
}

void DQN::updatePolicy()
{

}

void DQN::evaluateAction(Sample &sample, bool getGradients)
{
  // Setting weights and biases
  auto action = KORALI_GET(std::vector<double>, sample, "Parameters");
  auto state = sample.globals()["Current State"].get<std::vector<double>>();

  // Creating state/action input
  std::vector<double> stateActionInput(state.size() + action.size());
  for (size_t j = 0; j < state.size(); j++) stateActionInput[j] = state[j];
  for (size_t j = 0; j < action.size(); j++) stateActionInput[j + state.size()] = action[j];

  auto evaluation = _criticLearner->getEvaluation(stateActionInput);
  auto gradients = _criticLearner->getGradients({{-1.0}});

  sample["F(x)"] = evaluation[0];

  for (size_t i = 0; i < action.size(); i++)
  {
    size_t startIdx = state.size();
    sample["Gradient"][i] = gradients[startIdx + i];
  }
}

void DQN::updateHyperparameters(const knlohmann::json &hyperparameters)
{
  _criticLearner->setHyperparameters(hyperparameters["Critic"].get<std::vector<double>>());
  _epsilonCurrentValue = hyperparameters["Epsilon"].get<double>();

  // Re-initializing action noises to zero
  size_t actionCount = _problem->_actionVectorIndexes.size();
  _currentActionNoises.resize(actionCount);
  for (size_t i = 0; i < actionCount; i++) _currentActionNoises[i] = 0.0;
}

std::vector<double> DQN::queryPolicy(const std::vector<double> &state)
{
  _actorExperiment._globals["Current State"] = state;

  // Running optimization experiment to get best estimated action
  korali::Engine engine;
  engine.run(_actorExperiment);

  // Getting optimal action, based on the NN evaluation
  return _actorExperiment["Results"]["Best Sample"]["Parameters"].get<std::vector<double>>();
}

void DQN::printGenerationAfter()
{
  // Printing common experience information
  Agent::printGenerationAfter();
}

} // namespace agent

} // namespace solver

} // namespace korali
