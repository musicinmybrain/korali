#include "engine.hpp"
#include "modules/solver/agent/SQN/SQN.hpp"
#include "sample/sample.hpp"

/****************************************
 * Things to fix:
 * - All samples use their own pseudorandom generators
 * - All seeds must be replicable when restarting a job
 *****************************************/

namespace korali
{
namespace solver
{
namespace agent
{
void SQN::initializeAgent()
{
  // Getting continuous problem pointer
  _continuousProblem = dynamic_cast<problem::reinforcementLearning::Continuous *>(_k->_problem);

  /*********************************************************************
 * Initializing Critic-Related Structures
 *********************************************************************/

  korali::Engine engine; // Engine to initialize experiments with

  _criticExperiment["Problem"]["Type"] = "Supervised Learning";

  _criticExperiment["Solver"]["Type"] = "Learner/DeepGD";
  _criticExperiment["Solver"]["Optimizer"] = _criticOptimizer;
  _criticExperiment["Solver"]["Loss Function"] = "Mean Squared Error";
  _criticExperiment["Solver"]["Steps Per Generation"] = 1;
  _criticExperiment["Solver"]["Neural Network"] = _criticNeuralNetwork;

  _criticExperiment["Console Output"]["Frequency"] = 0;
  _criticExperiment["Console Output"]["Verbosity"] = "Silent";
  _criticExperiment["File Output"]["Enabled"] = false;
  _criticExperiment["Random Seed"] = _k->_randomSeed++;

  // Initializing experiment with an initial zero set
  for (size_t i = 0; i < _miniBatchSize; i++)
  {
    _criticExperiment["Problem"]["Solution"][i][0] = 0.0;

    for (size_t j = 0; j < _k->_variables.size(); j++)
      _criticExperiment["Problem"]["Inputs"][i][j] = 0.0;
  }

  // Running initialization to verify that the configuration is correct
  engine.initialize(_criticExperiment);

  // Getting learner pointers
  _criticProblem = dynamic_cast<problem::SupervisedLearning *>(_criticExperiment._problem);
  _criticLearner = dynamic_cast<solver::learner::DeepGD *>(_criticExperiment._solver);

  /*********************************************************************
  * Initializing Policy-Related Structures
  *********************************************************************/

  // Setting the number of input layer nodes as number of input vector size
  _policyNeuralNetwork["Layers"][0]["Node Count"] = _continuousProblem->_stateVectorSize;

  // Setting the number of output layer nodes as number of output vector size
  size_t outputLayerId = _policyNeuralNetwork["Layers"].size() - 1;
  _policyNeuralNetwork["Layers"][outputLayerId]["Node Count"] = _continuousProblem->_actionVectorSize;
  _policyNeuralNetwork["Batch Size"] = _miniBatchSize;

  // Creating policy neural network, setting its batch size as the number of inputs to the problem
  _policyNN = dynamic_cast<NeuralNetwork *>(getModule(_policyNeuralNetwork, _k));

  // Creating evaluation lambda function for optimization
  auto policyFc = [this](Sample &sample) { this->evaluateHyperparameters(sample); };

  _policyExperiment["Problem"]["Type"] = "Optimization";
  _policyExperiment["Problem"]["Objective Function"] = policyFc;

  auto policyHyperparameters = _policyNN->generateInitialHyperparameters();

  printf("Policy Hyperparameter Count: %lu\n", policyHyperparameters.size());
  for (size_t i = 0; i < policyHyperparameters.size(); i++)
  {
    _policyExperiment["Variables"][i]["Name"] = std::string("Hyperparameter") + std::to_string(i);
    _policyExperiment["Variables"][i]["Initial Value"] = policyHyperparameters[i];
    _policyExperiment["Variables"][i]["Initial Mean"] = policyHyperparameters[i];
    _policyExperiment["Variables"][i]["Initial Standard Deviation"] = abs(policyHyperparameters[i]) * 0.1;
  }

  _policyExperiment["Solver"]["Type"] = "Optimizer/CMAES";
  //_policyExperiment["Solver"]["Termination Criteria"]["Min Value Difference Threshold"] = 0.1;
  _policyExperiment["Solver"]["Termination Criteria"]["Max Generations"] = 10;
  _policyExperiment["File Output"]["Frequency"] = 0;
  _policyExperiment["File Output"]["Enabled"] = false;
  _policyExperiment["Console Output"]["Frequency"] = 0;
  _policyExperiment["Console Output"]["Verbosity"] = "Silent";
  _policyExperiment["Random Seed"] = _k->_randomSeed++;

//  printf("%s\n", _policyExperiment._js.getJson().dump(2).c_str());
//   exit(0);
  // Running initialization to verify that the configuration is correct
  engine.initialize(_policyExperiment);

  /*********************************************************************
  * Loading/Setting Hyperparameters
  *********************************************************************/

  _hyperparameters["Policy"] = _policyNN->getHyperparameters();
}

void SQN::getAction(korali::Sample &sample)
{
  // Getting current state
  auto state = sample["State"].get<std::vector<double>>();

  // Obtaining action from policy
  auto action = queryPolicy(state);

  // If currently on a training phase, add noise/random actions.
  bool isTraining = sample["Mode"] == "Training";

  if (isTraining)
  {
    // Introducing random noise to the action
    for (size_t i = 0; i < _problem->_actionVectorIndexes.size(); i++)
    {
      size_t varIdx = _problem->_actionVectorIndexes[i];

      // Check whether the variable requires noise
      if (_k->_variables[varIdx]->_explorationNoiseEnabled == true)
      {
        double w = _k->_variables[varIdx]->_explorationNoiseDistribution->getRandomNumber();
        double noise = _k->_variables[varIdx]->_explorationNoiseTheta * _currentActionNoises[i] + w;
        action[i] += noise;
        //printf("Theta (%f) * Previous Noise: (%f) + W: (%f) = %f\n",  _k->_variables[varIdx]->_explorationNoiseTheta, _currentActionNoises[i], w, noise);
        _currentActionNoises[i] = noise;
      }
    }
  }

  // Storing the action
  sample["Action"] = action;
}

void SQN::evaluateHyperparameters(Sample &sample)
{
  // Getting parameters for weight and bias update
  auto parameters = KORALI_GET(std::vector<double>, sample, "Parameters");

  // Getting states from the minibatch
  auto states = sample.globals()["States"].get<std::vector<std::vector<double>>>();

  // Setting states as inputs
  _policyNN->setInput(states);

  // Updating the training network's weights, biases, and normalization factors
  _policyNN->setHyperparameters(parameters);

  // Forward propagating the input values through the training neural network
  _policyNN->forward();

  // Getting action vector out of the policy network
  auto actions = _policyNN->_outputValues;

  // Sum of all Q(s,a)
  double sumQ = 0.0;
  for (size_t i = 0; i < states.size(); i++)
   sumQ += stateActionValueFunction(states[i], actions[i]);

  // Saving the negative of the error because we want to minimize it
  sample["F(x)"] = sumQ;
}

double SQN::stateActionValueFunction(const std::vector<double> &state, const std::vector<double> &action)
{
  // Storage to put together state and action
  std::vector<double> stateActionInput(_problem->_stateVectorSize + _problem->_actionVectorSize);

  // Forward propagating state/action through the critic
  for (size_t j = 0; j < state.size(); j++) stateActionInput[j] = state[j];
  for (size_t j = 0; j < action.size(); j++) stateActionInput[j + state.size()] = action[j];
  auto evaluation = _criticLearner->getEvaluation(stateActionInput);

  // Getting the value of V(Xt), i.e., Q(xt, best action)
  return evaluation[0];
}

void SQN::trainAgent()
{
  // Creating storage for state history indexes to choose from
  std::vector<size_t> experienceReplayIndexes(_experienceReplayHistory.size());
  for (size_t i = 0; i < _experienceReplayHistory.size()-1; i++) experienceReplayIndexes[i] = i;

  // Shuffling indexes to choose the mini batch from
  std::shuffle(experienceReplayIndexes.begin(), experienceReplayIndexes.end(), *mt);

  // Engine to run experiments
  korali::Engine engine;

  /***************************************************************************************
  * Updating Policy Network by performing a Gradient descent step with latest experiences
  ***************************************************************************************/

  // Calculating cumulative Q*, for statistical purposes
  _cumulativeQStar = 0.0;

  for (size_t i = 0; i < _miniBatchSize; i++)
  {
   // Selecting a uniformly random selected, yet not repeated experience
   size_t expId = experienceReplayIndexes[i];

   // Check if it is a terminal state
   bool isTerminal = _experienceReplayHistory[expId]["Is Terminal"];

   // Getting experience's current state and action
   std::vector<double> curState   = _experienceReplayHistory[expId]["State"];
   std::vector<double> curAction  = _experienceReplayHistory[expId]["Action"];
   std::vector<double> nextState  = isTerminal ? std::vector<double>() : _experienceReplayHistory[expId + 1]["State"].get<std::vector<double>>();
   std::vector<double> bestAction = isTerminal ? std::vector<double>() : queryPolicy(nextState);

   // Accumulating states for evaluation in the policy
   _policyExperiment._globals["States"][i] = curState;

   // Getting current reward
   double curReward = _experienceReplayHistory[expId]["Reward"].get<double>();

   /*****************************************
    * Critic Section
    *****************************************/

   // Calculating target Q value (solution) for Qnew on selected batch
   double qStar = curReward;

   // If state is not terminal (next state is filled) then add Qnew to the Q value.
   if (isTerminal == false) qStar += _criticDiscountFactor * stateActionValueFunction(nextState, bestAction);

   // Updating inputs to training learner
   _criticProblem->_inputs[i] = curState;
   _criticProblem->_inputs[i].insert(_criticProblem->_inputs[i].end(), curAction.begin(), curAction.end());
   _criticProblem->_solution[i][0] = qStar;

   // Keeping statistics
   _cumulativeQStar += qStar;
  }

  // Running one generation of the optimization method with the given mini-batch
  _criticExperiment["Solver"]["Termination Criteria"]["Max Generations"] = _criticExperiment._currentGeneration + 1;
  _criticLearner->initialize();
  engine.resume(_criticExperiment);

  // Keeping critic/policy statistics
  _averageQStar = (double)_cumulativeQStar / (double)(_miniBatchSize);

  /****************************************************************************
 * If batch normalization is being used, we need to adjust mean and variances
 * by sampling a few more mini-batches after the optimization steps
 ******************************************************************************/

  // Allocating memory for the mini batch set
  std::vector<std::vector<std::vector<double>>> criticMiniBatches(_normalizationSteps);
  std::vector<std::vector<std::vector<double>>> policyMiniBatches(_normalizationSteps);

  for (size_t i = 0; i < _normalizationSteps; i++)
  {
    criticMiniBatches[i].resize(_miniBatchSize);
    policyMiniBatches[i].resize(_miniBatchSize);
  }

  for (size_t i = 0; i < _normalizationSteps; i++)
    for (size_t j = 0; j < _miniBatchSize; j++)
    {
      criticMiniBatches[i][j].resize(_problem->_stateVectorSize + _problem->_actionVectorSize);
      policyMiniBatches[i][j].resize(_problem->_stateVectorSize);
    }

  // Filling the minibatches
  for (size_t step = 0; step < _normalizationSteps; step++)
  {
    // Shuffling indexes to choose the mini batch from
    std::shuffle(experienceReplayIndexes.begin(), experienceReplayIndexes.end(), *mt);

    for (size_t i = 0; i < _miniBatchSize; i++)
    {
      // Selecting a uniformly random selected, yet not repeated experience
      size_t expId = experienceReplayIndexes[i];

      policyMiniBatches[step][i] = _experienceReplayHistory[expId]["State"].get<std::vector<double>>();
      for (size_t j = 0; j < _problem->_stateVectorSize; j++) criticMiniBatches[step][i][j] = _experienceReplayHistory[expId]["State"][j];
      for (size_t j = 0; j < _problem->_actionVectorSize; j++) criticMiniBatches[step][i][_problem->_stateVectorSize + j] = _experienceReplayHistory[expId]["Action"][j];
    }
  }

  _criticLearner->_trainingNeuralNetwork->normalize(criticMiniBatches);

  // Updating critic inference hyperparameters
  auto criticHyperparameters = _criticLearner->getHyperparameters();
  _criticLearner->setHyperparameters(criticHyperparameters);

  /*******************************************************************
   * Now computing new policy with a stochastic method
   ******************************************************************/

  // Running a full stochastic optimization method on the actor NN with the given mini-batch
  engine.run(_policyExperiment);
  auto newPolicyHyperparameters = _policyExperiment["Results"]["Best Sample"]["Parameters"].get<std::vector<double>>();
  auto policyQ = _policyExperiment["Results"]["Best Sample"]["F(x)"].get<double>();

  printf("Policy E(Q): %f\n", policyQ);
  // Storing average policy hyperparameters for workers to use
  _hyperparameters["Policy"] = newPolicyHyperparameters;
}

std::vector<double> SQN::queryPolicy(const std::vector<double> &state)
{
  _policyNN->setInput({state});
  _policyNN->forward();
  auto action = _policyNN->_outputValues[0];
  return action;
}

void SQN::updateHyperparameters(const knlohmann::json &hyperparameters)
{
 _policyNN->setHyperparameters(hyperparameters["Policy"].get<std::vector<double>>());

  // Re-initializing action noises to zero
  size_t actionCount = _problem->_actionVectorIndexes.size();
  _currentActionNoises.resize(actionCount);
  for (size_t i = 0; i < actionCount; i++) _currentActionNoises[i] = 0.0;
}

void SQN::printAgentInformation()
{
  _k->_logger->logInfo("Normal", "Critic Information:\n");

  _k->_logger->logInfo("Normal", " + Cumulative Expected Q-Value:     %f\n", _cumulativeQStar);
  _k->_logger->logInfo("Normal", " + Average Expected Q-Value:        %f\n", _averageQStar);

  _criticExperiment._logger->_verbosityLevel = _k->_logger->_verbosityLevel;
  _criticExperiment._solver->printGenerationAfter();
  _criticExperiment._logger->setVerbosityLevel("Silent");

  _k->_logger->logInfo("Normal", "Policy Information:\n");

  _k->_logger->logInfo("Normal", " + Average Action Gradients: [");
}

} // namespace agent

} // namespace solver

} // namespace korali
