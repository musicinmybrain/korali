#ifndef _KORALI_AGENT_SQN_HPP_
#define _KORALI_AGENT_SQN_HPP_

#include "modules/solver/agent/agent.hpp"
#include "modules/problem/reinforcementLearning/continuous/continuous.hpp"

namespace korali
{
namespace solver
{
namespace agent
{
class SQN : public Agent
{
  public:

  /**
  * @brief Storage for the pointer to the (continuous) learning problem
  */
  problem::reinforcementLearning::Continuous *_continuousProblem;

  /**
   * @brief A neural network to be trained based on inputs and solutions
   */
  NeuralNetwork *_policyNN;

  /**
   * @brief Pointer to training experiment's problem
   */
  problem::SupervisedLearning *_criticProblem;

  /**
  * @brief Pointer to training experiment's learner
  */
  learner::DeepGD *_criticLearner;

  /**
   * @brief Korali experiment for the training of the Qvalue-estimator
   */
  korali::Experiment _criticExperiment;

  /**
  * @brief Korali experiment for argmax_action(Q) based on a trained Q-Network
  */
  korali::Experiment _policyExperiment;

  /**
   * @brief Variable to keep track of the current noise added to the action
   */
  std::vector<double> _currentActionNoises;

  /**
   * @brief Calculates the state+action value function Q(s,a) = Expectation_s,a [ R | s,a ] of a given experience using the latest critic
   * @param state state to evaluate
   * @param action action to evaluate
   * @return The value of Q(s,a)
   */
  double stateActionValueFunction(const std::vector<double> &state, const std::vector<double> &action);

  /**
   * @brief Model function to evaluate a given NN weight/bias configuration
   * @param sample The sample containing proposal NN weight/bias configuration.
   */
  void evaluateHyperparameters(korali::Sample &sample);

  /**
   * @brief Function to query policy and get the best action for the given state
   * @param state The input state
   * @return The action value, corresponding to the state and the current policy hyperparameters
   */
  std::vector<double> queryPolicy(const std::vector<double> &state);

  void getAction(korali::Sample &sample) override;
  void updateHyperparameters(const knlohmann::json &hyperparameters) override;
  void trainAgent() override;
  void printAgentInformation() override;
  void initializeAgent() override;
};

} // namespace agent
} // namespace solver
} // namespace korali

#endif // _KORALI_AGENT_SQN_HPP_
