#ifndef _KORALI_AGENT_HPP_
#define _KORALI_AGENT_HPP_

#include "engine.hpp"
#include "modules/problem/supervisedLearning/supervisedLearning.hpp"
#include "modules/problem/reinforcementLearning/reinforcementLearning.hpp"
#include "modules/solver/learner/deepGD/deepGD.hpp"
#include <algorithm> // std::shuffle
#include <random>

namespace korali
{
namespace solver
{
class Agent : public Solver
{
  public:

 /**
 * @brief Korali engine for running internal experiments
 */
  korali::Engine _engine;

  /**
   * @brief Pointer to training experiment's problem
   */
  problem::SupervisedLearning *_criticProblem;

  /**
  * @brief Pointer to training experiment's learner
  */
  learner::DeepGD *_criticLearner;

  /**
   * @brief Korali experiment for the training of the Qvalue-estimator
   */
  korali::Experiment _criticExperiment;

  /**
  * @brief Korali experiment for argmax_action(Q) based on a trained Q-Network
  */
   korali::Experiment _actorExperiment;

   /**
   * @brief Pointer to training the actor network
   */
   learner::DeepGD *_actorLearner;

   /**
   * @brief Pointer to actor's experiment problem
   */
   problem::SupervisedLearning *_actorProblem;

  /**
  * @brief Storage for the pointer to the learning problem
  */
  problem::ReinforcementLearning *_problem;

  /**
   * @brief Random device for the generation of shuffling numbers
   */
  std::random_device rd;

  /**
  * @brief Mersenne twister for the generation of shuffling numbers
  */
  std::mt19937 *mt;

  /**
   * @brief Gets the next action for the agent, based on the state and current policy, for training purposes (may contain noise)
   * @param state The vector containing the current agent's state
   * @return A vector containing the action
   */
  virtual std::vector<double> getTrainingAction(const std::vector<double> &state) = 0;

  /**
   * @brief Gets the next action for the actor, based on the state and best policy, for inference purposes (may not contain noise)
   * @param state The vector containing the current agent's state
   * @return A vector containing the action
   */
  std::vector<double> getInferenceAction(const std::vector<double> &state);

  /**
  * @brief Updates the algorithm's critic (Q), based on the new experiences
  */
  void updateCritic();

  /**
  * @brief Updates the algorithm's policy, based on the new experiences
  */
  virtual void updatePolicy() = 0;

  /**
  * @brief Updates the policy's hyperparameters to calculate the next action of the agent
  * @param hyperparameters The hyperparameters to update the policy.
  */
  virtual void updateHyperparameters(const knlohmann::json& hyperparameters) = 0;

  /**
  * @brief Normalizes neural network batch normalization mean and variances
  * @param nn The neural network to normalize
  */
  void normalizeNeuralNetwork(korali::NeuralNetwork* nn);

  /**
  * @brief Function to query policy and get the best action for the given state
  * @param state The input state
  * @return The action, given by the policy, corresponding to the state and the current policy hyperparameters
  */
  virtual std::vector<double> queryPolicy(const std::vector<double>& state) = 0;

  /**
 * @brief Runs a generation of the environment(s), running an action on each episode, and updating the policy.
 */
  void runGeneration() override;

  void printGenerationAfter() override;
  void initialize() override;
};

} // namespace solver
} // namespace korali

#endif // _KORALI_AGENT_HPP_
