#ifndef _KORALI_AGENT_HPP_
#define _KORALI_AGENT_HPP_

#include "modules/problem/reinforcementLearning/reinforcementLearning.hpp"
#include "modules/problem/supervisedLearning/supervisedLearning.hpp"
#include "modules/solver/learner/deepGD/deepGD.hpp"
#include <algorithm> // std::shuffle
#include <random>

namespace korali
{
namespace solver
{
class Agent : public Solver
{
  public:
  /**
  * @brief Storage for the pointer to the learning problem
  */
  problem::ReinforcementLearning *_problem;

  /**
   * @brief Random device for the generation of shuffling numbers
   */
  std::random_device rd;

  /**
  * @brief Mersenne twister for the generation of shuffling numbers
  */
  std::mt19937 *mt;

  /**
   * @brief Gets the next action for the agent, based on the state and current policy, for training purposes (may contain noise)
   * @param sample to update
   */
  virtual void getAction(korali::Sample &sample) = 0;

  /**
  * @brief Trains the Agent's critic/policy, based on the new experiences
  */
  virtual void trainAgent() = 0;

  /**
  * @brief Updates the agent's hyperparameters
  * @param hyperparameters The hyperparameters to update the agent.
  */
  virtual void updateHyperparameters(const knlohmann::json &hyperparameters) = 0;

  /**
    * @brief Initializes the internal state of the policy
    */
  virtual void initializeAgent() = 0;

  /**
 * @brief Runs a generation of the environment(s), running an action on each episode, and updating the policy.
 */
  void runGeneration() override;

  /**
   * @brief Function to query policy and get the best action for the given state
   * @param state The input state
   * @return The action value, corresponding to the state and the current policy hyperparameters
   */
  virtual std::vector<double> queryPolicy(const std::vector<double> &state) = 0;

  /**
   * @brief Prints information about the training policy
   */
  virtual void printAgentInformation() = 0;

  void printGenerationAfter() override;
  void initialize() override;
};

} // namespace solver
} // namespace korali

#endif // _KORALI_AGENT_HPP_
