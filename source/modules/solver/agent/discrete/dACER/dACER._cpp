#include "engine.hpp"
#include "modules/solver/agent/discrete/dACER/dACER.hpp"
#include "sample/sample.hpp"

namespace korali
{
namespace solver
{
namespace agent
{
namespace discrete
{
void dACER::initializeAgent()
{
  // Initializing common discrete agent configuration
  Discrete::initializeAgent();

  /*********************************************************************
 * Initializing Critic-Related Structures
 *********************************************************************/

  korali::Engine engine; // Engine to initialize experiments with

  _criticExperiment["Problem"]["Type"] = "Supervised Learning";
  _criticExperiment["Solver"]["Type"] = "Learner/DeepSupervisor";
  _criticExperiment["Solver"]["Optimizer"] = _criticOptimizer;
  _criticExperiment["Solver"]["Learning Rate"] = _criticLearningRate;
  _criticExperiment["Solver"]["Loss Function"] = "Mean Squared Error";
  _criticExperiment["Solver"]["Steps Per Generation"] = 1;
  _criticExperiment["Solver"]["Neural Network"] = _criticNeuralNetwork;

  for (size_t i = 0; i < _criticMiniBatchSize; i++)
  {
    for (size_t j = 0; j < _problem->_stateVectorSize; j++)
      _criticExperiment["Problem"]["Inputs"][i][j] = 0.0;

    for (size_t j = 0; j < _problem->_possibleActions.size(); j++)
      _criticExperiment["Problem"]["Solution"][i][j] = 0.0;
  }

  // Running initialization to verify that the configuration is correct
  engine.initialize(_criticExperiment);

  // Getting learner pointers
  _criticProblem = dynamic_cast<problem::SupervisedLearning *>(_criticExperiment._problem);
  _criticLearner = dynamic_cast<solver::learner::DeepSupervisor *>(_criticExperiment._solver);

  /*********************************************************************
  * Initializing Policy-Related Structures
  *********************************************************************/

  // Creating and running Actor Learning Experiments

  _policyExperiment["Problem"]["Type"] = "Supervised Learning";
  _policyExperiment["Solver"]["Type"] = "Learner/DeepSupervisor";
  _policyExperiment["Solver"]["Loss Function"] = "Direct Gradient";
  _policyExperiment["Solver"]["Optimizer"] = _policyOptimizer;
  _policyExperiment["Solver"]["Learning Rate"] = _policyLearningRate;
  _policyExperiment["Solver"]["Steps Per Generation"] = 1;
  _policyExperiment["Solver"]["Neural Network"] = _policyNeuralNetwork;

  for (size_t i = 0; i < _criticMiniBatchSize; i++)
  {
    // Initializing experiment with an initial zero set
    for (size_t j = 0; j < _problem->_stateVectorSize; j++)
      _policyExperiment["Problem"]["Inputs"][i][j] = 0.0;

    for (size_t j = 0; j < _problem->_possibleActions.size(); j++)
      _policyExperiment["Problem"]["Solution"][i][j] = 0.0;
  }

  // Running initialization to verify that the configuration is correct
  engine.initialize(_policyExperiment);

  // Getting learner pointers
  _policyProblem = dynamic_cast<problem::SupervisedLearning *>(_policyExperiment._problem);
  _policyLearner = dynamic_cast<solver::learner::DeepSupervisor *>(_policyExperiment._solver);

  /*********************************************************************
  * Loading/Setting Hyperparameters
  *********************************************************************/

  // Getting current hyperparameters
  _policyCurrentHyperparameters = _policyLearner->getHyperparameters();

  // Storing initial average policy parameters
  if (_k->_currentGeneration == 0)
    _policyAverageHyperparameters = _policyCurrentHyperparameters;

  // Get the initial set of policy NN hyperparameters
  _hyperparameters["Policy"] = _policyCurrentHyperparameters;
}

void dACER::trainAgent()
{
  // Resetting critic statistics
  _cumulativeQStar = 0.0;        // Cumulative Q Retrace
  _cumulativeQStarSquared = 0.0; // Stdev Q Retrace

  // Creating minibatch for the critic update
  auto miniBatchIndexes = generateMiniBatch(_criticMiniBatchSize);

  for (size_t i = 0; i < _criticMiniBatchSize; i++)
  {
    // Selecting a uniformly random selected, yet not repeated experience
    size_t expId = miniBatchIndexes[i];

    // Re-calculating qRet (equation 5 in ACER paper, also see below)
    float qRet = retraceFunction(expId);

    // Getting experience's state
    std::vector<float> curState = _experienceReplay[expId].state;

    // Calculating V(state) with the current policy
    float vCurState = stateValueFunction(curState);

    //// Computing quantities needed for updating weights

    // Getting experience's action
    size_t curActionIdx = _experienceReplay[expId].policy["Action Index"].get<size_t>();

    // Getting probability densities for current action given past behaviour
    auto pOldPolicy = _experienceReplay[expId].policy["Action Probabilities"].get<std::vector<float>>();

    // Getting probability densities for current action given current policy
    auto pCurPolicy = getActionProbabilities(curState);

    // Getting p(s,a) for the best action, given the current policy
    float pActionCurPolicy = pCurPolicy[curActionIdx];

    // Now calculating importance weight for the old s,a experience
    float importanceWeight = calculateImportanceWeight(curActionIdx, pCurPolicy, pOldPolicy);

    /*****************************************
    * Policy Section
    *****************************************/

    // Now calculating truncated importance weight
    float truncatedImportanceWeight = std::min(_importanceWeightTruncation, importanceWeight);

    // Now Calculating Acer gradient, from https://arxiv.org/pdf/1611.01224.pdf, Eq. 9
    std::vector<float> gPolicy(_problem->_possibleActions.size(), 0.0f);

    // First part of the gradient vector
    gPolicy[curActionIdx] = truncatedImportanceWeight * (1.0f / pActionCurPolicy * (qRet - vCurState));

    // Compute the expectation for the second part of the gradient vector
    for (size_t newActionIdx = 0; newActionIdx < _problem->_possibleActions.size(); newActionIdx++)
    {
      // Calculating Qcritic(state,action)
      float qCritic = stateActionValueFunction(curState, newActionIdx);

      // Getting p(s,a) for selected action, given the old policy
      float pNewActionOldPolicy = pOldPolicy[newActionIdx];

      // Getting p(s,a) for selected action, given the current policy
      float pNewActionCurPolicy = pCurPolicy[newActionIdx];

      // Now calculating importance weight for the old s,a experience
      float newImportanceWeight = pNewActionCurPolicy / pNewActionOldPolicy;

      // Now calculating r(a) - c / r(a) ratio
      float importanceRatio = 1.0f - (_importanceWeightTruncation / newImportanceWeight);

      // Now calculating the correction weight
      float correctionWeight = importanceRatio > 0.0f ? importanceRatio : 0.0f;

      // Adding the component of part two to the gradient vector
      gPolicy[newActionIdx] += correctionWeight * (qCritic - vCurState);
    }

    ///////////////// KL Calculation /////////////////////

    // Now calculating trust region, if required
    if (_policyTrustRegionEnabled)
    {
      // Getting probability densities for current action given average policy
      _policyLearner->setHyperparameters(_policyAverageHyperparameters);
      auto pAvgPolicy = getActionProbabilities(curState);

      // Obtaining KL Divergence gradients for the current state. //PW: check this
      std::vector<float> k(_problem->_possibleActions.size());
      for (size_t i = 0; i < k.size(); i++)
        k[i] = -1 / pCurPolicy[i];

      // Getting dot product between the gradient vector and k
      auto gkDotProduct = dotProduct(k, gPolicy);

      // Getting norm(k)^2, simply by dot product of k and itself
      auto kNormSquared = dotProduct(k, k);

      // Getting magnitude of adjustment
      float adjustmentMagnitude = std::max(0.0f, (gkDotProduct - _policyTrustRegionDivergenceConstraint) / kNormSquared);

      // Adjusting gradients to trust region
      for (size_t i = 0; i < _problem->_possibleActions.size(); i++) gPolicy[i] = gPolicy[i] - adjustmentMagnitude * k[i];
    }

    ///////////////// Storing Gradients /////////////////////

    _policyProblem->_inputs[i] = curState;
    _policyProblem->_solution[i] = gPolicy;

    /*****************************************
    * Critic Section
    *****************************************/

    // Creating storage for the gradient vector
    std::vector<float> gCritic(_problem->_possibleActions.size(), 0);

    // Update the gradient vector with the value of the retrace function for g  = Q-Qret
    gCritic[curActionIdx] = qRet;

    // Updating inputs to training learner
    _criticProblem->_inputs[i] = curState;
    _criticProblem->_solution[i] = gCritic;

    /*****************************************
     * Updating the value of qRet
     *****************************************/

    // Now calculating truncated importance weight with 1.0 as truncation factor
    truncatedImportanceWeight = std::min(1.0f, importanceWeight);

    // Keeping statistics
    _cumulativeQStar += qRet;
    _cumulativeQStarSquared += qRet * qRet;
  }

  // Running one generation of the optimization method with the given trajectory
  _criticLearner->initialize();
  _criticLearner->runGeneration();
  _criticLearner->finalize();

  // Running one generation of the optimization method with the given trajectory
  _policyLearner->initialize();
  _policyLearner->runGeneration();
  _policyLearner->finalize();

  // Storing new inference parameters
  auto criticHyperparameters = _criticLearner->getHyperparameters();
  _criticLearner->setHyperparameters(criticHyperparameters);

  /****************************************************************************
 * Updating Policy
 ******************************************************************************/

  // Getting new policy hyperparameters
  _policyCurrentHyperparameters = _policyLearner->getHyperparameters();

  // If using a trust region, softly adopting the new parameters of the average policy, using an adoption rate
  if (_policyTrustRegionEnabled)
    for (size_t i = 0; i < _policyCurrentHyperparameters.size(); i++)
      _policyAverageHyperparameters[i] = _policyTrustRegionAdoptionRate * _policyAverageHyperparameters[i] + (1 - _policyTrustRegionAdoptionRate) * _policyCurrentHyperparameters[i];

  // Updating policy with new averaged parameters
  _policyLearner->setHyperparameters(_policyCurrentHyperparameters);

  // Storing average policy hyperparameters
  _hyperparameters["Policy"] = _policyCurrentHyperparameters;

  // Updating Statistics
  _averageQStar = _cumulativeQStar / (float)_criticMiniBatchSize;                                            // Average Q Retrace
  _stdevQStar = sqrt(_cumulativeQStarSquared / (float)_criticMiniBatchSize - _averageQStar * _averageQStar); // Sdev Q Retrace
}

float dACER::retraceFunction(size_t expId)
{
  // Finding last experience in the episode that corresponds to expId
  ssize_t startId = expId;
  ssize_t endId = startId;
  while (_experienceReplay[endId].termination == e_nonTerminal) endId++;

  // Initializing qRet to zero
  float qRet = 0.0;

  // Initializing values coming from the next experience (for latest experience, just reward)
  float qRetNext = _experienceReplay[endId].reward;

  // Setting starting experience as the second to last
  ssize_t curId = endId - 1;

  // Now checking whether any necessary qRetNext is present in cache
  for (ssize_t i = startId; i < endId; i++)
  {
    // If the difference in age is within the range, then it's a cache hit
    if (_experienceReplay[i].cache.contains("QRetNext"))
    {
      qRetNext = _experienceReplay[i].cache.get("QRetNext");
      curId = i;
      break;
    }
  }

  // Now iterating backwards to calculate the rest of qRet
  for (; curId >= startId; curId--)
  {
    // Getting current reward
    float curReward = _experienceReplay[curId].reward;

    // Re-calculating qRet
    qRet = curReward + _criticDiscountFactor * qRetNext;

    // If this is the starting experience, return the current value
    if (curId == startId) break;

    // Getting current state
    std::vector<float> curState = _experienceReplay[curId].state;

    // Getting current action index
    auto curActionIdx = _experienceReplay[curId].policy["Action Index"].get<size_t>();
    ;

    // Now calculating V
    float curV = stateValueFunction(curState);

    // Now calculating Q
    float curQ = stateActionValueFunction(curState, curActionIdx);

    // Getting the probability of the actions given by the agent's policy
    auto pActionsCurPolicy = getActionProbabilities(curState);
    auto pActionsOldPolicy = _experienceReplay[curId].policy["Action Probabilities"].get<std::vector<float>>();

    // Now calculating importance weight for the old s,a experience
    float importanceWeight = calculateImportanceWeight(curActionIdx, pActionsCurPolicy, pActionsOldPolicy);

    // Now calculating truncated importance weight with 1.0 as truncation factor
    float truncatedImportanceWeight = std::min(1.0f, importanceWeight);

    // Updating qRet
    qRetNext = truncatedImportanceWeight * (qRet - curQ) + curV;

    // Refreshing cache with the calculated value
    _experienceReplay[curId - 1].cache.set("QRetNext", qRetNext);
  }

  // Returning qRet
  return qRet;
}

std::vector<float> dACER::getActionProbabilities(const std::vector<float> &state)
{
  // Forward policy
  auto pValues = _policyLearner->getEvaluation(state);

  return pValues;
}

float dACER::stateActionValueFunction(const std::vector<float> &state, const size_t &actionIdx)
{
  // Forward propagating state through the critic to get Q(s,a) for all A
  auto evaluation = _criticLearner->getEvaluation(state);

  return evaluation[actionIdx];
}

float dACER::stateValueFunction(const std::vector<float> &state)
{
  // Forward propagating state through the critic to get Q(s,a) for all a
  auto qEval = _criticLearner->getEvaluation(state);

  // Forward propagating state through the policy to get P(s,a) for all a
  auto pEval = getActionProbabilities(state);

  // Calculating the sum of p(s,a)*q(s,a) for all a
  float qSum = 0.0;
  for (size_t i = 0; i < qEval.size(); i++)
    qSum += qEval[i] * pEval[i];

  // Returning the sum
  return qSum;
}

void dACER::updateAgentPolicy(const knlohmann::json &hyperparameters)
{
  auto policyHyperparameters = hyperparameters["Policy"].get<std::vector<float>>();
  _policyLearner->setHyperparameters(policyHyperparameters);
}

void dACER::printAgentInformation()
{
  _k->_logger->logInfo("Normal", "Critic Information:\n");
  _k->_logger->logInfo("Normal", " + Average (Std) Q-Retrace in Trajectories:  %f (%f)\n", _averageQStar, _stdevQStar);

  _criticExperiment._logger->_verbosityLevel = _k->_logger->_verbosityLevel;
  _criticExperiment._solver->printGenerationAfter();
  _criticExperiment._logger->setVerbosityLevel("Silent");

  _k->_logger->logInfo("Normal", "Policy Information:\n");

  _policyExperiment._logger->_verbosityLevel = _k->_logger->_verbosityLevel;
  _policyExperiment._solver->printGenerationAfter();
  _policyExperiment._logger->setVerbosityLevel("Silent");
}

} // namespace discrete
} // namespace agent
} // namespace solver
} // namespace korali
