#include "engine.hpp"
#include "modules/solver/agent/discrete/dVRACER/dVRACER.hpp"
#include "sample/sample.hpp"

namespace korali
{
namespace solver
{
namespace agent
{
namespace discrete
{
void dVRACER::initializeAgent()
{
  // Initializing common discrete agent configuration
  Discrete::initializeAgent();

  korali::Engine engine;

  /*********************************************************************
 * Initializing Critic/Policy Experiment
 *********************************************************************/

  _criticPolicyExperiment["Problem"]["Type"] = "Supervised Learning";
  _criticPolicyExperiment["Problem"]["Max Timesteps"] = _timeSequenceLength;
  _criticPolicyExperiment["Problem"]["Training Batch Size"] = _miniBatchSize;
  _criticPolicyExperiment["Problem"]["Inference Batch Size"] = 1;
  _criticPolicyExperiment["Problem"]["Input"]["Size"] = _problem->_stateVectorSize;
  _criticPolicyExperiment["Problem"]["Solution"]["Size"] = 1 + _problem->_possibleActions.size();

  _criticPolicyExperiment["Solver"]["Type"] = "Learner/DeepSupervisor";
  _criticPolicyExperiment["Solver"]["Optimizer"] = _optimizer;
  _criticPolicyExperiment["Solver"]["L2 Regularization"]["Enabled"] = _l2RegularizationEnabled;
  _criticPolicyExperiment["Solver"]["L2 Regularization"]["Importance"] = _l2RegularizationImportance;
  _criticPolicyExperiment["Solver"]["Learning Rate"] = _learningRate;
  _criticPolicyExperiment["Solver"]["Loss Function"] = "Direct Gradient";
  _criticPolicyExperiment["Solver"]["Steps Per Generation"] = 1;
  _criticPolicyExperiment["Solver"]["Neural Network"]["Engine"] = _neuralNetworkEngine;
  _criticPolicyExperiment["Solver"]["Neural Network"]["Hidden Layers"] = _neuralNetworkHiddenLayers;

  // Running initialization to verify that the configuration is correct
  _criticPolicyExperiment.initialize();

  // Getting learner and problem pointers
  _criticPolicyProblem = dynamic_cast<problem::SupervisedLearning *>(_criticPolicyExperiment._problem);
  _criticPolicyLearner = dynamic_cast<solver::learner::DeepSupervisor *>(_criticPolicyExperiment._solver);
}

void dVRACER::trainPolicy()
{
  // Resetting statistics
  float cumulativeQStar = 0.0;
  float cumulativeQStarSquared = 0.0;

  float cumulativeTdError = 0.0;
  float cumulativeTdErrorSquared = 0.0;

  float cumulativePolicyError = 0.0;
  float cumulativePolicyErrorSquared = 0.0;
  size_t policyErrorCounter = 0;

  /****************************************************************************
  * Training the critic/learner network with a mini-batch
  ***************************************************************************/

  // Creating a minibatch of starting experiences for the trajectories update
  auto miniBatchIndexes = generateMiniBatch(_miniBatchSize);

  // Fill Minibatch
#pragma omp parallel for schedule(dynamic, 1)
  for (size_t b = 0; b < _miniBatchSize; b++)
  {
    // Getting index of current experiment
    size_t expId = miniBatchIndexes[b];

    // Get state, action, and action probabilities from experience
    auto expStateSequence = getStateTimeSequence(expId);
    auto expPvals = _experienceReplay[expId].policy["Action Probabilities"].get<std::vector<float>>();
    size_t expActionIdx = _experienceReplay[expId].policy["Action Index"].get<size_t>();

    // Forward the neural network for this state to get current action probabilities
    auto policy = runPolicy(expStateSequence);
    auto curPvals = policy["Action Probabilities"].get<std::vector<float>>();
    auto V = policy["State Value"].get<float>();

    // Compute importance weight
    float importanceWeight = calculateImportanceWeight(expActionIdx, curPvals, expPvals);
    _experienceReplay[expId].policy["Importance Weight"] = importanceWeight;

    /******************************************************
    * Gradient calculation
    *******************************************************/

    // Get Vtbc before update
    float expVtbc = retraceFunction(expId);

    // Storage for the update gradient
    std::vector<float> gradientLoss(1 + _problem->_possibleActions.size());

    // update critic statistics
    cumulativeQStar += expVtbc;
    cumulativeQStarSquared += expVtbc * expVtbc;

    // Gradient of Value Function V(s) (eq. (9); *-1 because the optimizer is maximizing)
    gradientLoss[0] = -(V - expVtbc);

    cumulativeTdError -= (V - expVtbc);
    cumulativeTdErrorSquared += gradientLoss[0] * gradientLoss[0];

    // Checking whether the experience is on policy (i.e., it is within the [1/cutoff, cutoff] region)
    bool isOnPolicy = (importanceWeight > (1.0f / _experienceReplayREFERCutoffScale)) && (importanceWeight < _experienceReplayREFERCutoffScale);

    // Compute policy gradient only if inside trust region
    if (isOnPolicy)
    {
      // Qret for terminal state is just reward
      float Qret = _experienceReplay[expId].reward;

      // Check whether experience is non-terminal
      bool isNormal = _experienceReplay[expId].termination == e_nonTerminal;

      // In this case add Vtbc
      if (isNormal == true)
      {
        float nextExpVtbc = retraceFunction(expId + 1);
        Qret += _discountFactor * nextExpVtbc;
      }

      // Check whether experience is truncated
      bool isTrucated = _experienceReplay[expId].termination == e_truncated;

      // For truncated state add value
      if (isTrucated == true)
      {
        // Get truncated state sequence, adding the truncated state to it and removing first time element
        auto expTruncatedStateSequence = getTruncatedStateTimeSequence(expId);

        // for truncated state, Vtbc == V - forward network
        auto policy = runPolicy(expTruncatedStateSequence);
        float nextExpVtbc = policy["State Value"].get<float>();

        // add value to Qret
        Qret += _discountFactor * nextExpVtbc;
      }

      // Compute Off-Policy Objective (eq. 5)
      float lossOffPolicy = -(Qret - V);

      cumulativePolicyError += lossOffPolicy;
      cumulativePolicyErrorSquared += lossOffPolicy * lossOffPolicy;
      policyErrorCounter++;

      // Compute Policy Gradient wrt Params
      auto polGrad = calculateImportanceWeightGradient(expActionIdx, curPvals, expPvals);

      // Set Gradient of Loss wrt Params
      for (size_t i = 0; i < _problem->_possibleActions.size(); i++)
      {
        // '-' because the optimizer is maximizing
        gradientLoss[1 + i] = -_experienceReplayREFERCurrentBeta * lossOffPolicy * polGrad[i];
      }
    }

    // Compute derivative of kullback-leibler divergence wrt current distribution params
    auto klGrad = calculateKLDivergenceGradient(expPvals, curPvals);

    for (size_t i = 0; i < _problem->_possibleActions.size(); i++)
    {
      // Step towards old policy (gradient pointing to larger difference between old and current policy)
      gradientLoss[1 + i] -= (1.0f - _experienceReplayREFERCurrentBeta) * klGrad[i];
    }

    // Set status as learning problem input
    _criticPolicyProblem->_inputData[b] = expStateSequence;

    // Set Gradient of Loss as Solution
    _criticPolicyProblem->_solutionData[b] = gradientLoss;
  }

  /******************************************************************
   * Computing Statistics
   *****************************************************************/

  // Compute average and std of Value target
  _statisticsAverageQStar = cumulativeQStar / (float)_miniBatchSize;
  _statisticsStdevQStar = sqrt(cumulativeQStarSquared / (float)_miniBatchSize - _statisticsAverageQStar * _statisticsAverageQStar);

  // Compute average and std of Value Loss
  _statisticsAverageTDError = cumulativeTdError / (float)_miniBatchSize;
  _statisticsStdevTDError = std::sqrt(cumulativeTdErrorSquared / (float)_miniBatchSize - _statisticsAverageTDError * _statisticsAverageTDError);

  // Compute average and std of Off-Policy Gradient Objective
  _statisticsAveragePolicyError = cumulativePolicyError / (float)policyErrorCounter;
  _statisticsStdevPolicyError = std::sqrt(cumulativePolicyErrorSquared / (float)policyErrorCounter - _statisticsAveragePolicyError * _statisticsAveragePolicyError);

  // Updating learning rate for critic/policy learner guided by REFER
  _criticPolicyLearner->_learningRate = _experienceReplayREFERCurrentLearningRate;

  // Running one generation of the optimization method with the given mini-batch
  _criticPolicyLearner->runGeneration();
}

float dVRACER::stateValueFunction(const std::vector<std::vector<float>> &state)
{
  // Calculating V(s_i)
  float v = _criticPolicyLearner->getEvaluation({state})[0][0];
  return v;
}

knlohmann::json dVRACER::runPolicy(const std::vector<std::vector<float>> &state)
{
  // Forward the neural network for this state
  std::vector<float> evaluation = _criticPolicyLearner->getEvaluation({state})[0];

  // Get state value
  auto stateValue = evaluation[0];

  // Storage for action probabilities
  float maxq = -korali::Inf;
  std::vector<float> qval(_problem->_possibleActions.size());
  std::vector<float> pActions(_problem->_possibleActions.size());

  // Iterating all Q(s,a)
  for (size_t i = 0; i < _problem->_possibleActions.size(); i++)
  {
    // Computing Q(s,a_i)
    qval[i] = evaluation[1 + i];

    // Extracting max Q(s,a_i)
    if (qval[i] > maxq) maxq = qval[i];
  }

  // Storage for the cumulative e^Q(s,a_i)/maxq
  float sumExpQVal = 0.0;

  for (size_t i = 0; i < _problem->_possibleActions.size(); i++)
  {
    // Computing e^(Q(s,a_i) - maxq)
    float expCurQVal = std::exp(qval[i] - maxq);

    // Computing Sum_i(e^Q(s,a_i)/e^maxq)
    sumExpQVal += expCurQVal;

    // Storing partial value of the probability of the action
    pActions[i] = expCurQVal;
  }

  // Calculating inverse of Sum_i(e^Q(s,a_i))
  float invSumExpQVal = 1.0f / sumExpQVal;

  // Normalizing action probabilities
  for (size_t i = 0; i < _problem->_possibleActions.size(); i++)
    pActions[i] *= invSumExpQVal;

  // Returning action probabilities along with state value and importance weight
  knlohmann::json policy;
  policy["State Value"] = stateValue;
  policy["Action Probabilities"] = pActions;

  return policy;
}

knlohmann::json dVRACER::getAgentPolicy()
{
  knlohmann::json hyperparameters;
  hyperparameters["Critic/Policy"] = _criticPolicyLearner->getInferenceHyperparameters();
  return hyperparameters;
}

void dVRACER::setAgentPolicy(const knlohmann::json &hyperparameters)
{
  _criticPolicyLearner->setInferenceHyperparameters(hyperparameters["Critic/Policy"].get<std::vector<float>>());
}

void dVRACER::setTrainingState(const knlohmann::json &state)
{
  _criticPolicyLearner->setTrainingHyperparameters(state["Critic/Policy"]["Training"]);
  _criticPolicyLearner->setInferenceHyperparameters(state["Critic/Policy"]["Inference"]);
}

knlohmann::json dVRACER::getTrainingState()
{
  knlohmann::json state;
  state["Critic/Policy"]["Training"] = _criticPolicyLearner->getTrainingHyperparameters();
  state["Critic/Policy"]["Inference"] = _criticPolicyLearner->getInferenceHyperparameters();

  return state;
}

void dVRACER::printAgentInformation()
{
  _k->_logger->logInfo("Normal", "Critic Information:\n");
  _k->_logger->logInfo("Normal", " + Learning Rate:                                     %.3e\n", _criticPolicyLearner->_learningRate);
  _k->_logger->logInfo("Normal", " + Average (Std) Vtbc in Mini-Batch:  %f (%f)\n", _statisticsAverageQStar, _statisticsStdevQStar);
  _k->_logger->logInfo("Normal", " + Average (Std) TD-Error in Mini-Batch:  %f (%f)\n", _statisticsAverageTDError, _statisticsStdevTDError);
  _k->_logger->logInfo("Normal", " + Average (Std) Off-Policy Objective in Mini-Batch:  %f (%f)\n", _statisticsAveragePolicyError, _statisticsStdevPolicyError);

  _k->_logger->logInfo("Normal", "Neural Network Information:\n");
  _criticPolicyExperiment._logger->_verbosityLevel = _k->_logger->_verbosityLevel;
  _criticPolicyExperiment._solver->printGenerationAfter();
  _criticPolicyExperiment._logger->setVerbosityLevel("Silent");
}

} // namespace discrete
} // namespace agent
} // namespace solver
} // namespace korali
