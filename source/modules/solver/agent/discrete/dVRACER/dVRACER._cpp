#include "engine.hpp"
#include "modules/solver/agent/discrete/dVRACER/dVRACER.hpp"
#include "sample/sample.hpp"

namespace korali
{
namespace solver
{
namespace agent
{
namespace discrete
{
void dVRACER::initializeAgent()
{
  // Initializing common discrete agent configuration
  Discrete::initializeAgent();

  korali::Engine engine;

  /*********************************************************************
 * Initializing Neural Network
 *********************************************************************/

  _criticPolicyExperiment["Problem"]["Type"] = "Supervised Learning";
  _criticPolicyExperiment["Solver"]["Type"] = "Learner/DeepSupervisor";
  _criticPolicyExperiment["Solver"]["Optimizer"] = _criticOptimizer;
  _criticPolicyExperiment["Solver"]["Learning Rate"] = _criticLearningRate;
  _criticPolicyExperiment["Solver"]["Loss Function"] = "Direct Gradient";
  _criticPolicyExperiment["Solver"]["Steps Per Generation"] = 1;
  _criticPolicyExperiment["Solver"]["Neural Network"] = _criticNeuralNetwork;

  // Initializing experiment with an initial zero set
  size_t numAction = _problem->_possibleActions;
  for (size_t i = 0; i < _criticMiniBatchSize; i++)
  {
    for (size_t j = 0; j < _problem->_stateVectorSize; j++)
      _criticPolicyExperiment["Problem"]["Inputs"][i][j] = 0.0;

    // V(s) and p(a|s)
    _criticPolicyExperiment["Problem"]["Solution"][i][0] = 0.0; // V
    for (size_t j = 0; j < numAction; j++)
    {
      _criticPolicyExperiment["Problem"]["Solution"][i][1 + j] = 0.0; // p
    }
  }

  // Running initialization to verify that the configuration is correct
  engine.initialize(_criticPolicyExperiment);

  // Getting learner and problem pointers
  _criticPolicyProblem = dynamic_cast<problem::SupervisedLearning *>(_criticPolicyExperiment._problem);
  _criticPolicyLearner = dynamic_cast<solver::learner::DeepSupervisor *>(_criticPolicyExperiment._solver);

  // Get initial learning rate
  _referInitialLearningRate = _criticPolicyLearner->_learningRate;
  _referCutoff = _referCutoffScale + 1.0f;
  _referOffPolicyFraction = 0.0f;

  /*********************************************************************
  * Loading/Setting Hyperparameters
  *********************************************************************/

  // Get the initial set of policy NN hyperparameters
  _hyperparameters["Policy"] = _criticPolicyLearner->getTrainingHyperparameters();
}

void dVRACER::updateAgentPolicy(const knlohmann::json &hyperparameters)
{
  _criticPolicyLearner->setInferenceHyperparameters(hyperparameters["Policy"].get<std::vector<float>>());
}

void dVRACER::trainPolicy()
{
  // Resetting statistics
  _cumulativeQStar = 0.0;
  _cumulativeQStarSquared = 0.0;

  float cumulativeTdError = 0.0;
  float cumulativeTdErrorSquared = 0.0;

  float cumulativePolicyError = 0.0;
  float cumulativePolicyErrorSquared = 0.0;
  size_t policyErrorCounter = 0;

  /***************************************************************************
   * Adjusting REFER off-policiness and learning rate parameters
   **************************************************************************/

  // Update REFER parameters only after reaching this number of experiences in memory
  if (_experienceReplay.size() > _referStartSize)
  {
    // Updating cutoff
    _referCutoff = 1.0f + _referCutoffScale / (1.0f + _referAnnealingRate * (float)_policyUpdateCount);

    // Update learning rate
    _criticPolicyLearner->_learningRate = _referInitialLearningRate / (1.0f + _referAnnealingRate * _policyUpdateCount);

    // Updating beta parameter
    if (_referOffPolicyFraction > _referTargetOffPolicyFraction)
      _referBeta = (1.0f - _criticPolicyLearner->_learningRate) * _referBeta;
    else
      _referBeta = (1.0f - _criticPolicyLearner->_learningRate) * _referBeta + _criticPolicyLearner->_learningRate;
  }

  /****************************************************************************
  * Training the critic/learner network with a mini-batch
  ***************************************************************************/

  // Creating a minibatch of starting experiences for the trajectories update
  auto miniBatchIndexes = generateMiniBatch(_criticMiniBatchSize);

  // Fill Minibatch
  for (size_t step = 0; step < _criticMiniBatchSize; step++)
  {
    // Getting index of current experiment
    size_t expId = miniBatchIndexes[step];

    // Get state, action, and action probabilities from experience
    auto expState = _experienceReplay[expId].state;
    size_t expActionIdx = _experienceReplay[expId].policy["Action Index"].get<size_t>();
    auto expPvals = _experienceReplay[expId].policy["Action Probabilities"].get<std::vector<float>>();

    // Forward the neural network for this state to get current action probabilities
    auto policy = runPolicy(expState);
    auto curPvals = policy["Action Probabilities"].get<std::vector<float>>();
    auto V = policy["State Value"].get<float>();

    // Update State Value in Metadata
    _experienceReplay[expId].policy["State Value"] = V;

    // Compute importance weight
    float importanceWeight = calculateImportanceWeight(expActionIdx, curPvals, expPvals);

    // Update Importance Weight in Metadata
    _experienceReplay[expId].policy["Importance Weight"] = importanceWeight;

    // Update off-policy fraction
    size_t expCount = _experienceReplay.size();
    size_t offPolicyCount = 0;
    for (size_t expId = 0; expId < expCount; expId++)
    {
      float expImportanceWeight = _experienceReplay[expId].policy["Importance Weight"];
      if (expImportanceWeight > _referCutoff || expImportanceWeight < (1.0f / _referCutoff))
        offPolicyCount++;
    }

    _referOffPolicyFraction = (float)offPolicyCount / (float)expCount;

    /******************************************************
    * Gradient calculation
    *******************************************************/

    // Storage for the update gradient
    std::vector<float> gradientLoss(1 + _problem->_possibleActions);

    // Compute Vtbc
    float expVtbc = computeVtbc(expId);

    // update critic statistics
    _cumulativeQStar += expVtbc;
    _cumulativeQStarSquared += expVtbc * expVtbc;

    // Gradient of Value Function V(s) (eq. (9); *-1 because the optimizer is maximizing)
    gradientLoss[0] = -(V - expVtbc);

    cumulativeTdError -= (V - expVtbc);
    cumulativeTdErrorSquared += gradientLoss[0] * gradientLoss[0];

    // Compute policy gradient only if inside trust region
    if (importanceWeight < _referCutoff || importanceWeight > (1.0f / _referCutoff))
    {
      // Qret for terminal state is just reward
      float Qret = _experienceReplay[expId].reward;

      // Check whether experience is non-terminal
      bool isNormal = _experienceReplay[expId].termination == e_nonTerminal;

      // In this case add Vtbc
      if (isNormal == true)
      {
        float nextExpVtbc = computeVtbc(expId + 1);
        Qret += _criticDiscountFactor * nextExpVtbc;
      }

      // Check whether experience is truncated
      bool isTrucated = _experienceReplay[expId].termination == e_truncated;

      // For truncated state add value
      if (isTrucated == true)
      {
        // get truncated state
        auto truncatedState = _experienceReplay[expId].truncatedState;

        // for truncated state, Vtbc == V - forward network
        auto policy = runPolicy(truncatedState);
        auto nextExpVtbc = policy["State Value"].get<float>();

        // add value to Qret
        Qret += _criticDiscountFactor * nextExpVtbc;
      }

      // Compute Off-Policy Objective (eq. 5)
      float lossOffPolicy = -(Qret - V);

      cumulativePolicyError += lossOffPolicy;
      cumulativePolicyErrorSquared += lossOffPolicy * lossOffPolicy;
      policyErrorCounter++;

      // Compute Policy Gradient wrt Params
      auto polGrad = calculateImportanceWeightGradient(expActionIdx, expPvals, curPvals);

      // Set Gradient of Loss wrt Params
      for (size_t i = 0; i < _problem->_possibleActions; i++)
      {
        // '-' because the optimizer is maximizing
        gradientLoss[1 + i] = -_referBeta * lossOffPolicy * polGrad[i];
      }
    }

    // Compute derivative of kullback-leibler divergence wrt current distribution params
    auto klGrad = calculateKLDivergenceGradient(expPvals, curPvals);

    for (size_t i = 0; i < _problem->_possibleActions; i++)
    {
      // Step towards old policy (gradient pointing to larger difference between old and current policy)
      gradientLoss[1 + i] -= (1.0f - _referBeta) * klGrad[i];
    }

    // Set status as learning problem input
    _criticPolicyProblem->_inputs[step] = expState;

    // Set Gradient of Loss as Solution
    _criticPolicyProblem->_solution[step] = gradientLoss;
  }

  // Compute average and std of Value target
  _averageQStar = _cumulativeQStar / (float)_criticMiniBatchSize;
  _stdevQStar = sqrt(_cumulativeQStarSquared / (float)_criticMiniBatchSize - _averageQStar * _averageQStar);
  // Compute average and std of Value Loss
  _averageTDError = cumulativeTdError / (float)_criticMiniBatchSize;
  _stdevTDError = std::sqrt(cumulativeTdErrorSquared / (float)_criticMiniBatchSize - _averageTDError * _averageTDError);
  // Compute average and std of Off-Policy Gradient Objective
  _averagePolicyError = cumulativePolicyError / (float)policyErrorCounter;
  _stdevPolicyError = std::sqrt(cumulativePolicyErrorSquared / (float)policyErrorCounter - _averagePolicyError * _averagePolicyError);

  // Running one generation of the optimization method with the given mini-batch
  _criticPolicyLearner->initialize();
  _criticPolicyLearner->runGeneration();
  _criticPolicyLearner->finalize();

  // Storing average policy hyperparameters
  _hyperparameters["Policy"] = _criticPolicyLearner->getTrainingHyperparameters();
}

float dVRACER::computeVtbc(size_t expId)
{
  // Finding last experience in the episode that corresponds to expId
  ssize_t startId = expId;
  ssize_t endId = startId;
  while (_experienceReplay[endId].termination == e_nonTerminal) endId++;

  // get importance weight
  auto importanceWeight = _experienceReplay[endId].policy["Importance Weight"].get<float>();

  // truncate importance weight
  float truncatedImportanceWeight = std::min(1.0f, importanceWeight);

  // Initializing vTbc to weighted reward of the last
  float vTbc = truncatedImportanceWeight * _experienceReplay[endId].reward;

  // If the episode was truncated add contribution
  if (_experienceReplay[endId].termination == e_truncated)
  {
    // get truncated state
    auto truncatedState = _experienceReplay[endId].truncatedState;

    // for truncated state, Vtbc == V - forward network
    auto policy = runPolicy(truncatedState);
    auto nextExpVtbc = policy["State Value"].get<float>();

    float curV = _experienceReplay[endId].policy["State Value"].get<float>();
    vTbc += curV + truncatedImportanceWeight * (_criticDiscountFactor * nextExpVtbc - curV);
  }

  // Now iterating backwards to calculate the rest of vTbc
  for (ssize_t curId = endId - 1; curId >= startId; curId--)
  {
    // Getting current reward
    float curReward = _experienceReplay[curId].reward;

    // Get state value function
    float curV = _experienceReplay[curId].policy["State Value"].get<float>();

    // get importance weight
    auto importanceWeight = _experienceReplay[curId].policy["Importance Weight"].get<float>();

    // truncate importance weight
    float truncatedImportanceWeight = std::min(1.0f, importanceWeight);

    // Calculating vTbc
    vTbc = curV + truncatedImportanceWeight * (curReward + _criticDiscountFactor * vTbc - curV);
  }

  // Returning vTbc
  return vTbc;
}

std::vector<float> dVRACER::calculateImportanceWeightGradient(size_t actionIdx, const std::vector<float> &curPvals, const std::vector<float> &oldPvals)
{
  std::vector<float> grad(_problem->_possibleActions, 0.0);

  float importanceWeight = curPvals[actionIdx] / oldPvals[actionIdx];

  // calculate gradient of categorical distribution normalized by old pvals
  for (size_t i = 0; i < _problem->_possibleActions; i++)
  {
    if (i == actionIdx)
      grad[i] = importanceWeight * (1. - importanceWeight);
    else
      grad[i] = -importanceWeight * curPvals[i];
  }

  return grad;
}

std::vector<float> dVRACER::calculateKLDivergenceGradient(const std::vector<float> &oldPvalues, const std::vector<float> &curPvalues)
{
  std::vector<float> klGrad(_problem->_possibleActions, 0.0);

  // Gradient wrt NN output i
  for (size_t i = 0; i < _problem->_possibleActions; i++)
  {
    // Iterate over all pvalues
    for (size_t j = 0; j < _problem->_possibleActions; j++)
    {
      float impW = oldPvalues[j] / curPvalues[j];
      if (i == j)
        klGrad[i] -= impW * curPvalues[i] * (1.0 - curPvalues[i]);
      else
        klGrad[i] += impW * curPvalues[i] * curPvalues[j];
    }
  }

  return klGrad;
}

knlohmann::json dVRACER::runPolicy(const std::vector<float> &state)
{
  // Forward the neural network for this state
  std::vector<float> evaluation = _criticPolicyLearner->getEvaluation(state);

  // Get state value
  auto stateValue = evaluation[0];

  // Storage for action probabilities
  float maxq = -korali::Inf;
  std::vector<float> qval(_problem->_possibleActions.size());
  std::vector<float> pActions(_problem->_possibleActions.size());

  // Iterating all Q(s,a)
  for (size_t i = 0; i < _problem->_possibleActions.size(); i++)
  {
    // Computing Q(s,a_i)
    qval[i] = evaluation[1 + i];

    // Extracting max Q(s,a_i)
    if (qval[i] > maxq) maxq = qval[i];
  }

  // Storage for the cumulative e^Q(s,a_i)/maxq
  float sumExpQVal = 0.0;

  for (size_t i = 0; i < _problem->_possibleActions.size(); i++)
  {
    // Computing e^(Q(s,a_i) - maxq)
    float expCurQVal = std::exp(qval[i] - maxq);

    // Computing Sum_i(e^Q(s,a_i)/e^maxq)
    sumExpQVal += expCurQVal;

    // Storing partial value of the probability of the action
    pActions[i] = expCurQVal;
  }

  // Calculating inverse of Sum_i(e^Q(s,a_i))
  float invSumExpQVal = 1.0f / sumExpQVal;

  // Normalizing action probabilities
  for (size_t i = 0; i < _problem->_possibleActions.size(); i++)
    pActions[i] *= invSumExpQVal;

  // Returning action probabilities
  knlohmann::json policy;
  policy["State Value"] = stateValue;
  policy["Action Probabilities"] = pActions;
  policy["Importance Weight"] = 1.0f;

  return policy;
}

std::vector<float> dVRACER::getActionProbabilities(const std::vector<float> &state)
{
  // Evaluate policy
  auto policy = runPolicy(state);

  // Unpack and return p values
  auto pActions = policy["Action Probabilities"].get<std::vector<float>>();

  return pActions;
}

void dVRACER::setTrainingState(const knlohmann::json &state)
{
  _criticPolicyLearner->setTrainingHyperparameters(state["Critic/Policy"]["Training"]);
  _criticPolicyLearner->setInferenceHyperparameters(state["Critic/Policy"]["Inference"]);
}

knlohmann::json dVRACER::getTrainingState()
{
  knlohmann::json state;
  state["Critic/Policy"]["Training"] = _criticPolicyLearner->getTrainingHyperparameters();
  state["Critic/Policy"]["Inference"] = _criticPolicyLearner->getInferenceHyperparameters();
  return state;
}

void dVRACER::printAgentInformation()
{
  _k->_logger->logInfo("Normal", "Critic Information:\n");
  _k->_logger->logInfo("Normal", " + Average (Std) Vtbc in Mini-Batch:  %f (%f)\n", _averageQStar, _stdevQStar);
  _k->_logger->logInfo("Normal", " + Average (Std) TD-Error in Mini-Batch:  %f (%f)\n", _averageTDError, _stdevTDError);
  _k->_logger->logInfo("Normal", " + Average (Std) Off-Policy Objective in Mini-Batch:  %f (%f)\n", _averagePolicyError, _stdevPolicyError);

  _k->_logger->logInfo("Normal", "Neural Network Information:\n");
  _criticPolicyExperiment._logger->_verbosityLevel = _k->_logger->_verbosityLevel;
  _criticPolicyExperiment._solver->printGenerationAfter();
  _criticPolicyExperiment._logger->setVerbosityLevel("Silent");

  _k->_logger->logInfo("Normal", "REF-ER Information\n");
  _k->_logger->logInfo("Normal", " + Off-Policy Fraction: %.6f (Target: %.6f)\n", _referOffPolicyFraction, _referTargetOffPolicyFraction);
  _k->_logger->logInfo("Normal", " + Policy Learning Rate: %.6f\n", _criticPolicyLearner->_learningRate);
  _k->_logger->logInfo("Normal", " + Beta: %.6f\n", _referBeta);
  _k->_logger->logInfo("Normal", " + Cut-off: %.6f\n", _referCutoff);
}

} // namespace discrete
} // namespace agent
} // namespace solver
} // namespace korali
