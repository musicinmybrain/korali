#ifndef _KORALI_AGENT_DISCRETE_HPP_
#define _KORALI_AGENT_DISCRETE_HPP_

#include "modules/problem/reinforcementLearning/discrete/discrete.hpp"
#include "modules/solver/agent/agent.hpp"

namespace korali
{
namespace solver
{
namespace agent
{
class Discrete : public Agent
{
  public:
  /**
 * @brief Storage for the pointer to the (discrete) learning problem
 */
  problem::reinforcementLearning::Discrete *_problem;

  /**
  * @brief Function to pass state through the NN and calculates the action probabilities, along with any additional information
  * @param state The current state
  * @return A JSON object containing the information produced by the policy given the current state
  */
  virtual knlohmann::json runPolicy(const std::vector<float> &state) = 0;

  /**
   * @brief Calculates importance weight of current action from old and current policies
   * @param actionIdx Index of the action taken
   * @param curProbabilities Probability distributions of current policy
   * @param oldProbabilities Probability distributions of old policy
   * @return The importance weight
   */
  float calculateImportanceWeight(const size_t actionIdx, const std::vector<float> &curProbabilities, const std::vector<float> &oldProbabilities);

  void getAction(korali::Sample &sample) override;
  virtual void initializeAgent();
};

} // namespace agent
} // namespace solver
} // namespace korali

#endif // _KORALI_AGENT_DISCRETE_HPP_
