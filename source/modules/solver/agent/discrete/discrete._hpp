#ifndef _KORALI_AGENT_DISCRETE_HPP_
#define _KORALI_AGENT_DISCRETE_HPP_

#include "modules/problem/reinforcementLearning/discrete/discrete.hpp"
#include "modules/solver/agent/agent.hpp"

namespace korali
{
namespace solver
{
namespace agent
{
class Discrete : public Agent
{
  public:
  /**
 * @brief Storage for the pointer to the (discrete) learning problem
 */
  problem::reinforcementLearning::Discrete *_problem;

  float calculateImportanceWeight(const std::vector<float> &action, knlohmann::json &curPolicy, knlohmann::json &oldPolicy) override;

  /**
   * @brief Calculates the gradient of importance weight wrt to NN output
   * @param actionIdx Action from memory
   * @param curPvalues todo
   * @param oldPvalues todo
   * @return gradient of importance weight wrt NN output
   */
  std::vector<float> calculateImportanceWeightGradient(size_t actionIdx, const std::vector<float> &curPvalues, const std::vector<float> &oldPvalues);

  /**
   * @brief Calculates the gradient of KL(p_old, p_cur) wrt to the parameter of the 2nd (current) distribution.
   * @param oldPvalues todo
   * @param curPvalues todo
   * @return gradient of KL wrt curParamsOne and curParamsTwo
   */
  std::vector<float> calculateKLDivergenceGradient(const std::vector<float> &oldPvalues, const std::vector<float> &curPvalues);

  void getAction(korali::Sample &sample) override;
  virtual void initializeAgent();
};

} // namespace agent
} // namespace solver
} // namespace korali

#endif // _KORALI_AGENT_DISCRETE_HPP_
