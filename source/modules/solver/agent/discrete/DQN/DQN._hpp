#ifndef _KORALI_AGENT_DISCRETE_DQN_HPP_

#define _KORALI_AGENT_DISCRETE_DQN_HPP_

#include "modules/problem/reinforcementLearning/discrete/discrete.hpp"
#include "modules/solver/agent/discrete/discrete.hpp"

namespace korali
{
namespace solver
{
namespace agent
{
namespace discrete
{
class DQN : public Discrete
{
  public:
  /**
  * @brief Pointer to training experiment's learner
  */
  learner::DeepSupervisor *_criticLearner;

  /**
   * @brief Korali experiment for the training of the critic
   */
  korali::Experiment _criticExperiment;

  /**
   * @brief Pointer to training experiment's problem
   */
  problem::SupervisedLearning *_criticProblem;

  void setTrainingHyperparameters(const knlohmann::json &hyperparameters) override;
  knlohmann::json getTrainingHyperparameters() override;
  std::vector<float> getActionProbabilities(const std::vector<float> &state) override;
  void updateAgentPolicy(const knlohmann::json &hyperparameters) override;
  void trainPolicy() override;
  void printAgentInformation() override;
  void initializeAgent() override;
};

} // namespace discrete
} // namespace agent
} // namespace solver
} // namespace korali

#endif // _KORALI_AGENT_DISCRETE_DQN_HPP_
