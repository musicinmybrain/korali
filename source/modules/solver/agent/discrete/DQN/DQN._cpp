#include "engine.hpp"
#include "modules/solver/agent/discrete/DQN/DQN.hpp"
#include "sample/sample.hpp"

namespace korali
{
namespace solver
{
namespace agent
{
namespace discrete
{

void DQN::initializeAgent()
{
  // Getting discrete problem pointer
  _discreteProblem = dynamic_cast<problem::reinforcementLearning::Discrete *>(_k->_problem);

  /*********************************************************************
 * Initializing Critic-Related Structures
 *********************************************************************/

  korali::Engine engine; // Engine to initialize experiments with

  _criticExperiment["Problem"]["Type"] = "Supervised Learning";

  _criticExperiment["Solver"]["Type"] = "Learner/DeepGD";
  _criticExperiment["Solver"]["Learning Rate"] = _criticLearningRate;
  _criticExperiment["Solver"]["Loss Function"] = "Mean Squared Error";
  _criticExperiment["Solver"]["Steps Per Generation"] = 1;
  _criticExperiment["Solver"]["Neural Network"] = _criticNeuralNetwork;

  _criticExperiment["Console Output"]["Frequency"] = 0;
  _criticExperiment["Console Output"]["Verbosity"] = "Silent";
  _criticExperiment["File Output"]["Enabled"] = false;
  _criticExperiment["Random Seed"] = _k->_randomSeed++;

  // Initializing experiment with an initial zero set
  for (size_t i = 0; i < _criticMiniBatchSize; i++)
  {
    _criticExperiment["Problem"]["Solution"][i][0] = 0.0;

    for (size_t j = 0; j < _k->_variables.size(); j++)
      _criticExperiment["Problem"]["Inputs"][i][j] = 0.0;
  }

  // Running initialization to verify that the configuration is correct
  engine.initialize(_criticExperiment);

  // Getting learner pointers
  _criticProblem = dynamic_cast<problem::SupervisedLearning *>(_criticExperiment._problem);
  _criticLearner = dynamic_cast<solver::learner::DeepGD *>(_criticExperiment._solver);

  // Setting Initial Hyperparameters
  _hyperparameters["Critic"] = _criticLearner->getHyperparameters();
}

void DQN::trainAgent()
{
  /***********************************************************************************
   * Critic Training Phase
   **********************************************************************************/

  // Randomly selecting experiences for the mini-batch and calculating their target Q
  // Creating state history indexes to choose from
  std::vector<size_t> experienceReplayIndexes(_experienceReplayStates.size());
  for (size_t i = 0; i < _experienceReplayStates.size()-1; i++) experienceReplayIndexes[i] = i;

  // Calculating cumulative Q*, for statistical purposes
  _cumulativeQStar = 0.0;

  // Shuffling indexes to choose the mini batch from
  std::shuffle(experienceReplayIndexes.begin(), experienceReplayIndexes.end(), *mt);

  for (size_t i = 0; i < _criticMiniBatchSize; i++)
  {
    // Selecting a uniformly random selected, yet not repeated experience
    size_t expId = experienceReplayIndexes[i];

    // Qnew = max_a(q) with s' fixed
    // Q* = r + y*Qnew -- If not terminal state
    // Q* = r -- If terminal state

    // Calculating target Q value (solution) for Qnew on selected batch
    float qStar = 0.0;

    // Reward is the first factor in the QLearning algorithm
    qStar = _experienceReplayRewards[expId];

    // Getting experience's current state and action
    std::vector<float> curState = _experienceReplayStates[expId];
    std::vector<float> curAction = _experienceReplayActions[expId];

    // If state is not terminal (next state is filled) then add Qnew to the Q value.
    if (_experienceReplayTerminal[expId] == false)
    {
      // Getting experience's next state and action
      std::vector<float> nextState = _experienceReplayStates[expId + 1];
      std::vector<float> bestAction = queryPolicy(nextState);

      // Storage to put together state and action
      std::vector<float> stateActionInput(_problem->_stateVectorSize + _problem->_actionVectorSize);

      for (size_t j = 0; j < nextState.size(); j++) stateActionInput[j] = nextState[j];
      for (size_t j = 0; j < bestAction.size(); j++) stateActionInput[j + nextState.size()] = bestAction[j];

      auto qNextExp = _criticLearner->getEvaluation(stateActionInput)[0];

      qStar += _criticDiscountFactor * qNextExp;
    }

    // Updating inputs to training learner
    for (size_t j = 0; j < curState.size(); j++) _criticProblem->_inputs[i][j] = curState[j];
    for (size_t j = 0; j < curAction.size(); j++) _criticProblem->_inputs[i][j + curState.size()] = curAction[j];
    _criticProblem->_solution[i][0] = qStar;

    // Keeping statistics
    _cumulativeQStar += qStar;
  }

  // Running one generation of the optimization method with the given mini-batch
  _criticLearner->initialize();
  _criticLearner->runGeneration();
  _criticLearner->finalize();

  // Keeping statistics
  _averageQStar = (float)_cumulativeQStar / (float)_criticMiniBatchSize;

  /****************************************************************************
  * If batch normalization is being used, we need to adjust mean and variances
  * by sampling a few more mini-batches after the optimization steps
  ******************************************************************************/

  // Allocating memory for the mini batch set
  std::vector<std::vector<std::vector<float>>> miniBatches(_normalizationSteps);

  for (size_t i = 0; i < _normalizationSteps; i++)
    miniBatches[i].resize(_criticMiniBatchSize);

  for (size_t i = 0; i < _normalizationSteps; i++)
    for (size_t j = 0; j < _criticMiniBatchSize; j++) miniBatches[i][j].resize(_problem->_stateVectorSize + _problem->_actionVectorSize);

  // Filling the minibatches
  for (size_t step = 0; step < _normalizationSteps; step++)
  {
    // Shuffling indexes to choose the mini batch from
    std::shuffle(experienceReplayIndexes.begin(), experienceReplayIndexes.end(), *mt);

    for (size_t i = 0; i < _criticMiniBatchSize; i++)
    {
      // Selecting a uniformly random selected, yet not repeated experience
      size_t expId = experienceReplayIndexes[i];

      for (size_t j = 0; j < _problem->_stateVectorSize; j++) miniBatches[step][i][j] = _experienceReplayStates[expId][j];
      for (size_t j = 0; j < _problem->_actionVectorSize; j++) miniBatches[step][i][_problem->_stateVectorSize + j] = _experienceReplayActions[expId][j];
    }
  }

  _criticLearner->_trainingNeuralNetwork->normalize(miniBatches);

  /*********************************************************************
   * Updating hyperparameters and broadcasting them to the workers
   *********************************************************************/

  // Storing new Critic's hyperparameters
  _hyperparameters["Critic"] = _criticLearner->getHyperparameters();
}

void DQN::getAction(korali::Sample &sample)
{
  // Getting current state
  auto state = sample["State"].get<std::vector<float>>();

  // Obtaining action from policy
  auto action = queryPolicy(state);

  // Storing the action
  sample["Action"] = action;
}

void DQN::updateHyperparameters(const knlohmann::json &hyperparameters)
{
  _criticLearner->setHyperparameters(hyperparameters["Critic"].get<std::vector<float>>());
}

std::vector<float> DQN::queryPolicy(const std::vector<float> &state)
{
  // Creating state/action input
  std::vector<float> stateActionInput(_problem->_stateVectorSize + _problem->_actionVectorSize);

  // Assigning state first
  for (size_t i = 0; i < state.size(); i++) stateActionInput[i] = state[i];

  // Storage for max_a Q(s,a) and its index
  float maxQVal = -korali::Inf;
  size_t maxQIdx = 0;

  // Iterating over all possible actions, checking which one is best
  for (size_t i = 0; i < _discreteProblem->_possibleActions.size(); i++)
  {
    // Copying the values of the possible action onto the state/action vector
    for (size_t j = 0; j < _problem->_actionVectorSize; j++)
      stateActionInput[_problem->_stateVectorSize + j] = _discreteProblem->_possibleActions[i][j];

    // Computing Q(s,a_i)
    float curQVal = _criticLearner->getEvaluation(stateActionInput)[0];

    // If current action got a larger Q, store it as the best
    if (curQVal > maxQVal)
    {
      maxQVal = curQVal;
      maxQIdx = i;
    }
  }

  // Returning the best found
  return _discreteProblem->_possibleActions[maxQIdx];
}

void DQN::printAgentInformation()
{
  _k->_logger->logInfo("Normal", "Critic Information:\n");

  _k->_logger->logInfo("Normal", " + Cumulative Expected Q-Value:     %f\n", _cumulativeQStar);
  _k->_logger->logInfo("Normal", " + Average Expected Q-Value:        %f\n", _averageQStar);

  _criticExperiment._logger->_verbosityLevel = _k->_logger->_verbosityLevel;
  _criticExperiment._solver->printGenerationAfter();
  _criticExperiment._logger->setVerbosityLevel("Silent");

}

} // namespace discrete
} // namespace agent
} // namespace solver
} // namespace korali
