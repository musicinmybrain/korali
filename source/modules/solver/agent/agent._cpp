#include "auxiliar/fs.hpp"
#include "engine.hpp"
#include "modules/solver/agent/agent.hpp"
#include "sample/sample.hpp"
#include <chrono>

namespace korali
{
namespace solver
{
void Agent::initialize()
{
  _variableCount = _k->_variables.size();

  // Getting problem pointer
  _problem = dynamic_cast<problem::ReinforcementLearning *>(_k->_problem);

  // Initializing selected policy
  initializeAgent();

  // Initializing random seed for the shuffle operation
  mt = new std::mt19937(rd());
  mt->seed(_k->_randomSeed++);

  //  Pre-allocating space for the experience replay memory
  _experienceReplay.resize(_experienceReplayMaximumSize);

  //  Pre-allocating space for state time sequence
  _stateTimeSequence.resize(_timeSequenceLength);

  /*********************************************************************
   *   // If initial generation, set initial agent configuration
   *********************************************************************/

  if (_k->_currentGeneration == 0)
  {
    _currentEpisode = 0;
    _policyUpdateCount = 0;
    _testingCandidateCount = 0;
    _currentSampleID = 0;
    _experienceCount = 0;
    _experienceReplayMaxPriority = 0.0f;

    // Initializing training and episode statistics
    _testingAverageReward = -korali::Inf;
    _testingStdevReward = +korali::Inf;
    _testingBestReward = -korali::Inf;
    _testingWorstReward = +korali::Inf;
    _trainingBestReward = -korali::Inf;
    _trainingBestEpisodeId = 0;
    _trainingAverageReward = 0.0f;
    _testingPreviousAverageReward = -korali::Inf;
    _testingBestAverageReward = -korali::Inf;
    _testingBestEpisodeId = 0;

    // Initializing REFER information
    _experienceReplayOffPolicyRatio = 0.0f;
    _experienceReplayOffPolicyCurrentCutoff = _experienceReplayOffPolicyCutoffScale + 1.0f;
    _currentLearningRate = _learningRate;

    _rewardRescalingMean = 0.0;
    _rewardRescalingSdev = 1.0;
    _rewardRescalingCount = 0;
  }

  // If this continues a previous training run, deserialize previous input experience replay
  if (_k->_currentGeneration > 0)
    if (_mode == "Training" || _testingBestPolicy.empty())
      deserializeExperienceReplay();

  // Obtaining training state
  _trainingState = getTrainingState();

  // Getting agent's initial policy
  _trainingCurrentPolicy = getAgentPolicy();

  // Initializing session-wise profiling timers
  _sessionRunningTime = 0.0;
  _sessionSerializationTime = 0.0;
  _sessionAgentComputationTime = 0.0;
  _sessionAgentCommunicationTime = 0.0;
  _sessionAgentPolicyEvaluationTime = 0.0;
  _sessionPolicyUpdateTime = 0.0;
  _sessionAgentAttendingTime = 0.0;

  // Policy update timers
  _sessionUpdateNeuralNetworkTime = 0.0;
  _sessionGradientCalculationTime = 0.0;
  _sessionGenerateMiniBatchTime = 0.0;

  // Initializing session-specific counters
  _sessionExperienceCount = 0;
  _sessionEpisodeCount = 0;
  _sessionGeneration = 1;
  _sessionPolicyUpdateCount = 0;

  // Calculating how many more experiences do we need in this session to reach the starting size
  _sessionExperiencesUntilStartSize = _experienceReplay.size() > _experienceReplayStartSize ? 0 : _experienceReplayStartSize - _experienceReplay.size();

  if (_mode == "Training")
  {
    // Creating storate for _agents and their status
    _agents.resize(_agentCount);
    _isAgentRunning.resize(_agentCount, false);

    // Storage for the entire episodes before adding it to the replay memory
    _episodes.resize(_agentCount);
  }

  if (_mode == "Testing")
  {
    // Fixing termination criteria for testing mode
    _maxGenerations = _k->_currentGeneration + 1;

    // Setting testing policy to best testing hyperparameters if not custom-set by the user
    if (_testingPolicy.empty())
    {
      // Checking if testing policies have been generated
      if (_testingBestPolicy.empty())
      {
        _k->_logger->logWarning("Minimal", "Trying to test policy, but no testing policies have been generated during training yet or given in the configuration. Using current training policy instead.\n");
        _testingPolicy = _trainingCurrentPolicy;
      }
      else
      {
        _testingPolicy = _testingBestPolicy;
      }
    }

    // Checking if there's testing samples defined
    if (_testingSampleIds.size() == 0)
      KORALI_LOG_ERROR("For testing, you need to indicate the sample ids to run in the ['Testing']['Sample Ids'] field.\n");

    // Prepare storage for rewards from tested samples
    _testingReward.resize(_testingSampleIds.size());
  }
}

void Agent::runGeneration()
{
  if (_mode == "Training") trainingGeneration();
  if (_mode == "Testing") testingGeneration();
}

void Agent::trainingGeneration()
{
  auto beginTime = std::chrono::steady_clock::now(); // Profiling

  // Setting generation-specific timers
  _generationRunningTime = 0.0;
  _generationSerializationTime = 0.0;
  _generationAgentComputationTime = 0.0;
  _generationAgentCommunicationTime = 0.0;
  _generationAgentPolicyEvaluationTime = 0.0;
  _generationPolicyUpdateTime = 0.0;
  _generationAgentAttendingTime = 0.0;
  _generationUpdateNeuralNetworkTime = 0.0;
  _generationGradientCalculationTime = 0.0;
  _generationGenerateMiniBatchTime = 0.0;

  setTrainingState(_trainingState);

  // Running until all _agents have finished
  while (_sessionEpisodeCount < _episodesPerGeneration * _sessionGeneration)
  {
    // Launching (or re-launching) agents
    for (size_t agentId = 0; agentId < _agentCount; agentId++)
      if (_isAgentRunning[agentId] == false)
      {
        _agents[agentId]["Sample Id"] = _currentEpisode++;
        _agents[agentId]["Module"] = "Problem";
        _agents[agentId]["Operation"] = "Run Training Episode";
        _agents[agentId]["Policy Hyperparameters"] = _trainingCurrentPolicy;

        KORALI_START(_agents[agentId]);
        _isAgentRunning[agentId] = true;
      }

    // Listening to _agents for incoming experiences
    KORALI_LISTEN(_agents);

    // Attending to running agents, checking if any experience has been received
    for (size_t agentId = 0; agentId < _agentCount; agentId++)
      if (_isAgentRunning[agentId] == true)
        attendAgent(agentId);

    // Perform optimization steps on the critic/policy, if reached the minimum replay memory size
    if (_experienceCount >= _experienceReplayStartSize)
    {
      
      // If we performed enough policy updates, we rescale rewards again
      if (_policyUpdateCount >= _updatesBetweenRewardRescaling * _rewardRescalingCount)
      {
        rescaleRewards();
      }

      // If we accumulated enough experiences between updates in this session, update now
      while (_sessionExperienceCount > (_experiencesBetweenPolicyUpdates * _sessionPolicyUpdateCount + _sessionExperiencesUntilStartSize))
      {
        auto beginTime = std::chrono::steady_clock::now(); // Profiling

        // Calling the algorithm specific policy training algorithm
        trainPolicy();

        // Getting new policy hyperparameters (for agents to generate actions)
        _trainingCurrentPolicy = getAgentPolicy();

        // Increasing policy update counters
        _policyUpdateCount++;
        _sessionPolicyUpdateCount++;

        // Updating REFER learning rate and beta parameters
        _currentLearningRate = _learningRate / (1.0f + _experienceReplayOffPolicyAnnealingRate * (float)_policyUpdateCount);
        if (_experienceReplayOffPolicyRatio > _experienceReplayOffPolicyTarget)
          _experienceReplayOffPolicyREFERBeta = (1.0f - _currentLearningRate) * _experienceReplayOffPolicyREFERBeta;
        else
          _experienceReplayOffPolicyREFERBeta = (1.0f - _currentLearningRate) * _experienceReplayOffPolicyREFERBeta + _currentLearningRate;

        auto endTime = std::chrono::steady_clock::now();                                                                  // Profiling
        _sessionPolicyUpdateTime += std::chrono::duration_cast<std::chrono::nanoseconds>(endTime - beginTime).count();    // Profiling
        _generationPolicyUpdateTime += std::chrono::duration_cast<std::chrono::nanoseconds>(endTime - beginTime).count(); // Profiling
      }
    }
  }

  // Updating experience probabilities
  if (_miniBatchStrategy == "Prioritized") updateExperienceReplayProbabilities();

  // Now serializing experience replay database
  if (_experienceReplaySerialize == true)
    if (_k->_fileOutputEnabled)
      if (_k->_fileOutputFrequency > 0)
        if (_k->_currentGeneration % _k->_fileOutputFrequency == 0)
          serializeExperienceReplay();

  // Measuring generation time
  auto endTime = std::chrono::steady_clock::now();                                                             // Profiling
  _sessionRunningTime += std::chrono::duration_cast<std::chrono::nanoseconds>(endTime - beginTime).count();    // Profiling
  _generationRunningTime += std::chrono::duration_cast<std::chrono::nanoseconds>(endTime - beginTime).count(); // Profiling

  // Updating time counters
  _sessionUpdateNeuralNetworkTime += _generationUpdateNeuralNetworkTime;
  _sessionGradientCalculationTime += _generationGradientCalculationTime;
  _sessionGenerateMiniBatchTime += _generationGenerateMiniBatchTime;

  // Gathering learners training state (for checkpoint/resume purpose)
  _trainingState = getTrainingState();

  // Increasing session's generation count
  _sessionGeneration++;
}

void Agent::testingGeneration()
{
  // Allocating testing agents
  std::vector<Sample> testingAgents(_testingSampleIds.size());

  // Launching  agents
  for (size_t agentId = 0; agentId < _testingSampleIds.size(); agentId++)
  {
    testingAgents[agentId]["Sample Id"] = _testingSampleIds[agentId];
    testingAgents[agentId]["Module"] = "Problem";
    testingAgents[agentId]["Operation"] = "Run Testing Episode";
    testingAgents[agentId]["Policy Hyperparameters"] = _testingPolicy;

    KORALI_START(testingAgents[agentId]);
  }

  KORALI_WAITALL(testingAgents);

  for (size_t agentId = 0; agentId < _testingSampleIds.size(); agentId++)
    _testingReward[agentId] = testingAgents[agentId]["Testing Reward"].get<float>();
}

void Agent::rescaleRewards()
{
    //float sumReward = 0.0;
    float sumReward2 = 0.0;

    // Calculate mean and standard deviation of rewards.
    for (size_t i = 0; i < _experienceReplay.size(); i++)
    {
      float reward = _experienceReplay[i].reward;
      //float reward = _experienceReplay[i].reward  * _rewardRescalingSdev + _rewardRescalingMean;
      //sumReward += reward;
      sumReward2 += reward*reward;
    }
    _rewardRescalingSdev = std::sqrt(sumReward2+1e-9);

    /*
    float newRewardRescalingMean = sumReward / (float)_experienceReplay.size();
    float newRewardRescalingSdev = std::sqrt(sumReward2 / (float)_experienceReplay.size() - newRewardRescalingMean * newRewardRescalingMean + 1e-9);

    // Rescale rewards s.t. mean equals 0.0 and standard deviation 1.0.
    for (size_t i = 0; i < _experienceReplay.size(); i++)
    {
      _experienceReplay[i].reward *= _rewardRescalingSdev;
      _experienceReplay[i].reward += _rewardRescalingMean;
      _experienceReplay[i].reward -= newRewardRescalingMean;
      _experienceReplay[i].reward /= newRewardRescalingSdev;
    }

    _rewardRescalingMean = newRewardRescalingMean;
    _rewardRescalingSdev = newRewardRescalingSdev;
    */
    
    // Recalculating retrace value with rescalred rewards during first update.
    if(_rewardRescalingCount == 0)
    {
      float retV = 0.0;
      for (int expId = _experienceReplay.size() - 1; expId >= 0; --expId)
      {
        if(_experienceReplay[expId].termination == e_terminal) retV = 0.0;
      
        retV = _discountFactor * retV + _experienceReplay[expId].reward / _rewardRescalingSdev;
        //retV = _discountFactor * retV + _experienceReplay[expId].reward;

        _experienceReplay[expId].stateValue = retV;
        _experienceReplay[expId].retraceValue = retV;
      }
    }
    
    _rewardRescalingCount++;
    printf( "new reward mean and sdev %f %f\n", _rewardRescalingMean, _rewardRescalingSdev);
}

void Agent::attendAgent(size_t agentId)
{
  // Storage for the incoming experience
  knlohmann::json experience;

  // Retrieving the experience, if any has arrived for the current agent.
  if (_agents[agentId].retrievePendingMessage(experience))
  {
    // Storage to determine terminal state
    bool isTerminal = false;

    // Storing experience in the episode
    _episodes[agentId].push_back(experience);

    // Check if experience is terminal
    isTerminal = experience["Termination"] != "Non Terminal";

    auto beginTime = std::chrono::steady_clock::now(); // Profiling

    // If agent requested new policy, send the new hyperparameters
    if (experience["Request New Policy"] == true)
      KORALI_SEND_MSG_TO_SAMPLE(_agents[agentId], _trainingCurrentPolicy);

    auto endTime = std::chrono::steady_clock::now();                                                                    // Profiling
    _sessionAgentAttendingTime += std::chrono::duration_cast<std::chrono::nanoseconds>(endTime - beginTime).count();    // Profiling
    _generationAgentAttendingTime += std::chrono::duration_cast<std::chrono::nanoseconds>(endTime - beginTime).count(); // Profiling

    if (isTerminal)
    {
      // Getting episode Id
      size_t episodeId = _agents[agentId]["Sample Id"];

      //  Now that we have the entire episode, process its experiences (add them to replay memory)
      processEpisode(episodeId, _episodes[agentId]);

      // Increasing total experience counters
      _experienceCount += _episodes[agentId].size();
      _sessionExperienceCount += _episodes[agentId].size();

      // Now clear the episode of all its current experiences
      _episodes[agentId].clear();

      // Waiting for the agent to come back with all the information
      KORALI_WAIT(_agents[agentId]);

      // Getting the training reward of the latest episode
      _trainingLastReward = _agents[agentId]["Training Reward"].get<float>();

      // Keeping training statistics. Updating if exceeded best training policy so far.
      if (_trainingLastReward > _trainingBestReward)
      {
        _trainingBestReward = _trainingLastReward;
        _trainingBestEpisodeId = episodeId;
        _trainingBestPolicy = _agents[agentId]["Policy Hyperparameters"];
      }

      // If the policy has exceeded the threshold during training, we gather its statistics
      if (_agents[agentId]["Tested Policy"] == true)
      {
        _testingCandidateCount++;

        _testingPreviousAverageReward = _testingAverageReward;
        _testingAverageReward = _agents[agentId]["Average Testing Reward"].get<float>();
        _testingStdevReward = _agents[agentId]["Stdev Testing Reward"].get<float>();
        _testingBestReward = _agents[agentId]["Best Testing Reward"].get<float>();
        _testingWorstReward = _agents[agentId]["Worst Testing Reward"].get<float>();

        // If the average testing reward is better than the previous best, replace it
        // and store hyperparameters as best so far.
        if (_testingAverageReward > _testingBestAverageReward)
        {
          _testingBestAverageReward = _testingAverageReward;
          _testingBestEpisodeId = episodeId;
          _testingBestPolicy = _agents[agentId]["Policy Hyperparameters"];
        }
      }

      // Obtaining profiling information
      _sessionAgentComputationTime += _agents[agentId]["Computation Time"].get<double>();
      _sessionAgentCommunicationTime += _agents[agentId]["Communication Time"].get<double>();
      _sessionAgentPolicyEvaluationTime += _agents[agentId]["Policy Evaluation Time"].get<double>();
      _generationAgentComputationTime += _agents[agentId]["Computation Time"].get<double>();
      _generationAgentCommunicationTime += _agents[agentId]["Communication Time"].get<double>();
      _generationAgentPolicyEvaluationTime += _agents[agentId]["Policy Evaluation Time"].get<double>();

      // Set agent as finished
      _isAgentRunning[agentId] = false;

      // Increasing session episode count
      _sessionEpisodeCount++;
    }
  }
}

void Agent::processEpisode(size_t episodeId, std::vector<knlohmann::json> &episode)
{
  /*********************************************************************
  * Adding episode's experiences into the replay memory
  *********************************************************************/

  // Storage for the episode's cumulative reward
  float cumulativeReward = 0.0f;

  for (size_t expId = 0; expId < episode.size(); expId++)
  {
    // Storage for new experience
    experience_t e;

    // Getting state, action, reward, and whether it's terminal
    e.state = episode[expId]["State"].get<std::vector<float>>();
    e.action = episode[expId]["Action"].get<std::vector<float>>();
    
    e.reward = episode[expId]["Reward"].get<float>();
    //float unscaledReward = episode[expId]["Reward"].get<float>();
    //e.reward = (unscaledReward - _rewardRescalingMean) / _rewardRescalingSdev;

    if (episode[expId]["Termination"] == "Non Terminal") e.termination = e_nonTerminal;
    if (episode[expId]["Termination"] == "Terminal") e.termination = e_terminal;
    if (episode[expId]["Termination"] == "Truncated")
    {
      e.termination = e_truncated;
      e.truncatedState = episode[expId]["Truncated State"].get<std::vector<float>>();
    }

    // Storing Metadata coming from the agent
    e.metadata = episode[expId]["Metadata"];

    // Updating metadata for prioritized minibatch selection
    e.metadata["Mini Batch"]["Priority"] = _experienceReplayMaxPriority;
    e.metadata["Mini Batch"]["Probability"] = 0.0;

    // Storing Episode information
    e.episodeId = episodeId;
    e.episodePos = expId;

    // Keeping statistics
    //cumulativeReward += unscaledReward;
    cumulativeReward += e.reward;

    // Scale reward
    _experienceReplay.add(e);
  }

  /*********************************************************************
   * Computing initial retrace value for the newly added experiences
   *********************************************************************/

  // Storage for the retrace value
  float retV = 0.0f;

  // Getting position of the final experience of the episode in the replay memory
  ssize_t endId = (ssize_t)_experienceReplay.size() - 1;

  // Getting the starting ID of the initial experience of the episode in the replay memory
  ssize_t startId = endId - (ssize_t)episode.size() + 1;

  // If it was a truncated episode, add the value function for the terminal state to retV
  if (_experienceReplay[endId].termination == e_truncated)
  {
    // Get state sequence, appending the truncated state to it and removing first time element
    auto expTruncatedStateSequence = getTruncatedStateTimeSequence(endId);

    // Calculating the state value function of the truncated state
    float truncatedV = stateValueFunction(expTruncatedStateSequence);

    // Adding truncated state value to the retrace value
    retV += _discountFactor * truncatedV;
  }

  // Now going backwards, setting the retrace value of every experience
  for (ssize_t expId = endId; expId >= startId; expId--)
  {
    // Calculating retrace value with the discount factor. Importance weight is 1.0f because the policy is current.
    retV = _discountFactor * retV + _experienceReplay[expId].reward / _rewardRescalingSdev;

    // Setting initial retrace value in the experience's cache
    _experienceReplay[expId].stateValue = retV;
    _experienceReplay[expId].retraceValue = retV;

    // Updating experience's importance weight. Initially assumed to be 1.0 because its freshly produced
    _experienceReplay[expId].importanceWeight = 1.0f;
    _experienceReplay[expId].isOnPolicy = true;
  }

  /*********************************************************************
   * Updating statistics/bookkeeping
   *********************************************************************/

  // Storing history information
  _trainingRewardHistory.push_back(cumulativeReward);
  _trainingExperienceHistory.push_back(episode.size());

  // Updating average cumulative reward statistics
  _trainingAverageReward = 0.0f;
  ssize_t startEpisodeId = _trainingRewardHistory.size() - _trainingAverageDepth;
  ssize_t endEpisodeId = _trainingRewardHistory.size() - 1;
  if (startEpisodeId < 0) startEpisodeId = 0;
  for (ssize_t e = startEpisodeId; e <= endEpisodeId; e++)
    _trainingAverageReward += _trainingRewardHistory[e];
  _trainingAverageReward /= (float)(endEpisodeId - startEpisodeId + 1);
}

void Agent::updateExperienceReplayProbabilities()
{
  // Rank priorities
  auto experienceRanking = std::vector<std::pair<float, size_t>>(_experienceReplay.size());
  for (size_t i = 0; i < _experienceReplay.size(); ++i)
    experienceRanking[i] = std::make_pair(_experienceReplay[i].metadata["Mini Batch"]["Priority"].get<float>(), i + 1);
  sort(experienceRanking.begin(), experienceRanking.end());

  // Calculate rank based probabilities
  float prioritySum = 0.0;
  for (size_t i = 1; i < _experienceReplay.size() + 1; ++i)
    prioritySum += std::pow((float)i, _priorityAnnealingRate);

  // Update probabilities
  for (size_t i = 0; i < _experienceReplay.size(); ++i)
  {
    float priority = std::pow((float)experienceRanking[i].second, _priorityAnnealingRate) / (prioritySum);
    _experienceReplay[i].metadata["Mini Batch"]["Probability"] = priority;
    if (priority > _experienceReplayMaxPriority) _experienceReplayMaxPriority = priority;
  }
}

std::vector<size_t> Agent::generateMiniBatch(size_t miniBatchSize)
{
  // Allocating storage for mini batch experiecne indexes
  std::vector<size_t> miniBatch(miniBatchSize);

  if (_miniBatchStrategy == "Uniform")
  {
    for (size_t i = 0; i < miniBatchSize; i++)
    {
      // Producing random (uniform) number for the selection of the experience
      float x = _uniformGenerator->getRandomNumber();

      // Selecting experience
      size_t expId = std::floor(x * (float)(_experienceReplay.size() - 1));

      // Setting experience
      miniBatch[i] = expId;
    }
  }

  if (_miniBatchStrategy == "Prioritized")
  {
    // Allocating storage for uniform random numbers
    auto pvalues = std::vector<float>(miniBatchSize);

    for (size_t i = 0; i < miniBatchSize; i++)
      pvalues[i] = _uniformGenerator->getRandomNumber();

    // Sort selections ascending for traversal
    std::sort(pvalues.begin(), pvalues.end());

    size_t expId = 0;
    size_t batchIdx = 0;
    float cumulativeProbability = 0;

    // Sampling from multinomial distribution using inverse transform
    cumulativeProbability += _experienceReplay[0].metadata["Mini Batch"]["Probability"].get<float>();
    while (batchIdx < miniBatchSize && expId < _experienceReplay.size())
    {
      if (cumulativeProbability > pvalues[batchIdx])
        miniBatch[batchIdx++] = expId;
      else
        cumulativeProbability += _experienceReplay[expId++].metadata["Mini Batch"]["Probability"].get<float>();
    }

    // Uniform fill if miniBatch not full due to numerical precision during probability accumulation (cumulative probability < 1)
    while (batchIdx < miniBatchSize)
      miniBatch[batchIdx++] = std::floor(_uniformGenerator->getRandomNumber() * (float)(_experienceReplay.size() - 1));
  }

  /**********************************************
   * Updating experience's metadata
   *********************************************/

  size_t offPolicyCount = 0;

#pragma omp parallel for schedule(guided)
  for (size_t i = 0; i < miniBatchSize; i++)
  {
    auto expId = miniBatch[i];

    // Get state, action, mean, Sigma for this experience
    auto expStateSequence = getStateTimeSequence(expId);
    const auto &expAction = _experienceReplay[expId].action;
    const auto &expPolicy = _experienceReplay[expId].metadata["Experience Policy"];

    // Running policy for the current state
    auto curPolicy = runPolicy(expStateSequence);

    // Get state value function. Some algorithms return it as part of the policy
    const float V = isDefined(curPolicy, "State Value") ? curPolicy["State Value"].get<float>() : stateValueFunction(expStateSequence);

    // Compute importance weight
    const float importanceWeight = calculateImportanceWeight(expAction, curPolicy, expPolicy);

    // If this is the truncated experience of an episode, then obtain truncated state value
    float truncatedV = 0.0f;
    if (_experienceReplay[expId].termination == e_truncated)
      truncatedV = stateValueFunction(getTruncatedStateTimeSequence(expId));

// Store computed information for use in replay memory.
#pragma omp critical
    {
      _experienceReplay[expId].stateValue = V;
      if (_experienceReplay[expId].termination == e_truncated) _experienceReplay[expId].truncatedStateValue = truncatedV;
      _experienceReplay[expId].importanceWeight = importanceWeight;
      _experienceReplay[expId].metadata["Current Policy"] = curPolicy;
      _experienceReplay[expId].isOnPolicy = (importanceWeight > (1.0f / _experienceReplayOffPolicyCurrentCutoff)) && (importanceWeight < _experienceReplayOffPolicyCurrentCutoff);
      if (_experienceReplay[expId].isOnPolicy == false) offPolicyCount++;
    }

    // Updating the off policy Ratio
    float alpha = 0.01f; // ~100 updates to reach 63.2% of the target
    _experienceReplayOffPolicyRatio = alpha * (float)offPolicyCount / (float)miniBatchSize + (1.0f - alpha) * _experienceReplayOffPolicyRatio;

    // Updating the off policy Cutoff
    _experienceReplayOffPolicyCurrentCutoff = 1.0f + _experienceReplayOffPolicyCutoffScale / (1.0f + _experienceReplayOffPolicyAnnealingRate * (float)_policyUpdateCount);
  }

  /**************************************************
   * Calculating retrace value for selected experience
   *************************************************/

  // Selecting experiences, such that only one (the most advanced) per unique episode remains
  std::map<size_t, size_t> episodeMaxExperienceAge;
  std::map<size_t, size_t> episodeMaxExperienceId;

  for (size_t i = 0; i < miniBatchSize; i++)
  {
    const size_t experienceId = miniBatch[i];
    auto &exp = _experienceReplay[experienceId];

    const size_t episodeId = exp.episodeId;
    const size_t episodePos = exp.episodePos;
    const size_t curMaxPosition = episodeMaxExperienceAge.find(episodeId) == episodeMaxExperienceAge.end() ? 0 : episodeMaxExperienceAge[episodeId];

    // If this is a new oldest experience in the episode, store it's position and id
    if (episodePos >= curMaxPosition)
    {
      episodeMaxExperienceAge[episodeId] = episodePos;
      episodeMaxExperienceId[episodeId] = experienceId;
    }
  }

  // Passing the values (experience Ids) of the map to a vector
  std::vector<size_t> experienceRetraceIds;
  for (const auto &episode : episodeMaxExperienceId) experienceRetraceIds.push_back(episode.second);

    // Running all experiences in parallel
#pragma omp parallel for schedule(guided)
  for (size_t i = 0; i < experienceRetraceIds.size(); i++) retraceFunction(experienceRetraceIds[i]);

  // Returning generated minibatch
  return miniBatch;
}

size_t Agent::getTimeSequenceStartExpId(size_t expId)
{
  size_t startId = expId;

  // Adding (tmax-1) time sequences to the given experience
  for (size_t t = 0; t < _timeSequenceLength - 1; t++)
  {
    // If we reached the start of the ER, this is the starting episode in the sequence
    if (startId == 0) break;

    // Now going back one experience
    startId--;

    // If we reached the end of the previous episode, then add one (this covers the case where the provided experience is also terminal) and break.
    if (_experienceReplay[startId].termination != e_nonTerminal)
    {
      startId++;
      break;
    }
  }

  return startId;
}

float Agent::retraceFunction(size_t expId)
{
  // Finding the earliest experience corresponding to the same episode as this experience
  ssize_t endId = expId;
  ssize_t startId = endId - _experienceReplay[endId].episodePos;

  // If the starting experience has already been discarded, take the earliest one that still remains
  if (startId < 0) startId = 0;

  // Storage for the retrace value
  float retV = 0.0f;

  // If it was a truncated episode, add the value function for the terminal state to retV
  if (_experienceReplay[expId].termination == e_truncated)
    retV = _experienceReplay[expId].truncatedStateValue;

  if (_experienceReplay[expId].termination == e_nonTerminal)
    retV = _experienceReplay[expId + 1].retraceValue;

  // Now iterating backwards to calculate the rest of vTbc
  for (ssize_t curId = endId; curId >= startId; curId--)
  {
    auto &exp = _experienceReplay[curId];

    // Getting current reward, action, and state
    const auto curReward = exp.reward / _rewardRescalingSdev;

    // Calculating state value function
    const float curV = exp.stateValue;

    // Calculating importance weight
    const float importanceWeight = exp.importanceWeight;

    // Truncate importance weight
    const float truncatedImportanceWeight = std::min(1.0f, importanceWeight);

    // Calculating retrace value
    retV = curV + truncatedImportanceWeight * (curReward + _discountFactor * retV - curV);

    // Storing retrace value into the experience's cache
    exp.retraceValue = retV;
  }

  // Returning retrace value
  return retV;
}

void Agent::resetTimeSequence()
{
  _stateTimeSequence.clear();
}

std::vector<std::vector<float>> Agent::getStateTimeSequence(size_t expId)
{
  // Getting starting expId
  size_t startId = getTimeSequenceStartExpId(expId);

  // Creating storage for the time sequence
  std::vector<std::vector<float>> timeSequence;

  // Now adding states
  for (size_t e = startId; e <= expId; e++)
    timeSequence.push_back(_experienceReplay[e].state);

  return timeSequence;
}

std::vector<std::vector<float>> Agent::getTruncatedStateTimeSequence(size_t expId)
{
  // Getting starting expId
  size_t startId = getTimeSequenceStartExpId(expId);

  // Creating storage for the time sequence
  std::vector<std::vector<float>> timeSequence;

  // Now adding states, except for the initial one
  for (size_t e = startId + 1; e <= expId; e++)
    timeSequence.push_back(_experienceReplay[e].state);

  // Lastly, adding truncated state
  timeSequence.push_back(_experienceReplay[expId].truncatedState);

  return timeSequence;
}

std::vector<std::vector<float>> Agent::getStateActionTimeSequence(size_t expId)
{
  // Getting starting expId
  size_t startId = getTimeSequenceStartExpId(expId);

  // Creating storage for the time sequence
  std::vector<std::vector<float>> timeSequence;

  // Now adding state/action vectors
  for (size_t e = startId; e <= expId; e++)
  {
    std::vector<float> stateAction(_problem->_stateVectorSize + _problem->_actionVectorSize);
    for (size_t i = 0; i < _problem->_stateVectorSize; i++) stateAction[i] = _experienceReplay[e].state[i];
    for (size_t i = 0; i < _problem->_actionVectorSize; i++) stateAction[_problem->_stateVectorSize + i] = _experienceReplay[e].action[i];
    timeSequence.push_back(stateAction);
  }

  return timeSequence;
}

void Agent::finalize()
{
  if (_mode != "Training") return;

  if (_experienceReplaySerialize == true)
    if (_k->_fileOutputEnabled)
      serializeExperienceReplay();

  _k->_logger->logInfo("Normal", "Waiting for pending agents to finish...\n");

  // Waiting for pending agents to finish
  bool agentsRemain = true;
  do
  {
    agentsRemain = false;
    for (size_t agentId = 0; agentId < _agentCount; agentId++)
      if (_isAgentRunning[agentId] == true)
      {
        attendAgent(agentId);
        agentsRemain = true;
      }

    if (agentsRemain) KORALI_LISTEN(_agents);
  } while (agentsRemain == true);
}

void Agent::serializeExperienceReplay()
{
  _k->_logger->logInfo("Detailed", "Serializing Agent's Training State...\n");
  auto beginTime = std::chrono::steady_clock::now(); // Profiling

  // Creating JSON storage variable
  knlohmann::json stateJson;

  // Serializing agent's database into the JSON storage
  for (size_t i = 0; i < _experienceReplay.size(); i++)
  {
    stateJson["Experience Replay"][i]["Episode Id"] = _experienceReplay[i].episodeId;
    stateJson["Experience Replay"][i]["Episode Pos"] = _experienceReplay[i].episodePos;
    stateJson["Experience Replay"][i]["State"] = _experienceReplay[i].state;
    stateJson["Experience Replay"][i]["Action"] = _experienceReplay[i].action;
    stateJson["Experience Replay"][i]["Reward"] = _experienceReplay[i].reward;
    stateJson["Experience Replay"][i]["State Value"] = _experienceReplay[i].stateValue;
    stateJson["Experience Replay"][i]["Retrace Value"] = _experienceReplay[i].retraceValue;
    stateJson["Experience Replay"][i]["Importance Weight"] = _experienceReplay[i].importanceWeight;
    stateJson["Experience Replay"][i]["Is On Policy"] = _experienceReplay[i].isOnPolicy;
    stateJson["Experience Replay"][i]["Truncated State"] = _experienceReplay[i].truncatedState;
    stateJson["Experience Replay"][i]["Truncated State Value"] = _experienceReplay[i].truncatedStateValue;
    stateJson["Experience Replay"][i]["Termination"] = _experienceReplay[i].termination;
    stateJson["Experience Replay"][i]["Metadata"] = _experienceReplay[i].metadata;
  }

  // Storing training/testing policies
  stateJson["Training"]["Current Policy"] = _trainingCurrentPolicy;
  stateJson["Training"]["Best Policy"] = _trainingBestPolicy;
  stateJson["Testing"]["Best Policy"] = _testingBestPolicy;

  // Storing current agent's training state
  stateJson["Training"]["State"] = _trainingState;

  // If results directory doesn't exist, create it
  if (!dirExists(_k->_fileOutputPath)) mkdir(_k->_fileOutputPath);

  // Resolving file path
  std::string statePath = _k->_fileOutputPath + "/state.json";

  // Storing database to file
  if (saveJsonToFile(statePath.c_str(), stateJson) != 0)
    KORALI_LOG_ERROR("Could not serialize training state into file %s\n", statePath.c_str());

  auto endTime = std::chrono::steady_clock::now();                                                                   // Profiling
  _sessionSerializationTime += std::chrono::duration_cast<std::chrono::nanoseconds>(endTime - beginTime).count();    // Profiling
  _generationSerializationTime += std::chrono::duration_cast<std::chrono::nanoseconds>(endTime - beginTime).count(); // Profiling
}

void Agent::deserializeExperienceReplay()
{
  auto beginTime = std::chrono::steady_clock::now(); // Profiling

  // Creating JSON storage variable
  knlohmann::json stateJson;

  // Resolving file path
  std::string statePath = _k->_fileOutputPath + "/state.json";

  // Loading database from file
  _k->_logger->logInfo("Detailed", "Loading previous run training state from file %s...\n", statePath.c_str());
  if (loadJsonFromFile(stateJson, statePath.c_str()) == false)
    KORALI_LOG_ERROR("Trying to resume training or test policy but could not find or deserialize agent's state from from file %s...\n", statePath.c_str());

  // Clearing existing database
  _experienceReplay.clear();

  // Deserializing database from JSON to the agent's state
  for (size_t i = 0; i < stateJson["Experience Replay"].size(); i++)
  {
    experience_t e;
    e.episodeId = stateJson["Experience Replay"][i]["Episode Id"].get<size_t>();
    e.episodePos = stateJson["Experience Replay"][i]["Episode Pos"].get<size_t>();
    e.state = stateJson["Experience Replay"][i]["State"].get<std::vector<float>>();
    e.action = stateJson["Experience Replay"][i]["Action"].get<std::vector<float>>();
    e.reward = stateJson["Experience Replay"][i]["Reward"].get<float>();
    e.stateValue = stateJson["Experience Replay"][i]["State Value"].get<float>();
    e.retraceValue = stateJson["Experience Replay"][i]["Retrace Value"].get<float>();
    e.importanceWeight = stateJson["Experience Replay"][i]["Importance Weight"].get<float>();
    e.isOnPolicy = stateJson["Experience Replay"][i]["Is On Policy"].get<bool>();
    e.truncatedState = stateJson["Experience Replay"][i]["Truncated State"].get<std::vector<float>>();
    e.truncatedStateValue = stateJson["Experience Replay"][i]["Truncated State Value"].get<float>();
    e.termination = stateJson["Experience Replay"][i]["Termination"].get<termination_t>();
    e.metadata = stateJson["Experience Replay"][i]["Metadata"];

    _experienceReplay.add(e);
  }

  // Restoring training/testing policies
  _trainingCurrentPolicy = stateJson["Training"]["Current Policy"];
  _trainingBestPolicy = stateJson["Training"]["Best Policy"];
  _testingBestPolicy = stateJson["Testing"]["Best Policy"];

  // Setting current agent's training state
  setTrainingState(stateJson["Training"]["State"]);

  auto endTime = std::chrono::steady_clock::now();                                                                         // Profiling
  double deserializationTime = std::chrono::duration_cast<std::chrono::nanoseconds>(endTime - beginTime).count() / 1.0e+9; // Profiling
  _k->_logger->logInfo("Detailed", "Took %fs to deserialize training state.\n", deserializationTime);
}

void Agent::printGenerationAfter()
{
  if (_mode == "Training")
  {
    _k->_logger->logInfo("Normal", "Replay Experience Statistics:\n");

    _k->_logger->logInfo("Normal", " + Experience Memory Size:      %lu/%lu\n", _experienceReplay.size(), _experienceReplayMaximumSize);

    if (_maxEpisodes > 0)
      _k->_logger->logInfo("Normal", " + Total Episodes Count:        %lu/%lu\n", _currentEpisode, _maxEpisodes);
    else
      _k->_logger->logInfo("Normal", " + Total Episodes Count:        %lu\n", _currentEpisode);

    if (_maxExperiences > 0)
      _k->_logger->logInfo("Normal", " + Total Experience Count:      %lu/%lu\n", _experienceCount, _maxExperiences);
    else
      _k->_logger->logInfo("Normal", " + Total Experience Count:      %lu\n", _experienceCount);

    _k->_logger->logInfo("Normal", "Off-Policy Statistics:\n");
    _k->_logger->logInfo("Normal", " + Off-Policy Ratio:            %f (Target: %f)\n", _experienceReplayOffPolicyRatio, _experienceReplayOffPolicyTarget);
    _k->_logger->logInfo("Normal", " + Importance Weight Cutoff:    [%.3f, %.3f]\n", 1.0f / _experienceReplayOffPolicyCurrentCutoff, _experienceReplayOffPolicyCurrentCutoff);
    _k->_logger->logInfo("Normal", " + REFER Beta Factor:           %f\n", _experienceReplayOffPolicyREFERBeta);

    _k->_logger->logInfo("Normal", "Training Statistics:\n");

    if (_maxPolicyUpdates > 0)
      _k->_logger->logInfo("Normal", " + Policy Update Count:         %lu/%lu\n", _policyUpdateCount, _maxPolicyUpdates);
    else
      _k->_logger->logInfo("Normal", " + Policy Update Count:         %lu\n", _policyUpdateCount);

    _k->_logger->logInfo("Normal", " + Latest Reward:               %f/%f\n", _trainingLastReward, _problem->_trainingRewardThreshold);
    _k->_logger->logInfo("Normal", " + %lu-Episode Average Reward:  %f\n", _trainingAverageDepth, _trainingAverageReward);
    _k->_logger->logInfo("Normal", " + Best Reward:                 %f (%lu)\n", _trainingBestReward, _trainingBestEpisodeId);

    if (isinf(_problem->_trainingRewardThreshold) == false)
    {
      _k->_logger->logInfo("Normal", "Testing Statistics:\n");

      _k->_logger->logInfo("Normal", " + Candidate Policies:          %lu\n", _testingCandidateCount);

      _k->_logger->logInfo("Normal", " + Latest Average (Stdev / Worst / Best) Reward: %f (%f / %f / %f)\n", _testingAverageReward, _testingStdevReward, _testingWorstReward, _testingBestReward);
    }

    if (_testingTargetAverageReward > -korali::Inf)
      _k->_logger->logInfo("Normal", " + Best Average Reward: %f/%f (%lu)\n", _testingBestAverageReward, _testingTargetAverageReward, _testingBestEpisodeId);
    else
      _k->_logger->logInfo("Normal", " + Best Average Reward: %f (%lu)\n", _testingBestAverageReward, _testingBestEpisodeId);

    printAgentInformation();
    _k->_logger->logInfo("Normal", " + Current Learning Rate:           %.3e\n", _currentLearningRate);

    _k->_logger->logInfo("Detailed", "Profiling Information:                  [Generation] - [Session]\n");
    _k->_logger->logInfo("Detailed", " + Policy Update Time:                  [%5.3fs] - [%3.3fs]\n", _generationPolicyUpdateTime / 1.0e+9, _sessionPolicyUpdateTime / 1.0e+9);
    _k->_logger->logInfo("Detailed", " + Experience Serialization Time:       [%5.3fs] - [%3.3fs]\n", _generationSerializationTime / 1.0e+9, _sessionSerializationTime / 1.0e+9);
    _k->_logger->logInfo("Detailed", " + Agent Attending Time:                [%5.3fs] - [%3.3fs]\n", _generationAgentAttendingTime / 1.0e+9, _sessionAgentAttendingTime / 1.0e+9);
    _k->_logger->logInfo("Detailed", " + Avg Agent Computation Time:          [%5.3fs] - [%3.3fs]\n", _generationAgentComputationTime / 1.0e+9, _sessionAgentComputationTime / 1.0e+9);
    _k->_logger->logInfo("Detailed", " + Avg Agent Communication/Wait Time:   [%5.3fs] - [%3.3fs]\n", _generationAgentCommunicationTime / 1.0e+9, _sessionAgentCommunicationTime / 1.0e+9);
    _k->_logger->logInfo("Detailed", " + Avg Agent Policy Evaluation Time:    [%5.3fs] - [%3.3fs]\n", _generationAgentPolicyEvaluationTime / 1.0e+9, _sessionAgentPolicyEvaluationTime / 1.0e+9);
    _k->_logger->logInfo("Detailed", "   + Generate Mini Batch Time:          [%5.3fs] - [%3.3fs]\n", _generationGenerateMiniBatchTime / 1.0e+9, _sessionGenerateMiniBatchTime / 1.0e+9);
    _k->_logger->logInfo("Detailed", "   + Gradient Calculation Time:         [%5.3fs] - [%3.3fs]\n", _generationGradientCalculationTime / 1.0e+9, _sessionGradientCalculationTime / 1.0e+9);
    _k->_logger->logInfo("Detailed", "   + Neural Network Update Time         [%5.3fs] - [%3.3fs]\n", _generationUpdateNeuralNetworkTime / 1.0e+9, _sessionUpdateNeuralNetworkTime / 1.0e+9);
    _k->_logger->logInfo("Detailed", " + Running Time:                        [%5.3fs] - [%3.3fs]\n", _generationRunningTime / 1.0e+9, _sessionRunningTime / 1.0e+9);
    _k->_logger->logInfo("Detailed", " + [I/O] Result File Saving Time:        %5.3fs\n", _k->_resultSavingTime / 1.0e+9);
  }

  if (_mode == "Testing")
  {
    _k->_logger->logInfo("Normal", "Testing Results:\n");
    for (size_t agentId = 0; agentId < _testingSampleIds.size(); agentId++)
    {
      _k->_logger->logInfo("Normal", " + Sample %lu:\n", _testingSampleIds[agentId]);
      _k->_logger->logInfo("Normal", "   + Cumulative Reward               %f\n", _testingReward[agentId]);
    }
  }
}

} // namespace solver

} // namespace korali
