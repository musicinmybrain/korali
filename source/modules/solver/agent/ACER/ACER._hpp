#ifndef _KORALI_AGENT_ACER_HPP_
#define _KORALI_AGENT_ACER_HPP_

#include "modules/problem/reinforcementLearning/discrete/discrete.hpp"
#include "modules/solver/agent/agent.hpp"

#ifdef _KORALI_USE_ONEDNN
  #include "auxiliar/dnnUtils.hpp"
using namespace dnnl;
#endif

namespace korali
{
namespace solver
{
namespace agent
{

class ACER : public Agent
{
  public:

  /**
   * @brief Processes a selected trajectory to learn from it, depending on whether it uses a discrete or continuous action space
   * @param startId ID to the first experience of the trajectory
   */
  virtual void processTrajectory(size_t startId, size_t endId) = 0;

  void trainAgent() override;

};

} // namespace agent
} // namespace solver
} // namespace korali

#endif // _KORALI_AGENT_ACER_HPP_
