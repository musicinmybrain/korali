#include "engine.hpp"
#include "modules/solver/agent/ACER/ACER.hpp"
#include "sample/sample.hpp"

/****************************************
 * Things to fix:
 * - All samples use their own pseudorandom generators
 * - All seeds must be replicable when restarting a job
 *****************************************/

namespace korali
{
namespace solver
{
namespace agent
{
void ACER::initializeAgent()
{
  // Getting discrete problem pointer
  _discreteProblem = dynamic_cast<problem::reinforcementLearning::Discrete *>(_k->_problem);

  /*********************************************************************
 * Initializing Critic-Related Structures
 *********************************************************************/

  korali::Engine engine; // Engine to initialize experiments with

  _criticExperiment["Problem"]["Type"] = "Supervised Learning";

  _criticExperiment["Solver"]["Type"] = "Learner/DeepGD";
  _criticExperiment["Solver"]["Optimizer"] = _criticOptimizer;
  _criticExperiment["Solver"]["Loss Function"] = "Mean Squared Error";
  _criticExperiment["Solver"]["Steps Per Generation"] = 1;
  _criticExperiment["Solver"]["Neural Network"] = _criticNeuralNetwork;

  _criticExperiment["Console Output"]["Frequency"] = 0;
  _criticExperiment["Console Output"]["Verbosity"] = "Silent";
  _criticExperiment["File Output"]["Enabled"] = false;
  _criticExperiment["Random Seed"] = _k->_randomSeed++;

  // Initializing experiment with an initial zero set
  for (size_t i = 0; i < _criticMiniBatchSize; i++)
  {
    for (size_t j = 0; j < _problem->_stateVectorSize; j++)
      _criticExperiment["Problem"]["Inputs"][i][j] = 0.0;

    for (size_t j = 0; j < _discreteProblem->_possibleActions.size(); j++)
      _criticExperiment["Problem"]["Solution"][i][j] = 0.0;
  }

  // Running initialization to verify that the configuration is correct
  engine.initialize(_criticExperiment);

  // Getting learner pointers
  _criticProblem = dynamic_cast<problem::SupervisedLearning *>(_criticExperiment._problem);
  _criticLearner = dynamic_cast<solver::learner::DeepGD *>(_criticExperiment._solver);

  /*********************************************************************
  * Initializing Policy-Related Structures
  *********************************************************************/

  // Creating and running Actor Learning Experiments

  _policyExperiment["Problem"]["Type"] = "Supervised Learning";

  _policyExperiment["Solver"]["Type"] = "Learner/DeepGD";
  _policyExperiment["Solver"]["Loss Function"] = "Direct";
  _policyExperiment["Solver"]["Optimizer"] = _policyOptimizer;
  _policyExperiment["Solver"]["Steps Per Generation"] = 1;
  _policyExperiment["Solver"]["Neural Network"] = _policyNeuralNetwork;

  _policyExperiment["Console Output"]["Frequency"] = 0;
  _policyExperiment["Console Output"]["Verbosity"] = "Silent";
  _policyExperiment["File Output"]["Enabled"] = false;
  _policyExperiment["Random Seed"] = _k->_randomSeed++;

  // Initializing experiment with an initial zero set
  for (size_t i = 0; i < _policyMiniBatchSize; i++)
  {
    for (size_t j = 0; j < _problem->_stateVectorSize; j++)
      _policyExperiment["Problem"]["Inputs"][i][j] = 0.0;

    for (size_t j = 0; j < _discreteProblem->_possibleActions.size(); j++)
      _policyExperiment["Problem"]["Solution"][i][j] = 0.0;
  }

  // Running initialization to verify that the configuration is correct
  engine.initialize(_policyExperiment);

  // Getting learner pointers
  _policyProblem = dynamic_cast<problem::SupervisedLearning *>(_policyExperiment._problem);
  _policyLearner = dynamic_cast<solver::learner::DeepGD *>(_policyExperiment._solver);

  /*********************************************************************
  * Loading/Setting Hyperparameters
  *********************************************************************/

  if (_k->_currentGeneration == 0)
  {
    // Get the initial set of critic NN hyperparameters
    _hyperparameters["Critic"] = _criticLearner->getHyperparameters();

    // Get the initial set of policy NN hyperparameters
    _hyperparameters["Policy"] = _policyLearner->getHyperparameters();
  }

  // Assigning training hyperparameters to inference learner
  _criticLearner->setHyperparameters(_hyperparameters["Critic"]);
  _policyLearner->setHyperparameters(_hyperparameters["Policy"]);

  // Storage for statistics
  _avgGradients.resize(_discreteProblem->_possibleActions.size());
}

double ACER::qRetrace(size_t expId)
{
  // Going straight to the latest experience in the corresponding episode
  size_t curId = expId;
  while (_experienceReplayHistory[curId]["Is Terminal"] == false) curId++;
  //printf("For experience %lu, the last experience in its episode is: %lu\n", expId, curId);

  // First, get the retrace value for the last experience (just the reward)
  double retraceValue = _experienceReplayHistory[curId]["Reward"];

  // Now going backwards from the last, calculating the retrace value of each experience, one by one
  while (curId > expId)
  {
    // Decreasing index
    curId--;

    // Getting experience's next state and action
    std::vector<double> curState = _experienceReplayHistory[curId]["State"];
    size_t curActionIdx = _experienceReplayHistory[curId]["Metadata"]["Action Index"];

    // Getting experience's next state and action
    std::vector<double> nextState = _experienceReplayHistory[curId + 1]["State"];
    size_t nextActionIdx = _experienceReplayHistory[curId + 1]["Metadata"]["Action Index"];

    // Getting Q(s+1, a+1) for the selected experience
    double qNextState = stateActionValueFunction(nextState, nextActionIdx);

    // Getting V(s+1) for the selected experience
    double vNextState = stateValueFunction(nextState);

    // Getting p(s,a) for selected experience, given the old policy
    double pOldExp = _experienceReplayHistory[curId]["Metadata"]["Policy Densities"][curActionIdx];

    // Getting p(s,a) for the best action, given the current policy
    double pCurExp = _policyLearner->getEvaluation(curState)[curActionIdx];

    // Now calculating importance weight
    double importanceWeight = pCurExp / pOldExp;

    // Now calculating truncated importance weight
    double truncatedImportanceWeight = std::min(_importanceWeightTruncation, importanceWeight);

    // Getting current reward
    double curReward = _experienceReplayHistory[curId]["Reward"];

    retraceValue = curReward + _criticDiscountFactor * truncatedImportanceWeight * (retraceValue - qNextState) + _criticDiscountFactor * vNextState;
  }

  // Returning the retrace value of the required experience
  return retraceValue;
}

void ACER::getAction(korali::Sample &sample)
{
  // Getting current state
  auto state = sample["State"].get<std::vector<double>>();

  // Storage for action indexs
  size_t actionIdx = 0;

  // If currently on a training phase, then fill experience replay with random actions
  // and then select actions based on their policy probabilities
  if (sample["Mode"] == "Training")
  {
    // Storage for the vector of action probabilities
    auto pActionVector = std::vector<double>(_discreteProblem->_possibleActions.size());

    // If we still do not have enough experiences to train the critic/policy, just return random action
    if (_experienceReplayHistory.size() < _experienceReplayStartSize)
    {
      actionIdx = getRandomActionIndex();
      for (size_t i = 0; i < pActionVector.size(); i++) pActionVector[i] = 1.0 / (double)pActionVector.size();
    }
    else // If not, gathering an action from the policy
    {
      // Producing random (uniform) number to obtain a value index
      double x = _randomActionGenerator->getRandomNumber();

      // Forward propagating state through the critic to get Q(s,a) for all A
      pActionVector = _policyLearner->getEvaluation(state);

      // Iterating over all p(s,a) to select the corresponding action
      double curSum = 0.0;
      size_t actionIdx;
      for (actionIdx = 0; actionIdx < pActionVector.size(); actionIdx++)
      {
        double pAction = pActionVector[actionIdx];
        if (x > curSum && x <= curSum + pAction) break;
        curSum += pAction;
      }
    }

    //     ////////////////////////////////////////
    //     // Creating state/action input
    //
    //     auto qVals = _criticLearner->getEvaluation(state);
    //
    //      // Storage for max_a Q(s,a) and its index
    //      double maxQVal = -korali::Inf;
    //      size_t maxQIdx = 0;
    //
    //      // Iterating over all possible actions, checking which one is best
    //      for (size_t i = 0; i < _discreteProblem->_possibleActions.size(); i++)
    //      {
    //       // Computing Q(s,a_i)
    //       double curQVal = qVals[i];
    //
    //       // If current action got a larger Q, store it as the best
    //       if (curQVal > maxQVal) { maxQVal = curQVal; maxQIdx = i; }
    //      }
    //
    //      // Returning the best found
    //      actionIdx = maxQIdx;
    //     /////////////////////////////////////

    sample["Metadata"]["Action Index"] = actionIdx;
    sample["Metadata"]["Policy Densities"] = pActionVector;
  }

  // If currently on a training phase, then we just select the action with the
  // highest probability
  if (sample["Mode"] == "Testing")
  {
    // Getting current state
    auto state = sample["State"].get<std::vector<double>>();

    // Getting index of the action with the highest probability
    actionIdx = queryPolicy(state);
  }

  // Storing the action and associated metadata
  sample["Action"] = _discreteProblem->_possibleActions[actionIdx];
}

size_t ACER::getRandomActionIndex()
{
  // Storage for action
  std::vector<double> randomAction(_problem->_actionVectorSize);

  // Producing random (uniform) number to obtain a value index
  double x = _randomActionGenerator->getRandomNumber();

  // Randomly select one of the actions provided in the value vector
  size_t actionIdx = floor(x * _discreteProblem->_possibleActions.size());

  return actionIdx;
}

double ACER::stateActionValueFunction(const std::vector<double> &state, const size_t &actionIdx)
{
  // Forward propagating state through the critic to get Q(s,a) for all A
  auto evaluation = _criticLearner->getEvaluation(state);

  // Getting the value of V(Xt), i.e., Q(xt, best action)
  return evaluation[actionIdx];
}

double ACER::stateValueFunction(const std::vector<double> &state)
{
  // Forward propagating state through the critic to get Q(s,a) for all a
  auto qEval = _criticLearner->getEvaluation(state);

  // Forward propagating state through the policty to get P(s,a) for all a
  auto pEval = _policyLearner->getEvaluation(state);

  // Calculating the sum of p(s,a)*q(s,a) for all a
  double qSum = 0.0;
  for (size_t i = 0; i < qEval.size(); i++)
    qSum += qEval[i] * pEval[i];

  // Returning the sum
  return qSum;
}

void ACER::trainAgent()
{
  // Creating storage for state history indexes to choose from
  std::vector<size_t> experienceReplayIndexes(_experienceReplayHistory.size());
  for (size_t i = 0; i < _experienceReplayHistory.size(); i++) experienceReplayIndexes[i] = i;

  /***************************************************************************************
  * Updating Policy Network by performing a Gradient descent step with latest experiences
  ***************************************************************************************/

  // Initializing gradient for statistics
  for (size_t i = 0; i < _avgGradients.size(); i++) _avgGradients[i] = 0.0;

  for (size_t i = 0; i < _policyMiniBatchSize; i++)
  {
    // Selecting a uniformly random selected, yet not repeated experience
    size_t expId = experienceReplayIndexes[_experienceReplayHistory.size() - _policyMiniBatchSize + i];

    // Getting experience's current state and action
    std::vector<double> curState = _experienceReplayHistory[expId]["State"];
    size_t curActionIdx = _experienceReplayHistory[expId]["Metadata"]["Action Index"];

    // Getting probability densities for current action given current policy
    auto pOldPolicy = _experienceReplayHistory[expId]["Metadata"]["Policy Densities"].get<std::vector<double>>();

    // Getting probability densities for current action given current policy
    auto pCurPolicy = _policyLearner->getEvaluation(curState);

    /****************************************************************************
    * Now Calculating Acer gradient, from https://arxiv.org/pdf/1611.01224.pdf, Eq. 9
    ***************************************************************************/

    // Creating storage for the gradient vector
    std::vector<double> gAcer(_discreteProblem->_possibleActions.size(), 0);

    // Calculating V_theta(state)
    double vState = stateValueFunction(curState);

    ///////// Part one of the equation

    // Getting p(s,a) for selected experience, given the old policy
    double pExpActionOldPolicy = pOldPolicy[curActionIdx];

    // Getting p(s,a) for the best action, given the current policy
    double pExpActionCurPolicy = pCurPolicy[curActionIdx];

    // Now calculating importance weight for the old s,a experience
    double expImportanceWeight = pExpActionCurPolicy / pExpActionOldPolicy;

    // Now calculating truncated importance weight
    double tImpWeight = std::min(_importanceWeightTruncation, expImportanceWeight);

    // Calculating Qret(state, action)
    double qRet = qRetrace(expId);

    // Adding the component of part one to the gradient vector
    gAcer[curActionIdx] += tImpWeight * (qRet - vState) / pExpActionCurPolicy;

    ///////// Part two of the equation

    // Getting the best action by the policy for the current state
    for (size_t newActionIdx = 0; newActionIdx < gAcer.size(); newActionIdx++)
    {
      // Calculating Qcritic(state,action)
      double qCritic = stateActionValueFunction(curState, newActionIdx);

      // Getting p(s,a) for selected action, given the old policy
      double pNewActionOldPolicy = pOldPolicy[newActionIdx];

      // Getting p(s,a) for selected action, given the current policy
      double pNewActionCurPolicy = pCurPolicy[newActionIdx];

      // Now calculating importance weight for the old s,a experience
      double newImportanceWeight = pNewActionCurPolicy / pNewActionOldPolicy;

      // Now calculating r(a) - c / r(a) ratio
      double importanceRatio = (newImportanceWeight - _importanceWeightTruncation) / newImportanceWeight;

      // Now calculating the correction weight
      double correctionWeight = importanceRatio > 0 ? importanceRatio : 0.0;

      // Adding the component of part two to the gradient vector
      gAcer[newActionIdx] += correctionWeight * (qCritic - vState) / pExpActionCurPolicy;
    }

    // Setting these gradients as inputs to the
    _policyProblem->_inputs[i] = curState;
    _policyProblem->_solution[i] = gAcer;

    // Keeping track of gradient averages for statistics
    for (size_t i = 0; i < _discreteProblem->_possibleActions.size(); i++) _avgGradients[i] += gAcer[i];
  }

  // Calculating gradient statistics
  for (size_t i = 0; i < _avgGradients.size(); i++) _avgGradients[i] /= _policyMiniBatchSize;

  // Running one generation of the optimization method on the actor NN with the given mini-batch
  _policyExperiment["Solver"]["Termination Criteria"]["Max Generations"] = _policyExperiment._currentGeneration + _policyOptimizationSteps;
  _policyLearner->initialize();
  korali::Engine engine;
  engine.resume(_policyExperiment);

  /***********************************************************************************
  * Updating Critic Network by performing a Stochastic Gradient Descent step
  **********************************************************************************/

  // Calculating cumulative Q*, for statistical purposes
  _cumulativeQStar = 0.0;

  for (size_t step = 0; step < _criticOptimizationSteps; step++)
  {
    // Returning hyperparameters to its pre-training value
    _criticLearner->setHyperparameters(_hyperparameters["Critic"]);

    // Shuffling indexes to choose the mini batch from
    std::shuffle(experienceReplayIndexes.begin(), experienceReplayIndexes.end(), *mt);

    // Randomly selecting experiences for the mini-batch and calculating their target Q
    for (size_t i = 0; i < _criticMiniBatchSize; i++)
    {
      // Creating storage for the gradient vector
      std::vector<double> gCritic(_discreteProblem->_possibleActions.size(), 0);

      // Selecting a uniformly random selected, yet not repeated experience
      size_t expId = experienceReplayIndexes[i];

      // Getting experience's current state and action
      std::vector<double> curState = _experienceReplayHistory[expId]["State"];
      size_t curActionIdx = _experienceReplayHistory[expId]["Metadata"]["Action Index"];

      // Calculating target Qret for critic gradient
      double qRet = qRetrace(expId);

      // Update the gradient vector with the value of the retrace function for g = Q-Qret
      gCritic[curActionIdx] = qRet;

      // Updating inputs to training learner
      _criticProblem->_inputs[i] = curState;
      _criticProblem->_solution[i] = gCritic;

      // Keeping statistics
      _cumulativeQStar += qRet;
    }

    // Running one generation of the optimization method with the given mini-batch
    _criticExperiment["Solver"]["Termination Criteria"]["Max Generations"] = _criticExperiment._currentGeneration + 1;
    _criticLearner->initialize();
    korali::Engine engine;
    engine.resume(_criticExperiment);
  }

  // Keeping statistics
  _averageQStar = (double)_cumulativeQStar / (double)(_criticOptimizationSteps * _criticMiniBatchSize);

  /****************************************************************************
 * If batch normalization is being used, we need to adjust mean and variances
 * by sampling a few more mini-batches after the optimization steps
 ******************************************************************************/

  // Allocating memory for the mini batch set
  std::vector<std::vector<std::vector<double>>> miniBatches(_normalizationSteps);

  for (size_t i = 0; i < _normalizationSteps; i++)
    miniBatches[i].resize(_criticMiniBatchSize);

  for (size_t i = 0; i < _normalizationSteps; i++)
    for (size_t j = 0; j < _criticMiniBatchSize; j++) miniBatches[i][j].resize(_problem->_stateVectorSize + _problem->_actionVectorSize);

  // Filling the minibatches
  for (size_t step = 0; step < _normalizationSteps; step++)
  {
    // Shuffling indexes to choose the mini batch from
    std::shuffle(experienceReplayIndexes.begin(), experienceReplayIndexes.end(), *mt);

    for (size_t i = 0; i < _criticMiniBatchSize; i++)
    {
      // Selecting a uniformly random selected, yet not repeated experience
      size_t expId = experienceReplayIndexes[i];

      miniBatches[step][i] = _experienceReplayHistory[expId]["State"].get<std::vector<double>>();
    }
  }

  _criticLearner->_trainingNeuralNetwork->normalize(miniBatches);

  /*********************************************************************
  * Updating hyperparameters and broadcasting them to the workers
  *********************************************************************/

  // Storing new Critic's hyperparameters
  _hyperparameters["Critic"] = _criticLearner->getHyperparameters();

  // Getting q training hyperparameters to broadcast to workers
  auto policyHypeparameters = _policyLearner->getHyperparameters();
  _hyperparameters["Policy"] = policyHypeparameters;
  _policyLearner->setHyperparameters(policyHypeparameters);
}

size_t ACER::queryPolicy(const std::vector<double> &state)
{
  // Forward propagating state through the critic to get Q(s,a) for all A
  auto pActionVector = _policyLearner->getEvaluation(state);

  // Storage for max_a Q(s,a) and its index
  double maxActionProbability = 0.0;
  size_t maxActionIdx = 0;

  // Iterating over all possible actions, checking which one is best
  for (size_t i = 0; i < _discreteProblem->_possibleActions.size(); i++)
  {
    // Getting Q(s,a) for a_i
    double curActionProbability = pActionVector[i];

    // If current action got a larger Q, store it as the best
    if (curActionProbability > maxActionProbability)
    {
      maxActionProbability = curActionProbability;
      maxActionIdx = i;
    }
  }

  // Returning the action with the most probability
  return maxActionIdx;
}

void ACER::updateHyperparameters(const knlohmann::json &hyperparameters)
{
  _criticLearner->setHyperparameters(hyperparameters["Critic"].get<std::vector<double>>());
  _policyLearner->setHyperparameters(hyperparameters["Policy"].get<std::vector<double>>());

  // Re-initializing action noises to zero
  size_t actionCount = _problem->_actionVectorIndexes.size();
  _currentActionNoises.resize(actionCount);
  for (size_t i = 0; i < actionCount; i++) _currentActionNoises[i] = 0.0;
}

void ACER::printAgentInformation()
{
  _k->_logger->logInfo("Normal", "Critic Information:\n");

  _k->_logger->logInfo("Normal", " + Cumulative Expected Q-Value:     %f\n", _cumulativeQStar);
  _k->_logger->logInfo("Normal", " + Average Expected Q-Value:        %f\n", _averageQStar);

  _criticExperiment._logger->_verbosityLevel = _k->_logger->_verbosityLevel;
  _criticExperiment._solver->printGenerationAfter();
  _criticExperiment._logger->setVerbosityLevel("Silent");

  _k->_logger->logInfo("Normal", "Policy Information:\n");

  _k->_logger->logInfo("Normal", " + Average Action Gradients: [");

  // Printing gradient averages
  _k->_logger->logData("Normal", " %e", _avgGradients[0]);
  for (size_t i = 1; i < _avgGradients.size(); i++) _k->_logger->logData("Normal", ", %e", _avgGradients[i]);
  _k->_logger->logData("Normal", " ]\n");
}

} // namespace agent

} // namespace solver

} // namespace korali
