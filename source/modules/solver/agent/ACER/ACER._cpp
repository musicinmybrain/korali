#include "engine.hpp"
#include "modules/solver/agent/ACER/ACER.hpp"
#include "sample/sample.hpp"

/****************************************
 * Things to fix:
 * - All samples use their own pseudorandom generators
 * - All seeds must be replicable when restarting a job
 *****************************************/

namespace korali
{
namespace solver
{
namespace agent
{
void ACER::initializeAgent()
{
 // Getting discrete problem pointer
 _discreteProblem = dynamic_cast<problem::reinforcementLearning::Discrete *>(_k->_problem);

 /*********************************************************************
 * Initializing Critic-Related Structures
 *********************************************************************/

 korali::Engine engine; // Engine to initialize experiments with

 _criticExperiment["Problem"]["Type"] = "Supervised Learning";

 _criticExperiment["Solver"]["Type"] = "Learner/DeepGD";
 _criticExperiment["Solver"]["Optimizer"] = _criticOptimizer;
 _criticExperiment["Solver"]["Loss Function"] = "Mean Squared Error";
 _criticExperiment["Solver"]["Steps Per Generation"] = 1;
 _criticExperiment["Solver"]["Neural Network"] = _criticNeuralNetwork;

 _criticExperiment["Console Output"]["Frequency"] = 0;
 _criticExperiment["Console Output"]["Verbosity"] = "Silent";
 _criticExperiment["File Output"]["Enabled"] = false;
 _criticExperiment["Random Seed"] = _k->_randomSeed++;

 // Initializing experiment with an initial zero set
 for (size_t i = 0; i < _criticMiniBatchSize; i++)
 {
  for (size_t j = 0; j < _problem->_stateVectorSize; j++)
     _criticExperiment["Problem"]["Inputs"][i][j] = 0.0;

   for (size_t j = 0; j < _discreteProblem->_possibleActions.size(); j++)
     _criticExperiment["Problem"]["Solution"][i][j] = 0.0;
 }

 // Running initialization to verify that the configuration is correct
 engine.initialize(_criticExperiment);

 // Getting learner pointers
 _criticProblem = dynamic_cast<problem::SupervisedLearning *>(_criticExperiment._problem);
 _criticLearner = dynamic_cast<solver::learner::DeepGD *>(_criticExperiment._solver);

  /*********************************************************************
  * Initializing Policy-Related Structures
  *********************************************************************/

   // Creating and running Actor Learning Experiments

  _policyExperiment["Problem"]["Type"] = "Supervised Learning";

  _policyExperiment["Solver"]["Type"] = "Learner/DeepGD";
  _policyExperiment["Solver"]["Loss Function"] = "Direct";
  _policyExperiment["Solver"]["Optimizer"] = _policyOptimizer;
  _policyExperiment["Solver"]["Steps Per Generation"] = 1;
  _policyExperiment["Solver"]["Neural Network"] = _policyNeuralNetwork;

  _policyExperiment["Console Output"]["Frequency"] = 0;
  _policyExperiment["Console Output"]["Verbosity"] = "Silent";
  _policyExperiment["File Output"]["Enabled"] = false;
  _policyExperiment["Random Seed"] = _k->_randomSeed++;

  // Initializing experiment with an initial zero set
  for (size_t i = 0; i < _policyMiniBatchSize; i++)
  {
    for (size_t j = 0; j < _problem->_stateVectorSize; j++)
      _policyExperiment["Problem"]["Inputs"][i][j] = 0.0;

    for (size_t j = 0; j < _discreteProblem->_possibleActions.size(); j++)
      _policyExperiment["Problem"]["Solution"][i][j] = 0.0;
  }

  // Running initialization to verify that the configuration is correct
  engine.initialize(_policyExperiment);

  // Getting learner pointers
  _policyProblem = dynamic_cast<problem::SupervisedLearning *>(_policyExperiment._problem);
  _policyLearner = dynamic_cast<solver::learner::DeepGD *>(_policyExperiment._solver);

  /*********************************************************************
  * Loading/Setting Hyperparameters
  *********************************************************************/

  if (_k->_currentGeneration == 0)
  {
   // Get the initial set of critic NN hyperparameters
   _hyperparameters["Critic"] = _criticLearner->getHyperparameters();

    // Get the initial set of policy NN hyperparameters
    _hyperparameters["Policy"] = _policyLearner->getHyperparameters();
  }

  // Assigning training hyperparameters to inference learner
  _criticLearner->setHyperparameters(_hyperparameters["Critic"]);
  _policyLearner->setHyperparameters(_hyperparameters["Policy"]);

  // Storage for statistics
  avgGradients.resize(_problem->_actionVectorSize);
}

double ACER::qRetrace(size_t expId)
{
  // Going straight to the latest experience in the corresponding episode
  size_t curId = expId;
  while (_experienceReplayHistory[curId]["Is Terminal"] == false) curId++;
  //printf("For experience %lu, the last experience in its episode is: %lu\n", expId, curId);

  // First, get the retrace value for the last experience (just the reward)
  double retraceValue = _experienceReplayHistory[curId]["Reward"];

  // Now going backwards from the last, calculating the retrace value of each experience, one by one
  while (curId > expId)
  {
    // Decreasing index
    curId--;

    // Getting experience's next state and action
    std::vector<double> curState = _experienceReplayHistory[curId]["State"];
    size_t curActionIdx = _experienceReplayHistory[curId]["Metadata"]["Action Index"];

    // Getting experience's next state and action
    std::vector<double> nextState = _experienceReplayHistory[curId+1]["State"];
    size_t nextActionIdx = _experienceReplayHistory[curId+1]["Metadata"]["Action Index"];

    // Getting Q(s+1, a+1) for the selected experience
    double qNextState = stateActionValueFunction(nextState, nextActionIdx);

    // Getting V(s+1) for the selected experience
    double vNextState = stateValueFunction(nextState);

    // Getting p(s,a) for selected experience, given the old policy
    double pOldExp = _experienceReplayHistory[curId]["Metadata"]["Action pDensity"];

    // Getting p(s,a) for the best action, given the current policy
    double pCurExp = getStateActionProbabilityDensity(curState, curActionIdx);

    // Now calculating importance weight
    double importanceWeight = pCurExp / pOldExp;

    // Now calculating truncated importance weight
    double truncatedImportanceWeight = std::min(_importanceWeightTruncation, importanceWeight);

    // Getting current reward
    double curReward = _experienceReplayHistory[curId]["Reward"];

    retraceValue += curReward + _criticDiscountFactor * truncatedImportanceWeight * (retraceValue - qNextState) + _criticDiscountFactor * vNextState;

    printf("Retrace Val: %f\n", retraceValue);
  }

  // Returning the retrace value of the required experience
  return retraceValue;
}

double ACER::getStateActionProbabilityDensity(const std::vector<double> &state, const size_t &actionIdx)
{
 // Forward propagating state through the policy to get P(s,a) for all a
 auto evaluation = _policyLearner->getEvaluation(state);

 // Getting the value of P(s,a) for the given a_i
 return evaluation[actionIdx];
}

void ACER::getAction(korali::Sample& sample)
{
  // If we still do not have enough experiences to train the critic/policy, just return random action
  if (_experienceReplayHistory.size() < _experienceReplayStartSize)
  {
   size_t randomActionIdx = getRandomActionIndex();
   sample["Metadata"]["Action Index"] = randomActionIdx;
   sample["Metadata"]["Action pDensity"] = 1.0 / (double)_discreteProblem->_possibleActions.size();
   sample["Action"] = _discreteProblem->_possibleActions[randomActionIdx];
   return;
  }

  // Getting current state
  auto state = sample["State"].get<std::vector<double>>();

  // Obtaining action from policy
  auto action = queryPolicy(state);

  // If currently on a training phase, add noise/random actions.
  bool isTraining = sample["Mode"] == "Training";

  if (isTraining)
  {
    // To do;
    printf("To be completed 2\n");
    exit(0);
  }

  // Storing the action
  sample["Action"] = action;
}

size_t ACER::getRandomActionIndex()
{
  // Storage for action
  std::vector<double> randomAction(_problem->_actionVectorSize);

  // Producing random (uniform) number to obtain a value index
  double x = _randomActionGenerator->getRandomNumber();

  // Randomly select one of the actions provided in the value vector
  size_t actionIdx = floor(x * _discreteProblem->_possibleActions.size());

  return actionIdx;
}

double ACER::stateActionValueFunction(const std::vector<double> &state, const size_t &actionIdx)
{
  // Forward propagating state through the critic to get Q(s,a) for all A
  auto evaluation = _criticLearner->getEvaluation(state);

  // Getting the value of V(Xt), i.e., Q(xt, best action)
  return evaluation[actionIdx];
}

double ACER::stateValueFunction(const std::vector<double> &state)
{
  // Forward propagating state through the critic to get Q(s,a) for all A
  auto evaluation = _criticLearner->getEvaluation(state);

  // Storage for max_a Q(s,a) and its index
  double maxQVal = -korali::Inf;
  size_t maxQIdx = 0;

  // Iterating over all possible actions, checking which one is best
  for (size_t i = 0; i < _discreteProblem->_possibleActions.size(); i++)
  {
   // Getting Q(s,a) for a_i
   double curQVal = evaluation[i];

   // If current action got a larger Q, store it as the best
   if (curQVal > maxQVal) { maxQVal = curQVal; maxQIdx = i; }
  }

  // Getting the value of V(Xt), i.e., Q(xt, best action)
  return evaluation[maxQIdx];
}


void ACER::trainAgent()
{
 // Creating storage for state history indexes to choose from
 std::vector<size_t> experienceReplayIndexes(_experienceReplayHistory.size());
 for (size_t i = 0; i < _experienceReplayHistory.size(); i++) experienceReplayIndexes[i] = i;

 /***************************************************************************************
  * Updating Policy Network by performing a Gradient descent step with latest experiences
  ***************************************************************************************/

 // Initializing gradient for statistics
 for (size_t i = 0; i < _problem->_actionVectorSize; i++) avgGradients[i] = 0.0;

 for (size_t i = 0; i < _policyMiniBatchSize; i++)
 {
   // Selecting a uniformly random selected, yet not repeated experience
   size_t expId = experienceReplayIndexes[_experienceReplayHistory.size() - _policyMiniBatchSize + i];

   // Getting experience's current state and action
   std::vector<double> curState = _experienceReplayHistory[expId]["State"];
   std::vector<double> curAction = _experienceReplayHistory[expId]["Action"];

   printf("Starting StateValueFunction\n");

   // Calculating V_theta(state)
   double vState = stateValueFunction(curState);

   printf("Starting QTrace\n");

   // Calculating Qret(state, action)
   double qRet = qRetrace(expId);

   printf("To be completed 0\n");
   exit(0);
 }

 // Calculating gradient statistics
 for (size_t i = 0; i < _problem->_actionVectorSize; i++) avgGradients[i] /= _policyMiniBatchSize;

 // Running one generation of the optimization method on the actor NN with the given mini-batch
 _policyExperiment["Solver"]["Termination Criteria"]["Max Generations"] = _policyExperiment._currentGeneration + _policyOptimizationSteps;
 _policyLearner->initialize();
 korali::Engine engine;
 engine.resume(_policyExperiment);

 auto policyHypeparameters = _policyLearner->getHyperparameters();

 /***********************************************************************************
  * Updating Critic Network by performing a Stochastic Gradient Descent step
  **********************************************************************************/

 // Calculating cumulative Q*, for statistical purposes
 _cumulativeQStar = 0.0;

  for (size_t step = 0; step < _criticOptimizationSteps; step++)
  {
    // Returning hyperparameters to its pre-training value
    _criticLearner->setHyperparameters(_hyperparameters["Critic"]);

    // Shuffling indexes to choose the mini batch from
    std::shuffle(experienceReplayIndexes.begin(), experienceReplayIndexes.end(), *mt);

    // Randomly selecting experiences for the mini-batch and calculating their target Q
    for (size_t i = 0; i < _criticMiniBatchSize; i++)
    {
      // Selecting a uniformly random selected, yet not repeated experience
      size_t expId = experienceReplayIndexes[i];

      // Qnew = max_a(q) with s' fixed
      // Q* = r + y*Qnew -- If not terminal state
      // Q* = r -- If terminal state

      // Calculating target Q value (solution) for Qnew on selected batch
      double qStar = 0.0;

      // Reward is the first factor in the QLearning algorithm
      qStar = _experienceReplayHistory[expId]["Reward"];

      // Getting experience's current state and action
      std::vector<double> curState = _experienceReplayHistory[expId]["State"];
      std::vector<double> curAction = _experienceReplayHistory[expId]["Action"];

      if (_experienceReplayHistory[expId]["Is Terminal"] == false)
      {
       // Getting experience's next state and action
       std::vector<double> nextState = _experienceReplayHistory[expId+1]["State"];
       size_t nextActionIdx = _experienceReplayHistory[expId+1]["Metadata"]["Action Index"];

       // If state is not terminal (next state is filled) then add Qnew to the Q value.
       qStar += _criticDiscountFactor * stateActionValueFunction(nextState, nextActionIdx);
      }

      // Updating inputs to training learner
      _criticProblem->_inputs[i] = curState;
      _criticProblem->_inputs[i].insert(_criticProblem->_inputs[i].end(), curAction.begin(), curAction.end());
      _criticProblem->_solution[i][0] = qStar;

      // Keeping statistics
      _cumulativeQStar += qStar;
    }

    // Running one generation of the optimization method with the given mini-batch
    _criticExperiment["Solver"]["Termination Criteria"]["Max Generations"] = _criticExperiment._currentGeneration + 1;
    _criticLearner->initialize();
    korali::Engine engine;
    engine.resume(_criticExperiment);

    // Increasing optimization step counter
    _optimizationStepCount++;
  }

  // Keeping statistics
  _averageQStar = (double)_cumulativeQStar / (double)(_criticOptimizationSteps * _criticMiniBatchSize);

 // If batch normalization is being used, we need to adjust mean and variances

  normalizeNeuralNetwork(_criticLearner->_trainingNeuralNetwork);

  /*********************************************************************
  * Updating hyperparameters and broadcasting them to the workers
  *********************************************************************/

  // Storing new Critic's hyperparameters
  _hyperparameters["Critic"] = _criticLearner->getHyperparameters();

  // Getting q training hyperparameters to broadcast to workers
  _hyperparameters["Policy"] = policyHypeparameters;
  _policyLearner->setHyperparameters(policyHypeparameters);
}

std::vector<double> ACER::queryPolicy(const std::vector<double> &state)
{
  return _policyLearner->getEvaluation({state});
}

void ACER::updateHyperparameters(const knlohmann::json &hyperparameters)
{
  _policyLearner->setHyperparameters(hyperparameters["Policy"].get<std::vector<double>>());

  // Re-initializing action noises to zero
  size_t actionCount = _problem->_actionVectorIndexes.size();
  _currentActionNoises.resize(actionCount);
  for (size_t i = 0; i < actionCount; i++) _currentActionNoises[i] = 0.0;
}

void ACER::printAgentInformation()
{
 _k->_logger->logInfo("Normal", "Critic Information:\n");

 if (_maxOptimizationSteps > 0)
   _k->_logger->logInfo("Normal", " + Optimization Step Count:         %lu/%lu\n", _optimizationStepCount, _maxOptimizationSteps);
 else
   _k->_logger->logInfo("Normal", " + Optimization Step Count:         %lu\n", _optimizationStepCount);

 _k->_logger->logInfo("Normal", " + Cumulative Expected Q-Value:     %f\n", _cumulativeQStar);
 _k->_logger->logInfo("Normal", " + Average Expected Q-Value:        %f\n", _averageQStar);

 _criticExperiment._logger->_verbosityLevel = _k->_logger->_verbosityLevel;
 _criticExperiment._solver->printGenerationAfter();
 _criticExperiment._logger->setVerbosityLevel("Silent");

 _k->_logger->logInfo("Normal", "Policy Information:\n");

  _k->_logger->logInfo("Normal", " + Average Action Gradients: [");

  // Printing gradient averages
  _k->_logger->logData("Normal", " %e", avgGradients[0]);
  for (size_t i = 1; i < _problem->_actionVectorSize; i++) _k->_logger->logData("Normal", ", %e", avgGradients[i]);
  _k->_logger->logData("Normal", " ]\n");
}

} // namespace agent

} // namespace solver

} // namespace korali
