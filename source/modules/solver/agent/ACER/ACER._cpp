#include "engine.hpp"
#include "modules/solver/agent/ACER/ACER.hpp"
#include "sample/sample.hpp"

/****************************************
 * Things to fix:
 * - All samples use their own pseudorandom generators
 * - All seeds must be replicable when restarting a job
 *****************************************/

namespace korali
{
namespace solver
{
namespace agent
{
void ACER::initializeAgent()
{
 /*********************************************************************
 * Verifying Problem's Definition
 *********************************************************************/

 // Checking a discrete action space has been defined and getting total number of actions
 size_t totalActionCount = 1;

 for (size_t i = 0; i < _problem->_actionVectorIndexes.size(); i++)
 {
   size_t varIdx = _problem->_actionVectorIndexes[i];
   size_t varActionCount = _k->_variables[varIdx]->_values.size();
   if (varActionCount == 0) KORALI_LOG_ERROR("No discrete action values have been defined for variable %lu (%s), required by DQN\n", varIdx, _k->_variables[varIdx]->_name.c_str());
   totalActionCount *= varActionCount;
 }

 printf("Total Action Count: %lu\n", totalActionCount);
 exit(0);

 /*********************************************************************
 * Initializing Critic-Related Structures
 *********************************************************************/

 korali::Engine engine; // Engine to initialize experiments with

 _criticExperiment["Problem"]["Type"] = "Supervised Learning";

 _criticExperiment["Solver"]["Type"] = "Learner/DeepGD";
 _criticExperiment["Solver"]["Optimizer"] = _criticOptimizer;
 _criticExperiment["Solver"]["Loss Function"] = "Mean Squared Error";
 _criticExperiment["Solver"]["Steps Per Generation"] = 1;
 _criticExperiment["Solver"]["Neural Network"] = _criticNeuralNetwork;

 _criticExperiment["Console Output"]["Frequency"] = 0;
 _criticExperiment["Console Output"]["Verbosity"] = "Silent";
 _criticExperiment["File Output"]["Enabled"] = false;
 _criticExperiment["Random Seed"] = _k->_randomSeed++;

 // Initializing experiment with an initial zero set
 for (size_t i = 0; i < _criticMiniBatchSize; i++)
 {
   _criticExperiment["Problem"]["Solution"][i][0] = 0.0;

   for (size_t j = 0; j < _k->_variables.size(); j++)
     _criticExperiment["Problem"]["Inputs"][i][j] = 0.0;
 }

 // Running initialization to verify that the configuration is correct
 engine.initialize(_criticExperiment);

 // Getting learner pointers
 _criticProblem = dynamic_cast<problem::SupervisedLearning *>(_criticExperiment._problem);
 _criticLearner = dynamic_cast<solver::learner::DeepGD *>(_criticExperiment._solver);

  /*********************************************************************
  * Initializing Policy-Related Structures
  *********************************************************************/

   // Creating and running Actor Learning Experiments

  _policyExperiment["Problem"]["Type"] = "Supervised Learning";

  _policyExperiment["Solver"]["Type"] = "Learner/DeepGD";
  _policyExperiment["Solver"]["Loss Function"] = "Direct";
  _policyExperiment["Solver"]["Optimizer"] = _policyOptimizer;
  _policyExperiment["Solver"]["Steps Per Generation"] = 1;
  _policyExperiment["Solver"]["Neural Network"] = _policyNeuralNetwork;

  _policyExperiment["Console Output"]["Frequency"] = 0;
  _policyExperiment["Console Output"]["Verbosity"] = "Silent";
  _policyExperiment["File Output"]["Enabled"] = false;
  _policyExperiment["Random Seed"] = _k->_randomSeed++;

  // Initializing experiment with an initial zero set
  for (size_t i = 0; i < _policyMiniBatchSize; i++)
  {
    for (size_t j = 0; j < _problem->_stateVectorSize; j++)
      _policyExperiment["Problem"]["Inputs"][i][j] = 0.0;

    for (size_t j = 0; j < _problem->_actionVectorSize; j++)
      _policyExperiment["Problem"]["Solution"][i][j] = 0.0;
  }

  // Running initialization to verify that the configuration is correct
  engine.initialize(_policyExperiment);

  // Getting learner pointers
  _policyProblem = dynamic_cast<problem::SupervisedLearning *>(_policyExperiment._problem);
  _policyLearner = dynamic_cast<solver::learner::DeepGD *>(_policyExperiment._solver);

  /*********************************************************************
  * Loading/Setting Hyperparameters
  *********************************************************************/

  if (_k->_currentGeneration == 0)
  {
   // Get the initial set of critic NN hyperparameters
   _hyperparameters["Critic"] = _criticLearner->getHyperparameters();

    // Get the initial set of policy NN hyperparameters
    _hyperparameters["Policy"] = _policyLearner->getHyperparameters();
  }

  // Assigning training hyperparameters to inference learner
  _criticLearner->setHyperparameters(_hyperparameters["Critic"]);
  _policyLearner->setHyperparameters(_hyperparameters["Policy"]);

  // Storage for statistics
  avgGradients.resize(_problem->_actionVectorSize);
}

double ACER::retraceFunction(size_t expId)
{
  // Going straight to the latest experience in the corresponding episode
  size_t curId = expId;
  while (_terminalHistory[curId] == false) curId++;
  //printf("For experience %lu, the last experience in its episode is: %lu\n", expId, curId);

  // First, get the retrace value for the last experience (just the reward)
  double retraceValue = _rewardHistory[curId];

  // Now going backwards from the last, calculating the retrace value of each experience, one by one
  while (curId > expId)
  {
    // Decreasing index
    curId--;

    // Getting Q(s+1, a+1) for the selected experience
    double qNextState = stateActionValueFunction(_stateHistory[curId + 1], _actionHistory[curId + 1]);

    // Getting V(s+1) for the selected experience
    double vNextState = stateValueFunction(_stateHistory[curId + 1]);

    // Getting p(s,a) for selected experience, given the old policy
    double pOldExp = _probabilityDensityHistory[curId];

    // Getting p(s,a) for the best action, given the current policy
    double pCurExp = getStateActionProbabilityDensity(_stateHistory[curId], _actionHistory[curId]);

    // Now calculating importance weight, truncating it to avoid exploding values, and then multiplying it by lambda
    double importanceWeight = _importanceWeightLambda * std::min(_importanceWeightTruncation, (pCurExp / pOldExp));

    // printf("Importance Weight: %f\n", importanceWeight);

    retraceValue = _rewardHistory[curId] + _criticDiscountFactor * importanceWeight * (retraceValue - qNextState) + _criticDiscountFactor * vNextState;
  }

  //printf("Retrace Val: %f\n", retraceValue);

  // Returning the retrace value of the required experience
  return retraceValue;
}

std::vector<double> ACER::getTrainingAction(const std::vector<double> &state)
{
  // If we still do not have enough experiences to train the critic/policy, just return random action
  if (_stateHistory.size() < _replayMemoryStartSize) return getRandomAction(state);

  // Obtaining action from policy
  auto action = queryPolicy(state);

  // Checking for correctness of the action
  for (size_t i = 0; i < action.size(); i++)
  {
    if (std::isfinite(action[i]) == false)
      KORALI_LOG_ERROR(" + Action [%lu] is not finite (%f)\n", i, action[i]);
  }

  // Introducing random noise to the action
  for (size_t i = 0; i < _problem->_actionVectorIndexes.size(); i++)
  {
    size_t varIdx = _problem->_actionVectorIndexes[i];

    // Check whether the variable requires noise
    if (_k->_variables[varIdx]->_explorationNoiseEnabled == true)
    {
      double w = _k->_variables[varIdx]->_explorationNoiseDistribution->getRandomNumber();
      double noise = _k->_variables[varIdx]->_explorationNoiseTheta * _currentActionNoises[i] + w;
      action[i] += noise;
      //printf("Theta (%f) * Previous Noise: (%f) + W: (%f) = %f\n",  _k->_variables[varIdx]->_explorationNoiseTheta, _currentActionNoises[i], w, noise);
      _currentActionNoises[i] = noise;
    }
  }

  // Returning the action
  return action;
}

double ACER::stateActionValueFunction(const std::vector<double> &state, const std::vector<double> &action)
{
  // Storage to put together state and action
  std::vector<double> stateActionInput(_problem->_stateVectorSize + _problem->_actionVectorSize);

  // Forward propagating state/action through the critic
  for (size_t j = 0; j < state.size(); j++) stateActionInput[j] = state[j];
  for (size_t j = 0; j < action.size(); j++) stateActionInput[j + state.size()] = action[j];
  auto evaluation = _criticLearner->getEvaluation(stateActionInput);

  // Getting the value of V(Xt), i.e., Q(xt, best action)
  return evaluation[0];
}

void ACER::trainAgent()
{
 // Creating storage for state history indexes to choose from
 std::vector<size_t> stateHistoryIndexes(_stateHistory.size());
 for (size_t i = 0; i < _stateHistory.size(); i++) stateHistoryIndexes[i] = i;

 /***************************************************************************************
  * Updating Policy Network by performing a Gradient descent step with latest experiences
  ***************************************************************************************/

 // Initializing gradient for statistics
 for (size_t i = 0; i < _problem->_actionVectorSize; i++) avgGradients[i] = 0.0;

 for (size_t i = 0; i < _policyMiniBatchSize; i++)
 {
   // Selecting a uniformly random selected, yet not repeated experience
   size_t expId = stateHistoryIndexes[_stateHistory.size() - _policyMiniBatchSize + i];

   // Storage to put together state and action
   std::vector<double> stateActionInput(_problem->_stateVectorSize + _problem->_actionVectorSize);

   // Now calculating Gradient of q with respect to state+action for the critic NN
   for (size_t j = 0; j < _problem->_stateVectorSize; j++) stateActionInput[j] = _stateHistory[expId][j];
   for (size_t j = 0; j < _problem->_actionVectorSize; j++) stateActionInput[_problem->_stateVectorSize + j] = _actionHistory[expId][j];

   _criticLearner->getEvaluation(stateActionInput);
   auto qGradients = _criticLearner->getGradients({{-1.0}}); // Identity, to estimate the exact gradient dQ/dAS
   std::vector<double> aGradients = std::vector<double>(qGradients.begin() + _problem->_stateVectorSize, qGradients.end());

   // Keeping track of gradient averages for statistics
   for (size_t i = 0; i < _problem->_actionVectorSize; i++) avgGradients[i] += aGradients[i];

   for (size_t j = 0; j < _problem->_stateVectorSize; j++) _policyProblem->_inputs[i][j] = _stateHistory[expId][j];
   _policyProblem->_solution[i] = aGradients;
 }

 // Calculating gradient statistics
 for (size_t i = 0; i < _problem->_actionVectorSize; i++) avgGradients[i] /= _policyMiniBatchSize;

 // Running one generation of the optimization method on the actor NN with the given mini-batch
 _policyExperiment["Solver"]["Termination Criteria"]["Max Generations"] = _policyExperiment._currentGeneration + _policyOptimizationSteps;
 _policyLearner->initialize();
 korali::Engine engine;
 engine.resume(_policyExperiment);

 auto policyHypeparameters = _policyLearner->getHyperparameters();

 /***********************************************************************************
  * Updating Critic Network by performing a Stochastic Gradient Descent step
  **********************************************************************************/

 // Calculating cumulative Q*, for statistical purposes
 _cumulativeQStar = 0.0;

  for (size_t step = 0; step < _criticOptimizationSteps; step++)
  {
    // Returning hyperparameters to its pre-training value
    _criticLearner->setHyperparameters(_hyperparameters["Critic"]);

    // Shuffling indexes to choose the mini batch from
    std::shuffle(stateHistoryIndexes.begin(), stateHistoryIndexes.end(), *mt);

    // Randomly selecting experiences for the mini-batch and calculating their target Q
    for (size_t i = 0; i < _criticMiniBatchSize; i++)
    {
      // Selecting a uniformly random selected, yet not repeated experience
      size_t expId = stateHistoryIndexes[i];

      // Qnew = max_a(q) with s' fixed
      // Q* = r + y*Qnew -- If not terminal state
      // Q* = r -- If terminal state

      // Calculating target Q value (solution) for Qnew on selected batch
      double qStar = 0.0;

      // Reward is the first factor in the QLearning algorithm
      qStar = _rewardHistory[expId];

      // If state is not terminal (next state is filled) then add Qnew to the Q value.
      if (_terminalHistory[expId] == false) qStar += _criticDiscountFactor * stateActionValueFunction(_stateHistory[expId + 1], _actionHistory[expId + 1]);

      // Updating inputs to training learner
      for (size_t j = 0; j < _problem->_stateVectorSize; j++) _criticProblem->_inputs[i][j] = _stateHistory[expId][j];
      for (size_t j = 0; j < _problem->_actionVectorSize; j++) _criticProblem->_inputs[i][_problem->_stateVectorSize + j] = _actionHistory[expId][j];
      _criticProblem->_solution[i][0] = qStar;

      // Keeping statistics
      _cumulativeQStar += qStar;
    }

    // Running one generation of the optimization method with the given mini-batch
    _criticExperiment["Solver"]["Termination Criteria"]["Max Generations"] = _criticExperiment._currentGeneration + 1;
    _criticLearner->initialize();
    korali::Engine engine;
    engine.resume(_criticExperiment);

    // Increasing optimization step counter
    _optimizationStepCount++;
  }

  // Keeping statistics
  _averageQStar = (double)_cumulativeQStar / (double)(_criticOptimizationSteps * _criticMiniBatchSize);

 // If batch normalization is being used, we need to adjust mean and variances

  normalizeNeuralNetwork(_criticLearner->_trainingNeuralNetwork);

  /*********************************************************************
  * Updating hyperparameters and broadcasting them to the workers
  *********************************************************************/

  // Storing new Critic's hyperparameters
  _hyperparameters["Critic"] = _criticLearner->getHyperparameters();

  // Getting q training hyperparameters to broadcast to workers
  _hyperparameters["Policy"] = policyHypeparameters;
  _policyLearner->setHyperparameters(policyHypeparameters);
}

double ACER::stateValueFunction(const std::vector<double> &state)
{
  auto curPolicyAction = queryPolicy(state);

  double vValue = 0.0;

  for (size_t iter = 0; iter < _stateValueFunctionSamples; iter++)
  {
    // Creating action based on the one given by the policy.
    auto evalAction = curPolicyAction;

    // Storage for the total action probability
    double pAction = 1.0;

    for (size_t i = 0; i < evalAction.size(); i++)
    {
      // Getting noise from the given action variable
      size_t varIdx = _problem->_actionVectorIndexes[i];
      double noise = _k->_variables[varIdx]->_explorationNoiseDistribution->getRandomNumber();

      // Adding noise to the action to evaluate
      evalAction[i] += noise;

      // Calculating the probability density of having produced the noise
      double pNoise = _k->_variables[varIdx]->_explorationNoiseDistribution->getDensity(noise);

      // Factoring the noise probability into the action probability, assuming independence
      pAction *= pNoise;
    }

    // Evaluating Q(s,a) for the given action
    double qValue = stateActionValueFunction(state, evalAction);

    // Now calculating pAction*Q(s,action) and adding it to V(s,a)
    vValue += pAction * qValue;
  }

  // Now averaging the V(s) over all sampled actions
  vValue = vValue / _stateValueFunctionSamples;

  return vValue;
}

double ACER::getStateActionProbabilityDensity(const std::vector<double> &state, const std::vector<double> &action)
{
  // To calculate the probability density, we first subtract the taken action from the one that
  // the current policy would take. This will give us a value with zero mean, and with sigma
  // equivalent to the noise introduced.

  auto curPolicyAction = queryPolicy(state);

  double pDensity = 1.0;

  for (size_t i = 0; i < action.size(); i++)
  {
    // Getting the difference (noise) between used action and current policy action
    double noise = action[i] - curPolicyAction[i];

    // Getting the probability density of such noise for the current variable.
    size_t varIdx = _problem->_actionVectorIndexes[i];
    double pNoise = _k->_variables[varIdx]->_explorationNoiseDistribution->getDensity(noise);

    // Since we assume independent noise among variables, we can multiply them directly.
    pDensity = pDensity * pNoise;
  }

  return pDensity;
}

std::vector<double> ACER::queryPolicy(const std::vector<double> &state)
{
  return _policyLearner->getEvaluation({state});
}

void ACER::updateHyperparameters(const knlohmann::json &hyperparameters)
{
  _policyLearner->setHyperparameters(hyperparameters["Policy"].get<std::vector<double>>());

  // Re-initializing action noises to zero
  size_t actionCount = _problem->_actionVectorIndexes.size();
  _currentActionNoises.resize(actionCount);
  for (size_t i = 0; i < actionCount; i++) _currentActionNoises[i] = 0.0;
}

void ACER::printAgentInformation()
{
 _k->_logger->logInfo("Normal", "Critic Information:\n");

 if (_maxOptimizationSteps > 0)
   _k->_logger->logInfo("Normal", " + Optimization Step Count:         %lu/%lu\n", _optimizationStepCount, _maxOptimizationSteps);
 else
   _k->_logger->logInfo("Normal", " + Optimization Step Count:         %lu\n", _optimizationStepCount);

 _k->_logger->logInfo("Normal", " + Cumulative Expected Q-Value:     %f\n", _cumulativeQStar);
 _k->_logger->logInfo("Normal", " + Average Expected Q-Value:        %f\n", _averageQStar);

 _criticExperiment._logger->_verbosityLevel = _k->_logger->_verbosityLevel;
 _criticExperiment._solver->printGenerationAfter();
 _criticExperiment._logger->setVerbosityLevel("Silent");

 _k->_logger->logInfo("Normal", "Policy Information:\n");

  _k->_logger->logInfo("Normal", " + Average Action Gradients: [");

  // Printing gradient averages
  _k->_logger->logData("Normal", " %e", avgGradients[0]);
  for (size_t i = 1; i < _problem->_actionVectorSize; i++) _k->_logger->logData("Normal", ", %e", avgGradients[i]);
  _k->_logger->logData("Normal", " ]\n");
}

} // namespace agent

} // namespace solver

} // namespace korali
