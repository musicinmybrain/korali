#include "auxiliar/fs.hpp"
#include "engine.hpp"
#include "modules/solver/agent/agent.hpp"
#include "sample/sample.hpp"
#include <algorithm>
#include <chrono>

__startNamespace__;

void __className__::initialize()
{
  _variableCount = _k->_variables.size();

  // Getting problem pointer
  _problem = dynamic_cast<problem::ReinforcementLearning *>(_k->_problem);

  // Allocating and obtaining action bounds information
  _actionLowerBounds.resize(_problem->_actionVectorSize);
  _actionUpperBounds.resize(_problem->_actionVectorSize);

  for (size_t i = 0; i < _problem->_actionVectorSize; i++)
  {
    auto varIdx = _problem->_actionVectorIndexes[i];
    _actionLowerBounds[i] = _k->_variables[varIdx]->_lowerBound;
    _actionUpperBounds[i] = _k->_variables[varIdx]->_upperBound;

    if (_actionUpperBounds[i] - _actionLowerBounds[i] <= 0.0) KORALI_LOG_ERROR("Upper (%f) and Lower Bound (%f) of action variable %lu invalid.\n", _actionUpperBounds[i], _actionLowerBounds[i], i);
  }

  // Initializing selected policy
  initializeAgent();

  // Initializing random seed for the shuffle operation
  mt = new std::mt19937(rd());
  mt->seed(_k->_randomSeed++);

  //  Pre-allocating space for the experience replay memory
  _stateBuffer.resize(_experienceReplayMaximumSize);
  _featureBuffer.resize(_experienceReplayMaximumSize);
  _actionBuffer.resize(_experienceReplayMaximumSize);
  _retraceValueBuffer.resize(_experienceReplayMaximumSize);
  _rewardBuffer.resize(_experienceReplayMaximumSize);
  _rewardUpdateBuffer.resize(_experienceReplayMaximumSize);
  _environmentIdBuffer.resize(_experienceReplayMaximumSize);
  _stateValueBuffer.resize(_experienceReplayMaximumSize);
  _importanceWeightBuffer.resize(_experienceReplayMaximumSize);
  _truncatedImportanceWeightBuffer.resize(_experienceReplayMaximumSize);
  _truncatedStateValueBuffer.resize(_experienceReplayMaximumSize);
  _truncatedStateBuffer.resize(_experienceReplayMaximumSize);
  _terminationBuffer.resize(_experienceReplayMaximumSize);
  _expPolicyBuffer.resize(_experienceReplayMaximumSize);
  _curPolicyBuffer.resize(_experienceReplayMaximumSize);
  _isOnPolicyBuffer.resize(_experienceReplayMaximumSize);
  _episodePosBuffer.resize(_experienceReplayMaximumSize);
  _episodeIdBuffer.resize(_experienceReplayMaximumSize);

  // Pre-allocate space for policies
  _policyVector.resize(_experienceReplayMaximumSize);

  // Initialize background samples
  _backgroundTrajectoryCount = 0;
  _statisticLogPartitionFunction.resize(0);
  _statisticFusionLogPartitionFunction.resize(0);
  _statisticFeatureWeights.resize(0);
  _statisticCumulativeRewards.resize(0);

  //  Pre-allocating space for state time sequence
  _stateTimeSequence.resize(_timeSequenceLength);

  /*********************************************************************
   *   // If initial generation, set initial agent configuration
   *********************************************************************/

  if (_k->_currentGeneration == 0)
  {
    _currentEpisode = 0;
    _policyUpdateCount = 0;
    _rewardUpdateCount = 0;
    _currentSampleID = 0;
    _experienceCount = 0;

    // Initializing training statistics
    _trainingBestReward = -korali::Inf;
    _trainingBestEpisodeId = 0;
    _trainingAverageReward = 0.0f;

    // Initializing testing statistics
    _testingAverageReward = -korali::Inf;
    _testingBestReward = -korali::Inf;
    _testingWorstReward = -korali::Inf;
    _testingBestAverageReward = -korali::Inf;
    _testingBestEpisodeId = 0;

    // Initializing REFER information

    // If cutoff scale is not defined, use a heuristic value
    if (_experienceReplayOffPolicyCutoffScale < 0.0f)
      KORALI_LOG_ERROR("Experience Replay Cutoff Scale must be larger 0.0");

    _experienceReplayOffPolicyCount = 0;
    _experienceReplayOffPolicyRatio = 0.0f;
    _currentLearningRate = _learningRate;
    _experienceReplayOffPolicyCurrentCutoff = _experienceReplayOffPolicyCutoffScale;

    // State Rescaling information
    _stateRescalingMeans = std::vector<float>(_problem->_stateVectorSize, 0.0);
    _stateRescalingSigmas = std::vector<float>(_problem->_stateVectorSize, 1.0);

    // State Rescaling information
    _featureRescalingMeans = std::vector<float>(_problem->_featureVectorSize, 0.0);
    _featureRescalingSigmas = std::vector<float>(_problem->_featureVectorSize, 1.0);

    // Reward Rescaling information
    _rewardRescalingSigma = std::vector<float>(_problem->_environmentCount, 1.0f);
    _rewardRescalingSumSquaredRewards = std::vector<float>(_problem->_environmentCount, 0.0f);
    _experienceCountPerEnvironment.resize(_problem->_environmentCount, 0);

    // Getting agent's initial policy
    _trainingCurrentPolicy = getPolicy();
  }

  // Setting current agent's training state
  setPolicy(_trainingCurrentPolicy);

  // If this continues a previous training run, deserialize previous input experience replay
  if (_k->_currentGeneration > 0)
    if (_mode == "Training" || _trainingBestPolicy.empty())
      deserializeExperienceReplay();

  // Initializing session-wise profiling timers
  _sessionRunningTime = 0.0;
  _sessionSerializationTime = 0.0;
  _sessionWorkerComputationTime = 0.0;
  _sessionWorkerCommunicationTime = 0.0;
  _sessionPolicyEvaluationTime = 0.0;
  _sessionPolicyUpdateTime = 0.0;
  _sessionRewardUpdateTime = 0.0;
  _sessionStatUpdateTime = 0.0;
  _sessionWorkerAttendingTime = 0.0;
  _sessionTrajectoryLogProbabilityUpdateTime = 0.0;

  // Initializing session-specific counters
  _sessionExperienceCount = 0;
  _sessionEpisodeCount = 0;
  _sessionGeneration = 1;
  _sessionPolicyUpdateCount = 0;
  _sessionRewardUpdateCount = 0;

  // Calculating how many more experiences do we need in this session to reach the starting size
  _sessionExperiencesUntilStartSize = _stateBuffer.size() > _experienceReplayStartSize ? 0 : _experienceReplayStartSize - _stateBuffer.size();

  if (_mode == "Training")
  {
    // Creating storage for _workers and their status
    _workers.resize(_concurrentWorkers);
    _isWorkerRunning.resize(_concurrentWorkers, false);
  }

  if (_mode == "Testing")
  {
    // Fixing termination criteria for testing mode
    _maxGenerations = _k->_currentGeneration + 1;

    // Setting testing policy to best testing hyperparameters if not custom-set by the user
    if (_testingCurrentPolicy.empty())
    {
      if (_testingBestPolicy["Policy Hyperparameters"].empty() == false)
        _testingCurrentPolicy = _testingBestPolicy["Policy Hyperparameters"];
      else
        _testingCurrentPolicy = _trainingCurrentPolicy;
    }

    // Checking if there's testing samples defined
    if (_testingSampleIds.size() == 0)
      KORALI_LOG_ERROR("For testing, you need to indicate the sample ids to run in the ['Testing']['Sample Ids'] field.\n");

    // Prepare storage for rewards from tested samples
    _testingReward.resize(_testingSampleIds.size());
  }

  if (_problem->_numberObservedTrajectories < _demonstrationBatchSize) KORALI_LOG_ERROR("Demonstration Batch Size (%zu) must be smaller than total number of observed trajectories (%zu).\n", _demonstrationBatchSize, _problem->_numberObservedTrajectories);

  if (_backgroundSampleSize <= _backgroundBatchSize) KORALI_LOG_ERROR("Bachground Sample Size too small, must be greater than Background Batch Size");

  _backgroundTrajectoryStates.resize(_backgroundSampleSize);
  _backgroundTrajectoryActions.resize(_backgroundSampleSize);
  _backgroundTrajectoryFeatures.resize(_backgroundSampleSize);
  _backgroundPolicyHyperparameter.resize(_backgroundSampleSize);

  _rewardFunctionExperiment["Problem"]["Type"] = "Supervised Learning";
  _rewardFunctionExperiment["Problem"]["Max Timesteps"] = 1;
  _rewardFunctionExperiment["Problem"]["Inference Batch Size"] = 1;
  _rewardFunctionExperiment["Problem"]["Training Batch Size"] = _rewardFunctionBatchSize;
  _rewardFunctionExperiment["Problem"]["Input"]["Size"] = _problem->_featureVectorSize;
  _rewardFunctionExperiment["Problem"]["Solution"]["Size"] = 1;

  _rewardFunctionExperiment["Solver"]["Type"] = "DeepSupervisor";
  _rewardFunctionExperiment["Solver"]["L2 Regularization"]["Enabled"] = _rewardFunctionL2RegularizationEnabled;
  _rewardFunctionExperiment["Solver"]["L2 Regularization"]["Importance"] = _rewardFunctionL2RegularizationImportance;
  _rewardFunctionExperiment["Solver"]["Loss Function"] = "Direct Gradient";
  _rewardFunctionExperiment["Solver"]["Learning Rate"] = _rewardFunctionLearningRate;
  _rewardFunctionExperiment["Solver"]["Steps Per Generation"] = 1;
  _rewardFunctionExperiment["Solver"]["Neural Network"]["Engine"] = _neuralNetworkEngine;
  _rewardFunctionExperiment["Solver"]["Neural Network"]["Optimizer"] = _neuralNetworkOptimizer;
  _rewardFunctionExperiment["Solver"]["Neural Network"]["Hidden Layers"] = _rewardFunctionNeuralNetworkHiddenLayers;
  _rewardFunctionExperiment["Solver"]["Output Weights Scaling"] = 0.001;

  // No transformations for the state value output
  _rewardFunctionExperiment["Solver"]["Neural Network"]["Output Layer"]["Scale"][0] = 1.0f;
  _rewardFunctionExperiment["Solver"]["Neural Network"]["Output Layer"]["Shift"][0] = -0.5f;
  _rewardFunctionExperiment["Solver"]["Neural Network"]["Output Layer"]["Transformation Mask"][0] = "Sigmoid";

  // Running initialization to verify that the configuration is correct
  _rewardFunctionExperiment.initialize();
  _rewardFunctionProblem = dynamic_cast<problem::SupervisedLearning *>(_rewardFunctionExperiment._problem);
  _rewardFunctionLearner = dynamic_cast<solver::DeepSupervisor *>(_rewardFunctionExperiment._solver);

  // Init gradient
  _maxEntropyGradient.resize(_rewardFunctionLearner->_hyperparameters.size(), 0.0);
}

void __className__::runGeneration()
{
  if (_mode == "Training") trainingGeneration();
  if (_mode == "Testing") testingGeneration();
}

void __className__::trainingGeneration()
{
  auto beginTime = std::chrono::steady_clock::now(); // Profiling

  // Setting generation-specific timers
  _generationRunningTime = 0.0;
  _generationSerializationTime = 0.0;
  _generationWorkerComputationTime = 0.0;
  _generationWorkerCommunicationTime = 0.0;
  _generationPolicyEvaluationTime = 0.0;
  _generationPolicyUpdateTime = 0.0;
  _generationRewardUpdateTime = 0.0;
  _generationStatUpdateTime = 0.0;
  _generationWorkerAttendingTime = 0.0;
  _generationTrajectoryLogProbabilityUpdateTime = 0.0;

  // Running until all _workers have finished
  while (_sessionEpisodeCount < _episodesPerGeneration * _sessionGeneration)
  {
    // Launching (or re-launching) agents
    for (size_t workerId = 0; workerId < _concurrentWorkers; workerId++)
      if (_isWorkerRunning[workerId] == false)
      {
        _workers[workerId]["Sample Id"] = _currentSampleID++;
        _workers[workerId]["Module"] = "Problem";
        _workers[workerId]["Operation"] = "Run Training Episode";
        _workers[workerId]["Policy Hyperparameters"] = _trainingCurrentPolicy;
        _workers[workerId]["State Rescaling"]["Means"] = _stateRescalingMeans;
        _workers[workerId]["State Rescaling"]["Standard Deviations"] = _stateRescalingSigmas;
        _workers[workerId]["Feature Rescaling"]["Means"] = _featureRescalingMeans;
        _workers[workerId]["Feature Rescaling"]["Standard Deviations"] = _featureRescalingSigmas;

        KORALI_START(_workers[workerId]);
        _isWorkerRunning[workerId] = true;
      }

    // Listening to _workers for incoming experiences
    KORALI_LISTEN(_workers);

    // Attending to running agents, checking if any experience has been received
    for (size_t workerId = 0; workerId < _concurrentWorkers; workerId++)
      if (_isWorkerRunning[workerId] == true)
        attendWorker(workerId);

    // Perform optimization steps on the critic/policy, if reached the minimum replay memory size
    if (_experienceCount >= _experienceReplayStartSize)
    {
      // Update the reward function based on guided cost learning
      while (_sessionExperienceCount > (_experiencesBetweenRewardUpdates * _sessionRewardUpdateCount + _sessionExperiencesUntilStartSize))
      {
        auto beginTime = std::chrono::steady_clock::now(); // Profiling

        updateRewardFunction();

        auto endTime = std::chrono::steady_clock::now();                                                                  // Profiling
        _sessionRewardUpdateTime += std::chrono::duration_cast<std::chrono::nanoseconds>(endTime - beginTime).count();    // Profiling
        _generationRewardUpdateTime += std::chrono::duration_cast<std::chrono::nanoseconds>(endTime - beginTime).count(); // Profiling

        _rewardUpdateCount++;
        _sessionRewardUpdateCount++;
      }

      if (_experienceCount > _experiencesBetweenPartitionFunctionStatistics * _statisticLogPartitionFunction.size())
      {
        auto beginTime = std::chrono::steady_clock::now(); // Profiling

        //partitionFunctionStat();

        auto endTime = std::chrono::steady_clock::now();                                                                // Profiling
        _sessionStatUpdateTime += std::chrono::duration_cast<std::chrono::nanoseconds>(endTime - beginTime).count();    // Profiling
        _generationStatUpdateTime += std::chrono::duration_cast<std::chrono::nanoseconds>(endTime - beginTime).count(); // Profiling
      }

      // If we accumulated enough experiences, we rescale the states (once)
      if (_stateRescalingEnabled == true)
        if (_policyUpdateCount == 0)
          rescaleStates();

      // If we accumulated enough experiences, we rescale the states (once)
      if (_stateRescalingEnabled == true)
        if (_policyUpdateCount == 0)
          rescaleFeatures();

      // If we accumulated enough experiences between updates in this session, update now
      while (_sessionExperienceCount > (_experiencesBetweenPolicyUpdates * _sessionPolicyUpdateCount + _sessionExperiencesUntilStartSize))
      {
        auto beginTime = std::chrono::steady_clock::now(); // Profiling

        // Calling the algorithm specific policy training algorithm
        trainPolicy();

        auto endTime = std::chrono::steady_clock::now();                                                                  // Profiling
        _sessionPolicyUpdateTime += std::chrono::duration_cast<std::chrono::nanoseconds>(endTime - beginTime).count();    // Profiling
        _generationPolicyUpdateTime += std::chrono::duration_cast<std::chrono::nanoseconds>(endTime - beginTime).count(); // Profiling

        // Increasing policy update counters
        _policyUpdateCount++;
        _sessionPolicyUpdateCount++;

        // Updating REFER learning rate and beta parameters
        _currentLearningRate = _learningRate / (1.0f + _experienceReplayOffPolicyAnnealingRate * (float)_policyUpdateCount);
        if (_experienceReplayOffPolicyRatio > _experienceReplayOffPolicyTarget)
          _experienceReplayOffPolicyREFERBeta = (1.0f - _currentLearningRate) * _experienceReplayOffPolicyREFERBeta;
        else
          _experienceReplayOffPolicyREFERBeta = (1.0f - _currentLearningRate) * _experienceReplayOffPolicyREFERBeta + _currentLearningRate;
      }

      // Getting new policy hyperparameters (for agents to generate actions)
      _trainingCurrentPolicy = getPolicy();
    }
  }

  // Now serializing experience replay database
  if (_experienceReplaySerialize == true)
    if (_k->_fileOutputEnabled)
      if (_k->_fileOutputFrequency > 0)
        if (_k->_currentGeneration % _k->_fileOutputFrequency == 0)
          serializeExperienceReplay();

  // Measuring generation time
  auto endTime = std::chrono::steady_clock::now();                                                             // Profiling
  _sessionRunningTime += std::chrono::duration_cast<std::chrono::nanoseconds>(endTime - beginTime).count();    // Profiling
  _generationRunningTime += std::chrono::duration_cast<std::chrono::nanoseconds>(endTime - beginTime).count(); // Profiling

  /*********************************************************************
   * Updating statistics/bookkeeping
   *********************************************************************/

  // Updating average cumulative reward statistics
  _trainingAverageReward = 0.0f;
  ssize_t startEpisodeId = _trainingRewardHistory.size() - _trainingAverageDepth;
  ssize_t endEpisodeId = _trainingRewardHistory.size() - 1;
  if (startEpisodeId < 0) startEpisodeId = 0;
  for (ssize_t e = startEpisodeId; e <= endEpisodeId; e++)
    _trainingAverageReward += _trainingRewardHistory[e];
  _trainingAverageReward /= (float)(endEpisodeId - startEpisodeId + 1);

  // Increasing session's generation count
  _sessionGeneration++;
}

void __className__::testingGeneration()
{
  // Allocating testing agents
  std::vector<Sample> testingAgents(_testingSampleIds.size());

  // Launching  agents
  for (size_t workerId = 0; workerId < _testingSampleIds.size(); workerId++)
  {
    testingAgents[workerId]["Sample Id"] = _testingSampleIds[workerId];
    testingAgents[workerId]["Module"] = "Problem";
    testingAgents[workerId]["Operation"] = "Run Testing Episode";
    testingAgents[workerId]["Policy Hyperparameters"] = _testingCurrentPolicy;
    testingAgents[workerId]["State Rescaling"]["Means"] = _stateRescalingMeans;
    testingAgents[workerId]["State Rescaling"]["Standard Deviations"] = _stateRescalingSigmas;
    testingAgents[workerId]["Feature Rescaling"]["Means"] = _featureRescalingMeans;
    testingAgents[workerId]["Feature Rescaling"]["Standard Deviations"] = _featureRescalingSigmas;

    KORALI_START(testingAgents[workerId]);
  }

  KORALI_WAITALL(testingAgents);

  for (size_t workerId = 0; workerId < _testingSampleIds.size(); workerId++)
    _testingReward[workerId] = testingAgents[workerId]["Testing Reward"].get<float>();
}

void __className__::updateBackgroundBatch(const size_t replacementIdx)
{
  const auto startTime = std::chrono::steady_clock::now();

  // Initialize background batch
  if (_backgroundTrajectoryCount == 0)
  {
    _k->_logger->logInfo("Detailed", "Initializing background batch..\n");

    // Getting index of last experience
    size_t expId = _terminationBuffer.size() - 1;

    // Add trajectories from exploration phase to background batch
    for (size_t m = 0; m < _backgroundBatchSize; ++m)
    {
      const size_t episodeLength = _episodePosBuffer[expId];
      const size_t episodeStartIdx = expId - episodeLength;

      if (_terminationBuffer[expId] == e_nonTerminal)
        KORALI_LOG_ERROR("Experience %zu is not the start of a trajectory.", expId);
      if (episodeStartIdx == 0 && m < _backgroundBatchSize - 1)
        KORALI_LOG_ERROR("Increase exploration phase, not enough trajectories sampled (%zu/%zu) to fill a single back ground batch.", _backgroundTrajectoryCount, _backgroundBatchSize);

      // Allocate container for trajectory information
      _backgroundTrajectoryStates[_backgroundTrajectoryCount].resize(episodeLength);
      _backgroundTrajectoryActions[_backgroundTrajectoryCount].resize(episodeLength);
      _backgroundTrajectoryFeatures[_backgroundTrajectoryCount].resize(episodeLength);

      // Store background trajectory
      for (size_t i = 0; i < episodeLength; ++i)
      {
        _backgroundPolicyHyperparameter[_backgroundTrajectoryCount] = _policyVector[episodeStartIdx];
        _backgroundTrajectoryStates[_backgroundTrajectoryCount][i] = _stateBuffer[episodeStartIdx + i];
        _backgroundTrajectoryActions[_backgroundTrajectoryCount][i] = _actionBuffer[episodeStartIdx + i];
        _backgroundTrajectoryFeatures[_backgroundTrajectoryCount][i] = _featureBuffer[episodeStartIdx + i];
      }

      // Increase background sample counter
      _backgroundTrajectoryCount++;

      // Decrease counter to move to the next previous last experience of a trajectory
      expId = episodeStartIdx - 1;
    }

    if (_backgroundTrajectoryCount != _backgroundBatchSize)
      KORALI_LOG_ERROR("Error during background batch intialization or update. Size is %zu but should be %zu.", _backgroundTrajectoryCount, _backgroundBatchSize);

    // Evaluate all trajectory logprobabilities, at the beginning all trajectories sampled from same arbitrary policy
    _backgroundTrajectoryLogProbabilities.resize(_backgroundSampleSize);
    for (size_t i = 0; i < _backgroundTrajectoryCount; ++i)
    {
      _backgroundTrajectoryLogProbabilities[i].resize(_backgroundSampleSize + 1);
      const float trajectoryLogP = evaluateTrajectoryLogProbability(_backgroundTrajectoryStates[i], _backgroundTrajectoryActions[i], _backgroundPolicyHyperparameter[i]);
      if (_useFusionDistribution)
      {
        // Insert probability from quadratic policy first
        _backgroundTrajectoryLogProbabilities[i][0] = evaluateTrajectoryLogProbabilityWithObservedPolicy(_backgroundTrajectoryStates[i], _backgroundTrajectoryActions[i]);
        for (size_t j = 0; j < _backgroundTrajectoryCount; ++j)
          _backgroundTrajectoryLogProbabilities[i][j + 1] = trajectoryLogP;
      }
      else
      {
        _backgroundTrajectoryLogProbabilities[i][i + 1] = trajectoryLogP;
      }
    }
  }
  // Insert latest trajectory to background batch until full
  else if (_backgroundTrajectoryCount < _backgroundSampleSize)
  {
    _k->_logger->logInfo("Detailed", "Updating background batch (%zu trajectories stored)..\n", _backgroundTrajectoryCount);
    const size_t expId = _terminationBuffer.size() - 1;
    const size_t episodeLength = _episodePosBuffer[expId];
    const size_t episodeStartIdx = expId - episodeLength;

    // Increase background sample counter
    if (_terminationBuffer[episodeStartIdx - 1] == e_nonTerminal)
      KORALI_LOG_ERROR("Experience %zu is not the start of a trajectory.", episodeStartIdx - 1);

    // Allocate container for trajectory information
    _backgroundTrajectoryStates[_backgroundTrajectoryCount].resize(episodeLength);
    _backgroundTrajectoryActions[_backgroundTrajectoryCount].resize(episodeLength);
    _backgroundTrajectoryFeatures[_backgroundTrajectoryCount].resize(episodeLength);

    // Store background trajectory
    for (size_t i = 0; i < episodeLength; ++i)
    {
      _backgroundPolicyHyperparameter[_backgroundTrajectoryCount] = _policyVector[episodeStartIdx];
      _backgroundTrajectoryStates[_backgroundTrajectoryCount][i] = _stateBuffer[episodeStartIdx + i];
      _backgroundTrajectoryActions[_backgroundTrajectoryCount][i] = _actionBuffer[episodeStartIdx + i];
      _backgroundTrajectoryFeatures[_backgroundTrajectoryCount][i] = _featureBuffer[episodeStartIdx + i];
    }

    // Increase background sample counter
    _backgroundTrajectoryCount++;

    std::vector<float> logProbabilitiesNewTrajectory(_backgroundSampleSize + 1);
    if (_useFusionDistribution)
    {
      // For all previous background trajectories evaluate log probability with newest policy
      for (size_t i = 0; i < _backgroundTrajectoryCount - 1; ++i)
        _backgroundTrajectoryLogProbabilities[i][_backgroundTrajectoryCount] = evaluateTrajectoryLogProbability(_backgroundTrajectoryStates[i], _backgroundTrajectoryActions[i], _backgroundPolicyHyperparameter[_backgroundTrajectoryCount - 1]);

      // For newest policy evaluate trajectory log probability with observed policy, all previous policies, and the current one
      logProbabilitiesNewTrajectory[0] = evaluateTrajectoryLogProbabilityWithObservedPolicy(_backgroundTrajectoryStates[_backgroundTrajectoryCount - 1], _backgroundTrajectoryActions[_backgroundTrajectoryCount - 1]);
      for (size_t i = 0; i < _backgroundTrajectoryCount; ++i)
        logProbabilitiesNewTrajectory[i + 1] = evaluateTrajectoryLogProbability(_backgroundTrajectoryStates[_backgroundTrajectoryCount - 1], _backgroundTrajectoryActions[_backgroundTrajectoryCount - 1], _backgroundPolicyHyperparameter[i]);
    }
    else
    {
      // Evaluate trajectory log probability with own policy
      logProbabilitiesNewTrajectory[_backgroundTrajectoryCount] = evaluateTrajectoryLogProbability(_backgroundTrajectoryStates[_backgroundTrajectoryCount - 1], _backgroundTrajectoryActions[_backgroundTrajectoryCount - 1], _backgroundPolicyHyperparameter[_backgroundTrajectoryCount - 1]);
    }

    _backgroundTrajectoryLogProbabilities[_backgroundTrajectoryCount - 1] = logProbabilitiesNewTrajectory;
  }
  // replace background trajectories
  else if (replacementIdx < _backgroundSampleSize)
  {
    _k->_logger->logInfo("Detailed", "Replacing background trajectories (%zu trajectories stored)..\n", _backgroundTrajectoryCount);
    const size_t expId = _terminationBuffer.size() - 1;
    const size_t episodeLength = _episodePosBuffer[expId];
    const size_t episodeStartIdx = expId - episodeLength;

    // Safety checks
    if (_terminationBuffer[episodeStartIdx - 1] == e_nonTerminal)
      KORALI_LOG_ERROR("Experience %zu is not the start of a trajectory.", episodeStartIdx - 1);

      // Replace background trajectory
#pragma omp parallel for
    for (size_t i = 0; i < episodeLength; ++i)
    {
      _backgroundTrajectoryStates[replacementIdx][i] = _stateBuffer[episodeStartIdx + i];
      _backgroundTrajectoryActions[replacementIdx][i] = _actionBuffer[episodeStartIdx + i];
      _backgroundTrajectoryFeatures[replacementIdx][i] = _featureBuffer[episodeStartIdx + i];
    }

    _backgroundPolicyHyperparameter[replacementIdx] = _policyVector[episodeStartIdx];
    _backgroundTrajectoryCount++;

    if (_useFusionDistribution)
    {
      // For all previous background trajectories evaluate log probability with newest policy
      for (size_t i = 0; i < _backgroundSampleSize; ++i)
        if (i != replacementIdx)
          _backgroundTrajectoryLogProbabilities[i][replacementIdx + 1] = evaluateTrajectoryLogProbability(_backgroundTrajectoryStates[i], _backgroundTrajectoryActions[i], _backgroundPolicyHyperparameter[replacementIdx]);

      // For newest policy evaluate trajectory log probability with observed policy, all previous policies, and the current one
      _backgroundTrajectoryLogProbabilities[replacementIdx][0] = evaluateTrajectoryLogProbabilityWithObservedPolicy(_backgroundTrajectoryStates[replacementIdx], _backgroundTrajectoryActions[replacementIdx]);
      for (size_t i = 0; i < _backgroundSampleSize; ++i)
        _backgroundTrajectoryLogProbabilities[replacementIdx][i + 1] = evaluateTrajectoryLogProbability(_backgroundTrajectoryStates[replacementIdx], _backgroundTrajectoryActions[replacementIdx], _backgroundPolicyHyperparameter[i]);
    }
    else
    {
      _backgroundTrajectoryLogProbabilities[replacementIdx][replacementIdx + 1] = evaluateTrajectoryLogProbability(_backgroundTrajectoryStates[replacementIdx], _backgroundTrajectoryActions[replacementIdx], _backgroundPolicyHyperparameter[replacementIdx]);
    }
  }
  else
  {
    _k->_logger->logInfo("Detailed", "Skipping background trajectory update.\n");
  }

  const auto endTime = std::chrono::steady_clock::now();
  const double duration = std::chrono::duration_cast<std::chrono::nanoseconds>(endTime - startTime).count();
  _sessionTrajectoryLogProbabilityUpdateTime += std::chrono::duration_cast<std::chrono::nanoseconds>(endTime - startTime).count();
  _generationTrajectoryLogProbabilityUpdateTime += std::chrono::duration_cast<std::chrono::nanoseconds>(endTime - startTime).count();
  _k->_logger->logInfo("Detailed", "Done (%3.3fs)!\n", duration / 1.0e9);
}

void __className__::updateDemonstrationBatch(const size_t replacementIdx)
{
  const auto startTime = std::chrono::steady_clock::now();

  if (_demonstrationTrajectoryLogProbabilities.size() == 0)
  {
    _k->_logger->logInfo("Detailed", "Initializing demonstration batch..\n");
    _demonstrationTrajectoryLogProbabilities.resize(_problem->_numberObservedTrajectories);
    for (size_t m = 0; m < _problem->_numberObservedTrajectories; ++m)
    {
      _demonstrationTrajectoryLogProbabilities[m].resize(_backgroundSampleSize + 1);
      _demonstrationTrajectoryLogProbabilities[m][0] = evaluateTrajectoryLogProbabilityWithObservedPolicy(_problem->_observationsStates[m], _problem->_observationsActions[m]);

      if (_useFusionDistribution)
        for (size_t i = 0; i < _backgroundTrajectoryCount; ++i)
        {
          const float trajectoryLogP = evaluateTrajectoryLogProbability(_problem->_observationsStates[m], _problem->_observationsActions[m], _backgroundPolicyHyperparameter[i]);
          _demonstrationTrajectoryLogProbabilities[m][i + 1] = trajectoryLogP;
        }
    }
  }
  else if (_backgroundTrajectoryCount < _backgroundSampleSize && _useFusionDistribution)
  // Evaluate demonstrations with latest policy
  {
    _k->_logger->logInfo("Detailed", "Updating demonstration batch with new trajectory..\n");
    for (size_t i = 0; i < _problem->_numberObservedTrajectories; ++i)
    {
      _demonstrationTrajectoryLogProbabilities[i][_backgroundTrajectoryCount] = evaluateTrajectoryLogProbability(_problem->_observationsStates[i], _problem->_observationsActions[i], _backgroundPolicyHyperparameter[_backgroundTrajectoryCount - 1]);
    }
  }
  else if (replacementIdx < _backgroundSampleSize && _useFusionDistribution)
  // Evaluate demonstrations with latest policy
  {
    _k->_logger->logInfo("Detailed", "Updating demonstration batch with replaced trajectory..\n");
    for (size_t i = 0; i < _problem->_numberObservedTrajectories; ++i)
    {
      _demonstrationTrajectoryLogProbabilities[i][replacementIdx + 1] = evaluateTrajectoryLogProbability(_problem->_observationsStates[i], _problem->_observationsActions[i], _backgroundPolicyHyperparameter[replacementIdx]);
    }
  }
  else
  {
    _k->_logger->logInfo("Detailed", "Skipping demonstration batch update.\n");
  }

  const auto endTime = std::chrono::steady_clock::now();
  const double duration = std::chrono::duration_cast<std::chrono::nanoseconds>(endTime - startTime).count();
  _sessionTrajectoryLogProbabilityUpdateTime += duration;
  _generationTrajectoryLogProbabilityUpdateTime += duration;
  _k->_logger->logInfo("Detailed", "Done (%3.3fs)!\n", duration / 1.0e9);
}

void __className__::partitionFunctionStat()
{
  _k->_logger->logInfo("Detailed", "Running partition function summary\n");
  std::vector<std::vector<float>> stats;
  std::vector<float> logpf(_backgroundTrajectoryCount);
  std::vector<float> fusionLogpf(_backgroundTrajectoryCount);

  // Calculate cumulative rewards for background batch
  std::vector<float> cumulativeRewardsBackgroundBatch(_backgroundTrajectoryCount, 0.0);
  for (size_t m = 0; m < _backgroundTrajectoryCount; ++m)
  {
    const size_t backgroundTrajectoryLength = _backgroundTrajectoryFeatures[m].size();

    size_t t = 0;
    float cumReward = 0.;
    while (t < backgroundTrajectoryLength)
    {
      std::vector<std::vector<std::vector<float>>> featuresBatch(_rewardFunctionBatchSize, std::vector<std::vector<float>>(1, std::vector<float>(_problem->_featureVectorSize, 0.)));

      const size_t batchSize = std::min(_rewardFunctionBatchSize, backgroundTrajectoryLength - t);
      for (size_t b = 0; b < batchSize; ++b)
      {
        featuresBatch[b] = {_backgroundTrajectoryFeatures[m][b]};
      }

      const auto rewards = calculateReward(featuresBatch);

      // Accumulate cumulative reward
      for (size_t b = 0; b < batchSize; ++b)
      {
        cumReward += rewards[b];
      }

      t += batchSize;
    }

    cumulativeRewardsBackgroundBatch[m] = cumReward;
  }

  const unsigned seed = std::chrono::system_clock::now().time_since_epoch().count();
  std::minstd_rand0 generator(seed);

  // Randomize demonstration batch
  std::vector<size_t> randomDemonstrationIndexes(_problem->_numberObservedTrajectories);
  std::iota(std::begin(randomDemonstrationIndexes), std::end(randomDemonstrationIndexes), 0);
  //std::shuffle(randomDemonstrationIndexes.begin(), randomDemonstrationIndexes.end(), generator); // NO RANDOMIZATION

  // Calculate cumulative rewards for demonstration batch
  std::vector<float> cumulativeRewardsDemonstrationBatch(_demonstrationBatchSize, 0.0);
  for (size_t n = 0; n < _demonstrationBatchSize; ++n)
  {
    const size_t obsIdx = randomDemonstrationIndexes[n];
    const size_t observationTrajectoryLength = _problem->_observationsFeatures[obsIdx].size();

    size_t t = 0;
    float cumReward = 0.;
    while (t < observationTrajectoryLength)
    {
      std::vector<std::vector<std::vector<float>>> featuresBatch(_rewardFunctionBatchSize, std::vector<std::vector<float>>(1, std::vector<float>(_problem->_featureVectorSize, 0.)));

      const size_t batchSize = std::min(_rewardFunctionBatchSize, observationTrajectoryLength - t);
      for (size_t b = 0; b < batchSize; ++b)
      {
        featuresBatch[b] = {_problem->_observationsFeatures[obsIdx][b]};
      }

      const auto rewards = calculateReward(featuresBatch);

      // Accumulate cumulative reward
      for (size_t b = 0; b < batchSize; ++b)
      {
        cumReward += rewards[b];
      }
      t += batchSize;
    }

    cumulativeRewardsDemonstrationBatch[n] = cumReward;
  }

#pragma omp parallel for schedule(dynamic)
  for (size_t batchSize = 1; batchSize <= _backgroundTrajectoryCount; ++batchSize)
  {
    // Get background trajectory log probabilities
    std::vector<std::vector<float>> backgroundTrajectoryLogProbabilities(batchSize, std::vector<float>(batchSize + 1));
    for (size_t m = 0; m < batchSize; ++m)
      for (size_t i = 0; i < batchSize + 1; ++i)
      {
        backgroundTrajectoryLogProbabilities[m][i] = _backgroundTrajectoryLogProbabilities[m][i];
      }

    // Get demonstration trajectory log probabilities
    std::vector<std::vector<float>> demoTrajectoryLogProbabilities(_demonstrationBatchSize, std::vector<float>(batchSize + 1));
    for (size_t n = 0; n < _demonstrationBatchSize; ++n)
    {
      size_t obsIdx = randomDemonstrationIndexes[n];
      for (size_t i = 0; i < batchSize + 1; ++i)
      {
        demoTrajectoryLogProbabilities[n][i] = _demonstrationTrajectoryLogProbabilities[obsIdx][i];
      }
    }

    // Calculate importance weights background batch
    std::vector<float> backgroundBatchLogImportanceWeights(batchSize);
    std::vector<float> fusionBackgroundBatchLogImportanceWeights(batchSize);
    for (size_t m = 0; m < batchSize; ++m)
    {
      backgroundBatchLogImportanceWeights[m] = -backgroundTrajectoryLogProbabilities[m][m + 1];
      // Calculate fusion importance weight (1/K sum_k q_k(T))^-1
      fusionBackgroundBatchLogImportanceWeights[m] = std::log((float)batchSize + 1) - logSumExp(backgroundTrajectoryLogProbabilities[m]);
    }

    // Calculate importance weights demonstration batch
    std::vector<float> demoBatchLogImportanceWeights(_demonstrationBatchSize);
    std::vector<float> fusionDemoBatchLogImportanceWeights(_demonstrationBatchSize);
    for (size_t n = 0; n < _demonstrationBatchSize; ++n)
    {
      demoBatchLogImportanceWeights[n] = -demoTrajectoryLogProbabilities[n][0];
      // Calculate fusion importance weight (1/K sum_k q_k(T))^-1
      fusionDemoBatchLogImportanceWeights[n] = std::log((float)batchSize + 1) - logSumExp(demoTrajectoryLogProbabilities[n]);
    }

    // Preparation for calculation of log partition function with log-sum-exp trick
    float maxExp = -Inf;
    for (size_t m = 0; m < batchSize; ++m)
    {
      float exp = backgroundBatchLogImportanceWeights[m] + cumulativeRewardsBackgroundBatch[m];
      if (exp > maxExp) maxExp = exp;
    }

    for (size_t n = 0; n < _demonstrationBatchSize; ++n)
    {
      float exp = demoBatchLogImportanceWeights[n] + cumulativeRewardsDemonstrationBatch[n];
      if (exp > maxExp) maxExp = exp;
    }

    // Preparation for calculation of fusion log partition function with log-sum-exp trick
    float fusionMaxExp = -Inf;
    for (size_t m = 0; m < batchSize; ++m)
    {
      float exp = fusionBackgroundBatchLogImportanceWeights[m] + cumulativeRewardsBackgroundBatch[m];
      if (exp > fusionMaxExp) fusionMaxExp = exp;
    }

    for (size_t n = 0; n < _demonstrationBatchSize; ++n)
    {
      float exp = fusionDemoBatchLogImportanceWeights[n] + cumulativeRewardsDemonstrationBatch[n];
      if (exp > fusionMaxExp) fusionMaxExp = exp;
    }

    float sumExpNoMax = 0.0;
    for (size_t m = 0; m < batchSize; ++m)
    {
      float exp = backgroundBatchLogImportanceWeights[m] + cumulativeRewardsBackgroundBatch[m];
      sumExpNoMax += std::exp(exp - maxExp);
    }
    for (size_t n = 0; n < _demonstrationBatchSize; ++n)
    {
      float exp = demoBatchLogImportanceWeights[n] + cumulativeRewardsDemonstrationBatch[n];
      sumExpNoMax += std::exp(exp - maxExp);
    }

    // Calculate log of partition function
    float logPartitionFunction = std::log(sumExpNoMax) + maxExp - std::log((float)batchSize + (float)_demonstrationBatchSize);
    logpf[batchSize - 1] = logPartitionFunction;

    float fusionSumExpNoMax = 0.0;

    for (size_t m = 0; m < batchSize; ++m)
    {
      float exp = fusionBackgroundBatchLogImportanceWeights[m] + cumulativeRewardsBackgroundBatch[m];
      fusionSumExpNoMax += std::exp(exp - fusionMaxExp);
    }
    for (size_t n = 0; n < _demonstrationBatchSize; ++n)
    {
      float exp = fusionDemoBatchLogImportanceWeights[n] + cumulativeRewardsDemonstrationBatch[n];
      fusionSumExpNoMax += std::exp(exp - fusionMaxExp);
    }

    // Calculate log of fusion partition function
    float fusionLogPartitionFunction = std::log(fusionSumExpNoMax) + fusionMaxExp - std::log((float)batchSize + (float)_demonstrationBatchSize);
    fusionLogpf[batchSize - 1] = fusionLogPartitionFunction;
  }

  _statisticCumulativeRewards.push_back(cumulativeRewardsBackgroundBatch);
  _statisticLogPartitionFunction.push_back(logpf);
  _statisticFusionLogPartitionFunction.push_back(fusionLogpf);

  _k->_logger->logInfo("Detailed", "DONE\n");
}

std::vector<float> __className__::calculateReward(const std::vector<std::vector<std::vector<float>>> &featuresBatch) const
{
  auto output = _rewardFunctionLearner->getEvaluation(featuresBatch);
  std::vector<float> rewards(output.size());
  for (size_t b = 0; b < output.size(); ++b)
  {
    rewards[b] = output[b][0];
    if (std::isfinite(rewards[b]) == false) KORALI_LOG_ERROR("Calculate reward returned nonfinite number!.");
  }
  return rewards;
}

void __className__::updateRewardFunction()
{
  const size_t stepsPerUpdate = 1;
  for (size_t stepNum = 0; stepNum < stepsPerUpdate; ++stepNum)
  {
    const unsigned seed = std::chrono::system_clock::now().time_since_epoch().count();
    std::minstd_rand0 generator(seed);

    // Randomize demonstration batch
    std::vector<size_t> randomDemonstrationIndexes(_problem->_numberObservedTrajectories);
    std::iota(std::begin(randomDemonstrationIndexes), std::end(randomDemonstrationIndexes), 0);
    std::shuffle(randomDemonstrationIndexes.begin(), randomDemonstrationIndexes.end(), generator);

    // Randomize background batch
    const size_t maxRand = std::min(_backgroundTrajectoryCount, _backgroundSampleSize);
    std::vector<size_t> randomBackgroundIndexes(maxRand);
    std::shuffle(randomBackgroundIndexes.begin(), randomBackgroundIndexes.end(), generator);

    // Calculate cumulative rewards for demonstration batch and extract trajectory probabilities
    std::vector<float> cumulativeRewardsDemonstrationBatch(_demonstrationBatchSize, 0.0);
    std::vector<std::vector<float>> gradientCumulativeRewardFunctionDemonstrationBatch(_demonstrationBatchSize, std::vector<float>(_rewardFunctionLearner->_hyperparameters.size(), 0.));
    std::vector<std::vector<float>> demonstrationTrajectoryLogProbabilities(_demonstrationBatchSize, std::vector<float>(_backgroundBatchSize + 1));
    for (size_t n = 0; n < _demonstrationBatchSize; ++n)
    {
      const size_t demIdx = randomDemonstrationIndexes[n];
      const size_t observedTrajectoryLength = _problem->_observationsFeatures[demIdx].size();

      size_t t = 0;
      float cumReward = 0.0;

      while (t < observedTrajectoryLength)
      {
        std::vector<std::vector<std::vector<float>>> featuresBatch(_rewardFunctionBatchSize, std::vector<std::vector<float>>(1, std::vector<float>(_problem->_featureVectorSize, 0.)));
        std::vector<std::vector<float>> backwardMultiplier(_rewardFunctionBatchSize, std::vector<float>(1, 0.));

        const size_t batchSize = std::min(_rewardFunctionBatchSize, observedTrajectoryLength - t);
#pragma omp parallel for
        for (size_t b = 0; b < batchSize; ++b)
        {
          featuresBatch[b] = {_problem->_observationsFeatures[demIdx][b]};
          backwardMultiplier[b] = std::vector<float>(1, 1.);
        }

        const auto rewards = calculateReward(featuresBatch);

        // Accumulate cumulative reward
#pragma omp parallel for reduction(+ \
                                   : cumReward)
        for (size_t b = 0; b < batchSize; ++b)
        {
          cumReward += rewards[b];
        }

        // Backward dummy
        _rewardFunctionLearner->_neuralNetwork->backward(backwardMultiplier);

        // Accumulate gradients from demonstrations
        const auto rewardGradients = _rewardFunctionLearner->_neuralNetwork->getHyperparameterGradients(_rewardFunctionBatchSize);

#pragma omp parallel for
        for (size_t i = 0; i < rewardGradients.size(); ++i)
        {
          gradientCumulativeRewardFunctionDemonstrationBatch[n][i] += rewardGradients[i];
        }

        t += batchSize;
      }

      cumulativeRewardsDemonstrationBatch[n] = cumReward;

      demonstrationTrajectoryLogProbabilities[n][0] = _demonstrationTrajectoryLogProbabilities[demIdx][0];
      for (size_t i = 0; i < _backgroundBatchSize; ++i)
      {
        const size_t bckIdx = randomBackgroundIndexes[i];
        demonstrationTrajectoryLogProbabilities[n][i + 1] = _demonstrationTrajectoryLogProbabilities[demIdx][bckIdx + 1];
        if (std::isfinite(demonstrationTrajectoryLogProbabilities[n][i + 1]) == false) KORALI_LOG_ERROR("non finite");
      }
    }

    // Calculate cumulative rewards for randomized background batch and extract trajectory probabilities
    std::vector<float> cumulativeRewardsBackgroundBatch(_backgroundBatchSize, 0.0);
    std::vector<std::vector<float>> gradientCumulativeRewardFunctionBackgroundBatch(_backgroundBatchSize, std::vector<float>(_rewardFunctionLearner->_hyperparameters.size(), 0.));
    std::vector<std::vector<float>> backgroundTrajectoryLogProbabilities(_backgroundBatchSize, std::vector<float>(_backgroundBatchSize + 1));

    for (size_t m = 0; m < _backgroundBatchSize; ++m)
    {
      const size_t bckIdx = randomBackgroundIndexes[m];
      const size_t backgroundTrajectoryLength = _backgroundTrajectoryFeatures[bckIdx].size();

      size_t t = 0;
      float cumReward = 0.0;

      while (t < backgroundTrajectoryLength)
      {
        std::vector<std::vector<std::vector<float>>> featuresBatch(_rewardFunctionBatchSize, std::vector<std::vector<float>>(1, std::vector<float>(_problem->_featureVectorSize, 0.)));
        std::vector<std::vector<float>> backwardMultiplier(_rewardFunctionBatchSize, std::vector<float>(1, 0.));

        const size_t batchSize = std::min(_rewardFunctionBatchSize, backgroundTrajectoryLength - t);
#pragma omp parallel for
        for (size_t b = 0; b < batchSize; ++b)
        {
          featuresBatch[b] = {_backgroundTrajectoryFeatures[bckIdx][b]};
          backwardMultiplier[b] = std::vector<float>(1, 1.);
        }

        const auto rewards = calculateReward(featuresBatch);

        // Accumulate cumulative reward
#pragma omp parallel for reduction(+ \
                                   : cumReward)
        for (size_t b = 0; b < batchSize; ++b)
        {
          cumReward += rewards[b];
        }

        // Backward dummy
        _rewardFunctionLearner->_neuralNetwork->backward(backwardMultiplier);

        // Accumulate gradients from demonstrations
        const auto rewardGradients = _rewardFunctionLearner->_neuralNetwork->getHyperparameterGradients(_rewardFunctionBatchSize);

#pragma omp parallel for
        for (size_t i = 0; i < rewardGradients.size(); ++i)
        {
          gradientCumulativeRewardFunctionBackgroundBatch[m][i] += rewardGradients[i];
        }

        t += batchSize;
      }

      cumulativeRewardsBackgroundBatch[m] = cumReward;

      backgroundTrajectoryLogProbabilities[m][0] = _backgroundTrajectoryLogProbabilities[bckIdx][0]; // probability from linear policy
      for (size_t i = 0; i < _backgroundBatchSize; ++i)
      {
        const size_t bckIdx2 = randomBackgroundIndexes[i];
        backgroundTrajectoryLogProbabilities[m][i + 1] = _backgroundTrajectoryLogProbabilities[bckIdx][bckIdx2 + 1];
        if (std::isfinite(backgroundTrajectoryLogProbabilities[m][i + 1]) == false) KORALI_LOG_ERROR("non finite");
      }
    }

    // Calculate importance weights of background batch
    std::vector<float> backgroundBatchLogImportanceWeights(_backgroundBatchSize);
#pragma omp parallel for
    for (size_t m = 0; m < _backgroundBatchSize; ++m)
    {
      // Caclculate importance weight (1/K sum_k q_k(T))^-1
      if (_useFusionDistribution)
        backgroundBatchLogImportanceWeights[m] = std::log((float)_backgroundBatchSize + 1.) - logSumExp(backgroundTrajectoryLogProbabilities[m]);
      else
        backgroundBatchLogImportanceWeights[m] = -backgroundTrajectoryLogProbabilities[m][m + 1];

      //printf("BbIw %f cr %f (tot %f)\n", backgroundBatchLogImportanceWeights[m], cumulativeRewardsBackgroundBatch[m], backgroundBatchLogImportanceWeights[m] + cumulativeRewardsBackgroundBatch[m]);
    }

    // Calculate importance weights of demonstration batch
    std::vector<float> demonstrationBatchLogImportanceWeights(_demonstrationBatchSize);
#pragma omp parallel for
    for (size_t n = 0; n < _demonstrationBatchSize; ++n)
    {
      // Caclculate importance weight (1/K sum_k q_k(T))^-1
      if (_useFusionDistribution)
        demonstrationBatchLogImportanceWeights[n] = std::log((float)_backgroundBatchSize + 1.) - logSumExp(demonstrationTrajectoryLogProbabilities[n]);
      else
        demonstrationBatchLogImportanceWeights[n] = -demonstrationTrajectoryLogProbabilities[n][0];

      //printf("DbIw %f cr %f (tot %f)\n", demonstrationBatchLogImportanceWeights[n], cumulativeRewardsDemonstrationBatch[n], demonstrationBatchLogImportanceWeights[n] + cumulativeRewardsDemonstrationBatch[n]);
    }

    // Preparation for calculation of log partition function with log-sum-exp trick
    float maxExp = -Inf;
    float maxSquaredExp = -Inf;
#pragma omp parallel for reduction(max \
                                   : maxExp, maxSquaredExp)
    for (size_t m = 0; m < _backgroundBatchSize; ++m)
    {
      const float exp = backgroundBatchLogImportanceWeights[m] + cumulativeRewardsBackgroundBatch[m];
      if (exp > maxExp) maxExp = exp;
      if (2. * exp > maxSquaredExp) maxSquaredExp = 2. * exp;
    }

#pragma omp parallel for reduction(max \
                                   : maxExp, maxSquaredExp)
    for (size_t n = 0; n < _demonstrationBatchSize; ++n)
    {
      const float exp = demonstrationBatchLogImportanceWeights[n] + cumulativeRewardsDemonstrationBatch[n];
      if (exp > maxExp) maxExp = exp;
      if (2. * exp > maxSquaredExp) maxSquaredExp = 2. * exp;
    }

    float sumExpNoMax = 0.0;
    float sumSquaredExpNoMax = 0.0;

#pragma omp parallel for reduction(+ \
                                   : sumExpNoMax, sumSquaredExpNoMax)
    for (size_t m = 0; m < _backgroundBatchSize; ++m)
    {
      const float exp = backgroundBatchLogImportanceWeights[m] + cumulativeRewardsBackgroundBatch[m];
      sumExpNoMax += std::exp(exp - maxExp);
      sumSquaredExpNoMax += std::exp(2. * exp - maxSquaredExp);
    }

#pragma omp parallel for reduction(+ \
                                   : sumExpNoMax, sumSquaredExpNoMax)
    for (size_t n = 0; n < _demonstrationBatchSize; ++n)
    {
      const float exp = demonstrationBatchLogImportanceWeights[n] + cumulativeRewardsDemonstrationBatch[n];
      sumExpNoMax += std::exp(exp - maxExp);
      sumSquaredExpNoMax += std::exp(2. * exp - maxSquaredExp);
    }

    // Calculate log of partition function
    const float totalBatchSize = _backgroundBatchSize + _demonstrationBatchSize;
    _logPartitionFunction = std::log(sumExpNoMax) + maxExp - std::log(totalBatchSize);

    // Reset gradient
    std::fill(_maxEntropyGradient.begin(), _maxEntropyGradient.end(), 0.);

    // Calculate gradient of loglikelihood (contribution from partition function & background batch)
    const float invTotalBatchSize = 1. / totalBatchSize;
    for (size_t m = 0; m < _backgroundBatchSize; ++m)
    {
      const float mult = std::exp(backgroundBatchLogImportanceWeights[m] + cumulativeRewardsBackgroundBatch[m] - _logPartitionFunction) * invTotalBatchSize;
#pragma omp parallel for
      for (size_t k = 0; k < _maxEntropyGradient.size(); ++k)
      {
        _maxEntropyGradient[k] -= mult * gradientCumulativeRewardFunctionBackgroundBatch[m][k];
        //printf("grad bb %f %f\n", gradientCumulativeRewardFunctionBackgroundBatch[m][k], _maxEntropyGradient[k]);
      }
    }

    const float invDemoBatchSize = 1. / _demonstrationBatchSize;
    // Calculate gradient of loglikelihood wrt. feature weights (contribution from partition function, demonstration return & demonstration batch)
    for (size_t n = 0; n < _demonstrationBatchSize; ++n)
    {
      const float mult = std::exp(demonstrationBatchLogImportanceWeights[n] + cumulativeRewardsDemonstrationBatch[n] - _logPartitionFunction) * invTotalBatchSize;
#pragma omp parallel for
      for (size_t k = 0; k < _maxEntropyGradient.size(); ++k)
      {
        // Contribution from partition function
        _maxEntropyGradient[k] -= mult * gradientCumulativeRewardFunctionDemonstrationBatch[n][k];
        //printf("grad db %f %f\n", gradientCumulativeRewardFunctionDemonstrationBatch[n][k], _maxEntropyGradient[k]);

        // Contribution from demonstration return
        _maxEntropyGradient[k] += invDemoBatchSize * gradientCumulativeRewardFunctionDemonstrationBatch[n][k];
        if (std::isfinite(_maxEntropyGradient[k]) == false) KORALI_LOG_ERROR("Reward gradient not finite!");
      }
    }

    // Passing hyperparameter gradients through an ADAM update
    _rewardFunctionLearner->_optimizer->processResult(0.0f, _maxEntropyGradient);

    // Getting new set of hyperparameters from Adam
    _rewardFunctionLearner->_neuralNetwork->setHyperparameters(_rewardFunctionLearner->_optimizer->_currentValue);
  }
}

void __className__::rescaleStates()
{
  // Calculation of state moments
  std::vector<float> sumStates(_problem->_stateVectorSize, 0.0);
  std::vector<float> squaredSumStates(_problem->_stateVectorSize, 0.0);

  for (size_t i = 0; i < _stateBuffer.size(); ++i)
    for (size_t d = 0; d < _problem->_stateVectorSize; ++d)
    {
      sumStates[d] += _stateBuffer[i][d];
      squaredSumStates[d] += _stateBuffer[i][d] * _stateBuffer[i][d];
    }

  _k->_logger->logInfo("Detailed", " + Using State Normalization N(Mean, Sigma):\n");

  for (size_t d = 0; d < _problem->_stateVectorSize; ++d)
  {
    _stateRescalingMeans[d] = sumStates[d] / (float)_stateBuffer.size();
    if (std::isfinite(_stateRescalingMeans[d]) == false) KORALI_LOG_ERROR("State mean not finite. Cannot shift states.");

    _stateRescalingSigmas[d] = std::sqrt(squaredSumStates[d] / (float)_stateBuffer.size() - _stateRescalingMeans[d] * _stateRescalingMeans[d]);
    if (std::isfinite(_stateRescalingSigmas[d]) == false) KORALI_LOG_ERROR("State sdev not finite. Cannot scale states.");
    if (_stateRescalingSigmas[d] <= 1e-9) _stateRescalingSigmas[d] = 1.0f;

    _k->_logger->logInfo("Detailed", " + State [%zu]: N(%f, %f)\n", d, _stateRescalingMeans[d], _stateRescalingSigmas[d]);
  }

  // Actual rescaling of initial states
  for (size_t i = 0; i < _stateBuffer.size(); ++i)
    for (size_t d = 0; d < _problem->_stateVectorSize; ++d)
      _stateBuffer[i][d] = (_stateBuffer[i][d] - _stateRescalingMeans[d]) / _stateRescalingSigmas[d];
}

void __className__::rescaleFeatures()
{
  // Calculation of state moments
  std::vector<float> sumFeatures(_problem->_featureVectorSize, 0.0);
  std::vector<float> squaredSumFeatures(_problem->_featureVectorSize, 0.0);

  for (size_t i = 0; i < _featureBuffer.size(); ++i)
    for (size_t d = 0; d < _problem->_featureVectorSize; ++d)
    {
      sumFeatures[d] += _featureBuffer[i][d];
      squaredSumFeatures[d] += _featureBuffer[i][d] * _featureBuffer[i][d];
    }

  _k->_logger->logInfo("Detailed", " + Using State Normalization N(Mean, Sigma):\n");

  for (size_t d = 0; d < _problem->_featureVectorSize; ++d)
  {
    _featureRescalingMeans[d] = sumFeatures[d] / (float)_featureBuffer.size();
    if (std::isfinite(_featureRescalingMeans[d]) == false) KORALI_LOG_ERROR("Feature mean not finite. Cannot shift features.");

    _featureRescalingSigmas[d] = std::sqrt(squaredSumFeatures[d] / (float)_featureBuffer.size() - _featureRescalingMeans[d] * _featureRescalingMeans[d]);
    if (std::isfinite(_featureRescalingSigmas[d]) == false) KORALI_LOG_ERROR("Feature sdev not finite. Cannot scale features.");

    _k->_logger->logInfo("Detailed", " + Feature [%zu]: N(%f, %f)\n", d, _featureRescalingMeans[d], _featureRescalingSigmas[d]);
  }

  // Actual rescaling of initial features
  for (size_t i = 0; i < _featureBuffer.size(); ++i)
    for (size_t d = 0; d < _problem->_featureVectorSize; ++d)
      _featureBuffer[i][d] = (_featureBuffer[i][d] - _featureRescalingMeans[d]) / _featureRescalingSigmas[d];
}

void __className__::attendWorker(size_t workerId)
{
  auto beginTime = std::chrono::steady_clock::now(); // Profiling

  // Storage for the incoming message
  knlohmann::json message;

  // Retrieving the experience, if any has arrived for the current agent.
  if (_workers[workerId].retrievePendingMessage(message))
  {
    // If agent requested new policy, send the new hyperparameters
    if (message["Action"] == "Request New Policy")
      KORALI_SEND_MSG_TO_SAMPLE(_workers[workerId], _trainingCurrentPolicy);

    // Process episode(s) incoming from the agent(s)
    if (message["Action"] == "Send Episodes")
    {
      // Process every episode received and its experiences (add them to replay memory)
      for (size_t i = 0; i < _problem->_agentsPerEnvironment; i++)
      {
        processEpisode(message["Episodes"][i]);
      }

      // Waiting for the agent to come back with all the information
      KORALI_WAIT(_workers[workerId]);

      // Storing bookkeeping information
      for (size_t i = 0; i < _problem->_agentsPerEnvironment; i++)
      {
        float cumulativeReward = _workers[workerId]["Training Rewards"][i].get<float>();
        _trainingRewardHistory.push_back(cumulativeReward);
        _trainingEnvironmentIdHistory.push_back(message["Episodes"][i]["Environment Id"].get<size_t>());
        _trainingExperienceHistory.push_back(message["Episodes"][i]["Experiences"].size());
        _trainingLastReward = cumulativeReward;
        if (cumulativeReward > _trainingBestReward)
        {
          _trainingBestReward = cumulativeReward;
          _trainingBestEpisodeId = _workers[workerId]["Sample Id"].get<size_t>();
          _trainingBestPolicy["Policy Hyperparameters"] = _workers[workerId]["Policy Hyperparameters"];
        }
      }

      // If the policy has exceeded the threshold during training, we gather its statistics
      if (_workers[workerId]["Tested Policy"] == true)
      {
        _testingCandidateCount++;
        _testingBestReward = _workers[workerId]["Best Testing Reward"].get<float>();
        _testingWorstReward = _workers[workerId]["Worst Testing Reward"].get<float>();
        _testingAverageReward = _workers[workerId]["Average Testing Reward"].get<float>();
        _testingAverageRewardHistory.push_back(_testingAverageReward);

        // If the average testing reward is better than the previous best, replace it
        // and store hyperparameters as best so far.
        if (_testingAverageReward > _testingBestAverageReward)
        {
          _testingBestAverageReward = _testingAverageReward;
          _testingBestEpisodeId = _currentEpisode;
          _testingBestPolicy["Policy Hyperparameters"] = _workers[workerId]["Policy Hyperparameters"];
        }
      }

      // Update background and demonstration batch after initial RM is full and then every 10 episodes
      if (_experienceCount >= _experienceReplayStartSize && ((_experienceCount - _experienceReplayStartSize) / _experiencesBetweenRewardUpdates >= _backgroundTrajectoryCount))
      {
        // Sample trajectory to replace
        const float u = _uniformGenerator->getRandomNumber();
        const size_t bckIdx = std::floor(u * (float)(_rewardUpdateCount + 1)); // TODO: fix statistic
        updateBackgroundBatch(bckIdx);
        updateDemonstrationBatch(bckIdx);
      }

      // Obtaining profiling information
      _sessionWorkerComputationTime += _workers[workerId]["Computation Time"].get<double>();
      _sessionWorkerCommunicationTime += _workers[workerId]["Communication Time"].get<double>();
      _sessionPolicyEvaluationTime += _workers[workerId]["Policy Evaluation Time"].get<double>();
      _generationWorkerComputationTime += _workers[workerId]["Computation Time"].get<double>();
      _generationWorkerCommunicationTime += _workers[workerId]["Communication Time"].get<double>();
      _generationPolicyEvaluationTime += _workers[workerId]["Policy Evaluation Time"].get<double>();

      // Set agent as finished
      _isWorkerRunning[workerId] = false;
    }
  }

  auto endTime = std::chrono::steady_clock::now();                                                                     // Profiling
  _sessionWorkerAttendingTime += std::chrono::duration_cast<std::chrono::nanoseconds>(endTime - beginTime).count();    // Profiling
  _generationWorkerAttendingTime += std::chrono::duration_cast<std::chrono::nanoseconds>(endTime - beginTime).count(); // Profiling
}

void __className__::processEpisode(knlohmann::json &episode)
{
  /*********************************************************************
   * Adding episode's experiences into the replay memory
   *********************************************************************/

  // Getting this episode's Id from the global counter
  size_t episodeId = _currentEpisode;

  // Getting experience count from the episode
  size_t curExperienceCount = episode["Experiences"].size();

  // Getting environment id
  auto environmentId = episode["Environment Id"].get<size_t>();

  // Cumulative feature reward
  float cumFeatureReward = 0;

  for (size_t expId = 0; expId < curExperienceCount; expId++)
  {
    // Getting state
    _stateBuffer.add(episode["Experiences"][expId]["State"].get<std::vector<float>>());

    // Getting action
    const auto action = episode["Experiences"][expId]["Action"].get<std::vector<float>>();
    _actionBuffer.add(action);

    // Getting features
    _featureBuffer.add(episode["Experiences"][expId]["Features"].get<std::vector<float>>());

    // Getting policy
    _policyVector.add(episode["Policy Hyperparameters"]["Policy"].get<std::vector<float>>());

    // Getting reward (TODO: batch forwarding)
    const float reward = calculateReward({{episode["Experiences"][expId]["Features"].get<std::vector<float>>()}})[0];

    // Accumulate feature reward
    cumFeatureReward += reward;

    // When adding a new experience, we need to keep per-environemnt rescaling sums updated
    // Adding the squared reward for the new experiences on its corresponding environment Id
    _rewardRescalingSumSquaredRewards[environmentId] += reward * reward;

    // Keeping the count for the environment id
    _experienceCountPerEnvironment[environmentId]++;

    // If experience replay is full and we are evicting an old experience, then subtract its contribution to its corresponding environment id
    if (_rewardBuffer.size() == _experienceReplayMaximumSize)
    {
      const size_t evictedExperienceEnvironmentId = _environmentIdBuffer[0];
      const float evictedExperienceReward = _rewardBuffer[0];

      _rewardRescalingSumSquaredRewards[evictedExperienceEnvironmentId] -= evictedExperienceReward * evictedExperienceReward;

      // Keeping the (decreasing) count for the environment id
      _experienceCountPerEnvironment[evictedExperienceEnvironmentId]--;
    }

    // Storing in the experience replay the environment id for the new experience
    _environmentIdBuffer.add(environmentId);

    // Storing in the experience replay the reward of the new experience
    _rewardBuffer.add(reward);
    _rewardUpdateBuffer.add(_rewardUpdateCount);

    // Checking experience termination status and truncated state
    termination_t termination;
    std::vector<float> truncatedState;

    if (episode["Experiences"][expId]["Termination"] == "Non Terminal") termination = e_nonTerminal;
    if (episode["Experiences"][expId]["Termination"] == "Terminal") termination = e_terminal;
    if (episode["Experiences"][expId]["Termination"] == "Truncated")
    {
      termination = e_truncated;
      truncatedState = episode["Experiences"][expId]["Truncated State"].get<std::vector<float>>();
    }

    _terminationBuffer.add(termination);
    _truncatedStateBuffer.add(truncatedState);

    // Getting policy information and state value
    policy_t expPolicy;
    float stateValue;

    if (isDefined(episode["Experiences"][expId], "Policy", "State Value"))
    {
      expPolicy.stateValue = episode["Experiences"][expId]["Policy"]["State Value"].get<float>();
      stateValue = episode["Experiences"][expId]["Policy"]["State Value"].get<float>();
    }
    else
    {
      KORALI_LOG_ERROR("Policy has not produced state value for the current experience.\n");
    }

    if (isDefined(episode["Experiences"][expId], "Policy", "Distribution Parameters"))
      expPolicy.distributionParameters = episode["Experiences"][expId]["Policy"]["Distribution Parameters"].get<std::vector<float>>();

    if (isDefined(episode["Experiences"][expId], "Policy", "Action Probabilities"))
      expPolicy.actionProbabilities = episode["Experiences"][expId]["Policy"]["Action Probabilities"].get<std::vector<float>>();
    if (isDefined(episode["Experiences"][expId], "Policy", "Action Index"))
      expPolicy.actionIndex = episode["Experiences"][expId]["Policy"]["Action Index"].get<size_t>();

    if (isDefined(episode["Experiences"][expId], "Policy", "Unbounded Action"))
      expPolicy.unboundedAction = episode["Experiences"][expId]["Policy"]["Unbounded Action"].get<std::vector<float>>();

    // Storing policy information
    _expPolicyBuffer.add(expPolicy);
    _curPolicyBuffer.add(expPolicy);
    _stateValueBuffer.add(stateValue);

    // Storing Episode information
    _episodeIdBuffer.add(episodeId);
    _episodePosBuffer.add(expId);

    // Adding placeholder for retrace value
    _retraceValueBuffer.add(0.0f);

    // If there's an outgoing experience and it's off policy, subtract the off policy counter
    if (_isOnPolicyBuffer.size() == _experienceReplayMaximumSize)
      if (_isOnPolicyBuffer[0] == false)
        _experienceReplayOffPolicyCount--;

    // Adding new experience's on policiness (by default is true when adding it to the ER)
    _isOnPolicyBuffer.add(true);

    // Updating experience's importance weight. Initially assumed to be 1.0 because its freshly produced
    _importanceWeightBuffer.add(1.0f);
    _truncatedImportanceWeightBuffer.add(1.0f);
  }

  _trainingFeatureRewardHistory.push_back(cumFeatureReward);

  /*********************************************************************
   * Computing initial retrace value for the newly added experiences
   *********************************************************************/

  // Storage for the retrace value
  float retV = 0.0f;

  // Getting position of the final experience of the episode in the replay memory
  ssize_t endId = (ssize_t)_stateBuffer.size() - 1;

  // Getting the starting ID of the initial experience of the episode in the replay memory
  ssize_t startId = endId - (ssize_t)curExperienceCount + 1;

  // If it was a truncated episode, add the value function for the terminal state to retV
  if (_terminationBuffer[endId] == e_truncated)
  {
    // Get state sequence, appending the truncated state to it and removing first time element
    auto expTruncatedStateSequence = getTruncatedStateSequence(endId);

    // Calculating the state value function of the truncated state
    auto truncatedPolicy = runPolicy({expTruncatedStateSequence})[0];
    float truncatedV = truncatedPolicy.stateValue;

    // Sanity checks for truncated state value
    if (std::isfinite(truncatedV) == false)
      KORALI_LOG_ERROR("Calculated state value for truncated state returned an invalid value: %f\n", truncatedV);

    // Adding truncated state value to the retrace value
    retV += truncatedV;
  }

  // Now going backwards, setting the retrace value of every experience
  for (ssize_t expId = endId; expId >= startId; expId--)
  {
    // Calculating retrace value with the discount factor. Importance weight is 1.0f because the policy is current.
    retV = _discountFactor * retV + _rewardBuffer[expId];

    // Setting initial retrace value in the experience's cache
    _retraceValueBuffer[expId] = retV;
  }

  if (_rewardRescalingEnabled)
  {
    // get environment Id vector
    // finalize computation of standard deviation for reward rescaling
    KORALI_LOG_ERROR("IRL does not allow reward rescaling");
    for (size_t i = 0; i < _problem->_environmentCount; ++i)
      _rewardRescalingSigma[i] = std::sqrt(_rewardRescalingSumSquaredRewards[i] / ((float)_experienceCountPerEnvironment[i] + 1e-9)) + 1e-9;
  }

  // Increasing episode counters
  _sessionEpisodeCount++;
  _currentEpisode++;

  // Increasing total experience counters
  _experienceCount += curExperienceCount;
  _sessionExperienceCount += curExperienceCount;
}

std::vector<size_t> __className__::generateMiniBatch(size_t miniBatchSize)
{
  // Allocating storage for mini batch experiecne indexes
  std::vector<size_t> miniBatch(miniBatchSize);

  for (size_t i = 0; i < miniBatchSize; i++)
  {
    // Producing random (uniform) number for the selection of the experience
    float x = _uniformGenerator->getRandomNumber();

    // Selecting experience
    size_t expId = std::floor(x * (float)(_stateBuffer.size() - 1));

    // Setting experience
    miniBatch[i] = expId;
  }

  // Sorting minibatch -- this helps with locality and also
  // to quickly detect duplicates when updating metadata
  std::sort(miniBatch.begin(), miniBatch.end());

  // Returning generated minibatch
  return miniBatch;
}

void __className__::updateExperienceMetadata(const std::vector<size_t> &miniBatch, const std::vector<policy_t> &policyData)
{
  const size_t miniBatchSize = miniBatch.size();

  // Creating a selection of unique experiences from the mini batch
  // Important: this assumes the minibatch ids are sorted.
  std::vector<size_t> updateBatch;
  updateBatch.push_back(0);
  for (size_t b = 1; b < miniBatchSize; ++b)
  {
    if (miniBatch[b] != miniBatch[b - 1]) updateBatch.push_back(b);
  }

  // Calculate offpolicy count difference in minibatch
  int offPolicyCountDelta = 0;

#pragma omp parallel for reduction(+ \
                                   : offPolicyCountDelta)
  for (size_t i = 0; i < updateBatch.size(); i++)
  {
    const auto batchId = updateBatch[i];
    const auto expId = miniBatch[batchId];

    // Get state, action, mean, Sigma for this experience
    const auto &expAction = _actionBuffer[expId];
    const auto &expPolicy = _expPolicyBuffer[expId];
    const auto &curPolicy = policyData[batchId];

    // Grabbing state value from the latest policy
    const auto stateValue = curPolicy.stateValue;

    // Sanity checks for state value
    if (std::isfinite(stateValue) == false)
      KORALI_LOG_ERROR("Calculated state value returned an invalid value: %f\n", stateValue);

    // Compute importance weight
    const float importanceWeight = calculateImportanceWeight(expAction, curPolicy, expPolicy);
    const float truncatedImportanceWeight = std::min(_importanceWeightTruncationLevel, importanceWeight);

    // Sanity checks for state value
    if (std::isfinite(importanceWeight) == false)
      KORALI_LOG_ERROR("Calculated value of importanceWeight returned an invalid value: %f\n", importanceWeight);

    // Checking if experience is still on policy
    bool isOnPolicy = (importanceWeight > (1.0f / _experienceReplayOffPolicyCurrentCutoff)) && (importanceWeight < _experienceReplayOffPolicyCurrentCutoff);

    // Updating off policy count if a change is detected
    if (_isOnPolicyBuffer[expId] == true && isOnPolicy == false)
      offPolicyCountDelta++;

    if (_isOnPolicyBuffer[expId] == false && isOnPolicy == true)
      offPolicyCountDelta--;

    // Store computed information for use in replay memory.
    _curPolicyBuffer[expId] = curPolicy;
    _stateValueBuffer[expId] = stateValue;
    _truncatedStateValueBuffer[expId] = 0.0f;
    _importanceWeightBuffer[expId] = importanceWeight;
    _isOnPolicyBuffer[expId] = isOnPolicy;
    _truncatedImportanceWeightBuffer[expId] = truncatedImportanceWeight;
  }

  // Calculating updated truncated policy state values
  for (size_t i = 0; i < updateBatch.size(); i++)
  {
    auto batchId = updateBatch[i];
    auto expId = miniBatch[batchId];
    if (_terminationBuffer[expId] == e_truncated)
    {
      auto truncatedState = getTruncatedStateSequence(expId);
      auto truncatedPolicy = runPolicy({getTruncatedStateSequence(expId)})[0];
      _truncatedStateValueBuffer[expId] = truncatedPolicy.stateValue;
    }
  }

  // Updating the off policy count and ratio
  _experienceReplayOffPolicyCount += offPolicyCountDelta;
  _experienceReplayOffPolicyRatio = (float)_experienceReplayOffPolicyCount / (float)_isOnPolicyBuffer.size();

  // Updating the off policy cutoff
  _experienceReplayOffPolicyCurrentCutoff = _experienceReplayOffPolicyCutoffScale / (1.0f + _experienceReplayOffPolicyAnnealingRate * (float)_policyUpdateCount);

  // Now filtering experiences from the same episode
  std::vector<size_t> retraceMiniBatch;

  // Adding last experience from the sorted minibatch
  retraceMiniBatch.push_back(miniBatch[miniBatchSize - 1]);

  // Adding experiences so long as they do not repeat episodes
  for (ssize_t i = miniBatchSize - 2; i >= 0; i--)
  {
    const size_t currExpId = miniBatch[i];
    const size_t nextExpId = miniBatch[i + 1];
    const size_t curEpisode = _episodeIdBuffer[currExpId];
    const size_t nextEpisode = _episodeIdBuffer[nextExpId];
    if (curEpisode != nextEpisode) retraceMiniBatch.push_back(currExpId);
  }

  size_t t = 0;
  std::vector<ssize_t> featureMiniBatch(_rewardFunctionBatchSize);
  std::vector<std::vector<std::vector<float>>> featureBatch(_rewardFunctionBatchSize, std::vector<std::vector<float>>(1, std::vector<float>(_problem->_featureVectorSize)));

  // Update rewards backward
  for (size_t i = 0; i < retraceMiniBatch.size(); i++)
  {
    // Finding the earliest experience corresponding to the same episode as this experience
    const ssize_t endId = retraceMiniBatch[i];

    // If the starting experience has already been discarded, take the earliest one that still remains
    const ssize_t startId = (ssize_t)_episodePosBuffer[endId] < endId ? endId - (ssize_t)_episodePosBuffer[endId] : 0;

    // Now iterating backwards to find the beginning
    for (ssize_t curId = endId; curId >= startId; curId--)
    {
      // Update reward if old
      if (_rewardUpdateBuffer[curId] < _rewardUpdateCount)
      {
        // Add features and experience id
        featureMiniBatch[t] = curId;
        featureBatch[t++] = {_featureBuffer[curId]};
        if (t == _rewardFunctionBatchSize)
        {
          // Feature batch is full, forward features
          const auto rewards = calculateReward(featureBatch);

          // Update rewards
          for (size_t b = 0; b < _rewardFunctionBatchSize; ++b)
          {
            const size_t expId = featureMiniBatch[b];
            _rewardBuffer[expId] = rewards[b];
            _rewardUpdateBuffer[expId] = _rewardUpdateCount;
          }

          // Reset count
          t = 0;
        }
      }
    }
  }

  // Update the rest
  if (t > 0)
  {
    const auto rewards = calculateReward(featureBatch);
    for (size_t b = 0; b < t; ++b)
    {
      const ssize_t expId = featureMiniBatch[b];
      _rewardBuffer[expId] = rewards[b];
      _rewardUpdateBuffer[expId] = _rewardUpdateCount;
    }
  }

// Calculating retrace value for the oldest experiences of unique episodes
#pragma omp parallel for schedule(guided, 1)
  for (size_t i = 0; i < retraceMiniBatch.size(); i++)
  {
    // Finding the earliest experience corresponding to the same episode as this experience
    const ssize_t endId = retraceMiniBatch[i];

    // If the starting experience has already been discarded, take the earliest one that still remains
    const ssize_t startId = (ssize_t)_episodePosBuffer[endId] < endId ? endId - (ssize_t)_episodePosBuffer[endId] : 0;

    // Storage for the retrace value
    float retV = 0.0f;

    // If it was a truncated episode, add the value function for the terminal state to retV
    if (_terminationBuffer[endId] == e_truncated)
      retV = _truncatedStateValueBuffer[endId];

    if (_terminationBuffer[endId] == e_nonTerminal)
      retV = _retraceValueBuffer[endId + 1];

    // Now iterating backwards to calculate the rest of vTbc
    for (ssize_t curId = endId; curId >= startId; curId--)
    {
      // Getting current reward, action, and state
      const float curReward = _rewardBuffer[curId];

      // Calculating state value function
      const float curV = _stateValueBuffer[curId];

      // Truncate importance weight
      const float truncatedImportanceWeight = _truncatedImportanceWeightBuffer[curId];

      // Calculating retrace value
      retV = curV + truncatedImportanceWeight * (curReward + _discountFactor * retV - curV);

      // Storing retrace value into the experience's cache
      _retraceValueBuffer[curId] = retV;
    }
  }
}

size_t __className__::getTimeSequenceStartExpId(size_t expId)
{
  size_t startId = expId;

  // Adding (tmax-1) time sequences to the given experience
  for (size_t t = 0; t < _timeSequenceLength - 1; t++)
  {
    // If we reached the start of the ER, this is the starting episode in the sequence
    if (startId == 0) break;

    // Now going back one experience
    startId--;

    // If we reached the end of the previous episode, then add one (this covers the case where the provided experience is also terminal) and break.
    if (_terminationBuffer[startId] != e_nonTerminal)
    {
      startId++;
      break;
    }
  }

  return startId;
}

void __className__::resetTimeSequence()
{
  _stateTimeSequence.clear();
}

std::vector<std::vector<std::vector<float>>> __className__::getMiniBatchStateSequence(const std::vector<size_t> &miniBatch, const bool includeAction)
{
  // Getting mini batch size
  const size_t miniBatchSize = miniBatch.size();

  // Allocating state sequence vector
  std::vector<std::vector<std::vector<float>>> stateSequence(miniBatchSize);

  // Calculating size of state vector
  const size_t stateSize = includeAction ? _problem->_stateVectorSize + _problem->_actionVectorSize : _problem->_stateVectorSize;

#pragma omp parallel for
  for (size_t b = 0; b < miniBatch.size(); b++)
  {
    // Getting current expId
    const size_t expId = miniBatch[b];

    // Getting starting expId
    const size_t startId = getTimeSequenceStartExpId(expId);

    // Calculating time sequence length
    const size_t T = expId - startId + 1;

    // Resizing state sequence vector to the correct time sequence length
    stateSequence[b].resize(T);

    // Now adding states (and actions, if required)
    for (size_t t = 0; t < T; t++)
    {
      size_t curId = startId + t;
      stateSequence[b][t].reserve(stateSize);
      stateSequence[b][t].insert(stateSequence[b][t].begin(), _stateBuffer[curId].begin(), _stateBuffer[curId].end());
      if (includeAction) stateSequence[b][t].insert(stateSequence[b][t].begin(), _actionBuffer[curId].begin(), _actionBuffer[curId].end());
    }
  }

  return stateSequence;
}

std::vector<std::vector<std::vector<float>>> __className__::getMiniBatchFeatureSequence(const std::vector<size_t> &miniBatch)
{
  // Allocating feature sequence vector
  std::vector<std::vector<std::vector<float>>> featureSequence(_rewardFunctionBatchSize, std::vector<std::vector<float>>(1, std::vector<float>(_problem->_featureVectorSize)));

#pragma omp parallel for
  for (size_t b = 0; b < miniBatch.size(); b++)
  {
    // Getting current expId
    const size_t expId = miniBatch[b];

    // Resizing state sequence vector to the correct time sequence length
    featureSequence[b] = {_featureBuffer[expId]};
  }

  return featureSequence;
}

std::vector<std::vector<float>> __className__::getTruncatedStateSequence(size_t expId)
{
  // Getting starting expId
  size_t startId = getTimeSequenceStartExpId(expId);

  // Creating storage for the time sequence
  std::vector<std::vector<float>> timeSequence;

  // Now adding states, except for the initial one
  for (size_t e = startId + 1; e <= expId; e++)
    timeSequence.push_back(_stateBuffer[e]);

  // Lastly, adding truncated state
  timeSequence.push_back(_truncatedStateBuffer[expId]);

  return timeSequence;
}

void __className__::finalize()
{
  if (_mode != "Training") return;

  if (_experienceReplaySerialize == true)
    if (_k->_fileOutputEnabled)
      serializeExperienceReplay();

  //partitionFunctionStat();

  _k->_logger->logInfo("Normal", "Waiting for pending agents to finish...\n");

  // Waiting for pending agents to finish
  bool agentsRemain = true;
  do
  {
    agentsRemain = false;
    for (size_t workerId = 0; workerId < _concurrentWorkers; workerId++)
      if (_isWorkerRunning[workerId] == true)
      {
        attendWorker(workerId);
        agentsRemain = true;
      }

    if (agentsRemain) KORALI_LISTEN(_workers);
  } while (agentsRemain == true);
}

void __className__::serializeExperienceReplay()
{
  _k->_logger->logInfo("Detailed", "Serializing Training State...\n");
  auto beginTime = std::chrono::steady_clock::now(); // Profiling

  // Creating JSON storage variable
  knlohmann::json stateJson;

  // Serializing agent's database into the JSON storage
  for (size_t i = 0; i < _stateBuffer.size(); i++)
  {
    stateJson["Experience Replay"][i]["Episode Id"] = _episodeIdBuffer[i];
    stateJson["Experience Replay"][i]["Episode Pos"] = _episodePosBuffer[i];
    stateJson["Experience Replay"][i]["State"] = _stateBuffer[i];
    stateJson["Experience Replay"][i]["Action"] = _actionBuffer[i];
    stateJson["Experience Replay"][i]["Reward"] = _rewardBuffer[i];
    stateJson["Experience Replay"][i]["Environment Id"] = _environmentIdBuffer[i];
    stateJson["Experience Replay"][i]["State Value"] = _stateValueBuffer[i];
    stateJson["Experience Replay"][i]["Retrace Value"] = _retraceValueBuffer[i];
    stateJson["Experience Replay"][i]["Importance Weight"] = _importanceWeightBuffer[i];
    stateJson["Experience Replay"][i]["Truncated Importance Weight"] = _truncatedImportanceWeightBuffer[i];
    stateJson["Experience Replay"][i]["Is On Policy"] = _isOnPolicyBuffer[i];
    stateJson["Experience Replay"][i]["Truncated State"] = _truncatedStateBuffer[i];
    stateJson["Experience Replay"][i]["Truncated State Value"] = _truncatedStateValueBuffer[i];
    stateJson["Experience Replay"][i]["Termination"] = _terminationBuffer[i];

    stateJson["Experience Replay"][i]["Experience Policy"]["State Value"] = _expPolicyBuffer[i].stateValue;
    stateJson["Experience Replay"][i]["Experience Policy"]["Distribution Parameters"] = _expPolicyBuffer[i].distributionParameters;
    stateJson["Experience Replay"][i]["Experience Policy"]["Unbounded Action"] = _expPolicyBuffer[i].unboundedAction;
    stateJson["Experience Replay"][i]["Experience Policy"]["Action Index"] = _expPolicyBuffer[i].actionIndex;
    stateJson["Experience Replay"][i]["Experience Policy"]["Action Probabilities"] = _expPolicyBuffer[i].actionProbabilities;

    stateJson["Experience Replay"][i]["Current Policy"]["State Value"] = _curPolicyBuffer[i].stateValue;
    stateJson["Experience Replay"][i]["Current Policy"]["Distribution Parameters"] = _curPolicyBuffer[i].distributionParameters;
    stateJson["Experience Replay"][i]["Current Policy"]["Unbounded Action"] = _curPolicyBuffer[i].unboundedAction;
    stateJson["Experience Replay"][i]["Current Policy"]["Action Index"] = _curPolicyBuffer[i].actionIndex;
    stateJson["Experience Replay"][i]["Current Policy"]["Action Probabilities"] = _curPolicyBuffer[i].actionProbabilities;
  }

  // If results directory doesn't exist, create it
  if (!dirExists(_k->_fileOutputPath)) mkdir(_k->_fileOutputPath);

  // Resolving file path
  std::string statePath = _k->_fileOutputPath + "/state.json";

  // Storing database to file
  if (saveJsonToFile(statePath.c_str(), stateJson) != 0)
    KORALI_LOG_ERROR("Could not serialize training state into file %s\n", statePath.c_str());

  auto endTime = std::chrono::steady_clock::now();                                                                   // Profiling
  _sessionSerializationTime += std::chrono::duration_cast<std::chrono::nanoseconds>(endTime - beginTime).count();    // Profiling
  _generationSerializationTime += std::chrono::duration_cast<std::chrono::nanoseconds>(endTime - beginTime).count(); // Profiling
}

void __className__::deserializeExperienceReplay()
{
  auto beginTime = std::chrono::steady_clock::now(); // Profiling

  // Creating JSON storage variable
  knlohmann::json stateJson;

  // Resolving file path
  std::string statePath = _k->_fileOutputPath + "/state.json";

  // Loading database from file
  _k->_logger->logInfo("Detailed", "Loading previous run training state from file %s...\n", statePath.c_str());
  if (loadJsonFromFile(stateJson, statePath.c_str()) == false)
    KORALI_LOG_ERROR("Trying to resume training or test policy but could not find or deserialize agent's state from file %s...\n", statePath.c_str());

  // Clearing existing database
  _stateBuffer.clear();
  _actionBuffer.clear();
  _retraceValueBuffer.clear();
  _rewardBuffer.clear();
  _rewardUpdateBuffer.clear();
  _environmentIdBuffer.clear();
  _stateValueBuffer.clear();
  _importanceWeightBuffer.clear();
  _truncatedImportanceWeightBuffer.clear();
  _truncatedStateValueBuffer.clear();
  _truncatedStateBuffer.clear();
  _terminationBuffer.clear();
  _expPolicyBuffer.clear();
  _curPolicyBuffer.clear();
  _isOnPolicyBuffer.clear();
  _episodePosBuffer.clear();
  _episodeIdBuffer.clear();

  // Deserializing database from JSON to the agent's state
  for (size_t i = 0; i < stateJson["Experience Replay"].size(); i++)
  {
    _episodeIdBuffer.add(stateJson["Experience Replay"][i]["Episode Id"].get<size_t>());
    _episodePosBuffer.add(stateJson["Experience Replay"][i]["Episode Pos"].get<size_t>());
    _stateBuffer.add(stateJson["Experience Replay"][i]["State"].get<std::vector<float>>());
    _actionBuffer.add(stateJson["Experience Replay"][i]["Action"].get<std::vector<float>>());
    _rewardBuffer.add(stateJson["Experience Replay"][i]["Reward"].get<float>());
    _rewardUpdateBuffer.add(stateJson["Experience Replay"][i]["Reward Update"].get<float>());
    _environmentIdBuffer.add(stateJson["Experience Replay"][i]["Environment Id"].get<float>());
    _stateValueBuffer.add(stateJson["Experience Replay"][i]["State Value"].get<float>());
    _retraceValueBuffer.add(stateJson["Experience Replay"][i]["Retrace Value"].get<float>());
    _importanceWeightBuffer.add(stateJson["Experience Replay"][i]["Importance Weight"].get<float>());
    _truncatedImportanceWeightBuffer.add(stateJson["Experience Replay"][i]["Truncated Importance Weight"].get<float>());
    _isOnPolicyBuffer.add(stateJson["Experience Replay"][i]["Is On Policy"].get<bool>());
    _truncatedStateBuffer.add(stateJson["Experience Replay"][i]["Truncated State"].get<std::vector<float>>());
    _truncatedStateValueBuffer.add(stateJson["Experience Replay"][i]["Truncated State Value"].get<float>());
    _terminationBuffer.add(stateJson["Experience Replay"][i]["Termination"].get<termination_t>());

    policy_t expPolicy;
    expPolicy.stateValue = stateJson["Experience Replay"][i]["Experience Policy"]["State Value"].get<float>();
    expPolicy.distributionParameters = stateJson["Experience Replay"][i]["Experience Policy"]["Distribution Parameters"].get<std::vector<float>>();
    expPolicy.actionProbabilities = stateJson["Experience Replay"][i]["Experience Policy"]["Action Probabilities"].get<std::vector<float>>();
    expPolicy.unboundedAction = stateJson["Experience Replay"][i]["Experience Policy"]["Unbounded Action"].get<std::vector<float>>();
    expPolicy.actionIndex = stateJson["Experience Replay"][i]["Experience Policy"]["Action Index"].get<size_t>();
    _expPolicyBuffer.add(expPolicy);

    policy_t curPolicy;
    curPolicy.stateValue = stateJson["Experience Replay"][i]["Current Policy"]["State Value"].get<float>();
    curPolicy.distributionParameters = stateJson["Experience Replay"][i]["Current Policy"]["Distribution Parameters"].get<std::vector<float>>();
    curPolicy.actionProbabilities = stateJson["Experience Replay"][i]["Current Policy"]["Action Probabilities"].get<std::vector<float>>();
    curPolicy.actionIndex = stateJson["Experience Replay"][i]["Current Policy"]["Action Index"].get<size_t>();
    curPolicy.unboundedAction = stateJson["Experience Replay"][i]["Current Policy"]["Unbounded Action"].get<std::vector<float>>();
    _curPolicyBuffer.add(curPolicy);
  }

  auto endTime = std::chrono::steady_clock::now();                                                                         // Profiling
  double deserializationTime = std::chrono::duration_cast<std::chrono::nanoseconds>(endTime - beginTime).count() / 1.0e+9; // Profiling
  _k->_logger->logInfo("Detailed", "Took %fs to deserialize training state.\n", deserializationTime);
}

void __className__::printGenerationAfter()
{
  if (_mode == "Training")
  {
    _k->_logger->logInfo("Normal", "Experience Replay Statistics:\n");
    if (_problem->_environmentCount > 1)
      for (size_t i = 0; i < _problem->_environmentCount; ++i)
        _k->_logger->logInfo("Normal", " + Experience Count Env %zu:      %lu\n", i, _experienceCountPerEnvironment[i]);

    _k->_logger->logInfo("Normal", " + Experience Memory Size:      %lu/%lu\n", _stateBuffer.size(), _experienceReplayMaximumSize);
    if (_maxEpisodes > 0)
      _k->_logger->logInfo("Normal", " + Total Episodes Count:        %lu/%lu\n", _currentEpisode, _maxEpisodes);
    else
      _k->_logger->logInfo("Normal", " + Total Episodes Count:        %lu\n", _currentEpisode);

    if (_maxExperiences > 0)
      _k->_logger->logInfo("Normal", " + Total Experience Count:      %lu/%lu\n", _experienceCount, _maxExperiences);
    else
      _k->_logger->logInfo("Normal", " + Total Experience Count:      %lu\n", _experienceCount);

    _k->_logger->logInfo("Normal", "Off-Policy Statistics:\n");
    _k->_logger->logInfo("Normal", " + Count (Ratio/Target):        %lu/%lu (%.3f/%.3f)\n", _experienceReplayOffPolicyCount, _stateBuffer.size(), _experienceReplayOffPolicyRatio, _experienceReplayOffPolicyTarget);
    _k->_logger->logInfo("Normal", " + Importance Weight Cutoff:    [%.3f, %.3f]\n", 1.0f / _experienceReplayOffPolicyCurrentCutoff, _experienceReplayOffPolicyCurrentCutoff);
    _k->_logger->logInfo("Normal", " + REFER Beta Factor:           %f\n", _experienceReplayOffPolicyREFERBeta);

    _k->_logger->logInfo("Normal", "Training Statistics:\n");

    _k->_logger->logInfo("Normal", " + Reward Update Count:         %lu\n", _rewardUpdateCount);
    if (_maxPolicyUpdates > 0)
      _k->_logger->logInfo("Normal", " + Policy Update Count:         %lu/%lu\n", _policyUpdateCount, _maxPolicyUpdates);
    else
      _k->_logger->logInfo("Normal", " + Policy Update Count:         %lu\n", _policyUpdateCount);

    _k->_logger->logInfo("Normal", " + Latest Reward:               %f\n", _trainingLastReward);
    _k->_logger->logInfo("Normal", " + %lu-Episode Average Reward:  %f\n", _trainingAverageDepth, _trainingAverageReward);
    _k->_logger->logInfo("Normal", " + Best Reward (Episode):       %f (%lu)\n", _trainingBestReward, _trainingBestEpisodeId);

    if (_testingBestEpisodeId > 0)
    {
      _k->_logger->logInfo("Normal", "Testing Statistics:\n");
      _k->_logger->logInfo("Normal", " + Best Average Reward: %f (%lu)\n", _testingBestAverageReward, _testingBestEpisodeId);
      _k->_logger->logInfo("Normal", " + Latest Average (Worst / Best) Reward: %f (%f / %f)\n", _testingAverageReward, _testingWorstReward, _testingBestReward);
    }

    printInformation();
    _k->_logger->logInfo("Normal", " + Current Learning Rate:           %.3e\n", _currentLearningRate);

    if (_rewardRescalingEnabled)
      for (size_t i = 0; i < _problem->_environmentCount; ++i)
        _k->_logger->logInfo("Normal", " + Reward Rescaling (Env %zu):        N(%.3e, %.3e)         \n", i, 0.0, _rewardRescalingSigma[i]);

    if (_stateRescalingEnabled)
      _k->_logger->logInfo("Normal", " + Using State Rescaling\n");

    _k->_logger->logInfo("Normal", "Background Trajectory Count:      %lu/%lu\n", std::min(_backgroundTrajectoryCount, _backgroundSampleSize), _backgroundSampleSize);
    _k->_logger->logInfo("Normal", "Total Number Background Samples:  %zu\n", _backgroundTrajectoryCount);
    _k->_logger->logInfo("Normal", "Log Partition Function:           %f (%f)\n", _logPartitionFunction, _logSdevPartitionFunction);

    _k->_logger->logInfo("Detailed", "Profiling Information:                    [Generation] - [Session]\n");
    _k->_logger->logInfo("Detailed", " + Experience Serialization Time:         [%5.3fs] - [%3.3fs]\n", _generationSerializationTime / 1.0e+9, _sessionSerializationTime / 1.0e+9);
    _k->_logger->logInfo("Detailed", " + Worker Attending Time:                 [%5.3fs] - [%3.3fs]\n", _generationWorkerAttendingTime / 1.0e+9, _sessionWorkerAttendingTime / 1.0e+9);
    _k->_logger->logInfo("Detailed", " + Avg Worker Computation Time:           [%5.3fs] - [%3.3fs]\n", _generationWorkerComputationTime / 1.0e+9, _sessionWorkerComputationTime / 1.0e+9);
    _k->_logger->logInfo("Detailed", " + Avg Worker Communication/Wait Time:    [%5.3fs] - [%3.3fs]\n", _generationWorkerCommunicationTime / 1.0e+9, _sessionWorkerCommunicationTime / 1.0e+9);
    _k->_logger->logInfo("Detailed", " + Avg Policy Evaluation Time:            [%5.3fs] - [%3.3fs]\n", _generationPolicyEvaluationTime / 1.0e+9, _sessionPolicyEvaluationTime / 1.0e+9);
    _k->_logger->logInfo("Detailed", " + Policy Update Time:                    [%5.3fs] - [%3.3fs]\n", _generationPolicyUpdateTime / 1.0e+9, _sessionPolicyUpdateTime / 1.0e+9);
    _k->_logger->logInfo("Detailed", " + Reward Update Time:                    [%5.3fs] - [%3.3fs]\n", _generationRewardUpdateTime / 1.0e+9, _sessionRewardUpdateTime / 1.0e+9);
    _k->_logger->logInfo("Detailed", " + Trajectory Probability Update Time:    [%5.3fs] - [%3.3fs]\n", _generationTrajectoryLogProbabilityUpdateTime / 1.0e+9, _sessionTrajectoryLogProbabilityUpdateTime / 1.0e+9);
    _k->_logger->logInfo("Detailed", " + [I/O] Result File Saving Time:         [%5.3fs]\n", _k->_resultSavingTime / 1.0e+9);
    _k->_logger->logInfo("Detailed", " + Running Time:                          [%5.3fs] - [%3.3fs]\n", _generationRunningTime / 1.0e+9, _sessionRunningTime / 1.0e+9);
  }

  if (_mode == "Testing")
  {
    _k->_logger->logInfo("Normal", "Testing Results:\n");
    for (size_t testingId = 0; testingId < _testingSampleIds.size(); testingId++)
    {
      _k->_logger->logInfo("Normal", "  + Sample %lu:\n", _testingSampleIds[testingId]);
      _k->_logger->logInfo("Normal", "  + (Average) Cumulative Reward            %f\n", _testingReward[testingId]);
    }
  }
}

__moduleAutoCode__;

__endNamespace__;
