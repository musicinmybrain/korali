#include "engine.hpp"
#include "modules/solver/agent/SDPG/SDPG.hpp"
#include "sample/sample.hpp"

/****************************************
 * Things to fix:
 * - All samples use their own pseudorandom generators
 * - All seeds must be replicable when restarting a job
 *****************************************/

namespace korali
{
namespace solver
{
namespace agent
{
void SDPG::initializeAgent()
{
  // Getting continuous problem pointer
  _continuousProblem = dynamic_cast<problem::reinforcementLearning::Continuous *>(_k->_problem);

  /*********************************************************************
 * Initializing Critic-Related Structures
 *********************************************************************/

  korali::Engine engine; // Engine to initialize experiments with

  _criticExperiment["Problem"]["Type"] = "Supervised Learning";

  _criticExperiment["Solver"]["Type"] = "Learner/DeepGD";
  _criticExperiment["Solver"]["Optimizer"] = _criticOptimizer;
  _criticExperiment["Solver"]["Loss Function"] = "Mean Squared Error";
  _criticExperiment["Solver"]["Steps Per Generation"] = 1;
  _criticExperiment["Solver"]["Neural Network"] = _criticNeuralNetwork;

  _criticExperiment["Console Output"]["Frequency"] = 0;
  _criticExperiment["Console Output"]["Verbosity"] = "Silent";
  _criticExperiment["File Output"]["Enabled"] = false;
  _criticExperiment["Random Seed"] = _k->_randomSeed++;

  // Initializing experiment with an initial zero set
  for (size_t i = 0; i < _criticMiniBatchSize; i++)
  {
    _criticExperiment["Problem"]["Solution"][i][0] = 0.0;

    for (size_t j = 0; j < _k->_variables.size(); j++)
      _criticExperiment["Problem"]["Inputs"][i][j] = 0.0;
  }

  // Running initialization to verify that the configuration is correct
  engine.initialize(_criticExperiment);

  // Getting learner pointers
  _criticProblem = dynamic_cast<problem::SupervisedLearning *>(_criticExperiment._problem);
  _criticLearner = dynamic_cast<solver::learner::DeepGD *>(_criticExperiment._solver);

  /*********************************************************************
  * Initializing Action Optimizing Experiment
  *********************************************************************/

  _actionOptimizer = new korali::fCMAES(_problem->_actionVectorSize);
  _actionOptimizer->setSeed(_k->_randomSeed++);

  // Initializing experiment with an initial zero set
  for (size_t i = 0; i < _problem->_actionVectorSize; i++)
  {
    size_t varIdx = _problem->_actionVectorIndexes[i];
    _actionOptimizer->_lowerBounds[i] = _k->_variables[varIdx]->_lowerBound;
    _actionOptimizer->_upperBounds[i] = _k->_variables[varIdx]->_upperBound;
    _actionOptimizer->_initialMeans[i] = (_k->_variables[varIdx]->_lowerBound + _k->_variables[varIdx]->_upperBound)*0.5;
    _actionOptimizer->_initialStandardDeviations[i] = abs(_k->_variables[varIdx]->_upperBound - _k->_variables[varIdx]->_lowerBound)*0.1;
  }

  // Termination Criteria
  _actionOptimizer->_minValueDifferenceThreshold = 0.000001;
  _actionOptimizer->reset();

  /*********************************************************************
   * Initializing Policy-Related Structures
   *********************************************************************/

   // Creating and running Actor Learning Experiments

   _policyExperiment["Problem"]["Type"] = "Supervised Learning";

   _policyExperiment["Solver"]["Type"] = "Learner/DeepGD";
   _policyExperiment["Solver"]["Loss Function"] = "Mean Squared Error";
   _policyExperiment["Solver"]["Optimizer"] = _policyOptimizer;
   _policyExperiment["Solver"]["Steps Per Generation"] = 1;
   _policyExperiment["Solver"]["Neural Network"] = _policyNeuralNetwork;

   _policyExperiment["Console Output"]["Frequency"] = 0;
   _policyExperiment["Console Output"]["Verbosity"] = "Silent";
   _policyExperiment["File Output"]["Enabled"] = false;
   _policyExperiment["Random Seed"] = _k->_randomSeed++;

   // Initializing experiment with an initial zero set
   for (size_t i = 0; i < _policyMiniBatchSize; i++)
   {
     for (size_t j = 0; j < _problem->_stateVectorSize; j++)
       _policyExperiment["Problem"]["Inputs"][i][j] = 0.0;

     for (size_t j = 0; j < _problem->_actionVectorSize; j++)
       _policyExperiment["Problem"]["Solution"][i][j] = 0.0;
   }

   // Running initialization to verify that the configuration is correct
   engine.initialize(_policyExperiment);

   // Getting learner pointers
   _policyProblem = dynamic_cast<problem::SupervisedLearning *>(_policyExperiment._problem);
   _policyLearner = dynamic_cast<solver::learner::DeepGD *>(_policyExperiment._solver);

  /*********************************************************************
  * Loading/Setting Hyperparameters
  *********************************************************************/

   _hyperparameters["Policy"] = _policyLearner->getHyperparameters();
}

void SDPG::getAction(korali::Sample &sample)
{
  // Getting current state
  auto state = sample["State"].get<std::vector<float>>();

  // Obtaining action from policy
  auto action = queryPolicy(state);

  // If currently on a training phase, add noise/random actions.
  bool isTraining = sample["Mode"] == "Training";

  if (isTraining)
  {
    // Introducing random noise to the action
    for (size_t i = 0; i < _problem->_actionVectorIndexes.size(); i++)
    {
      size_t varIdx = _problem->_actionVectorIndexes[i];

      // Check whether the variable requires noise
      if (_k->_variables[varIdx]->_explorationNoiseEnabled == true)
      {
        float w = _k->_variables[varIdx]->_explorationNoiseDistribution->getRandomNumber();
        float noise = _k->_variables[varIdx]->_explorationNoiseTheta * _currentActionNoises[i] + w;
        action[i] += noise;
        //printf("Theta (%f) * Previous Noise: (%f) + W: (%f) = %f\n",  _k->_variables[varIdx]->_explorationNoiseTheta, _currentActionNoises[i], w, noise);
        _currentActionNoises[i] = noise;
      }
    }
  }

  // Storing the action
  sample["Action"] = action;
}

float SDPG::stateActionValueFunction(const std::vector<float> &state, const std::vector<float> &action)
{
  // Storage to put together state and action
  std::vector<float> stateActionInput(_problem->_stateVectorSize + _problem->_actionVectorSize);

  // Forward propagating state/action through the critic
  for (size_t j = 0; j < state.size(); j++) stateActionInput[j] = state[j];
  for (size_t j = 0; j < action.size(); j++) stateActionInput[j + state.size()] = action[j];
  auto evaluation = _criticLearner->getEvaluation(stateActionInput);

  // Getting the value of V(Xt), i.e., Q(xt, best action)
  return evaluation[0];
}

void SDPG::trainAgent()
{
  // Creating storage for state history indexes to choose from
  std::vector<size_t> experienceReplayIndexes(_experienceReplayHistory.size());
  for (size_t i = 0; i < _experienceReplayHistory.size()-1; i++) experienceReplayIndexes[i] = i;

  // Shuffling indexes to choose the mini batch from
  std::shuffle(experienceReplayIndexes.begin(), experienceReplayIndexes.end(), *mt);

  // Engine to run experiments
  korali::Engine engine;

  /***************************************************************************************
  * Updating Policy Network by performing a Gradient descent step with latest experiences
  ***************************************************************************************/

  // Calculating cumulative Q*, for statistical purposes
  _cumulativeQStar = 0.0;

  for (size_t i = 0; i < _criticMiniBatchSize; i++)
  {
   // Selecting a uniformly random selected, yet not repeated experience
   size_t expId = experienceReplayIndexes[i];

   // Check if it is a terminal state
   bool isTerminal = _experienceReplayHistory[expId]["Is Terminal"];

   // Getting experience's current state and action
   std::vector<float> curState   = _experienceReplayHistory[expId]["State"];
   std::vector<float> curAction  = _experienceReplayHistory[expId]["Action"];
   std::vector<float> nextState  = isTerminal ? std::vector<float>() : _experienceReplayHistory[expId + 1]["State"].get<std::vector<float>>();
   std::vector<float> bestAction = isTerminal ? std::vector<float>() : queryPolicy(nextState);

   // Getting current reward
   float curReward = _experienceReplayHistory[expId]["Reward"].get<float>();

   /*****************************************
    * Critic Section
    *****************************************/

   // Calculating target Q value (solution) for Qnew on selected batch
   float qStar = curReward;

   // If state is not terminal (next state is filled) then add Qnew to the Q value.
   if (isTerminal == false) qStar += _criticDiscountFactor * stateActionValueFunction(nextState, bestAction);

   // Updating inputs to training learner
   _criticProblem->_inputs[i] = curState;
   _criticProblem->_inputs[i].insert(_criticProblem->_inputs[i].end(), curAction.begin(), curAction.end());
   _criticProblem->_solution[i][0] = qStar;

   // Keeping statistics
   _cumulativeQStar += qStar;
  }

  // Running one generation of the optimization method with the given mini-batch
  _criticLearner->initialize();
  _criticLearner->runGeneration();
  _criticLearner->finalize();

  // Keeping critic/policy statistics
  _averageQStar = (float)_cumulativeQStar / (float)(_criticMiniBatchSize);

  /****************************************************************************
 * If batch normalization is being used, we need to adjust mean and variances
 * by sampling a few more mini-batches after the optimization steps
 ******************************************************************************/

  // Allocating memory for the mini batch set
  std::vector<std::vector<std::vector<float>>> criticMiniBatches(_normalizationSteps);
  std::vector<std::vector<std::vector<float>>> policyMiniBatches(_normalizationSteps);

  for (size_t i = 0; i < _normalizationSteps; i++)
  {
    criticMiniBatches[i].resize(_criticMiniBatchSize);
    policyMiniBatches[i].resize(_criticMiniBatchSize);
  }

  for (size_t i = 0; i < _normalizationSteps; i++)
    for (size_t j = 0; j < _criticMiniBatchSize; j++)
    {
      criticMiniBatches[i][j].resize(_problem->_stateVectorSize + _problem->_actionVectorSize);
      policyMiniBatches[i][j].resize(_problem->_stateVectorSize);
    }

  // Filling the minibatches
  for (size_t step = 0; step < _normalizationSteps; step++)
  {
    // Shuffling indexes to choose the mini batch from
    std::shuffle(experienceReplayIndexes.begin(), experienceReplayIndexes.end(), *mt);

    for (size_t i = 0; i < _criticMiniBatchSize; i++)
    {
      // Selecting a uniformly random selected, yet not repeated experience
      size_t expId = experienceReplayIndexes[i];

      policyMiniBatches[step][i] = _experienceReplayHistory[expId]["State"].get<std::vector<float>>();
      for (size_t j = 0; j < _problem->_stateVectorSize; j++) criticMiniBatches[step][i][j] = _experienceReplayHistory[expId]["State"][j];
      for (size_t j = 0; j < _problem->_actionVectorSize; j++) criticMiniBatches[step][i][_problem->_stateVectorSize + j] = _experienceReplayHistory[expId]["Action"][j];
    }
  }

  _criticLearner->_trainingNeuralNetwork->normalize(criticMiniBatches);

  // Updating critic inference hyperparameters
  auto criticHyperparameters = _criticLearner->getHyperparameters();
  _criticLearner->setHyperparameters(criticHyperparameters);

  /*******************************************************************
   * Now computing new policy with a stochastic method
   ******************************************************************/

  // Reshuffle experiences
  std::shuffle(experienceReplayIndexes.begin(), experienceReplayIndexes.end(), *mt);

  // Accumulating states for evaluation in the policy
  for (size_t i = 0; i < _policyMiniBatchSize; i++)
  {
    size_t expId = experienceReplayIndexes[i];
    std::vector<float> curState = _experienceReplayHistory[expId]["State"];

   _actionOptimizer->reset();

   while (_actionOptimizer->checkTermination() == false)
   {
    _actionOptimizer->prepareGeneration();

    size_t candidateCount = _actionOptimizer->_samplePopulation.size();
    std::vector<float> candidateEvaluations(candidateCount);

    for (size_t j = 0; j < candidateCount; j++)
     candidateEvaluations[j] = stateActionValueFunction(curState, _actionOptimizer->_samplePopulation[j]);

    _actionOptimizer->updateDistribution(candidateEvaluations);

    _actionOptimizer->_currentGeneration++;
   }

   auto bestAction = _actionOptimizer->_bestEverVariables;

   _policyProblem->_inputs[i] = curState;
   _policyProblem->_solution[i] = bestAction;
  }

  // Getting current hyperparameters
  auto curPolicyHyperparameters = _policyLearner->getHyperparameters();

  // Running one generation of the optimization method with the given mini-batch
  _policyLearner->initialize();
  _policyLearner->runGeneration();
  _policyLearner->finalize();

  /*******************************************************************
   * Soft adoption of new hyperparameters wrt to adoption rate
   ******************************************************************/

  // Getting new hyperparameters
  auto newPolicyHyperparameters = _policyLearner->getHyperparameters();

  // Softly adopting the new policy parameters, using the adoption rate
  for (size_t i = 0; i < newPolicyHyperparameters.size(); i++)
   newPolicyHyperparameters[i] = _policyAdoptionRate*curPolicyHyperparameters[i] + (1.0 - _policyAdoptionRate)*newPolicyHyperparameters[i];

  // Updating hyperparameters
  _policyLearner->setHyperparameters(newPolicyHyperparameters);

  // Storing average policy hyperparameters for workers to use
  _hyperparameters["Policy"] = newPolicyHyperparameters;
}

std::vector<float> SDPG::queryPolicy(const std::vector<float> &state)
{
 return _policyLearner->getEvaluation({state});
}

void SDPG::updateHyperparameters(const knlohmann::json &hyperparameters)
{
 _policyLearner->setHyperparameters(hyperparameters["Policy"].get<std::vector<float>>());

 // Re-initializing action noises to zero
 size_t actionCount = _problem->_actionVectorIndexes.size();
 _currentActionNoises.resize(actionCount);
 for (size_t i = 0; i < actionCount; i++) _currentActionNoises[i] = 0.0;
}

void SDPG::printAgentInformation()
{
  _k->_logger->logInfo("Normal", "Critic Information:\n");

  _k->_logger->logInfo("Normal", " + Cumulative Expected Q-Value:     %f\n", _cumulativeQStar);
  _k->_logger->logInfo("Normal", " + Average Expected Q-Value:        %f\n", _averageQStar);

  _criticExperiment._logger->_verbosityLevel = _k->_logger->_verbosityLevel;
  _criticExperiment._solver->printGenerationAfter();
  _criticExperiment._logger->setVerbosityLevel("Silent");

  _k->_logger->logInfo("Normal", "Policy Information:\n");

  _policyExperiment._logger->_verbosityLevel = _k->_logger->_verbosityLevel;
  _policyExperiment._solver->printGenerationAfter();
  _policyExperiment._logger->setVerbosityLevel("Silent");
}

} // namespace agent

} // namespace solver

} // namespace korali
