{

 "Configuration Settings":
 [
   {
   "Name": [ "Mode" ],
   "Type": "std::string",
   "Options": [
               { "Value": "Training", "Description": "Learns a policy for the reinforcement learning problem." },
               { "Value": "Testing", "Description": "Tests the policy with a learned policy." }
              ],
   "Description": "Specifies the operation mode for the agent."
  },
  {
    "Name": [ "Testing", "Sample Ids" ],
    "Type": "std::vector<size_t>",
    "Description": "A vector with the identifiers for the samples to test the hyperparameters with."
  },
  {
    "Name": [ "Testing", "Policy" ],
    "Type": "knlohmann::json",
    "Description": "The hyperparameters of the policy to test."
  },
  {
    "Name": [ "Agent Count" ],
    "Type": "size_t", 
    "Description": "Indicates the number of concurrent agents collecting experiences."
  },
  {
    "Name": [ "Experiences Per Generation" ],
    "Type": "size_t", 
    "Description": "Indicates the how many policy updates to perform in a generation (checkpoints are generated between generations)."
  },
  {
    "Name": [ "Mini Batch Size" ],
    "Type": "size_t",
    "Description": "The number of experiences to randomly select to train the neural network with."
  },
  {
    "Name": [ "Time Sequence Length" ],
    "Type": "size_t", 
    "Description": "Indicates the number of contiguous experiences to pass to the NN for learning. This is only useful when using recurrent NNs on problems with time-dependent phenomena."
  },
  {
   "Name": [ "Optimizer" ],
   "Type": "std::string",
   "Options": [
            { "Value": "Adam", "Description": "Uses the Adam optimizer." },
            { "Value": "AdaBelief", "Description": "Uses the AdaBelief optimizer." }
           ],
   "Description": "Determines which optimizer algorithm to use for learning the NN hyperparameters."
  },
  {
    "Name": [ "Learning Rate" ],
    "Type": "float",
    "Description": "The learning rate to use for the NN hyperparameter optimizer."
  },
  {
    "Name": [ "Neural Network", "Hidden Layers" ],
    "Type": "knlohmann::json",
    "Description": "Indicates the configuration of the hidden neural network layers."
  },
  {
   "Name": [ "Neural Network", "Engine" ],
   "Type": "std::string", 
   "Description": "Specifies which Neural Network backend engine to use."
  },
  {
   "Name": [ "Discount Factor" ],
   "Type": "float",
   "Description": "Represents the weight given to the expectation of the cumulative reward from future experiences."
  },
  {
    "Name": [ "Experience Replay", "Start Size" ],
    "Type": "size_t",
    "Description": "The minimum number of experiences to gather before learning starts."
  },
  {
    "Name": [ "Experience Replay", "Maximum Size" ],
    "Type": "size_t",
    "Description": "The minimum number of experiences to accumulate before starting to forget."
  },
  {
    "Name": [ "Experience Replay", "Importance Weight", "Annealing Rate" ],
    "Type": "float",
    "Description": "Annealing factor for prioritized experience replay (1.0 full compensation, 0.0 uniform treatment)."
  },
  {
    "Name": [ "Experience Replay", "Priority Annealing Rate" ],
    "Type": "float",
    "Description": "Annealing rate for experience probability calculation (1.0 full rank based probabilities, 0.0 uniform probabilities)."
  },
  {
    "Name": [ "Experience Replay", "Serialization Frequency" ],
    "Type": "size_t",
    "Description": "The number of generations that pass between serializations of the experience replay (for checkpoint-resume purposes)."
  },
  {
    "Name": [ "Experience Replay", "REFER", "Enabled" ],
    "Type": "bool",
    "Description": "Enables REFER (see: https://arxiv.org/abs/1807.05827) for controling experience off-policiness in the ER memory."
  },
  {
    "Name": [ "Experience Replay", "REFER", "Cutoff Scale" ],
    "Type": "float",
    "Description": "Indicates the importance weight threshold under which an experience is considered off-policy."
  },
  {
    "Name": [ "Experience Replay", "REFER", "Target" ],
    "Type": "float",
    "Description": "Indicates the target off-policiness. The agent will try to stay under this target value"
  },
  {
    "Name": [ "Experience Replay", "REFER", "Annealing Rate" ],
    "Type": "float",
    "Description": "The parameters A from eq. (13)."
  },
  {
   "Name": [ "Experience Replay", "REFER", "Initial Beta" ],
   "Type": "float",
   "Description": "Initial value for the penalisation coefficient for off-policiness."
  },
  {
    "Name": [ "Experiences Between Policy Updates" ],
    "Type": "float",
    "Description": "The number of experiences to receive before training/updating (real number, may be less than < 1.0, for more than one update per experience)."
  },
  {
   "Name": [ "Mini Batch Strategy" ],
   "Type": "std::string",
   "Options": [
      { "Value": "Uniform", "Description": "Selects experiences from the replay memory with a randomly." },
      { "Value": "Prioritized", "Description": "Prioritizes experiences according to their rank. See  Prioritized Experience Replay by Schaul et al. (2015)." },
      { "Value": "Remember-and-Forget", "Description": "Selects experiences randomly, so long as their importance weight is above a given tolerance." }
     ],
   "Description": "Determines how to select experiences from the replay memory for mini batch creation."
  },  
  {
   "Name": [ "Cache Persistence" ],
   "Type": "size_t",
   "Description": "Indicates for how many policy updates will pre-calculated values be persist in the experience cache."
  }
 ],

 "Termination Criteria":
 [
  {
    "Name": [ "Max Episodes" ],
    "Type": "size_t",
    "Criteria": "(_mode == \"Training\") && (_maxEpisodes > 0) && (_currentEpisode >= _maxEpisodes)",
    "Description": "The solver will stop when the given number of environments have been fully executed."
  },
  {
    "Name": [ "Max Experiences" ],
    "Type": "size_t",
    "Criteria": "(_mode == \"Training\") && (_maxExperiences > 0) && (_experienceReplay.size() >= _maxExperiences)",
    "Description": "The solver will stop when the given number of experiences have been gathered."
  },
  {
    "Name": [ "Target Average Testing Reward" ],
    "Type": "float",
    "Criteria": "(_mode == \"Training\") && (_targetAverageTestingReward > -korali::Inf) && (_bestAverageTestingReward >= _targetAverageTestingReward)",
    "Description": "The solver will stop when the given best average per-episode reward has been reached among the experiences between two learner updates."
  },
  {
    "Name": [ "Max Policy Updates" ],
    "Type": "size_t", 
    "Criteria": "(_mode == \"Training\") && (_maxPolicyUpdates > 0) && (_policyUpdateCount >= _maxPolicyUpdates)",
    "Description": "The solver will stop when the given number of optimizations have been made to the learner."
  }
 ],

 "Variables Configuration":
 [

 ],

 "Internal Settings":
 [
  {
    "Name": [ "Current Episode" ],
    "Type": "size_t",
    "Description": "Indicates the current episode being processed."
  },
  {
   "Name": [ "Last Training Reward" ],
   "Type": "float",
   "Description": "The cumulative training reward for the last episode received."
  },
  {
    "Name": [ "Average Testing Reward" ],
    "Type": "float",
    "Description": "Remembers the average reward from latest testing episodes, if any."
  },
  {
    "Name": [ "Best Testing Reward" ],
    "Type": "float",
    "Description": "Remembers the best reward from latest testing episodes, if any."
  },
  {
    "Name": [ "Worst Testing Reward" ],
    "Type": "float",
    "Description": "Remembers the worst reward from latest testing episodes, if any."
  },
  {
    "Name": [ "Best Training Reward" ],
    "Type": "float",
    "Description": "Remembers the cumulative average episode reward found so far from training episodes."
  },
  {
    "Name": [ "Best Training Episode" ],
    "Type": "size_t",
    "Description": "Remembers the episode that obtained the maximum reward found so far during training."
  },
  {
    "Name": [ "Best Testing Episode" ],
    "Type": "size_t",
    "Description": "Remembers the episode that obtained the maximum reward found so far during testing."
  },
  {
    "Name": [ "Candidate Policies Tested" ],
    "Type": "size_t",
    "Description": "Remembers the cumulative average episode reward found so far from testing episodes."
  },
  {
    "Name": [ "Best Average Testing Reward" ],
    "Type": "float",
    "Description": "Remembers the cumulative average episode reward found so far from testing episodes."
  },
  {
   "Name": [ "Hyperparameters" ],
   "Type": "knlohmann::json",
   "Description": "Stores the current policy configuration."
  },
  {
   "Name": [ "Best Testing Hyperparameters" ],
   "Type": "knlohmann::json",
   "Description": "Stores the candidate policy configuration that has produced the best results."
  },
  {
   "Name": [ "Best Training Hyperparameters" ],
   "Type": "knlohmann::json",
   "Description": "Stores the training policy configuration that has produced the best results."
  },
  {
   "Name": [ "Training State" ],
   "Type": "knlohmann::json",
   "Description": "Stores the state of training networks, necessary to continue learning at a later point."
  },
  {
   "Name": [ "Cumulative Q Star" ],
   "Type": "float",
   "Description": "Sum of Q among the experiences from all minibatches in this generation."
  },
  {
   "Name": [ "Cumulative Q Star Squared" ],
   "Type": "float",
   "Description": "Sum of Q square among the experiences from a minibatch."
  },
  {
   "Name": [ "Average Q Star" ],
   "Type": "float",
   "Description": "Average Q among the experiences from all minibatches in this generation."
  },
  {
   "Name": [ "Stdev Q Star" ],
   "Type": "float",
   "Description": "Standard deviation Q among the experiences in a minibatch in this generation."
  },
  {
   "Name": [ "Average TD Error" ],
   "Type": "float",
   "Description": "Average TD error in minibatch."
  },
  {
   "Name": [ "Stdev TD Error" ],
   "Type": "float",
   "Description": "Standard deviation TD error in minibatch."
  },
  {
   "Name": [ "Policy Update Count" ],
   "Type": "size_t",
   "Description": "Keeps track of the number of policy updates performed."
  },
  {
   "Name": [ "Current Sample ID" ],
   "Type": "size_t",
   "Description": "Keeps track of the current Sample ID, to make sure no two equal sample IDs are produced and that this value can be used as random seed."
  },
  {
    "Name": [ "Uniform Generator" ],
    "Type": "korali::distribution::univariate::Uniform*",
    "Description": "Uniform random number generator for epsilon-greedy strategy."
  },
  {
    "Name": [ "Experience Count" ],
    "Type": "size_t",
    "Description": "Takes count of the number of experiences received so far."
  },
  {
    "Name": [ "Experience Replay", "Max Priority" ],
    "Type": "size_t",
    "Description": "Indicates the maximum priority of any experience in the experience replay."
  },
  {
    "Name": [ "Experience Replay", "Database" ],
    "Type": "std::vector<knlohmann::json>",
    "Description": "Contains the serialized database for the entire experience replay."
  },
  {
    "Name": [ "Experience Replay", "REFER", "Current Ratio" ],
    "Type": "float",
    "Description": "Indicates the current off-policy ratio of experiences in the Experience Replay."
  },
  {
    "Name": [ "Experience Replay", "REFER", "Current Cutoff" ],
    "Type": "float",
    "Description": "Indicates the current cutoff to determine whether an experience is off- or on-policy."
  },
  {
   "Name": [ "Experience Replay", "REFER", "Current Beta" ],
   "Type": "float",
   "Description": "Penalisation coefficient for Off-policiness."
  },
  {
   "Name": [ "Experience Replay", "REFER", "Current Learning Rate" ],
   "Type": "float",
   "Description": "The learning rate prescribed by REFER to use in the critic/policy learner(s)."
  }
 ],

 "Module Defaults":
 {
   "Experiences Per Generation": 100,
   "Agent Count": 1,
   "Optimizer": "AdaBelief",
   "Discount Factor": 0.99,
   "Mini Batch Strategy": "Uniform",
   "Cache Persistence": 0,
   "Time Sequence Length": 1,
   
   "Testing":
   {
    "Sample Ids": [ ],
    "Policy": { }
   }, 
   
   "Termination Criteria":
   {
    "Max Episodes": 0,
    "Max Experiences": 0,
    "Max Policy Updates": 0,
    "Target Average Testing Reward": -Infinity 
   },
   
  "Experience Replay":
   {
    "Maximum Size": 10000,
    "Start Size": 1000,
    "Priority Annealing Rate" : 1.0,
    "Serialization Frequency": 100,
    "Database": [ ],
    "Importance Weight":
    { 
     "Annealing Rate" : 1.0
    },
    "REFER":
    {
     "Enabled": false,
     "Cutoff Scale": 4.0,
     "Target": 0.1,
     "Initial Beta": 0.3,
     "Annealing Rate": 5e-7
    }
   },
   
   "Uniform Generator":
   {
    "Type": "Univariate/Uniform",
    "Minimum": 0.0,
    "Maximum": 1.0
   }
 },
 
 "Variable Defaults":
 {
 
 }
 
}
