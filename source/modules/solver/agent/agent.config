{

 "Configuration Settings":
 [
  {
    "Name": [ "Critic", "Neural Network" ],
    "Type": "knlohmann::json",
    "Description": "Indicates the configuration of the underlying neural network to use for the critic."
  },
  {
    "Name": [ "Critic", "Mini Batch Size" ],
    "Type": "size_t",
    "Description": "The number of experiences to randomly select to train the neural network with."
  },
  {
    "Name": [ "Critic", "Learning Rate" ],
    "Type": "float",
    "Description": "The learning rate for the critic NN."
  },
  {
   "Name": [ "Critic", "Discount Factor" ],
   "Type": "float",
   "Description": "Discount Factor for future states."
  },
  {
   "Name": [ "Critic", "Adoption Rate" ],
   "Type": "float",
   "Description": "The linear of the rate at which the new critic parameters are adopted. Note that a higher rate adopts new policies slowlier: pNew = rate*pOld + (1-rate)*pNew"
  },
  {
   "Name": [ "Critic", "Normalization Steps" ],
   "Type": "size_t",
   "Description": "How many mini-batches will be used to correct mean/variance bias for batch normalized layers."
  },
  {
    "Name": [ "Policy", "Neural Network" ],
    "Type": "knlohmann::json",
    "Description": "Indicates the configuration of the underlying neural network to use for the policy."
  },
  {
    "Name": [ "Policy", "Mini Batch Size" ],
    "Type": "size_t",
    "Description": "The number of experiences to randomly select to train the neural network with."
  },
  {
    "Name": [ "Policy", "Learning Rate" ],
    "Type": "float",
    "Description": "The learning rate for the policy NN."
  },
  {
   "Name": [ "Policy", "Adoption Rate" ],
   "Type": "float",
   "Description": "The linear of the rate at which the new policy parameters are adopted. Note that a higher rate adopts new policies slowlier: pNew = rate*pOld + (1-rate)*pNew"
  },
  {
   "Name": [ "Policy", "Normalization Steps" ],
   "Type": "size_t",
   "Description": "How many mini-batches will be used to correct mean/variance bias for batch normalized layers."
  },
  {
    "Name": [ "Experience Replay", "Start Size" ],
    "Type": "size_t",
    "Description": "The minimum number of experiences to gather before learning starts."
  },
  {
    "Name": [ "Experience Replay", "Maximum Size" ],
    "Type": "size_t",
    "Description": "The minimum number of experiences to accumulate before starting to forget."
  },
  {
    "Name": [ "Optimization Steps Per Update" ],
    "Type": "size_t",
    "Description": "The number of optimization steps for each policy update."
  },
  {
    "Name": [ "Experiences Between Updates" ],
    "Type": "size_t",
    "Description": "The number of experiences to receive before updating the critic."
  },
  {
   "Name": [ "Training Reward Threshold" ],
   "Type": "float",
   "Description": "Minimum value (r) of the episode's average training reward for a policy to be considered as candidate."
  },
  {
   "Name": [ "Policy Testing Episodes" ],
   "Type": "size_t",
   "Description": "Number of test episodes to run the policy (without noise) for, for which the average reward will serve to evaluate the reward termination criteria."
  },
  {
   "Name": [ "Random Action Probability", "Initial Value" ],
   "Type": "float",
   "Description": "Specifies the initial value for epsilon, the probability of not choosing the best possible action (exploitation) and using a random selection instead (exploration). e = 0 represents a pure greedy strategy, 0 < e < 1 represents the epsilon-greedy strategy, and e = 1 represents a purely random strategy."
  },
  {
   "Name": [ "Random Action Probability", "Decrease Rate" ],
   "Type": "float",
   "Description": "Specifies the how much the value of epsilon should be decreased as generations progress. A rate d(e) > 0.0 represents the Epsilon-decreasing strategy."
  },
  {
   "Name": [ "Random Action Probability", "Target Value" ],
   "Type": "float",
   "Description": "Specifies the last value of epsilon after which it will not be reduced any further."
  }
 ],

 "Termination Criteria":
 [
  {
    "Name": [ "Max Episodes" ],
    "Type": "size_t",
    "Criteria": "(_maxEpisodes > 0) && (_currentEpisode >= _maxEpisodes)",
    "Description": "The solver will stop when the given number of environments have been fully executed."
  },
  {
    "Name": [ "Max Experiences" ],
    "Type": "size_t",
    "Criteria": "(_maxExperiences > 0) && (_experienceReplayStates.size() >= _maxExperiences)",
    "Description": "The solver will stop when the given number of experiences have been gathered."
  },
  {
    "Name": [ "Target Average Testing Reward" ],
    "Type": "float",
    "Criteria": "(_targetAverageTestingReward > -korali::Inf) && (_bestAverageTestingReward >= _targetAverageTestingReward)",
    "Description": "The solver will stop when the given best average per-episode reward has been reached among the experiences between two learner updates."
  },
  {
    "Name": [ "Max Optimization Steps" ],
    "Type": "size_t",
    "Criteria": "(_maxOptimizationSteps > 0) && (_optimizationStepCount >= _maxOptimizationSteps)",
    "Description": "The solver will stop when the given number of optimizations have been made to the learner."
  }
 ],

 "Variables Configuration":
 [

 ],

 "Internal Settings":
 [
  {
    "Name": [ "Current Episode" ],
    "Type": "size_t",
    "Description": "Indicates the current episode being processed."
  },
  {
    "Name": [ "Experience Replay", "States" ],
    "Type": "std::vector<std::vector<float>>",
    "Description": "Stores experience replay states."
  },
  {
    "Name": [ "Experience Replay", "Actions" ],
    "Type": "std::vector<std::vector<float>>",
    "Description": "Stores experience replay actions."
  },
  {
    "Name": [ "Experience Replay", "Action Indexes" ],
    "Type": "std::vector<size_t>",
    "Description": "Stores experience replay action indexes (discrete problems)."
  },
  {
    "Name": [ "Experience Replay", "Action Probabilities" ],
    "Type": "std::vector<std::vector<float>>",
    "Description": "Stores experience replay action probability densities (discrete problems)."
  },
  {
    "Name": [ "Experience Replay", "Action Means" ],
    "Type": "std::vector<std::vector<float>>",
    "Description": "Stores experience replay action probability gaussian means (continuous problems)."
  },
  {
    "Name": [ "Experience Replay", "Action Sigmas" ],
    "Type": "std::vector<std::vector<float>>",
    "Description": "Stores experience replay action probability gaussian standard deviations (continuous problems)."
  },
  {
    "Name": [ "Experience Replay", "Rewards" ],
    "Type": "std::vector<float>",
    "Description": "Stores experience replay rewards."
  },
  {
    "Name": [ "Experience Replay", "Terminal" ],
    "Type": "std::vector<bool>",
    "Description": "Stores whether the experience is terminal ."
  },
  {
   "Name": [ "Current Reward" ],
   "Type": "float",
   "Description": "The cumulative reward for the current episode."
  },
  {
    "Name": [ "Average Testing Reward" ],
    "Type": "float",
    "Description": "Remembers the current episode reward found on this generation's testing episodes, if any."
  },
  {
    "Name": [ "Best Training Reward" ],
    "Type": "float",
    "Description": "Remembers the cumulative average episode reward found so far from training episodes."
  },
  {
    "Name": [ "Candidate Policies Tested" ],
    "Type": "size_t",
    "Description": "Remembers the cumulative average episode reward found so far from testing episodes."
  },
  {
    "Name": [ "Best Average Testing Reward" ],
    "Type": "float",
    "Description": "Remembers the cumulative average episode reward found so far from testing episodes."
  },
  {
   "Name": [ "Hyperparameters" ],
   "Type": "knlohmann::json",
   "Description": "Stores the current policy configuration ."
  },
  {
   "Name": [ "Cumulative Q Star" ],
   "Type": "float",
   "Description": "Sum of E(Q) among the experiences from all minibatches in this generation."
  },
  {
   "Name": [ "Average Q Star" ],
   "Type": "float",
   "Description": "Average E(Q) among the experiences from all minibatches in this generation."
  },
  {
   "Name": [ "Optimization Step Count" ],
   "Type": "size_t",
   "Description": "Keeps track of the number of optimization steps performed by the learner."
  },
  {
   "Name": [ "Current Sample ID" ],
   "Type": "size_t",
   "Description": "Keeps track of the current Sample ID, to make sure no two equal sample IDs are produced and that this value can be used as random seed."
  },
  {
   "Name": [ "Random Action Probability", "Current Value" ],
   "Type": "float",
   "Description": "Specifies the current value of epsilon."
  },
  {
    "Name": [ "Uniform Generator" ],
    "Type": "korali::distribution::univariate::Uniform*",
    "Description": "Uniform random number generator for epsilon-greedy strategy."
  },
  {
    "Name": [ "Experience Count" ],
    "Type": "size_t",
    "Description": "Takes count of the number of experiences received so far."
  }
 ],

 "Module Defaults":
 {
   "Policy Testing Episodes": 10,
    
   "Termination Criteria":
   {
    "Max Episodes": 0,
    "Max Experiences": 0,
    "Max Optimization Steps": 0,
    "Target Average Testing Reward": -Infinity 
   },
   
  "Experience Replay":
   {
    "Maximum Size": 10000,
    "Start Size": 1000
   },
   
   "Random Action Probability": 
   {
      "Initial Value": 0.0,
      "Decrease Rate": 0.0,
      "Target Value": 0.0
   },
   
   "Uniform Generator":
   {
    "Type": "Univariate/Uniform",
    "Minimum": 0.0,
    "Maximum": 1.0
   },
   
   "Critic": 
   {
     "Mini Batch Size": 32,
     "Normalization Steps": 32,
     "Adoption Rate": 0.0,
     "Learning Rate": 0.001,
     "Neural Network":   { "Type": "Neural Network" }
   },
   
   "Policy": 
   {
     "Mini Batch Size": 32,
     "Normalization Steps": 32,
     "Adoption Rate": 0.0,
     "Learning Rate": 0.00001,
     "Neural Network":   { "Type": "Neural Network" }
   }
 },
 
 "Variable Defaults":
 {
 
 }
 
}
