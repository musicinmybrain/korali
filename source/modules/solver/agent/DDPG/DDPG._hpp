#ifndef _KORALI_AGENT_DDPG_HPP_
#define _KORALI_AGENT_DDPG_HPP_

#include "modules/solver/agent/agent.hpp"

namespace korali
{
namespace solver
{
namespace agent
{
class DDPG : public Agent
{
  public:
  /**
  * @brief Korali experiment for argmax_action(Q) based on a trained Q-Network
  */
  korali::Experiment _policyExperiment;

  /**
   * @brief Pointer to training the actor network
   */
  learner::DeepGD *_policyLearner;

  /**
   * @brief Pointer to actor's experiment problem
   */
  problem::SupervisedLearning *_policyProblem;

  /**
   * @brief Storage for statistical data of the policy gradients
   */
  std::vector<double> avgGradients;

  std::vector<double> getTrainingAction(const std::vector<double> &state) override;
  double stateValueFunction(const std::vector<double> &state) override;
  double getStateActionProbabilityDensity(const std::vector<double> &state, const std::vector<double> &action) override;
  std::vector<double> queryPolicy(const std::vector<double> &state) override;
  void updateHyperparameters(const knlohmann::json &hyperparameters) override;
  void trainPolicy() override;
  void printPolicyInformation() override;
  void initializePolicy() override;
};

} // namespace agent
} // namespace solver
} // namespace korali

#endif // _KORALI_AGENT_DDPG_HPP_
