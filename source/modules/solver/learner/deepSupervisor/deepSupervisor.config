{

  "Module Data":
  {
    "Class Name": "DeepSupervisor",
    "Namespace": ["korali", "solver", "learner"],
    "Parent Class Name": "Learner"
  },


 "Configuration Settings":
 [
  {
    "Name": [ "Neural Network", "Hidden Layers" ],
    "Type": "knlohmann::json",
    "Description": "Sets the configuration of the hidden layers for the neural network."
  },
  {
    "Name": [ "Neural Network", "Output Activation" ],
    "Type": "knlohmann::json",
    "Description": "Allows setting an aditional activation for the output layer."
  },
  {
    "Name": [ "Neural Network", "Output Layer" ],
    "Type": "knlohmann::json",
    "Description": "Sets any additional configuration (e.g., masks) for the output NN layer."
  },
  {
   "Name": [ "Neural Network", "Engine" ],
   "Type": "std::string",
   "Description": "Specifies which Neural Network backend engine to use."
  },
  {
   "Name": [ "Hyperparameters" ],
   "Type": "std::vector<float>",
   "Description": "Stores the training neural network hyperparameters (weights and biases)."
  },
  {
   "Name": [ "Loss Function" ],
   "Type": "std::string",
   "Options": [
      { "Value": "Direct Gradient", "Description": "The given solution represents the gradients of the loss with respect to the network-output. Note that Korali uses the gradients to maximize the objective." },
      { "Value": "Mean Squared Error", "Description": "The loss is calculated as the negative mean of square errors, one per input in the batch. Note that Korali maximizes the negative MSE." }
     ],
   "Description": "Function to calculate the difference (loss) between the NN inference and the exact solution and its gradients for optimization."
  },
  {
   "Name": [ "Optimizer" ],
   "Type": "std::string",
   "Options": [
      { "Value": "Adam", "Description": "Uses the Adam optimizer." },
      { "Value": "AdaBelief", "Description": "Uses the AdaBelief optimizer." }
     ],
   "Description": "Determines which optimizer algorithm to use to apply the gradients on the neural network's hyperparameters."
  },
  {
   "Name": [ "Steps Per Generation" ],
   "Type": "size_t",
   "Description": "Represents the number of opitmization steps to run per each generation."
  },
  {
   "Name": [ "Learning Rate" ],
   "Type": "float",
   "Description": "Learning rate for the underlying ADAM optimizer."
  },
  {
   "Name": [ "Output Weights Scaling" ],
   "Type": "float",
   "Description": "Specified by how much will the weights of the last linear transformation of the NN be scaled. A value of < 1.0 is useful for a more deterministic start."
  }
 ],

 "Results":
 [

 ],

 "Termination Criteria":
 [
   {
    "Name": [ "Max Suboptimal Generations" ],
    "Type": "float",
    "Criteria": "_k->_currentGeneration > 1 && (_maxSuboptimalGenerations > 0) && (_suboptimalGenerationCount >= _maxSuboptimalGenerations)",
    "Description": "Specifies the maximum number of suboptimal generations."
   },
   {
    "Name": [ "Target Loss" ],
    "Type": "float",
    "Criteria": "(_k->_currentGeneration > 1) && (_targetLoss > 0.0) && (_currentLoss <= _targetLoss)",
    "Description": "Specifies the maximum number of suboptimal generations."
   }
 ],

 "Variables Configuration":
 [

 ],

 "Internal Settings":
 [
  {
   "Name": [ "Minimum Loss" ],
   "Type": "float",
   "Description": "Best value ever of the loss function."
  },
  {
   "Name": [ "Suboptimal Generation Count" ],
   "Type": "size_t",
   "Description": "Current number of generations without an improvement on loss."
  },
  {
   "Name": [ "Current Loss" ],
   "Type": "float",
   "Description": "Current value of the loss function."
  },
  {
   "Name": [ "Normalization Means" ],
   "Type": "std::vector<float>",
   "Description": "Stores the current neural network normalization mean parameters."
  },
  {
   "Name": [ "Normalization Variances" ],
   "Type": "std::vector<float>",
   "Description": "Stores the current neural network normalization variance parameters."
  }
 ],

 "Module Defaults":
 {
  "Steps Per Generation": 1,
  "Neural Network":
  {
   "Output Activation": "Identity",
   "Output Layer": { }
  },
  "Termination Criteria":
   {
     "Max Suboptimal Generations": 0,
     "Target Loss": -1.0
   },
  "Hyperparameters": [],
  "Output Weights Scaling": 1.0

 },

 "Variable Defaults":
 {

 }
}
