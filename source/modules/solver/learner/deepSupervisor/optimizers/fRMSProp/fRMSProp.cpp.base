#include "modules/solver/learner/deepSupervisor/optimizers/fRMSProp/fRMSProp.hpp"
#include <vector>

__startNamespace__;

void __className__::initialize() {
  __parentClassName__::initialize();
  _r.resize(_nVars);
  _v.resize(_nVars);
  reset();
}

void __className__::reset()
{
  _modelEvaluationCount = 0;
  #pragma omp parallel for simd
  for (size_t i = 0; i < _nVars; i++){
    _currentValue[i] = 0.0f;
    _r[i] = 0.0f;
    _v[i] = 0.0f;
  }
}

void __className__::processResult(std::vector<float> &gradient)
{
  __parentClassName__::preProcessResult(gradient);

  #pragma omp parallel for simd
  for (size_t i = 0; i < _nVars; i++)
  {
    _r[i] = (1.0f-_smoothing) * (gradient[i]*gradient[i]) + _smoothing*_r[i];
    _v[i] = (_eta / (std::sqrt(_r[i]) + _epsilon)) * -gradient[i];
    _currentValue[i] = _currentValue[i] - _v[i];
  }

  __parentClassName__::postProcessResult(_currentValue);
}

__moduleAutoCode__;

__endNamespace__;
