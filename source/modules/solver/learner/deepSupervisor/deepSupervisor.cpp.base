#include "engine.hpp"
#include "modules/experiment/experiment.hpp"
#include "modules/solver/learner/deepSupervisor/deepSupervisor.hpp"
#include "sample/sample.hpp"
#include <random>
#include <cmath>
#include <cstdio>
#include <omp.h>
// #include <execution>
#include <range/v3/view/join.hpp>
#include <range/v3/range/conversion.hpp>
#include <sstream>
#include <iterator>
#include <string>
#include <vector>
#include <ostream>
#include <iomanip>

__startNamespace__;

void __className__::initialize()
{
  // Getting problem pointer
  _problem = dynamic_cast<problem::SupervisedLearning *>(_k->_problem);

  // Don't reinitialize if experiment was already initialized
  if (_k->_isInitialized == true) return;

  if(_dataInputShuffel){
    std::random_device r;
    std::seed_seq seed{r(), r(), r(), r(), r(), r(), r(), r()};
    // create two random engines with the same state
    input_reng = std::mt19937(seed);
    solution_reng = input_reng;
    shuffle(_problem->_inputData.begin(), _problem->_inputData.end(), input_reng);
    shuffle(_problem->_solutionData.begin(), _problem->_solutionData.end(), solution_reng);
  }
  // Data ========================================================================
  std::vector<size_t> batchSizes;
  // VALIDATION SET ======
  _hasValidationSet = (_problem->_dataValidationInput.size() || _dataValidationSplit ) ? true : false;
  if(_hasValidationSet){
    NV = _problem->_dataValidationInput.size();
    if((_problem->_dataValidationInput.size() || _problem->_dataValidationSolution.size()) && _dataValidationSplit )
      KORALI_LOG_ERROR("You cannot have a validation set as input as well as a validation split to split the training data.");
    // Validation Split is given ===========================================================================
    if(_dataValidationSplit) {
      if(0 < _dataValidationSplit &&  _dataValidationSplit < 1){
        // Choose fraction from training data for validation split
        NV = (int) _problem->_inputData.size()*_dataValidationSplit;
        N = _problem->_inputData.size()-NV;
        _problem->_dataValidationInput = {_problem->_inputData.begin()+N, _problem->_inputData.end()};
        _problem->_dataValidationSolution = {_problem->_solutionData.begin()+N, _problem->_solutionData.end()};
        _problem->_inputData = {_problem->_inputData.begin(), _problem->_inputData.begin()+N};
        _problem->_solutionData = {_problem->_solutionData.begin(), _problem->_solutionData.begin()+N};
      } else if(1 < _dataValidationSplit &&  _problem->_inputData.size() > _dataValidationSplit){
        // Choose samples from training data for validation split
        NV = _dataValidationSplit;
        N = _problem->_inputData.size()-NV;
        if(N < 1)
          KORALI_LOG_ERROR("Validation Split to large, no training samples left.");
        _problem->_dataValidationInput = {_problem->_inputData.begin()+N, _problem->_inputData.end()};
        _problem->_dataValidationSolution = {_problem->_solutionData.begin()+N, _problem->_solutionData.end()};
        _problem->_inputData = {_problem->_inputData.begin(), _problem->_inputData.begin()+N};
        _problem->_solutionData = {_problem->_solutionData.begin(), _problem->_solutionData.begin()+N};
      }
      assert(NV == _problem->_dataValidationInput.size());
      assert(NV == _problem->_dataValidationSolution.size());
      assert(N == _problem->_inputData.size());
      assert(N == _problem->_solutionData.size());
    }
    // =====================================================================================================
    if(_problem->_validationBatchSize == -1)
      _problem->_validationBatchSize = NV;
    batchSizes.push_back(_problem->_validationBatchSize);
    if (_batchConcurrency > 1){
      // If we parallize by _batchConcurrency workers, we need to support the split up batch size as well
      if (NV % _batchConcurrency > 0)
        KORALI_LOG_ERROR("The batch concurrency requested (%lu) does not divide the validation set size (%lu) perfectly.", _batchConcurrency, NV);
      batchSizes.push_back(_problem->_validationBatchSize / _batchConcurrency);
    }
    (*_k)["Results"]["Validation Loss"] = true;
  }
  _trainingLoss.reserve(_epochs);
  _validationLoss.reserve(_epochs);
  // TRAINING ====================================================================
  if (_mode == "Training" || _mode == "Automatic Training"){
    if(!_problem->_trainingBatchSize)
      KORALI_LOG_ERROR("Training Batch Size is not set.");
    // BATCH SIZES needed for the neual network architecture ==========================================
    batchSizes.push_back(_problem->_trainingBatchSize);
    // If we parallize by _batchConcurrency workers, we need to support the split up batch size as well
    if (_problem->_trainingBatchSize % _batchConcurrency > 0)
      KORALI_LOG_ERROR("The training concurrency requested (%lu) does not divide the training mini batch size (%lu) perfectly.", _batchConcurrency, _problem->_trainingBatchSize);
    if (_batchConcurrency > 1)
      batchSizes.push_back(_problem->_trainingBatchSize / _batchConcurrency);
    // Check whether the minibatch size (N) can be divided by the requested concurrency TODO make this a warning and add batch size for reminder Need to also adapt verifyData() of supervisedLearning problem.
  }
  // TESTING ======================================================================
  if (!_problem->_testingBatchSizes.empty()){
    // Check whether the minibatch size (N) can be divided by the requested concurrency TODO make this a warning and add batch size for reminder
    for (auto bs : _problem->_testingBatchSizes){
      if (bs % _batchConcurrency > 0)
        KORALI_LOG_ERROR("The Testing concurrency requested (%lu) does not divide the training mini batch size (%lu) perfectly.", _batchConcurrency, bs);
      batchSizes.push_back(bs);
      // If we parallize by _batchConcurrency workers, we need to support the split up batch size as well
      if (_batchConcurrency > 1)
        batchSizes.push_back(bs / _batchConcurrency);
    }
  } else {
    if (_problem->_testingBatchSize){
      // Check whether the minibatch size (N) can be divided by the requested concurrency TODO make this a warning and add batch size for reminder
      if (_problem->_testingBatchSize % _batchConcurrency > 0)
        KORALI_LOG_ERROR("The Testing concurrency requested (%lu) does not divide the training mini batch size (%lu) perfectly.", _batchConcurrency, _problem->_testingBatchSize);
      batchSizes.push_back(_problem->_testingBatchSize);
      // If we parallize by _batchConcurrency workers, we need to support the split up batch size as well
      if (_batchConcurrency > 1) batchSizes.push_back(_problem->_testingBatchSize / _batchConcurrency);
    }
  }
  // Erase duplicates
  std::sort(std::begin(batchSizes), std::end(batchSizes));
  batchSizes.erase(std::unique(batchSizes.begin(), batchSizes.end()), batchSizes.end());
  /*****************************************************************
   * Save learning rate
   *****************************************************************/
  if(_learningRateSave)
    (*_k)["Results"]["Learning Rate"] = true;
  // ================================================================================================

  /*****************************************************************
   * Setting up Neural Networks
   *****************************************************************/

  // Configuring neural network's inputs
  knlohmann::json neuralNetworkConfig;
  neuralNetworkConfig["Type"] = "Neural Network";
  neuralNetworkConfig["Engine"] = _neuralNetworkEngine;
  neuralNetworkConfig["Timestep Count"] = _problem->_maxTimesteps;

  // Iterator for the current layer id
  size_t curLayer = 0;

  // Setting the number of input layer nodes as number of input vector size
  neuralNetworkConfig["Layers"][curLayer]["Type"] = "Layer/Input";
  neuralNetworkConfig["Layers"][curLayer]["Output Channels"] = _problem->_inputSize;
  curLayer++;

  // Adding user-defined hidden layers
  for (size_t i = 0; i < _neuralNetworkHiddenLayers.size(); i++)
  {
    neuralNetworkConfig["Layers"][curLayer]["Weight Scaling"] = _outputWeightsScaling;
    neuralNetworkConfig["Layers"][curLayer] = _neuralNetworkHiddenLayers[i];
    curLayer++;
  }

  if (!_neuralNetworkOutputLayer.empty() && isDefined(_neuralNetworkOutputLayer, "Type")){
    neuralNetworkConfig["Layers"][curLayer] = _neuralNetworkOutputLayer;
    curLayer++;
  } else if(_neuralNetworkOutputLayer.empty() && !isDefined(_neuralNetworkOutputLayer, "Type")){
    // If no output layer is defined add a linear transformation layer to convert hidden state to match output channels
    neuralNetworkConfig["Layers"][curLayer]["Type"] = "Layer/Linear";
    neuralNetworkConfig["Layers"][curLayer]["Output Channels"] = _problem->_solutionSize;
    neuralNetworkConfig["Layers"][curLayer]["Weight Scaling"] = _outputWeightsScaling;
    curLayer++;
  }
  // Applying a user-defined pre-activation function
  if (_neuralNetworkOutputActivation != "Identity")
  {
    // If and output activation is defined add it
    neuralNetworkConfig["Layers"][curLayer]["Type"] = "Layer/Activation";
    neuralNetworkConfig["Layers"][curLayer]["Function"] = _neuralNetworkOutputActivation;
    curLayer++;
  }
  if (!_neuralNetworkOutputLayer.empty() && !isDefined(_neuralNetworkOutputLayer, "Type")){
    // Applying output layer configuration in case of transformation masks
    neuralNetworkConfig["Layers"][curLayer] = _neuralNetworkOutputLayer;
  }
  neuralNetworkConfig["Layers"][curLayer]["Type"] = "Layer/Output";

  // Instancing training neural network
  auto trainingNeuralNetworkConfig = neuralNetworkConfig;
  trainingNeuralNetworkConfig["Batch Sizes"] = batchSizes;
  trainingNeuralNetworkConfig["Mode"] = "Training";
  _neuralNetwork = dynamic_cast<NeuralNetwork *>(getModule(trainingNeuralNetworkConfig, _k));
  _neuralNetwork->applyModuleDefaults(trainingNeuralNetworkConfig);
  _neuralNetwork->setConfiguration(trainingNeuralNetworkConfig);
  _neuralNetwork->initialize();
  (*_k)["Results"]["Description"] = _problem->_description;
  /*****************************************************************************
   * Setting up the LOSS FUNCTION
   *****************************************************************************/
  if (_lossFunction == "Direct Gradient" || _lossFunction == "DG" || _lossFunction.empty())
    _reward = NULL;
  else if (_lossFunction == "Mean Squared Error" || _lossFunction == "MSE")
    _reward = new korali::reward::MSE();
  else if (_lossFunction == "Cross Entropy" || _lossFunction == "CE")
    _reward = new korali::reward::CrossEntropy();
  else if (_lossFunction == "Negative Log Likelihood" || _lossFunction == "NLL")
    _reward = new korali::reward::NLL();
  else
    KORALI_LOG_ERROR("Unkown Loss Function %s", _lossFunction.c_str());
  if(_reward)
    (*_k)["Results"]["Loss Function"] = _lossFunction;
  /*****************************************************************************
   * Setting up possible REGULARIZERS
   *****************************************************************************/
  if(_regularizerType == "None" || _regularizerType.empty())
    _regularizer = NULL;
  else if (_regularizerType == "L1")
    _regularizer = new korali::regularizer::L1(_regularizerCoefficient);
  else if (_regularizerType == "L2")
    _regularizer = new korali::regularizer::L2(_regularizerCoefficient);
  else
    KORALI_LOG_ERROR("Unkown Regularizer Type %s", _regularizerType.c_str());
  if(_regularizer)
    (*_k)["Results"]["Regularizer"]["Type"] = _regularizerType;
  /*****************************************************************************
   * Setting up the LEARNING RATE (function)
   *****************************************************************************/
  if (_learningRateType == "Const" || _learningRateType.empty()){
    _learning_rate = new korali::learning_rate::LearningRate(_learningRate);
  } else if (_learningRateType == "Step Based"){
    _learning_rate = new korali::learning_rate::StepDecay(_learningRate, _learningRateDecayFactor, _learningRateSteps);
  } else if (_learningRateType == "Time Based"){
    _learning_rate = new korali::learning_rate::TimeDecay(_learningRate, _learningRateDecayFactor);
  }
    // else if (_learningRateType == "Decay"){
    //   if(_learningRateLowerBound)
    //     _learning_rate = new korali::learning_rate::Decay(_learningRate, _learningRateDecayFactor, _learningRateLowerBound);
    //   else
      // _learning_rate = new korali::learning_rate::Decay(_learningRate, _learningRateDecayFactor);
    // } else if (_learningRateType == "Custom")
    // TODO possibility to add custom functions
  else
    KORALI_LOG_ERROR("Unkown learning rate type provided %s", _learningRateType.c_str());
  /*****************************************************************************
   * Setting up the Metrics (function) if given
   *****************************************************************************/
  if (_metricsType == "Accuracy")
    _metrics = new korali::metrics::Accuracy();
  else if (_metricsType != "")
    KORALI_LOG_ERROR("Unkown Accuracy Function %s", _metricsType.c_str());
  /*****************************************************************
   * Initializing NN hyperparameters
   *****************************************************************/

  // If the hyperparameters have not been specified, produce new initial ones
  if (_hyperparameters.size() == 0) _hyperparameters = _neuralNetwork->generateInitialHyperparameters();
  _neuralNetwork->setHyperparameters(_hyperparameters, true);
  /*****************************************************************
   * Setting Up the Optimizer
   *****************************************************************/
  _optimizer->_nVars = _hyperparameters.size();
  // TODO: make _optimizer a variabel and add configs for defaults i.e. [optimizer][...]
  // _optimizer->applyModuleDefaults(js);
  _optimizer->initialize();
  _optimizer->_currentValue = _hyperparameters;
  // Check virtual function if optimizer implements weight decay
  if(_regularizer) _optimizer->_addWeightDecay = _optimizer->_implementsWeightDecay();
  // _optimizer->reset();
  //****************************************************************

  // Setting current loss
  _currentTrainingLoss = 0.0f;
  _currentValidationLoss = 0.0f;
}

void __className__::runGeneration()
{
  if (_mode == "Training" || _mode == "Automatic Training") runEpoch();
  if (_mode == "Predict") runPrediction();
  if (_mode == "Testing") runPrediction();
  if(_mode == "Predict" or _mode == "Testing" or _mode == "Training")
    _isOneEpochFinished = true;
}

void __className__::updateWeights(std::vector<float> &negativeGradientWeights){
  _optimizer->processResult(negativeGradientWeights);
  // // Getting new set of hyperparameters from the gradient descent algorithm
  auto &new_hyperparameters = _optimizer->_currentValue;
  _hyperparameters = new_hyperparameters;
  _neuralNetwork->setHyperparameters(new_hyperparameters);
}

void DeepSupervisor::runEpoch()
{
    // Check whether training concurrency exceeds the number of workers
    if (_batchConcurrency > _k->_engine->_conduit->getWorkerCount()) KORALI_LOG_ERROR("The batch concurrency requested (%lu) exceeds the number of Korali workers defined in the conduit type/configuration (%lu).", _batchConcurrency, _k->_engine->_conduit->getWorkerCount());
    // Updating solver's learning rate, if changed
    _optimizer->_eta = std::max(_learning_rate->get(this), _learningRateLowerBound);
    if(_learningRateSave){
      _totalLearningRate.push_back(_optimizer->_eta);
      if(_mode == "Automatic Training")
        (*_k)["Results"]["Learning Rate"] = _totalLearningRate;
      else
        (*_k)["Results"]["Learning Rate"] = _totalLearningRate.back();
    }
    // Checking that incoming data has a correct format
    _problem->verifyData();
    // Data ========================================================================
    BS = _problem->_trainingBatchSize;
    NW = BS / _batchConcurrency;
    N = _problem->_inputData.size();
    T = _problem->_inputData[0].size();
    IC = _problem->_inputData[0][0].size();
    OC = _problem->_solutionData[0].size();
    // Remainder for unequal batch sizes
    // size_t remainder = N % BS;
    // Iterations for epoch (without remainder)
    // =============================================================================
    size_t IforE = N / BS;
    auto nnHyperparameters = _neuralNetwork->getHyperparameters();
    if(_dataTrainingShuffel){
      shuffle(_problem->_inputData.begin(), _problem->_inputData.end(), input_reng);
      shuffle(_problem->_solutionData.begin(), _problem->_solutionData.end(), solution_reng);
    }
    auto inputDataFlat = flatten(_problem->_inputData);
    auto solutionDataFlat = flatten(_problem->_solutionData);
#ifdef DEBUG
    if(std::any_of(inputDataFlat.begin(), inputDataFlat.end(), [](const float v) { return !std::isfinite(v);}))
      KORALI_LOG_ERROR("Non finite input training values");
    if(std::any_of(solutionDataFlat.begin(), solutionDataFlat.end(), [](const float v) { return !std::isfinite(v);}))
      KORALI_LOG_ERROR("Non finite input solution values");
    if(_mode == "Training" && BS != N)
      KORALI_LOG_ERROR("[Mode Training]: Batch Size %zu is must be equal to the size of the input set %zu", BS, N);
#endif
    // Running epochs
    size_t bId; // batch id
    size_t wId; // worker id
    std::vector<Sample> samples(_batchConcurrency);
    // Optimizer performs maximization in KORALI -> need negative gradients!
    auto negGradientWeights = std::vector<float>(_neuralNetwork->_hyperparameterCount, 0.0f);
    _currentTrainingLoss = 0.0f;
    size_t input_size_per_BS = T*IC;
    size_t solution_size_per_BS = T*OC;
    for (bId = 0; bId < IforE; bId++)
    {
      if(_mode == "Automatic Training"){
        nnHyperparameters = _neuralNetwork->getHyperparameters();
        negGradientWeights = std::vector<float>(_neuralNetwork->_hyperparameterCount, 0.0f);
      }
      for (wId = 0; wId < _batchConcurrency; wId++)
      {
        // TODO: verify for distributed training
        // ==========================================================================================================
        samples[wId]["Sample Id"] = wId;
        samples[wId]["Module"] = "Solver";
        samples[wId]["Operation"] = "Run Training On Worker";
        // Problem: wrong sizes here!!!
        // wId*NW*input_size_per_BS, (wId+1)*NW*input_size_per_BS
        // samples[wId]["Input Data"] = std::vector<float>(inputDataFlat.begin()+bId*BS*input_size_per_BS+wId*NW*input_size_per_BS, inputDataFlat.begin()+bId*BS*input_size_per_BS+(wId+1)*NW*input_size_per_BS);
        // samples[wId]["Solution Data"] = std::vector<float>(solutionDataFlat.begin()+bId*BS*solution_size_per_BS+wId*NW*solution_size_per_BS, solutionDataFlat.begin()+bId*BS*solution_size_per_BS+(wId+1)*NW*solution_size_per_BS);
        samples[wId]["Hyperparameters"] = nnHyperparameters;
        if(_batchConcurrency==1){
          // Procsses whole batch on one worker
          samples[wId]["Input Dims"] = std::vector<size_t> {BS, T, IC};
          samples[wId]["Solution Dims"] = std::vector<size_t> {BS, OC};
          samples[wId]["Input Data"] = std::vector<float>(inputDataFlat.begin()+bId*BS*input_size_per_BS, inputDataFlat.begin()+(bId+1)*BS*input_size_per_BS);
          samples[wId]["Solution Data"] = std::vector<float>(solutionDataFlat.begin()+bId*BS*solution_size_per_BS, solutionDataFlat.begin()+(bId+1)*BS*solution_size_per_BS);
        } else{
          // Split batch among workers
          samples[wId]["Input Dims"] = std::vector<size_t> {NW, T, IC};
          samples[wId]["Solution Dims"] = std::vector<size_t> {NW, OC};
          samples[wId]["Input Data"] = std::vector<float>(inputDataFlat.begin()+(bId*BS+wId*NW)*input_size_per_BS, inputDataFlat.begin()+(bId*BS+(wId+1)*NW)*input_size_per_BS);
          samples[wId]["Solution Data"] = std::vector<float>(solutionDataFlat.begin()+(bId*BS + wId*NW)*solution_size_per_BS, solutionDataFlat.begin()+(bId*BS + (wId+1)*NW)*solution_size_per_BS);
        }
      }
      if(_batchConcurrency > 1){
        for (wId = 0; wId < _batchConcurrency; wId++) KORALI_START(samples[wId]);
        // Waiting for samples to finish
        KORALI_WAITALL(samples);
      } else{
        // Do not run on other workers
        runTrainingOnWorker(samples[0]);
      }
      for (wId = 0; wId < _batchConcurrency; wId++){
        if(_reward)
          _currentTrainingLoss += KORALI_GET(float, samples[wId], "Training Loss");
        const auto neg_dreward_dW = KORALI_GET(std::vector<float>, samples[wId], "Negative Hyperparameter Gradients");
        assert(neg_dreward_dW.size() ==  negGradientWeights.size());
        // Calculate the sum of the gradient batches/mean would only change the learning rate.
        #pragma omp parallel for simd
        for(size_t i = 0; i < neg_dreward_dW.size(); i++){
          negGradientWeights[i] += neg_dreward_dW[i];
        }
      }
      // Add the weight decay to the derivative of the loss if given ============================================================
      if(_regularizer){
        performWeightDecay(negGradientWeights);
      }
      // Need to update the weiths after each mini batch =======================================================================
      updateWeights(negGradientWeights);
    }
    // TODO: take care of remainder ==========================================================================================
    // ...
    // =======================================================================================================================
    if(_reward){
      _currentTrainingLoss = _currentTrainingLoss/ (float)(_batchConcurrency*IforE);
      _trainingLoss.push_back(_currentTrainingLoss);
      if(_hasValidationSet){
        BS = _problem->_validationBatchSize;
        IforE = NV / BS;
        _currentValidationLoss = 0.0f;
        _currentMetrics = 0.0f;
        // # TODO: reduction leads to segmentation fault
        // pragma omp parallel for reduction(+:_currentValidationLoss, _currentMetrics)
        for (bId = 0; bId < IforE; bId++) {
          // TODO: make this more efficient: loss expects a const vector maybe we can pass an rvalue reference instead somehow
          auto &&input = std::vector<std::vector<std::vector<float>>>{_problem->_dataValidationInput.begin()+bId*BS, _problem->_dataValidationInput.begin()+(bId+1)*BS};
          const auto y = std::vector<std::vector<float>>{_problem->_dataValidationSolution.begin()+bId*BS, _problem->_dataValidationSolution.begin()+(bId+1)*BS};
          auto y_val = getEvaluation(std::move(input));
          _currentValidationLoss -= _reward->reward(y, y_val);
          if(_metrics){
            // TODO: make a loop for different metrics and make metrics a vector to calcualte different metrics
            /* for(auto metric : metrics )..
            */
            _currentMetrics += _metrics->compute(y, y_val);
          }
        }
        _currentValidationLoss = _currentValidationLoss / (float)(_batchConcurrency*IforE);
        _validationLoss.push_back(_currentValidationLoss);
        if(_mode == "Automatic Training")
          (*_k)["Results"]["Validation Loss"] = _validationLoss;
        else
          (*_k)["Results"]["Validation Loss"] = _validationLoss.back();
        if(_metrics){
          _currentMetrics = _currentMetrics / (float)(_batchConcurrency*IforE);
          _totalMetrics.push_back(_currentMetrics);
          if(_mode == "Automatic Training")
            (*_k)["Results"]["Metrics"] = _totalMetrics;
          else
            (*_k)["Results"]["Metrics"] = _totalMetrics.back();
        }
      }
      if(_mode == "Automatic Training")
        (*_k)["Results"]["Training Loss"] = _trainingLoss;
      else
        (*_k)["Results"]["Training Loss"] = _trainingLoss.back();
    }
    ++_epochCount;
    (*_k)["Results"]["Epoch"] = _epochCount;
    (*_k)["Results"]["Mode"] = _mode;
}

void DeepSupervisor::runPrediction()
{
    // Check whether training concurrency exceeds the number of workers
    if (_batchConcurrency > _k->_engine->_conduit->getWorkerCount()) KORALI_LOG_ERROR("The batch concurrency requested (%lu) exceeds the number of Korali workers defined in the conduit type/configuration (%lu).", _batchConcurrency, _k->_engine->_conduit->getWorkerCount());
    // Checking that incoming data has a correct format

    if(!_problem->_testingBatchSize && _problem->_testingBatchSizes.empty()){
        _k->_logger->logWarning("Normal","'Testing Batch Size' has not been defined.\n");
        if(!_problem->_inputData.size()){
          KORALI_LOG_ERROR("No input supplied for prediction, assuming input data size as testing batch size.");
        }
        BS = _problem->_inputData.size();
    } else if(_problem->_testingBatchSize && !_problem->_testingBatchSizes.empty()){
      if(std::find(_problem->_testingBatchSizes.begin(), _problem->_testingBatchSizes.end(), _problem->_testingBatchSize) == _problem->_testingBatchSizes.end()){
        const std::string delim{"\n\t "};
        std::ostringstream concat;
        std::copy(_problem->_testingBatchSizes.begin(), _problem->_testingBatchSizes.end(), std::ostream_iterator<size_t>(concat, delim.c_str()));
        KORALI_LOG_ERROR("Testing Batch size (%lu) different than that of any of the configured testing batch sizes\n\t (%s)\n", _problem->_testingBatchSize, concat.str().c_str());
      }
      if (_problem->_testingBatchSize != _problem->_inputData.size())
        KORALI_LOG_ERROR("Testing Batch size %lu different than that of input data (%lu).\n", _problem->_testingBatchSize, _problem->_inputData.size());
      BS = _problem->_testingBatchSize;
    } else if (_problem->_testingBatchSize && _problem->_testingBatchSizes.empty()) {
      if (_problem->_testingBatchSize != _problem->_inputData.size())
        KORALI_LOG_ERROR("Testing Batch size %lu different than that of input data (%lu).\n", _problem->_testingBatchSize, _problem->_inputData.size());
      BS = _problem->_testingBatchSize;
    } else {
      KORALI_LOG_ERROR("Need to specify a testing batch size when suppling testing batch sizes.");
    }
    // Data ========================================================================
    N = _problem->_inputData.size();
    NW = BS / _batchConcurrency;
    T = _problem->_inputData[0].size();
    IC = _problem->_inputData[0][0].size();
    // =============================================================================
    const auto nnHyperparameters = _neuralNetwork->getHyperparameters();
    /////////////////////////////////////////////////////////////////////////////////////////////////////////
    // TODO: shuffel testing data
    // shuffle(_problem->_inputData.begin(), _problem->_inputData.end(), std::default_random_engine(seed));
    // shuffle(_problem->_solutionData.begin(), _problem._solutionData.end(), std::default_random_engine(seed));
    /////////////////////////////////////////////////////////////////////////////////////////////////////////
    // Calculating per worker dimensions
    auto inputDataFlat = flatten(_problem->_inputData);
    // Running epochs
    size_t wId; // worker id
    size_t input_size_per_BS = T*IC;
    std::vector<Sample> samples(_batchConcurrency);
    for (wId = 0; wId < _batchConcurrency; wId++)
    {
      samples[wId]["Sample Id"] = wId;
      samples[wId]["Module"] = "Solver";
      samples[wId]["Operation"] = "Forward Data";
      samples[wId]["Input Dims"] = std::vector<size_t> {NW, T, IC};
      samples[wId]["Input Data"] = std::vector<float>(inputDataFlat.begin()+wId*NW*input_size_per_BS, inputDataFlat.begin()+(wId+1)*NW*input_size_per_BS);
      samples[wId]["Hyperparameters"] = nnHyperparameters;
    }
    if(_batchConcurrency > 1){
      for (wId = 0; wId < _batchConcurrency; wId++) KORALI_START(samples[wId]);
      // Waiting for samples to finish
      KORALI_WAITALL(samples);
    } else{
      runForwardData(samples[0]);
    }
    _evaluation.clear();
    for (wId = 0; wId < _batchConcurrency; wId++){
      const auto ypred = KORALI_GET(std::vector<std::vector<float>>, samples[wId], "Evaluation");
      _evaluation.insert(_evaluation.end(), ypred.begin(), ypred.end());
    }
    if(_mode == "Testing" && _reward){
      _testingLoss = 0.0f;
      auto y_val = getEvaluation(_problem->_inputData);
      _testingLoss = -_reward->reward(_problem->_solutionData, y_val);
      (*_k)["Results"]["Testing Loss"] = _testingLoss;
      if(_metrics){
        // TODO: make a loop for different metrics and make metrics a vector to calcualte different metrics
        _currentMetrics = _metrics->compute(_problem->_solutionData, y_val);
      }
    }
}

std::vector<float> __className__::getHyperparameters()
{
  return _neuralNetwork->getHyperparameters();
}

void __className__::setHyperparameters(const std::vector<float> &hyperparameters)
{
  // Update evaluation network
  _neuralNetwork->setHyperparameters(hyperparameters);

  // Updating optimizer's current value
  _optimizer->_currentValue = hyperparameters;
}

std::vector<std::vector<float>> &__className__::getEvaluation(const std::vector<std::vector<std::vector<float>>> &input)
{
  // Grabbing constants
  const size_t N = input.size();

  // Running the input values through the neural network
  _neuralNetwork->forward(input);

  // Returning the output values for the last given timestep
#ifdef DEBUG
  auto &y_pred_batch = _neuralNetwork->getOutputValues(N);
  for(size_t i = 0; i < y_pred_batch.size(); i++){
    auto y_pred = y_pred_batch[i];
    if(std::any_of(y_pred.begin(), y_pred.end(), [](const float v) { return !std::isfinite(v);}))
      KORALI_LOG_ERROR("[Generation %zu / Batch %zu] Non finite output values after forwarding input data.", _k->_currentGeneration, i+1);
  }
#endif
  return _neuralNetwork->getOutputValues(N);
}

std::vector<std::vector<float>> &__className__::getEvaluation(std::vector<std::vector<std::vector<float>>> &&input)
{
  // Grabbing constants
  const size_t N = input.size();

  // Running the input values through the neural network
  _neuralNetwork->forward(input);

  // Returning the output values for the last given timestep
  return _neuralNetwork->getOutputValues(N);
}

std::vector<float> __className__::backwardGradients(const std::vector<std::vector<float>> &dreward)
{
  // Grabbing constants
  const size_t N = dreward.size();

  // Running the input values through the neural network
  _neuralNetwork->backward(dreward);
  // Getting NN hyperparameter gradients
  auto negGradientWeights = _neuralNetwork->getHyperparameterGradients(N);

  return negGradientWeights;
}


void __className__::runTrainingOnWorker(korali::Sample &sample)
{
  // Copy hyperparameters to workers neural network
  auto nnHyperparameters = KORALI_GET(std::vector<float>, sample, "Hyperparameters");
  _neuralNetwork->setHyperparameters(nnHyperparameters);
  sample._js.getJson().erase("Hyperparameters");
  // Getting input batch from sample
  auto inputDataFlat = KORALI_GET(std::vector<float>, sample, "Input Data");
  sample._js.getJson().erase("Input Data");
  // Getting solution from sample
  auto solutionDataFlat = KORALI_GET(std::vector<float>, sample, "Solution Data");
  sample._js.getJson().erase("Solution Data");
  // Getting input/solution dimensions
  auto inputDims = KORALI_GET(std::vector<size_t>, sample, "Input Dims");
  auto solutionDims = KORALI_GET(std::vector<size_t>, sample, "Solution Dims");
  sample._js.getJson().erase("Input Dims");
  sample._js.getJson().erase("Solution Dims");
  size_t BS = inputDims[0];
  size_t T = inputDims[1];
  size_t IC = inputDims[2];
  size_t OC = solutionDims[1];
  // De-flattening input and solution vectors
  auto input = deflatten(inputDataFlat, BS, T, IC);
  auto y = deflatten(solutionDataFlat, BS, OC);
  // FORWARD neural network on input data
  const auto yhat = getEvaluation(input);
  // TODO maybe add loss rather to problem than as part of learner ?
  // Making a copy of the solution data where we will store the derivative of the output data
  auto& dreward = y;
  float loss = 0.0;
  if(_reward){
    // TODO: maybe calculate the currentTrainingLoss after we updated the model inside main worker like in pytorch.
    loss = -_reward->reward(y, yhat);
    dreward = _reward->dreward(y, yhat);
  }
  // BACKPROPAGATE the derivative of the output loss
  auto negGradientWeights = backwardGradients(dreward);
  sample["Negative Hyperparameter Gradients"] = negGradientWeights;
  if(_reward)
    sample["Training Loss"] = loss;
}

void __className__::runForwardData(korali::Sample &sample)
{
  // Copy hyperparameters to workers neural network
  auto nnHyperparameters = KORALI_GET(std::vector<float>, sample, "Hyperparameters");
  _neuralNetwork->setHyperparameters(nnHyperparameters);
  sample._js.getJson().erase("Hyperparameters");
  auto inputDataFlat = KORALI_GET(std::vector<float>, sample, "Input Data");
  sample._js.getJson().erase("Input Data");
  // Getting input dimensions
  auto inputDims = KORALI_GET(std::vector<size_t>, sample, "Input Dims");
  sample._js.getJson().erase("Input Dims");
  size_t BS = inputDims[0];
  size_t T = inputDims[1];
  size_t IC = inputDims[2];
  // De-flattening input
  auto input = deflatten(inputDataFlat, BS, T, IC);
  sample["Evaluation"] = getEvaluation(input);
}

void __className__::finalize() {
  if(_mode == "Predict" or _mode == "Testing" or _mode == "Training"){
    // Variable to check if run only one epoch
    _isOneEpochFinished = false;
  }
}

void __className__::performWeightDecay(std::vector<float> &negGradientWeights){
  if(_regularizerSave)
    _currentPenalty += _regularizer->penalty(_neuralNetwork->getHyperparameters());
  auto d_penalty = _regularizer->d_penalty(_neuralNetwork->getHyperparameters());
  // If the optimizer implements weight decay give the responsibility of adding it to the optimizer
  if(_optimizer->_addWeightDecay)
    _optimizer->_weightDecay = d_penalty;
  else
    // otherwise just subtract the weights from the gradients (we do maximization)
    #pragma omp parallel for simd
    for(size_t i = 0; i < _neuralNetwork->_hyperparameterCount; i++){
      negGradientWeights[i] -= d_penalty[i];
    }
}



void __className__::printGenerationBefore(){

}


void __className__::printGenerationAfter()
{
  if (_mode == "Automatic Training")
  {
    std::ostringstream output{}; ;
    std::string sep{" | "};
    // Get progress bar
    size_t width = 60;
    char bar[width];
    _k->_logger->progressBar((_epochCount+1)/(float)(_epochs+1), bar, width);
    // Create output string
    output << std::fixed << std::setprecision(4) << "\r[Korali] Epoch " << _epochCount << " / " << _epochs << " " << bar << " Train Loss: " << _currentTrainingLoss;
    if(_hasValidationSet){
      output << sep << "Val. Loss: " << _currentValidationLoss;
      if(_metrics)
        output << sep << _metricsType.c_str() << " " << _currentMetrics;
    }
    output << sep << "Time " << _k->_genTime.back();
    if (!(_learningRateType == "Const" || _learningRateType.empty()))
      output << sep << "Learning Rate: " << _optimizer->_eta;
    _k->_logger->logInfo("Normal", "%s\r", output.str().c_str());

    if(_epochCount>=_epochs){
      _k->_logger->logInfo("Normal", "\n");
    }
  }
  if (_mode == "Testing")
  {
    std::ostringstream output{};
    std::string sep{" | "};
    output << std::fixed << std::setprecision(4) << " Test Loss: " << _testingLoss;
    if(_metrics)
      output << sep << _metricsType.c_str() << " " << _currentMetrics;
    _k->_logger->logInfo("Normal", "%s\n", output.str().c_str());
  }
}

void __className__::printRunAfter(){
  if(_mode == "Automatic Training"){
    Solver::printRunAfter();
  } else if(_mode == "Training" && _epochCount>=_epochs){
    // Solver::printRunAfter();
  }
}

std::vector<float> __className__::flatten(const std::vector<std::vector<float>> &vec) const{
  auto N = vec.size();
  auto OC = vec[0].size();
  std::vector<float> vec_flat;
  vec_flat.reserve(N*OC);
  #pragma omp parallel for simd collapse(2)
  for (size_t i = 0; i < N; i++)
    for (size_t j = 0; j < OC; j++)
      vec_flat[i * OC + j] = vec[i][j];
  return vec_flat;
}

std::vector<float> __className__::flatten(const std::vector<std::vector<std::vector<float>>> &vec) const{
  auto N = vec.size();
  auto T = vec[0].size();
  auto IC = vec[0][0].size();
  std::vector<float> vec_flat;
  vec_flat.reserve(N*T*IC);
  #pragma omp parallel for simd collapse(3)
  for (size_t i = 0; i < N; i++){
    for (size_t j = 0; j < T; j++){
      for (size_t k = 0; k < IC; k++){
        vec_flat[i * T * IC + j * IC + k] = vec[i][j][k];
      }
    }
  }
  return vec_flat;
}

std::vector<std::vector<float>> __className__::deflatten(const std::vector<float> &vec_flat, size_t BS, size_t OC) const{
  auto vec = std::vector<std::vector<float>>(BS, std::vector<float>(OC));
  #pragma omp parallel for simd collapse(2)
  for (size_t i = 0; i < BS; i++)
    for (size_t j = 0; j < OC; j++)
      vec[i][j] = vec_flat[i * OC + j];
  return vec;
}

std::vector<std::vector<std::vector<float>>> __className__::deflatten(const std::vector<float> &vec_flat, size_t BS, size_t T, size_t IC) const{
  auto vec = std::vector<std::vector<std::vector<float>>>(BS, std::vector<std::vector<float>>(T, std::vector<float>(IC)));
  #pragma omp parallel for simd collapse(3)
  for (size_t i = 0; i < BS; i++)
    for (size_t j = 0; j < T; j++)
      for (size_t k = 0; k < IC; k++)
        vec[i][j][k] = vec_flat[i * T * IC + j * IC + k];
  return vec;
}

__moduleAutoCode__;

__endNamespace__;
