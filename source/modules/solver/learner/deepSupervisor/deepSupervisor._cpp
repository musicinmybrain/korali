#include "engine.hpp"
#include "modules/experiment/experiment.hpp"
#include "modules/solver/learner/deepSupervisor/deepSupervisor.hpp"
#include "sample/sample.hpp"
#include <omp.h>

/******************************************************************
 * Performance considerations:
 * + Do not require gradient if the solver is purely stochastic
 *****************************************************************/

namespace korali
{
namespace solver
{
namespace learner
{
void DeepSupervisor::initialize()
{
  // If the learner is alread initialized, do not do anything else
  if (_isLearnerInitialized == false)
  {
    // Getting problem pointer
    _problem = dynamic_cast<problem::SupervisedLearning *>(_k->_problem);

    /*****************************************************************
    * Obtaining parallel configuration
    *****************************************************************/
    _evaluationNeuralNetworks.resize(_maxThreads);

    /*****************************************************************
   * Setting up Neural Networks
   *****************************************************************/

    // Setting the number of input layer nodes as number of input vector size
    _neuralNetwork["Layers"][0]["Node Count"] = _problem->_inputVectorSize;

    // Setting the number of output layer nodes as number of output vector size
    size_t outputLayerId = _neuralNetwork["Layers"].size() - 1;
    _neuralNetwork["Layers"][outputLayerId]["Node Count"] = _problem->_solutionVectorSize;

    // Creating training neural network, setting its batch size as the number of inputs to the problem
    auto neuralNetworkConfig = _neuralNetwork;
    _trainingNeuralNetwork = dynamic_cast<NeuralNetwork *>(getModule(neuralNetworkConfig, _k));

    // Creating inference neural network, setting its batch size as one (evaluation per call) and following the global (mean/variance) stats of the trained NN
    neuralNetworkConfig = _neuralNetwork;

    for (size_t i = 0; i < _maxThreads; i++)
    {
      auto nnConfig = neuralNetworkConfig;
      _evaluationNeuralNetworks[i] = dynamic_cast<NeuralNetwork *>(getModule(nnConfig, _k));
    }

    /*****************************************************************
   * Initializing NN hyperparameters
   *****************************************************************/

    auto hyperparameters = _trainingNeuralNetwork->generateInitialHyperparameters();

    // Creating and setting hyperparameter structures
    _trainingNeuralNetwork->setHyperparameters(hyperparameters);

    // Copying hyperparameters and normalization parameters from training to evaluation
    for (size_t i = 0; i < _maxThreads; i++)
      _evaluationNeuralNetworks[i]->setHyperparameters(hyperparameters);

    /*****************************************************************
   * Setting up weight and bias optimization experiment
   *****************************************************************/

    auto weightAndBiasParameters = _trainingNeuralNetwork->getHyperparameters();

    if (_optimizer == "Adam") _adamSolver = new korali::fAdam(weightAndBiasParameters.size());
    if (_optimizer == "AdaBelief") _adamSolver = new korali::fAdaBelief(weightAndBiasParameters.size());

    // Setting learning rate
    _adamSolver->_eta = _learningRate;

    for (size_t i = 0; i < weightAndBiasParameters.size(); i++)
      _adamSolver->_initialValues[i] = weightAndBiasParameters[i];

    // Resetting
    _adamSolver->reset();

    // Setting learner initialized flag
    _isLearnerInitialized = true;
  }

  // Initialize statistics
  if (_k->_currentGeneration == 0)
  {
    _minimumLoss = korali::Inf;
    _suboptimalGenerationCount = 0;
  }

  // Update/Copy the inputs into the NN
  _trainingNeuralNetwork->setInput(_problem->_inputs);
}

void DeepSupervisor::runGeneration()
{
  for (size_t step = 0; step < _stepsPerGeneration; step++)
  {
    // Forward propagating the input values through the training neural network
    _trainingNeuralNetwork->forward();

    // Getting solution's dimensions
    size_t batchSize = _problem->_solution.size();
    size_t solutionSize = _problem->_solution[0].size();

    // Saving values for the loss function and its gradient
    _currentLoss = 0.0;
    std::vector<std::vector<float>> lossDiff(batchSize);

    // Assigning values to evaluation and gradients, depending on the loss function selected
    for (size_t i = 0; i < batchSize; i++)
    {
      lossDiff[i].resize(solutionSize);

      for (size_t j = 0; j < solutionSize; j++)
      {
        float diff = 0.0;
        if (_lossFunction == "Direct Gradient") diff = _problem->_solution[i][j];
        if (_lossFunction == "Mean Squared Error") diff = _problem->_solution[i][j] - _trainingNeuralNetwork->_outputValues[i][j];
        lossDiff[i][j] = diff;
        _currentLoss += diff * diff;
      }
    }

    // Averaging the loss across the batch size
    _currentLoss = _currentLoss / ((float)batchSize * 2.0f);

    // Backward propagating the gradients through the training neural network
    _trainingNeuralNetwork->backward(lossDiff);

    // If we need the gradients of the weights, we also compute them
    auto gradient = _trainingNeuralNetwork->getHyperparameterGradients();

    // Passing loss and gradient through an ADAM update
    _adamSolver->processResult(_currentLoss, gradient);

    // Updating best loss if better, or increasing suboptimal generation count
    if (_currentLoss < _minimumLoss)
      _minimumLoss = _currentLoss;
    else
      _suboptimalGenerationCount++;

    // Getting new set of hyperparameters from Adam
    _trainingNeuralNetwork->setHyperparameters(_adamSolver->_currentValue);
  }
}

void DeepSupervisor::finalize()
{
  // Copying hyperparameters and normalization parameters from training to evaluation
  auto hyperparameters = _trainingNeuralNetwork->getHyperparameters();

  for (size_t i = 0; i < _maxThreads; i++)
    _evaluationNeuralNetworks[i]->setHyperparameters(hyperparameters);

  _hyperparameters = hyperparameters;
}

std::vector<float> DeepSupervisor::getHyperparameters()
{
  return _trainingNeuralNetwork->getHyperparameters();
}

void DeepSupervisor::setHyperparameters(const std::vector<float> &hyperparameters)
{
  // Update evaluation network
  for (size_t i = 0; i < _maxThreads; i++)
    _evaluationNeuralNetworks[i]->setHyperparameters(hyperparameters);
}

std::vector<std::vector<float>> DeepSupervisor::getEvaluation(const std::vector<std::vector<float>> &inputBatch)
{
  // Getting current thread ID
  size_t curThread = omp_get_thread_num();

  // Updating NN inputs
  _evaluationNeuralNetworks[curThread]->setInput(inputBatch);

  // Running the input values through the neural network
  _evaluationNeuralNetworks[curThread]->forward();

  return _evaluationNeuralNetworks[curThread]->_outputValues;
}

std::vector<float> DeepSupervisor::getEvaluation(const std::vector<float> &inputBatch)
{
  // Getting current thread ID
  size_t curThread = omp_get_thread_num();

  // Updating NN inputs
  _evaluationNeuralNetworks[curThread]->setInput({inputBatch});

  // Running the input values through the neural network
  _evaluationNeuralNetworks[curThread]->forward();

  return _evaluationNeuralNetworks[curThread]->_outputValues[0];
}

std::vector<float> DeepSupervisor::getGradients(const std::vector<float> &outputDiffs)
{
  // Getting current thread ID
  size_t curThread = omp_get_thread_num();

  // Backward propagating the gradients through the training neural network
  _evaluationNeuralNetworks[curThread]->backward({outputDiffs});

  // Running backward propagation wrt data
  return _evaluationNeuralNetworks[curThread]->getDataGradients();
}

void DeepSupervisor::printGenerationAfter()
{
  // Printing results so far
  if (_lossFunction == "Mean Squared Error")
  {
    _k->_logger->logInfo("Normal", " + Training Loss: %.15f\n", _currentLoss);
    _k->_logger->logInfo("Detailed", " + Suboptimal Generation Count: %lu\n", _suboptimalGenerationCount);
  }
  else if (_lossFunction == "Direct Gradient")
    _k->_logger->logInfo("Normal", " + Gradient L2-Norm: %.15f\n", sqrt(_currentLoss));
}

} // namespace learner

} // namespace solver

} // namespace korali
