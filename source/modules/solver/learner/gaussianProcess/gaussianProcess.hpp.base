#pragma once

#include "engine.hpp"

#include "auxiliar/libgp/gp.h"

#include "modules/experiment/experiment.hpp"
#include "modules/problem/supervisedLearning/supervisedLearning.hpp"
#include "modules/solver/learner/learner.hpp"

#include <memory>

__startNamespace__;

class __className__ : public __parentClassName__
{
  public:
  /**
  * @brief Storage for the output values
  */
  std::vector<std::vector<float>> _outputValues;

  /**
  * @brief Korali engine for optimizing NN weights and biases
  */
  problem::SupervisedLearning *_problem;

  /**
  * @brief Pointer to the gaussian processes library
  */
  std::unique_ptr<libgp::GaussianProcess> _gp;

  /**
  * @brief Korali experiment for optimizing the GP's parameters
  */
  Experiment _koraliExperiment;

  std::vector<std::vector<float>> &getEvaluation(const std::vector<std::vector<std::vector<float>>> &input) override;
  std::vector<float> getHyperparameters() override;
  void setHyperparameters(const std::vector<float> &hyperparameters) override;
  void initialize() override;
  void runGeneration() override;
  void printGenerationAfter() override;
};

__endNamespace__;


