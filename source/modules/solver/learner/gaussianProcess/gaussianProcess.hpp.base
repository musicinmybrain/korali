@startIncludeGuard

#include "engine.hpp"

#include "auxiliar/libgp/gp.h"

#include "modules/experiment/experiment.hpp"
#include "modules/problem/supervisedLearning/supervisedLearning.hpp"
#include "modules/solver/learner/learner.hpp"

#include <memory>

@startNamespace

class @className : public @parentClassName
{
  public:
  ~GaussianProcess();

  /**
  * @brief Storage for the output values
  */
  std::vector<std::vector<float>> _outputValues;

  /**
  * @brief Korali engine for optimizing NN weights and biases
  */
  problem::SupervisedLearning *_problem;

  /**
  * @brief Pointer to the gaussian processes library
  */
  std::unique_ptr<libgp::GaussianProcess> _gp;

  /**
  * @brief Korali experiment for optimizing the GP's parameters
  */
  Experiment _koraliExperiment;

  /**
  * @brief Model function to evaluate the error function of the GP
  * @param sample The sample containing the proposal parameters
  * @param gp Pointer to the GP
  */
  static void runSample(Sample &sample, libgp::GaussianProcess *gp);

  std::vector<std::vector<float>> &getEvaluation(const std::vector<std::vector<std::vector<float>>> &input) override;
  std::vector<float> getHyperparameters() override;
  void setHyperparameters(const std::vector<float> &hyperparameters) override;
  void initialize() override;
  void runGeneration() override;
  void printGenerationAfter() override;
};

@endNamespace

@endIncludeGuard
