#ifndef _KORALI_SOLVER_DeepGD_HPP_
#define _KORALI_SOLVER_DeepGD_HPP_

#include "engine.hpp"
#include "modules/experiment/experiment.hpp"
#include "modules/neuralNetwork/neuralNetwork.hpp"
#include "modules/problem/supervisedLearning/supervisedLearning.hpp"
#include "modules/solver/learner/learner.hpp"

namespace korali
{
namespace solver
{
namespace learner
{
class DeepGD : public Learner
{
  public:
  /**
 * @brief Korali engine for optimizing NN weights and biases
 */
  problem::SupervisedLearning *_problem;

  /**
 * @brief Korali engine for optimizing the NN's weights and biases
 */
  korali::Engine _optEngine;

  /**
 * @brief Korali engine for optimizing the NN's weights and biases
 */
  korali::Experiment _optExperiment;

  /**
   * @brief A neural network to be trained based on inputs and solutions
   */
  NeuralNetwork *_trainingNeuralNetwork;

  /**
   * @brief A neural network to perform inference of inputs and obtain gradients
   */
  NeuralNetwork *_evaluationNeuralNetwork;

  /**
   * @brief Keeps track of whether the training/validation configuration has been built
   */
  bool _isLearnerInitialized;

  /**
  * @brief Model function to evaluate a given NN weight/bias configuration
  * @param sample The sample containing proposal NN weight/bias configuration.
  * @param nn The neural network to update
  * @param solution Solution values from which to calculate loss and differentials
  * @param getGradients Flag that indicates whether the gradients are required
  */
  void evaluateHyperparameters(korali::Sample &sample, NeuralNetwork *nn, const std::vector<std::vector<double>> &solution, bool getGradients = false);

  std::vector<double> getGradients(const std::vector<double> &outputDiffs) override;
  std::vector<double> getEvaluation(const std::vector<double> &inputBatch) override;

  knlohmann::json &getHyperparameters() override;
  void setHyperparameters(const knlohmann::json &parameters) override;
  void finalize() override;
  void initialize() override;
  void runGeneration() override;
  void printGenerationAfter() override;
};

} // namespace learner
} // namespace solver
} // namespace korali

#endif // _KORALI_SOLVER_DEEP_DeepGD_HPP_
