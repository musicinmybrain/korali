#ifndef _KORALI_SOLVER_CMAES_HPP_
#define _KORALI_SOLVER_CMAES_HPP_

#include "modules/solver/solver.hpp"
#include "modules/distribution/univariate/normal/normal.hpp"
#include "modules/distribution/univariate/uniform/uniform.hpp"
#include <vector>

namespace korali { namespace solver {

class CMAES : public korali::Solver
{
 private:

 /**
  * @brief Prepares generation for the next set of evaluations
 */
 void prepareGeneration();

 /**
  * @brief Evaluates a single sample
  * @param sampleIdx Index of the sample to evaluate
 */
 void sampleSingle(size_t sampleIdx);

 /**
   * @brief Adapts the covariance matrix.
   * @param hsig Sign
  */
 void adaptC(int hsig);

 /**
    * @brief Updates means of covariance matrix
 */
 void updateSigma(); /* update Sigma */


 /**
    * @brief Updates the system of eigenvalues and eigenvectors
    * @param M Input matrix
 */
 void updateEigensystem(std::vector<double>& M);

 void numericalErrorTreatment();
 void eigen(size_t N, std::vector<double>& C, std::vector<double>& diag, std::vector<double>& Q) const;
 void sort_index(const std::vector<double>& vec, std::vector<size_t>& _sortingIndex, size_t n) const;
 // Private CCMAES-Specific Methods
 void initMuWeights(size_t numsamples); /* init _muWeights and dependencies */
 void initCovariance(); /* init sigma, C and B */
 void checkMeanAndSetRegime(); /* check if mean inside valid domain, if yes, update internal vars */
 void updateConstraints();
 void updateViabilityBoundaries(); /* update & shrink viability boundaries */
 void handleConstraints(); /* covariance adaption for invalid samples */
 void reEvaluateConstraints(); /* re evaluate constraints, in handleConstraints,  count violations etc.. */
 // Integer Optimization
 void updateDiscreteMutationMatrix();
 void updateDistribution(std::vector<korali::Sample>& samples);

 public:

 void setInitialConfiguration() override;
 void finalize() override;
 void runGeneration() override;
 void printGenerationBefore() override;
 void printGenerationAfter() override;
};

} } // namespace korali::solver

#endif // _KORALI_SOLVER_CMAES_HPP_
