#include "korali.hpp"
#include <chrono>

/************************************************************************/
/*                  Constructor / Destructor Methods                    */
/************************************************************************/

Korali::Variable::Variable()
{
 _name = "Unnamed";
 _isLogSpace = false;
}

Korali::Variable::~Variable()
{

}

void Korali::Variable::getDistribution(nlohmann::json& js)
{
 js["Seed"] = _seed;
 js["Type"] = _distributionType;

 if (_distributionType == "Cauchy")
 {
  js["Location"] = _a;
  js["Scale"] = _b;
 }

 if (_distributionType == "Exponential")
 {
  js["Mean"] = _a;
  js["Location"] = _b;
 }

 if (_distributionType == "Gamma")
 {
  js["Scale"] = _a;
  js["Shape"] = _b;
 }

 if (_distributionType == "Gaussian")
 {
  js["Mean"] = _a;
  js["Standard Deviation"] = _b;
 }

 if (_distributionType == "Laplace")
 {
  js["Mean"] = _a;
  js["Width"] = _b;
 }

 if (_distributionType == "Uniform")
 {
  js["Minimum"] = _a;
  js["Maximum"] = _b;
 }

 if (_distributionType == "Geometric")
 {
  js["Success Probability"] = _a;
 }
}

/************************************************************************/
/*                    Functional Methods                                */
/************************************************************************/

void Korali::Variable::getConfiguration(nlohmann::json& js)
{
 js["Log Space"] = _isLogSpace;
 js["Name"] = _name;
 getDistribution(js["Prior Distribution"]);
 getProblemSettings(js);
 getSolverSettings(js);
}

void Korali::Variable::setConfiguration(nlohmann::json& js)
{
 _isLogSpace = consume(js, { "Log Space"}, KORALI_BOOLEAN, "false");
 _name = consume(js, { "Name" }, KORALI_STRING);

 setDistribution(js["Prior Distribution"]);
 js.erase("Prior Distribution");

 setSolverSettings(js);
 setProblemSettings(js);
}

