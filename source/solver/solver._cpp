#include "solver/solver.hpp"

korali::Solver* korali::_currentSolver;

void korali::Solver::solverWrapper() { _currentSolver->run(); }

void korali::Solver::run()
{
  co_switch(_k->_thread);

  auto t0 = std::chrono::system_clock::now();

  _currentGeneration++;
  _startingGeneration = _currentGeneration;

  while(checkTermination() == false)
  {
   if (_currentGeneration % _consoleFrequency == 0)
   {
    korali::logInfo("Minimal",  "--------------------------------------------------------------------\n");
    korali::logInfo("Minimal",  "Current Generation: #%zu\n", _currentGeneration);
    printGenerationBefore();
   }

   // Timing and Profiling Start
   auto t0 = std::chrono::system_clock::now();

   runGeneration();

   // Timing and Profiling End
   auto t1 = std::chrono::system_clock::now();

   if (_currentGeneration % _consoleFrequency == 0)
   {
    printGenerationAfter();
    korali::logInfo("Detailed", "Solver: %lu - Generation Time: %.3fs\n", _solverId, std::chrono::duration<double>(t1-t0).count());
   }

   if (_saveFrequency > 0)
   if (_currentGeneration % _saveFrequency == 0) saveState();

   _currentGeneration++;
  }

  auto t1 = std::chrono::system_clock::now();

  // Saving last generation and final.json
  _currentGeneration--;
  _isFinished = true;
  saveState();

  korali::logInfo("Minimal", "--------------------------------------------------------------------\n");
  korali::logInfo("Minimal", "%s finished correctly.\n", getType().c_str());
  for (size_t i = 0; i < _terminationCriteria.size(); i++) korali::logInfo("Normal", "Termination Criterion Met: %s\n", _terminationCriteria[i].c_str());
  finalize();
  korali::logInfo("Normal", "Final Generation: %lu\n", _currentGeneration);
  korali::logInfo("Normal", "Elapsed Time: %.3fs\n", std::chrono::duration<double>(t1-t0).count());

  co_switch(_k->_thread);
  korali::logError("Trying to continue finished solver thread.\n");
}

void korali::Solver::saveState()
{
 char genFileName[256];

 sprintf(genFileName, "gen%05d.json", _currentGeneration);

 // Getting configuration
 auto js = nlohmann::json();
 this->getConfiguration(js);

 std::string fileName = "./" + _subDirPath + "/" + genFileName;
 korali::JsonInterface::saveJsonToFile(fileName.c_str(), js);
}
