#ifndef _KORALI_SOLVER_DEA_HPP_
#define _KORALI_SOLVER_DEA_HPP_

#include "solver/solver.hpp"
#include "distribution/univariate/normal/normal.hpp"
#include "distribution/univariate/uniform/uniform.hpp"
#include "problem/evaluation/evaluation.hpp"
#include <vector>

namespace korali { namespace solver {

class DEA : public korali::Solver
{
 private:

 korali::distribution::univariate::Normal* _normalGenerator; /* Normal random number generator */
 korali::distribution::univariate::Uniform* _uniformGenerator; /* Uniform random number generator */

 void mutateSingle(size_t sampleIdx); /* sample individual */
 void fixInfeasible(size_t sampleIdx); /* force sample inside lower & upper bounds */
 void updateSolver(); /* update states of DEA */
 void initSamples();
 void prepareGeneration();

 korali::problem::Evaluation* _problem;

 public:

 void initialize() override;
 void finalize() override;
 void runGeneration() override;
 void printGenerationBefore() override;
 void printGenerationAfter() override;
};

} } // namespace korali::solver

#endif // _KORALI_SOLVER_DEA_HPP_
