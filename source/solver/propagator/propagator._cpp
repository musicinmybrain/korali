#include "solver/propagator/propagator.hpp"

void korali::solver::Propagator::initialize()
{
 // Initializing variable defaults
 _propagationProblem = dynamic_cast<korali::problem::Propagation*>(_k->_problem);

 if (_propagationProblem == NULL)
   korali::logError("Propagator solver can only solve problems of type 'Propagation'.\n");

 _thetaCount = _k->_variables.size();
 _sampleCount = _k->_variables[0]->_loadedValues.size();

 if (_propagationsPerGeneration == 0) _propagationsPerGeneration = _sampleCount;
 if (_maxPropagations == 0) _maxPropagations = _sampleCount;

 _currentSample = 0;
}

void korali::solver::Propagator::runGeneration()
{
  if (_currentSample + _propagationsPerGeneration > _maxPropagations) _propagationsPerGeneration = _maxPropagations - _currentSample;

  std::vector<korali::Sample> samples(_propagationsPerGeneration);

  for (size_t i = 0; i < _propagationsPerGeneration; i++)
  {
    std::vector<double> sampleData;
    for (size_t j = 0; j < _thetaCount; j++) sampleData.push_back(_k->_variables[j]->_loadedValues[_currentSample]);

    korali::logInfo("Detailed", "Running sample %zu with values:\n         ", _currentSample);
    for(auto& x : sampleData) korali::logData("Detailed", " %le   ", x);
    korali::logData("Detailed", "\n");

    samples[i] = sampleData;
    samples[i].setSampleId(_currentSample);
    samples[i].start([problem = _propagationProblem](korali::Sample& sample){ problem->propagateSample(sample); });
    _currentSample++;
  }

  korali::Sample::waitAll(samples);
}

void korali::solver::Propagator::printGenerationBefore()
{
}

void korali::solver::Propagator::printGenerationAfter()
{
 korali::logInfo("Minimal", "Total Propagations %lu.\n", _propagationProblem->_propagationCount);
}
