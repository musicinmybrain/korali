#ifndef _KORALI_SOLVER_MCMC_HPP_
#define _KORALI_SOLVER_MCMC_HPP_

#include "solver/sampler/sampler.hpp"
#include "distribution/univariate/normal/normal.hpp"
#include "distribution/univariate/uniform/uniform.hpp"
#include "problem/evaluation/evaluation.hpp"
#include <vector>

namespace korali { namespace solver { namespace sampler {

class MCMC : public korali::solver::Sampler
{
 private: 

 double recursiveAlpha(double& deonominator, const double leaderLoglikelihood, const double* loglikelihoods, size_t N) const;
 void updateState();
 void generateCandidate(size_t sampleIdx);
 void choleskyDecomp(const std::vector<double>& inC, std::vector<double>& outL) const;
 void finishSample(size_t sampleId);

 public:

 void initialize() override;
 void finalize() override;
 void runGeneration() override;
 void printGenerationBefore() override;
 void printGenerationAfter() override;
};

} } } // namespace korali::solver::sampler

#endif // _KORALI_SOLVER_MCMC_HPP_
