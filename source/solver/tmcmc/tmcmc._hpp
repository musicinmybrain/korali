#ifndef _KORALI_SOLVER_TMCMC_HPP_
#define _KORALI_SOLVER_TMCMC_HPP_

#include "solvers/base.hpp"
#include "distributions/base.hpp"
#include "distributions/univariate/uniform/uniform.hpp"
#include "distributions/multivariate/normal/normal.hpp"
#include "distributions/specific/multinomial/multinomial.hpp"
#include "problems/evaluation/bayesian/base.hpp"
#include <gsl/gsl_vector.h>

namespace korali { namespace solver {

class TMCMC : public korali::solver::Base
{
 private:

 void setBurnIn();
 void prepareGeneration();
 void processGeneration();
 void generateCandidate(size_t candidate);
 void minSearch(double const *fj, size_t fn, double pj, double objTol, double& xmin, double& fmin);
 void processEvaluation(const size_t sampleId);
 static double tmcmc_objlogp(double x, const double *fj, size_t fn, double pj, double zero);
 static double objLog(const gsl_vector *v, void *param);

 korali::distribution::specific::Multinomial* _multinomialGenerator; /* Multivariate Normal random number generator */
 korali::distribution::multivariate::Normal* _multivariateGenerator; /* Multivariate Normal random number generator */
 korali::distribution::univariate::Uniform* _uniformGenerator; /* Uniform random number generator */

 size_t N; // Number of variables
 korali::problem::evaluation::bayesian::Base* _bayesianProblem;

 public:

 void initialize() override;
 void finalize() override;
 void runGeneration() override;
 void printGenerationBefore() override;
 void printGenerationAfter() override;
};

} } // namespace korali::Solver

#endif // _KORALI_SOLVER_TMCMC_HPP_
