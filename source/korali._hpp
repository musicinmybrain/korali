#ifndef _KORALI_HPP_
#define _KORALI_HPP_

#include <vector>
#include <functional>

// Include Files

namespace Korali
{

class Engine {

 public:

 // Start functions
 void initialize();
 void start(bool isDryRun);
 void run() { start(false); }
 void dry() { start(true);  }

 // Model configuration methods
 std::function<void(Korali::Model::Direct&)> _directModel;
 std::function<void(Korali::Model::Likelihood&)> _likelihoodModel;
 std::function<void(Korali::Model::Reference&)> _referenceModel;
 std::vector<std::function<void(Korali::Model::Constraint&)>> _constraints;

 void setDirectModel(std::function<void(Korali::Model::Direct&)> model);
 void setLikelihoodModel(std::function<void(Korali::Model::Likelihood&)> model);
 void setReferenceModel(std::function<void(Korali::Model::Reference&)> model);
 void addConstraint(std::function<void(Korali::Model::Constraint&)> constraint);

 // Python and Json Configuration Binding Methods
 nlohmann::json  _js;
 nlohmann::json& operator[](std::string key) { return _js[key]; }

 KoraliJsonWrapper _wr;
 KoraliJsonWrapper& getItem(const std::string& key)           { _wr._js = &(_js[key]); return _wr;}
 KoraliJsonWrapper& getItem(const unsigned long int& key)     { _wr._js = &(_js[key]); return _wr;}
 void setItem(const std::string& key, const std::string& val) { _js[key] = val; }
 void setItem(const std::string& key, const double& val)      { _js[key] = val; }
 void setItem(const std::string& key, const int& val)         { if(_js[key].is_boolean()) _js[key] = val == true; else _js[key] = val; }
 void setItem(const std::string& key, const bool& val)        { _js[key] = val; }

 // State save/load methods
 void loadState(std::string fileName);
 void saveState(std::string fileName);
 void saveState(int fileId);

 // Serialization Methods
 void getConfiguration(nlohmann::json& js);
 void setConfiguration(nlohmann::json& js);
};

extern Engine* _k;
extern std::vector<std::function<void(Korali::Model::Direct&)>> __korali_models;

} // namespace Korali

#endif // _KORALI_HPP_
