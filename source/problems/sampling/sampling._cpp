#include "korali.hpp"

void Korali::Problem::Sampling::initialize()
{
 if (_variables.size() == 0) Korali::logError("Sampling problems require at least one variable.\n");
}

void Korali::Problem::Sampling::finalize()
{

}

bool Korali::Problem::Sampling::isSampleFeasible(double* sample)
{
 for (size_t i = 0; i < _variables.size(); i++)
  if (isfinite(_variables[i]->_priorDistribution->getLogDensity(sample[i])) == false) return false;
 return true;
}

void Korali::Problem::Sampling::runModel(std::vector<double> sample, size_t sampleId)
{
 // Creating model data.
  _modelData.setSample(sampleId, sample);

  // Executing Model
  _objectiveFunction(_modelData);
}

size_t Korali::Problem::Sampling::getVariableCount()
{
 return _variables.size();
}

Korali::Variable* Korali::Problem::Sampling::getVariable(size_t variableId)
{
 return _variables[variableId];
}

double Korali::Problem::Sampling::evaluateSampleFitness()
{
 size_t resultSize = _modelData.getResultsSize();
 if (resultSize != 0) Korali::logError("Sampling problems require exactly 1 result. Provided: %lu.\n", resultSize);
 return _modelData.getResults()[0];
}

double Korali::Problem::Sampling::evaluateSampleLogPrior(double* sample)
{
  return 0.0;
}
