#ifndef _KORALI_PROBLEM_PSI_HPP_
#define _KORALI_PROBLEM_PSI_HPP_

#include "problems/evaluation/bayesian/hierarchical/base.hpp"
#include "distributions/base.hpp"

namespace korali { namespace problem { namespace Evaluation { namespace Bayesian { namespace Hierarchical {

class Psi : public korali::problem::Evaluation::Bayesian::Hierarchical::Base
{
 private:

 struct conditionalPriorInfo
 {
  nlohmann::json _conditionalJson;
  std::vector<size_t> _samplePositions;
  std::vector<std::string> _sampleKeys;
 };

 std::vector<nlohmann::json> _subProblemsJson;
 size_t _subProblemsCount;
 size_t _subProblemsVariablesCount;
 std::vector<std::vector<std::vector<double>>> _subProblemsSampleCoordinates;
 std::vector<std::vector<double>> _subProblemsSampleLogLikelihoods;
 std::vector<std::vector<double>> _subProblemsSampleLogPriors;

 std::vector<conditionalPriorInfo> _conditionalPriorInfos;

 public:

 void updateConditionalPriors(korali::Sample& sample);
 void evaluateLogLikelihood(korali::Sample& sample) override;
 void evaluatePsiLikelihood(korali::Sample& sample);
 void initialize() override;
};

} } } } } // namespace korali::problem::Evaluation::Bayesian::Hierarchical


#endif // _KORALI_PROBLEM_PSI_HPP_
