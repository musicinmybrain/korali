#include "problems/bayesian/hierarchical/psi/psi.hpp"
#include "distributions/univariate/normal/normal.hpp"
#include "engine/engine.hpp"

void Korali::Problem::Bayesian::Hierarchical::Psi::initialize()
{
 Korali::Problem::Bayesian::Base::initialize();

 if (_conditionalPriors.size() == 0) Korali::logError("Hierarchical Bayesian (Psi) problems require at least one conditional prior\n");

 if (_subProblems.size() < 2) Korali::logError("Hierarchical Bayesian (Psi) problem requires defining at least two executed sub-problems.\n");

 // Obtaining sub problem count and variable counts
 _subProblemsCount = _subProblems.size();
 _subProblemsVariablesCount = _conditionalPriors.size();

 // Creating JSON object from string
 for (size_t i = 0; i < _subProblemsCount; i++){
   // std::cout << "---->" << _subProblems[i].c_str() << std::endl;
   _subProblemsJson.push_back(Korali::JsonInterface::loadJsonFromFile(_subProblems[i].c_str()));
 }

 // Sub-problem correctness checks
 for (size_t i = 0; i < _subProblemsCount; i++)
 {
  std::string problemName = _subProblemsJson[i]["Problem"]["Type"];
  if (problemName.rfind("Bayesian Inference", 0) != 0)
   Korali::logError("The Hierarchical Bayesian (Psi) can only accept sub-problems of type 'Bayesian Inference' but sub-Problem %lu is of type: '%s'.\n", i, _subProblemsJson[i]["Problem"]["Type"].get<std::string>().c_str());

  if (_conditionalPriors.size() != _subProblemsJson[i]["Variables"].size())
   Korali::logError("Sub-problem %lu contains a different number of variables (%lu) than conditional priors in the Hierarchical Bayesian (Psi) problem (%lu).\n", i, _subProblemsJson[i]["Problem"]["Variables"].size(), _conditionalPriors.size());

  if (_subProblemsJson[i]["Internal"]["Is Finished"] == false)
   Korali::logError("The Hierarchical Bayesian (Psi) requires that all problems have run completely, but Problem %lu has not.\n", i);
 }

 _subProblemsSampleCoordinates.resize(_subProblemsCount);
 _subProblemsSampleLogLikelihoods.resize(_subProblemsCount);
 _subProblemsSampleLogPriors.resize(_subProblemsCount);

 for (size_t i = 0; i < _subProblemsCount; i++)
 {
  _subProblemsSampleLogPriors[i]      = _subProblemsJson[i]["Solver"]["Internal"]["Sample LogPrior Database"].get<std::vector<double>>();
  _subProblemsSampleLogLikelihoods[i] = _subProblemsJson[i]["Solver"]["Internal"]["Sample LogLikelihood Database"].get<std::vector<double>>();
  _subProblemsSampleCoordinates[i] = _subProblemsJson[i]["Solver"]["Internal"]["Sample Database"].get<std::vector<std::vector<double>>>();

  for (size_t j = 0; j < _subProblemsSampleLogPriors.size(); j++)
  {
   double expPrior = exp(_subProblemsSampleLogPriors[i][j]);
   if( std::isfinite(expPrior) == false )
     Korali::logError("Non finite (%lf) prior has been detected at sample %zu in subproblem %zu.\n", expPrior, j, i );
  }
 }
}

void Korali::Problem::Bayesian::Hierarchical::Psi::updateConditionalPriors(Korali::Sample& sample)
{
 // Re-configuring conditional priors given hyperparameters
 for (size_t i = 0; i < _conditionalPriors.size(); i++)
 {
  auto priorJs = nlohmann::json();
  _conditionalPriors[i]->getConfiguration(priorJs);

  for (auto it = priorJs.begin(); it != priorJs.end(); ++it) if (it.value().is_string())
  {
   std::string key(it.key());
   std::string value(it.value());

   if (key == "Type") continue;

   bool foundValue = false;
   for (size_t k = 0; k < _k->_variables.size(); k++) if (_k->_variables[k]->_name == value)
   {
    priorJs[it.key()] = sample[k];
    //printf("Updating Conditional %lu, property: %s - of name %s, with value: %f, from variable %lu (%s)\n", i, key.c_str(), value.c_str(), sample[k], k, _k->_variables[k]->_name.c_str());
    foundValue = true;
   }

   if(foundValue == false) Korali::logError("Non variable name specified that satisfies conditional prior property %s with key: %s.\n", key.c_str(), value.c_str());
  }

  _conditionalPriors[i]->setConfiguration(priorJs);
  _conditionalPriors[i]->updateDistribution();
 }
}

double Korali::Problem::Bayesian::Hierarchical::Psi::evaluateLogLikelihood(Korali::Sample& sample)
{

 if (isSampleFeasible(sample) == false) return -Korali::Inf;

 updateConditionalPriors(sample);

 double logLikelihood = 0.0;

 for (size_t i = 0; i < _subProblemsCount; i++ )
 {
   std::vector<double> logValues(_subProblemsSampleLogPriors[i].size());

   for (size_t j = 0; j < _subProblemsSampleLogPriors[i].size(); j++)
   {
    logValues[j] = -_subProblemsSampleLogPriors[i][j];
    for( size_t k = 0; k < _conditionalPriors.size(); k++ )
     logValues[j] += _conditionalPriors[k]->getLogDensity(_subProblemsSampleCoordinates[i][j][k]);
   }

   logLikelihood += logSumExp(logValues);

   if( std::isnan(logLikelihood)) return -Korali::Inf;
 }

 return logLikelihood;
}
