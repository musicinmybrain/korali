#include "korali.hpp"

void Korali::Problem::Bayesian::initialize()
{
 bool recognizedModel = false;
 if (_likelihoodModel == "Custom") recognizedModel = true;
 if (_likelihoodModel == "Additive Gaussian") recognizedModel = true;
 if (_likelihoodModel == "Multiplicative Gaussian") recognizedModel = true;
 if (_likelihoodModel == "Multiplicative Gaussian Data") recognizedModel = true;
 if (recognizedModel == false) { koraliError("Incorrect or no Likelihood Model selected: %s.\n", _likelihoodModel.c_str()); }

 for(size_t i = 0; i < _k->N; i++) if(_k->_variables[i]->_distributionType == "No Distribution")
	koraliError("Bayesian inference requires prior distribution for all variables. (Missing for %s).\n", _k->_variables[i]->_name.c_str());

 if (_k->_constraints.size() > 0) koraliError("Bayesian inference problems do not allow constraint definitions.\n");

 if (_likelihoodModel != "Custom")
 {
   if (_referenceData.size() == 0) koraliError("The selected likelihood model requires defining reference data.\n");
   if (_k->_modelDefined == false) koraliError("The selected likelihood model requires defining a computational model.\n");
   if (_statisticalVariableIndices.size() != 1) koraliError("The selected likelihood model requires 1 statistical parameter.\n");
 }

 if (_likelihoodModel == "Custom")
 {
   if (_referenceData.size() != 0) koraliError("Custom likelihood models do not accept reference data.\n");
   if (_k->_modelDefined == false) koraliError("No likelihood model was specified.\n");
   if (_statisticalVariableIndices.size() != 0) koraliError("Custom likelihood models do not accept statistical variables.\n");
 }
}

void Korali::Problem::Bayesian::finalize()
{

}

void Korali::Problem::Bayesian::packVariables(double* sample, Korali::Model& data)
{
 for (size_t i = 0; i < _computationalVariableIndices.size(); i++) data._computationalVariables.push_back(sample[_computationalVariableIndices[i]]);
 for (size_t i = 0; i < _statisticalVariableIndices.size();   i++) data._statisticalVariables.push_back(sample[_statisticalVariableIndices[i]]);
}

double Korali::Problem::Bayesian::evaluateFitness(Korali::Model& data)
{
 double fitness = 0.0;

 if (_likelihoodModel != "Custom")
 {
   if (data._results.size() != _referenceData.size())
     koraliError("The selected likelihood model requires a %lu-sized result array. Provided: %lu.\n", _referenceData.size(), data._results.size());

   if (_likelihoodModel == "Additive Gaussian")            fitness = likelihoodGaussianAdditive(data);
   if (_likelihoodModel == "Multiplicative Gaussian")      fitness = likelihoodGaussianMultiplicative(data);
   if (_likelihoodModel == "Multiplicative Gaussian Data") fitness = likelihoodGaussianMultiplicativeData(data);
 }

 if (_likelihoodModel == "Custom")
 {
  if (data._results.size() != 1)  koraliError("Custom likelihoods require exactly a 1-element result array. Provided: %lu.\n", data._results.size() );
  fitness =  data._results[0];
 }

 return fitness;
}

double Korali::Problem::Bayesian::evaluateLogPrior(double* sample)
{
 double logPrior = 0.0;
 for (size_t i = 0; i < _k->N; i++) logPrior += _k->_variables[i]->getLogDensity(sample[i]);
 return logPrior;
}

double Korali::Problem::Bayesian::likelihoodGaussianAdditive(Korali::Model& data)
{
  double sigma   = data._statisticalVariables[0];
  double sigma2  = sigma*sigma;
  double ssn     = 0.0;
  double fitness = 0.0;

  for(size_t i = 0; i < _referenceData.size(); i++)
  {
    if( !isfinite(data._results[i]) )
    {
      koraliWarning(KORALI_NORMAL,"Non-finite value detected in the results passed in the log-likelihood function.");
      return -1e12;
    }
    double diff = _referenceData[i] - data._results[i];
    ssn += diff*diff;
  }

  fitness = -0.5*( _referenceData.size()*log(2*M_PI) + ssn/sigma2) - _referenceData.size()*log(sigma);
  return fitness;
}

double Korali::Problem::Bayesian::likelihoodGaussianMultiplicative(Korali::Model& data)
{
  double sigma    = data._statisticalVariables[0];
  double ssn      = 0.0;
  double fitness  = 0.0;
  double logSigma = 0.0;
  for(size_t i = 0; i < _referenceData.size(); i++)
  {
    if( !isfinite(data._results[i]) )
    {
      koraliWarning(KORALI_NORMAL,"Non-finite value detected in the results passed in the log-likelihood function.");
      return -1e12;
    }
    double diff   = _referenceData[i] - data._results[i];
    double denom  = sigma*data._results[i];
    ssn += diff*diff / (denom*denom);
    logSigma += log(denom);
  }

  fitness = -0.5*( _referenceData.size()*log(2*M_PI) + ssn) - _referenceData.size()*logSigma;
  return fitness;
}

double Korali::Problem::Bayesian::likelihoodGaussianMultiplicativeData(Korali::Model& data)
{
  double sigma    = data._statisticalVariables[0];
  double ssn      = 0.0;
  double fitness  = 0.0;
  double logSigma = 0.0;
  for(size_t i = 0; i < _referenceData.size(); i++)
  {
    if( !isfinite(data._results[i]) )
    {
      koraliWarning(KORALI_NORMAL,"Non-finite value detected in the results passed in the log-likelihood function.");
      return -1e12;
    }
    double diff   = _referenceData[i] - data._results[i];
    double denom  = sigma*_referenceData[i];
    ssn += diff*diff / (denom*denom);
    logSigma += log(denom);
  }

  fitness = -0.5*( _referenceData.size()*log(2*M_PI) + ssn) - _referenceData.size()*logSigma;
  return fitness;
}
