#include "korali.hpp"

void Korali::Problem::Optimization::initialize()
{
 if (_variables.size() == 0) Korali::logError("Optimization problems require at least one variable.\n");

 if (_k->_modelType != "Direct") Korali::logError("Optimization problems require defining a direct computational model. Used: %s\n", _k->_modelType.c_str());
}

void Korali::Problem::Optimization::finalize()
{

}

void Korali::Problem::Optimization::runModel(std::vector<double> sample, size_t sampleId)
{
 // Creating model data.
 _directModelData._sampleId = sampleId;
 _directModelData._variables = sample;

 // Executing Model
 _k->_directModel(_directModelData);
}

size_t Korali::Problem::Optimization::getSampleSize()
{
 return _variables.size();
}

Korali::Variable* Korali::Problem::Optimization::getVariable(size_t variableId)
{
 return _variables[variableId];
}

double Korali::Problem::Optimization::evaluateSampleFitness()
{
 double fitnessSign = _objective == "Maximize" ? 1.0 : -1.0;

 return fitnessSign*_directModelData._result;
}

double Korali::Problem::Optimization::evaluateSampleLogPrior(double* sample)
{
  return 0.0;
}
