#include "problems/direct/sampling/sampling.hpp"
#include "conduits/base.hpp"

void Korali::Problem::Direct::Sampling::initialize()
{
 if (_k->_variables.size() == 0) Korali::logError("Sampling problems require at least one variable.\n");
 Korali::Problem::Direct::Base::initialize();
}

void Korali::Problem::Direct::Sampling::evaluateSample(Korali::Sample& sample)
{
 evaluateObjectiveFunction(sample);

 // If result is not a finite number, objective function evaluates to -Infinity
 if(! std::isnan(sample.getResult()[0])) sample.setResult(-Korali::Inf);
}
