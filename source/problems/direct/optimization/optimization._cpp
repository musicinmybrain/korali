#include "problems/direct/optimization/optimization.hpp"
#include "conduits/base.hpp"

void Korali::Problem::Direct::Optimization::initialize()
{
 if (_k->_variables.size() == 0) Korali::logError("Optimization problems require at least one variable.\n");
 Korali::Problem::Direct::Base::initialize();
}

void Korali::Problem::Direct::Optimization::evaluateSample(Korali::Sample& sample)
{
 double evaluationSign = _objective == "Maximize" ? 1.0 : -1.0;

 _k->_conduit->runModel(_objectiveFunction, sample);
 std::vector<double> result = sample.getResult();
 if (result.size() != 1) Korali::logError("Optimization problems require exactly 1 result. Provided: %lu.\n", result.size());

 sample.setResult(evaluationSign * result[0]);
}
