#include "problems/direct/optimization/optimization.hpp"
#include "conduits/base.hpp"

void Korali::Problem::Direct::Optimization::initialize()
{
 if (_k->_variables.size() == 0) Korali::logError("Optimization problems require at least one variable.\n");
}

void Korali::Problem::Direct::Optimization::evaluateSample(Korali::Sample& sample)
{
 double evaluationSign = _objective == "Maximize" ? 1.0 : -1.0;

 _k->_conduit->runModel(_objectiveFunction, sample);
 std::vector<double> result = sample.getResult();
 if (result.size() != 1) Korali::logError("Optimization problems require exactly 1 result. Provided: %lu.\n", result.size());

 sample.setResult(evaluationSign * result[0]);
}

void Korali::Problem::Direct::Optimization::evaluateConstraints(Korali::Sample& sample)
{
 std::vector<double> evaluations;

 for (size_t i = 0; i < _constraints.size(); i++)
 {
  _k->_conduit->runModel(_constraints[i], sample);
  std::vector<double> constraintResult = sample.getResult();
  if (constraintResult.size() != 1) Korali::logError("Costraint evaluations should return exactly 1 result. Provided: %lu.\n", constraintResult.size());
  evaluations.push_back(constraintResult[0]);
  _constraintEvaluationCount++;
 }

 sample.setResult(evaluations);
}
