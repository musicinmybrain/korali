#include "problems/direct/optimization/optimization.hpp"
#include "conduits/base.hpp"

void Korali::Problem::Direct::Optimization::initialize()
{
 if (_k->_variables.size() == 0) Korali::logError("Optimization problems require at least one variable.\n");
 Korali::Problem::Direct::Base::initialize();
}

void Korali::Problem::Direct::Optimization::evaluateSample(Korali::Sample& sample)
{
 evaluateObjectiveFunction(sample);

 double evaluationSign = _objective == "Maximize" ? 1.0 : -1.0;
 double result = sample.getResult()[0];

 // If result is not a finite number, objective function evaluates to -Infinity
 if(std::isnan(result)) sample.setResult(-Korali::Inf);
 else sample.setResult(evaluationSign * result);
}
