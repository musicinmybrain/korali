#include "problems/direct/base.hpp"
#include "conduits/base.hpp"

bool Korali::Problem::Direct::Base::isSampleFeasible(Korali::Sample& sample)
{
  for (size_t i = 0; i < sample.size(); i++)
  {
    if (std::isfinite(sample[i]) == false) return false;
    if (sample[i] < _k->_variables[i]->_lowerBound) return false;
    if (sample[i] > _k->_variables[i]->_upperBound) return false;
  }
  return true;
}

void Korali::Problem::Direct::Base::initialize()
{
/* check _granularity for discrete variables */
 for (size_t i = 0; i < _k->_variables.size(); i++)
 {
   if(_k->_variables[i]->_granularity < 0.0)   Korali::logError("Negative granularity for variable \'%s\'.\n", _k->_variables[i]->_name.c_str());
   if(_k->_variables[i]->_granularity > 0.0)  _hasDiscreteVariables = true;
 }
}

void Korali::Problem::Direct::Base::evaluateConstraints(Korali::Sample& sample)
{
 std::vector<double> evaluations;

 for (size_t i = 0; i < _constraints.size(); i++)
 {
  _k->_conduit->runModel(_constraints[i], sample);
  std::vector<double> constraintResult = sample.getResult();
  if (constraintResult.size() != 1) Korali::logError("Costraint evaluations should return exactly 1 result. Provided: %lu.\n", constraintResult.size());
  evaluations.push_back(constraintResult[0]);
  _constraintEvaluationCount++;
 }

 sample.setResult(evaluations);
}


void Korali::Problem::Direct::Base::evaluateObjectiveFunction(Korali::Sample& sample)
{
 _k->_conduit->runModel(_objectiveFunction, sample);
 std::vector<double> result = sample.getResult();
 if (result.size() != 1) Korali::logError("Direct Evaluation problems require exactly 1 result. Provided: %lu.\n", result.size());
}
