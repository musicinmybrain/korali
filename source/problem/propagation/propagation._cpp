#include "problem/propagation/propagation.hpp"
#include "conduit/conduit.hpp"

void korali::problem::Propagation::initialize()
{
  if (_k->_variables.size() == 0) korali::logError("Propagation problems require at least one variable.\n");

  // Validate the _loadedValues dimensions
  size_t Ns = _k->_variables[0]->_loadedValues.size();
  for (size_t i = 1; i < _k->_variables.size(); i++){
    if (_k->_variables[i]->_loadedValues.size() != Ns)  korali::logError("All 'Loaded Values' must have the same length ");
  }
}

void korali::problem::Propagation::propagateSample(korali::Sample& sample)
{
 _k->_conduit->runModel(_propagationModel, sample);
 _propagationCount++;
 std::vector<double> result = sample.getResult();
 if (result.size() != 0) korali::logError("Propagation model should return no result. Provided: %lu.\n", result.size());
}

