#include "problem/evaluation/bayesian/inference/reference/reference.hpp"
#include "conduit/conduit.hpp"
#include "experiment/experiment.hpp"

void korali::problem::evaluation::bayesian::inference::Reference::initialize()
{
  korali::problem::evaluation::bayesian::Inference::initialize();

  if (_referenceData.size() == 0) korali::logError("Bayesian (%s) problems require defining reference data.\n", _likelihoodModel.c_str());
  if (_statisticalVariableIndices.size() != 1) korali::logError("Bayesian (%s) problems require exactly 1 statistical parameter, provided: %lu.\n", _likelihoodModel.c_str(), _statisticalVariableIndices.size());
}

void korali::problem::evaluation::bayesian::inference::Reference::evaluateLogLikelihood(korali::Sample& sample)
{
  sample.run(_computationalModel);

  if (sample["Reference Evaluations"].size() != _referenceData.size())
    korali::logError("This Bayesian (%s) problem requires a %lu-sized result array. Provided: %lu.\n", _likelihoodModel.c_str(), _referenceData.size(), sample["Reference Evaluations"].size());

  if (_likelihoodModel == "Additive Normal")            likelihoodNormalAdditive(sample);
  if (_likelihoodModel == "Multiplicative Normal")      likelihoodNormalMultiplicative(sample);
  if (_likelihoodModel == "Multiplicative Normal Data") likelihoodNormalMultiplicativeData(sample);
}

void korali::problem::evaluation::bayesian::inference::Reference::likelihoodNormalAdditive(korali::Sample& sample)
{
  double sigma   = sample["Parameters"][_statisticalVariableIndices[0]];
  double sigma2  = sigma*sigma;
  double ssn     = 0.0;
  double likelihood = 0.0;

  for(size_t i = 0; i < _referenceData.size(); i++)
  {
    double eval = sample["Reference Evaluations"][i];
    if( !isfinite(eval) )
    {
      korali::logWarning("Normal","Non-finite value detected in the results passed in the log-likelihood function.\n");
      sample["logLikelihood"] = -korali::Inf;
      return;
    }
    double diff = _referenceData[i] - eval;
    ssn += diff*diff;
  }

  sample["logLikelihood"] = -0.5*( _referenceData.size()*log(2*M_PI) + ssn/sigma2) - _referenceData.size()*log(sigma);
}

void korali::problem::evaluation::bayesian::inference::Reference::likelihoodNormalMultiplicative(korali::Sample& sample)
{
  double sigma    = sample["Parameters"][_statisticalVariableIndices[0]];
  double ssn      = 0.0;
  double likelihood  = 0.0;
  double logSigma = 0.0;
  for(size_t i = 0; i < _referenceData.size(); i++)
  {
    double eval = sample["Reference Evaluations"][i];

    if( !isfinite(eval) )
    {
      korali::logWarning("Normal","Non-finite value detected in the results passed in the log-likelihood function.\n");
      sample["logLikelihood"] = -korali::Inf;
      return;
    }

    double diff   = _referenceData[i] - eval;
    double denom  = sigma*eval;
    ssn += diff*diff / (denom*denom);
    logSigma += log(denom);
  }

  sample["logLikelihood"] = -0.5*( _referenceData.size()*log(2*M_PI) + ssn) - _referenceData.size()*logSigma;
}

void korali::problem::evaluation::bayesian::inference::Reference::likelihoodNormalMultiplicativeData(korali::Sample& sample)
{
  double sigma    = sample["Parameters"][_statisticalVariableIndices[0]];
  double ssn      = 0.0;
  double likelihood  = 0.0;
  double logSigma = 0.0;
  for(size_t i = 0; i < _referenceData.size(); i++)
  {
    double eval = sample["Reference Evaluations"][i];

    if( !isfinite(eval) )
    {
      korali::logWarning("Normal","Non-finite value detected in the results passed in the log-likelihood function.\n");
      sample["logLikelihood"] = -korali::Inf;
      return;
    }

    double diff   = _referenceData[i] - eval;
    double denom  = sigma*_referenceData[i];
    ssn += diff*diff / (denom*denom);
    logSigma += log(denom);
  }

  sample["logLikelihood"] = -0.5*( _referenceData.size()*log(2*M_PI) + ssn) - _referenceData.size()*logSigma;
}
