#include "problem/evaluation/bayesian/hierarchical/thetaNew/thetaNew.hpp"
#include "conduit/conduit.hpp"

void korali::problem::evaluation::bayesian::hierarchical::ThetaNew::initialize()
{
  korali::problem::evaluation::bayesian::Hierarchical::initialize();

  // Loading Psi-problem Experiment from path
  if (_psiProblemEngine.loadState(_psiProblemPath) == false) korali::logError("Error loading psi problem results from: %s...\n", _psiProblemPath.c_str());
  _psiProblemEngine.initialize();

  // Psi-problem correctness checks
  std::string psiProblemType = _psiProblemEngine["Problem"]["Type"];
  if (psiProblemType != "Evaluation/Bayesian/Hierarchical/Psi")
    korali::logError("The Hierarchical Bayesian (Theta) can only accept a psi-problem of type 'Evaluation/Bayesian/Hierarchical/Psi' but psi-Problem is of type: '%s'.\n", psiProblemType.c_str());

  if (_psiProblemEngine["Is Finished"] == false)
    korali::logError("The Hierarchical Bayesian (Theta New) requires that the psi-problem has run completely, but it has not.\n");

  // Cross-checks
  if (_psiProblemEngine["Problem"]["Conditional Priors"].size() != _k->_variables.size() )
    korali::logError("The problem contains a different number of variables (%lu) than conditional priors in the Evaluation/Bayesian/Hierarchical/Psi problem (%lu).\n", _k->_variables.size(), _psiProblemEngine["Problem"]["Conditional Priors"].size());

  // Loading Psi problem results
  _psiProblemSampleCount = _psiProblemEngine["Solver"]["Chain Leaders LogLikelihoods"].size();
  _psiProblemSampleLogLikelihoods = _psiProblemEngine["Solver"]["Sample LogLikelihood Database"].get<std::vector<double>>();
  _psiProblemSampleLogPriors = _psiProblemEngine["Solver"]["Sample LogPrior Database"].get<std::vector<double>>();
  _psiProblemSampleCoordinates = _psiProblemEngine["Solver"]["Sample Database"].get<std::vector<std::vector<double>>>();

  for (size_t i = 0; i < _psiProblemSampleLogPriors.size(); i++)
  {
    double expPrior = exp(_psiProblemSampleLogPriors[i]);
    if( std::isfinite(expPrior) == false )
      korali::logError("Non finite (%lf) prior has been detected at sample %zu in subproblem.\n", expPrior, i );
  }
}

void korali::problem::evaluation::bayesian::hierarchical::ThetaNew::evaluateLogLikelihood(korali::Sample& sample)
{
 auto  _psiProblem = dynamic_cast<korali::problem::evaluation::bayesian::hierarchical::Psi*>(_psiProblemEngine._problem);

 size_t Ntheta = _k->_variables.size();
 std::vector<double> logValues( _psiProblemSampleCount, 0.0);

 for (size_t i = 0; i < _psiProblemSampleCount; i++)
 {
   korali::Sample psiSample;
   psiSample["Parameters"] = _psiProblemSampleCoordinates[i];
   _psiProblem->updateConditionalPriors(psiSample);

   logValues[i] = 0.;
   for (size_t k = 0; k < Ntheta; k++)
     logValues[i] += _psiProblemEngine._distributions[_psiProblem->_conditionalPriorIndexes[k]]->getLogDensity(sample["Parameters"][k]);
 }

 sample["logLikelihood"] = -log(_psiProblemSampleCount) + logSumExp(logValues);
}
