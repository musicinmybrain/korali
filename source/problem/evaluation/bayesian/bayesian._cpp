#include "problem/evaluation/bayesian/bayesian.hpp"
#include "conduit/conduit.hpp"
#include "engine/engine.hpp"

void korali::problem::evaluation::Bayesian::initialize()
{
  if (_k->_variables.size() == 0) korali::logError("Bayesian problems require at least one variable.\n");
  for (size_t i = 0; i < _k->_variables.size(); i++) _k->_variables[i]->_priorDistribution->initialize();
}

void korali::problem::evaluation::Bayesian::evaluateLogPrior(korali::Sample& sample)
{
  double logPrior = 0.0;
  for (size_t i = 0; i < sample["Parameters"].size(); i++)
    logPrior += _k->_variables[i]->_priorDistribution->getLogDensity(sample["Parameters"][i]);

  sample["logPrior"] = logPrior;
}

void korali::problem::evaluation::Bayesian::evaluateLogPosterior(korali::Sample& sample)
{
  evaluateLogPrior(sample);
  evaluateLogLikelihood(sample);

  double logPrior = sample["logPrior"];
  double logLikelihood = sample["logLikelihood"];
  double logPosterior = logPrior + logLikelihood;

  if(std::isnan(logPosterior) == true) korali::logError("Sample %zu returned NaN logPosterior evaluation.\n", sample["Sample Id"]);

  sample["logPosterior"] = logPrior + logLikelihood;
}

bool korali::problem::evaluation::Bayesian::isSampleFeasible(korali::Sample& sample)
{
  for (size_t i = 0; i < sample["Parameters"].size(); i++)
    if (isfinite(_k->_variables[i]->_priorDistribution->getLogDensity(sample["Parameters"][i])) == false) return false;
  return true;
}

void korali::problem::evaluation::Bayesian::basicEvaluation(korali::Sample& sample)
{
 evaluateLogPosterior(sample);
 sample["Evaluation"] = sample["logPosterior"];
}
