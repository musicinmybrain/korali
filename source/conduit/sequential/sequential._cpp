#include "conduit/sequential/sequential.hpp"
#include "engine/engine.hpp"
#include "problem/problem.hpp"
#include "solver/solver.hpp"


void korali::conduit::Sequential::processSample(korali::Sample& sample)
{
 auto js = nlohmann::json();
 js["Start Time"] = std::chrono::duration<double>(std::chrono::high_resolution_clock::now()-_startTime).count();

 size_t experimentId = sample["Experiment Id"];
 _engineVector[experimentId]->_problem->runOperation(sample["Operation"], sample);

 js["End Time"] = std::chrono::duration<double>(std::chrono::high_resolution_clock::now()-_startTime).count();
 js["Current Generation"] = _currentEngine->_currentGeneration;
 js["Solver Id"] = _currentEngine->_engineId;
 __profiler["Timelines"]["Worker 0"] += js;
}

