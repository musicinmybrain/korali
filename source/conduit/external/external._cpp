#include "conduit/external/external.hpp"
#include "engine/engine.hpp"
#include "problem/problem.hpp"
#include "solver/solver.hpp"
#include <sys/wait.h>
#include <sys/types.h>
#include <fcntl.h>

void korali::conduit::External::initialize()
{
 korali::Conduit::initialize();

 if (_concurrentJobs < 1) korali::logError("You need to define at least 1 concurrent job(s) for external models \n");
 for (int i = 0; i < _concurrentJobs; i++) _resultPipe.push_back(std::vector<int>(2));
 for (int i = 0; i < _concurrentJobs; i++) _inputsPipe.push_back(std::vector<int>(2));
 for (int i = 0; i < _concurrentJobs; i++) _launcherQueue.push(i);

 // Opening Inter-process communicator pipes
 for (int i = 0; i < _concurrentJobs; i++)
 {
  if (pipe(_inputsPipe[i].data()) == -1) korali::logError("Unable to create inter-process pipe. \n");
  if (pipe(_resultPipe[i].data()) == -1) korali::logError("Unable to create inter-process pipe. \n");
  fcntl(_resultPipe[i][0], F_SETFL, fcntl(_resultPipe[i][0], F_GETFL) | O_NONBLOCK);
  fcntl(_resultPipe[i][1], F_SETFL, fcntl(_resultPipe[i][1], F_GETFL) | O_NONBLOCK);
 }

 for(int i = 0; i < _concurrentJobs; i++)
 {
  pid_t processId = fork();
  if (processId == 0) worker(i);
 }
}

void korali::conduit::External::finalize()
{
 for(int i = 0; i < _concurrentJobs; i++)
 {
  size_t terminationFlag = 0;
  write(_inputsPipe[i][1], &terminationFlag, sizeof(size_t));
 }

 for(int i = 0; i < _concurrentJobs; i++)
 {
  int status;
  pid_t processId;
  processId = ::wait(&status);
 }

 for (int i = 0; i < _concurrentJobs; i++)
 {
  close(_resultPipe[i][1]); // Closing pipes
  close(_resultPipe[i][0]); // Closing pipes
  close(_inputsPipe[i][1]); // Closing pipes
  close(_inputsPipe[i][0]); // Closing pipes
 }

 korali::Conduit::finalize();
}

void korali::conduit::External::worker(int workerId)
{
 while(true)
 {
  size_t inputStringSize;
  read(_inputsPipe[workerId][0], &inputStringSize, sizeof(size_t));

  if(inputStringSize == 0) exit(0);

  char inputString[inputStringSize + 1];
  read(_inputsPipe[workerId][0], inputString, inputStringSize * sizeof(char));
  inputString[inputStringSize] = '\0';

  korali::Sample sample;
  sample._js.getJson() = nlohmann::json::parse(inputString);

  _k->_problem->runOperation(sample["Operation"], sample);

  std::string resultString = sample._js.getJson().dump();
  size_t resultStringSize = resultString.size();

  write(_resultPipe[workerId][1], &resultStringSize, sizeof(size_t));
  write(_resultPipe[workerId][1], resultString.c_str(), resultStringSize * sizeof(char));
 }
}

void korali::conduit::External::processSample(korali::Sample& sample)
{
 while (_launcherQueue.empty())
 {
  sample._state = SampleState::waiting;
  co_switch(_currentSolver->_thread);
 }

 int launcherId = _launcherQueue.front(); _launcherQueue.pop();

 auto js = nlohmann::json();
 js["Start Time"] = std::chrono::duration<double>(std::chrono::high_resolution_clock::now()-_startTime).count();

 std::string inputString = sample._js.getJson().dump();
 size_t inputStringSize = inputString.size();

 write(_inputsPipe[launcherId][1], &inputStringSize, sizeof(size_t));
 write(_inputsPipe[launcherId][1], inputString.c_str(), inputStringSize * sizeof(char));

 int readBytes = -1;
 while(readBytes < 0)
 {
  size_t resultStringSize;
  readBytes = read(_resultPipe[launcherId][0], &resultStringSize, sizeof(size_t));

  if(readBytes > 0)
  {
   char resultString[resultStringSize + 1];
   while(read(_resultPipe[launcherId][0], resultString, resultStringSize * sizeof(char)) < 0);

   resultString[resultStringSize] = '\0';
   sample._js.getJson() = nlohmann::json::parse(resultString);

   _launcherQueue.push(launcherId);
  }
  else
  {
   sample._state = SampleState::waiting;
   co_switch(_currentSolver->_thread);
  }
 }

 js["End Time"] = std::chrono::duration<double>(std::chrono::high_resolution_clock::now()-_startTime).count();
 js["Solver Id"] = _currentSolver->_solverId;
 js["Current Generation"] = _currentSolver->_currentGeneration;
 __profiler["Timelines"]["Worker " + std::to_string(launcherId)] += js;

}
