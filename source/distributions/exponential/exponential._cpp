#include "korali.hpp"

Korali::Distribution::Exponential::Exponential()
{
 _mean = 1.0;
}

void Korali::Distribution::Exponential::initialize()
{
 Korali::Distribution::Base::initialize();
 bool hasConditionals = false;

 // Check for conditional properties

 if (hasConditionals == false) updateDistribution();
}

void Korali::Distribution::Exponential::finalize()
{
 Korali::Distribution::Base::finalize();
}

double Korali::Distribution::Exponential::getDensity(double x)
{
 return gsl_ran_exponential_pdf(x-_location, _mean);
}

double Korali::Distribution::Exponential::getLogDensity(double x)
{
 if (x-_location < 0) return -INFINITY; return - log(_mean) - (x-_location)/_mean;
}

double Korali::Distribution::Exponential::getRandomNumber()
{
 return _location + gsl_ran_exponential(_range, _mean);
}

void Korali::Distribution::Exponential::getRandomVector(double *x, size_t n)
{
 for (size_t i = 0; i < n; i++)
  x[i] = getRandomNumber();
}

void Korali::Distribution::Exponential::getDensityVector(double *x, double* result, size_t n)
{
 for (size_t i = 0; i < n; i++)
   result[i] = getDensity(x[i]);
}

void Korali::Distribution::Exponential::getLogDensityVector(double *x, double* result, size_t n)
{
 for (size_t i = 0; i < n; i++)
   result[i] = getLogDensity(x[i]);
}

void Korali::Distribution::Exponential::updateDistribution()
{
 _aux = 0.0;
}

void Korali::Distribution::Exponential::updateConditionals(const std::vector<double>& sample)
{
 Korali::Distribution::Base::updateConditionals(sample);
 updateDistribution();
}

