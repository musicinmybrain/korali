#include "korali.hpp"

void Korali::Distribution::Multivariate::initialize()
{
 Korali::Distribution::Base::initialize();
 bool hasConditionals = false;

 // Check for conditional properties

 if (hasConditionals == false) updateDistribution();
}

void Korali::Distribution::Multivariate::finalize()
{
 Korali::Distribution::Base::finalize();
}

double Korali::Distribution::Multivariate::getDensity(double x)
{
 koraliError("(getDensity) Multivariate Gaussian distribution cannot calculate single value densities.\n");
 return 0.0;
}

double Korali::Distribution::Multivariate::getLogDensity(double x)
{
 koraliError("(getLogDensity) Multivariate Gaussian distribution cannot calculate single value log densities.\n");
 return 0.0;
}

double Korali::Distribution::Multivariate::getRandomNumber()
{
 koraliError("(getRandomNumber) Multivariate Gaussian distribution does not produce single value random numbers.\n");
 return 0.0;
}

void Korali::Distribution::Multivariate::getDensityVector(double *x, double* result, size_t n)
{
 if (_workVector.size() != n)
  koraliError("Multivariate::getDensityVector Error - requested %lu densities, but distribution is configured with %lu.\n", n, _workVector.size());

 gsl_vector_view _input_view = gsl_vector_view_array(x, n);

 gsl_ran_multivariate_gaussian_pdf(&_input_view.vector, &_mean_view.vector, &_sigma_view.matrix, result, &_work_view.vector);
}

void Korali::Distribution::Multivariate::getLogDensityVector(double *x, double* result, size_t n)
{
 gsl_vector_view _input_view = gsl_vector_view_array(x, n);

 gsl_ran_multivariate_gaussian_log_pdf(&_input_view.vector, &_mean_view.vector, &_sigma_view.matrix, result, &_work_view.vector);
}

void Korali::Distribution::Multivariate::getRandomVector(double *x, size_t n)
{
 gsl_vector_view _output_view = gsl_vector_view_array(x, n);

 gsl_ran_multivariate_gaussian(_range, &_mean_view.vector, &_sigma_view.matrix, &_output_view.vector);
}

void Korali::Distribution::Multivariate::updateDistribution()
{
 size_t covarianceMatrixSize = _covarianceMatrix.size();

 size_t sideSize = sqrt(covarianceMatrixSize);
 if ((sideSize * sideSize) != covarianceMatrixSize)
  koraliError("Size of Multivariate Gaussian covariance matrix size (%lu) is not a perfect square number.\n", covarianceMatrixSize);

 size_t meanSize = _meanVector.size();
 if (sideSize != meanSize) koraliError("Size of Multivariate Gaussian mean vector (%lu) is not the same as the side of covariance matrix (%lu).\n", meanSize, sideSize);

 _workVector.resize(meanSize);

 _sigma_view  = gsl_matrix_view_array(_covarianceMatrix.data(), sideSize,sideSize);
 _mean_view   = gsl_vector_view_array(_meanVector.data(), meanSize);
 _work_view   = gsl_vector_view_array(_workVector.data(), meanSize);
}

void Korali::Distribution::Multivariate::updateConditionals(const std::vector<double>& sample)
{
 Korali::Distribution::Base::updateConditionals(sample);
 updateDistribution();
}

