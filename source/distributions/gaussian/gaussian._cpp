#include "korali.hpp"

void Korali::Distribution::Gaussian::initialize()
{
 Korali::Distribution::Base::initialize();
 bool hasConditionals = false;

 // Check for conditional properties

 if (hasConditionals == false) updateDistribution();
}

void Korali::Distribution::Gaussian::finalize()
{
 Korali::Distribution::Base::finalize();
}

double Korali::Distribution::Gaussian::getDensity(double x)
{
 return gsl_ran_gaussian_pdf(x - _mean, _standardDeviation);
}

double Korali::Distribution::Gaussian::getLogDensity(double x)
{
 double d = (x-_mean)/_standardDeviation;
 return _aux - 0.5*d*d;
}

double Korali::Distribution::Gaussian::getRandomNumber()
{
 return  _mean + gsl_ran_gaussian(_range, _standardDeviation);
}

void Korali::Distribution::Gaussian::getRandomVector(double *x, size_t n)
{
 for (size_t i = 0; i < n; i++)
  x[i] = getRandomNumber();
}

void Korali::Distribution::Gaussian::getDensityVector(double *x, double* result, size_t n)
{
 for (size_t i = 0; i < n; i++)
   result[i] = getDensity(x[i]);
}

void Korali::Distribution::Gaussian::getLogDensityVector(double *x, double* result, size_t n)
{
 for (size_t i = 0; i < n; i++)
   result[i] = getLogDensity(x[i]);
}

void Korali::Distribution::Gaussian::updateDistribution()
{
 if (_standardDeviation <= 0.0)  Korali::logError("Incorrect Standard Deviation parameter of Gaussian distribution: %f.\n", _standardDeviation);

 _aux = -0.5*gsl_sf_log(2*M_PI) - gsl_sf_log(_standardDeviation);
}

void Korali::Distribution::Gaussian::updateConditionals(const std::vector<double>& sample)
{
 Korali::Distribution::Base::updateConditionals(sample);
 updateDistribution();
}

