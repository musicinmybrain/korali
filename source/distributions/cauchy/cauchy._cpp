#include "korali.hpp"

void Korali::Distribution::Cauchy::initialize()
{
 _location = 0.0;
 _scale = 1.0;

 Korali::Distribution::Base::initialize();
 bool hasConditionals = false;

 // Check for conditional properties

 if (hasConditionals == false) updateDistribution();
}

void Korali::Distribution::Cauchy::finalize()
{
 Korali::Distribution::Base::finalize();
}

double Korali::Distribution::Cauchy::getDensity(double x)
{
 return gsl_ran_cauchy_pdf( x-_location, _scale );
}

double Korali::Distribution::Cauchy::getLogDensity(double x)
{
 return _aux - gsl_sf_log( 1. + gsl_sf_pow_int((x-_location)/_scale,2) );
}

double Korali::Distribution::Cauchy::getRandomNumber()
{
 return _location + gsl_ran_cauchy(_range, _scale);
}

void Korali::Distribution::Cauchy::getRandomVector(double *x, size_t n)
{
 for (size_t i = 0; i < n; i++)
  x[i] = getRandomNumber();
}

void Korali::Distribution::Cauchy::getDensityVector(double *x, double* result, size_t n)
{
 for (size_t i = 0; i < n; i++)
   result[i] = getDensity(x[i]);
}

void Korali::Distribution::Cauchy::getLogDensityVector(double *x, double* result, size_t n)
{
 for (size_t i = 0; i < n; i++)
   result[i] = getLogDensity(x[i]);
}

void Korali::Distribution::Cauchy::updateDistribution()
{
 if (_scale <= 0) koraliError("Incorrect Scale parameter of Cauchy distribution: %f.\n", _scale);

  _aux = -gsl_sf_log( _scale * M_PI);
}

void Korali::Distribution::Cauchy::updateConditionals(const std::vector<double>& sample)
{
 Korali::Distribution::Base::updateConditionals(sample);
 updateDistribution();
}

