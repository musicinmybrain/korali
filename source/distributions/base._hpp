#ifndef _KORALI_DISTRIBUTION_BASE_HPP_
#define _KORALI_DISTRIBUTION_BASE_HPP_

#include "auxiliars/json.hpp"
#include <vector>
#include <limits>
#include <gsl/gsl_rng.h>
#include <gsl/gsl_randist.h>
#include <gsl/gsl_math.h>
#include <gsl/gsl_sf.h>

namespace Korali {

namespace Problem
{
 class Base;
}

namespace Distribution {

class Base {

 public:

 Korali::Problem::Base* _problem;
 std::vector<size_t> _conditionalIndexes;
 std::vector<double*> _conditionalPointers;
 size_t _seed;
 gsl_rng* _range;
 double _aux;
 bool _initialized;

 virtual void initialize(Korali::Problem::Base* problem);
 virtual void finalize();
 virtual void updateDistribution() = 0;
 virtual void updateConditionals(const std::vector<double>& sample);
 static Base* getDistribution(Korali::Problem::Base* problem, nlohmann::json& js);

 virtual void setProperty(std::string propertyName, double value) = 0;
 virtual double getDensity(double x) = 0;
 virtual double getLogDensity(double x) = 0;
 virtual double getRandomNumber() = 0;

 virtual void setPropertyVector(std::string propertyName, std::vector<double> values) = 0;
 virtual void getDensityVector(double *x, double* result, size_t n) = 0;
 virtual void getLogDensityVector(double *x, double* result, size_t n) = 0;
 virtual void getRandomVector(double *x, size_t n) = 0;

 virtual void setConfiguration(nlohmann::json& js) = 0;
 virtual void getConfiguration(nlohmann::json& js) = 0;
};

} } // namespace Korali::Distribution

#endif // _KORALI_DISTRIBUTION_BASE_HPP_
