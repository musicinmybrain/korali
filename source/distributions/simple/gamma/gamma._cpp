#include "korali.hpp"

Korali::Distribution::Gamma::Gamma()
{
 _shape = 1.0;
 _scale = 1.0;
}

void Korali::Distribution::Gamma::initialize(Korali::Problem::Base* problem)
{
 Korali::Distribution::Base::initialize(problem);
 bool hasConditionals = false;

 // Check for conditional properties

 if (hasConditionals == false) updateDistribution();
}

void Korali::Distribution::Gamma::finalize()
{
 Korali::Distribution::Base::finalize();
}

double Korali::Distribution::Gamma::getDensity(double x)
{
 return gsl_ran_gamma_pdf( x, _shape, _scale );
}

double Korali::Distribution::Gamma::getLogDensity(double x)
{
 if(x < 0) return -INFINITY; return _aux + (_shape-1)*log(x) - x/_scale;
}

double Korali::Distribution::Gamma::getRandomNumber()
{
 return gsl_ran_gamma(_range, _shape, _scale);
}

void Korali::Distribution::Gamma::updateDistribution()
{
 if (_shape <= 0.0)  Korali::logError("Incorrect Shape parameter of Gamma distribution: %f.\n", _shape);
 if (_scale <= 0.0)  Korali::logError("Incorrect Scale parameter of Gamma distribution: %f.\n", _scale);

 _aux = -gsl_sf_lngamma(_shape) - _shape*log(_scale);
}

void Korali::Distribution::Gamma::updateConditionals(const std::vector<double>& sample)
{
 Korali::Distribution::Base::updateConditionals(sample);
 updateDistribution();
}

