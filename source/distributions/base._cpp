#include "korali.hpp"

void Korali::Distribution::Base::initialize()
{
 _seed = _k->_seed++;
 _range = gsl_rng_alloc (gsl_rng_default);
 gsl_rng_set(_range, _seed);
}

void Korali::Distribution::Base::finalize()
{
 gsl_rng_free(_range);
}

Korali::Distribution::Base* Korali::Distribution::Base::getDistribution(nlohmann::json& js)
{
 std::string distributionType = "Undefined";

 if (isDefined(js, "['Type']"))
 {
  distributionType = js["Type"].get<std::string>();
   eraseValue(js, "['Type']");
 }
 else koraliError("No distribution type provided.\n");

 Korali::Distribution::Base* distribution = nullptr;

 // Distribution list

 if (distribution == nullptr) koraliError("Unrecognized distribution type provided: ['Type'] = %s.\n", distributionType.c_str());

 distribution->setConfiguration(js);
 distribution->initialize();
 return distribution;
}

void Korali::Distribution::Base::updateConditionals(const std::vector<double>& sample)
{
 for (size_t i = 0; i < _conditionalIndexes.size(); i++)
  *(_conditionalPointers[i]) = sample[_conditionalIndexes[i]];
}
