#include "korali.hpp"

void Korali::Distribution::LogNormal::initialize()
{
  Korali::Distribution::Base::initialize();
  bool hasConditionals = false;

  // Check for conditional properties
  if (hasConditionals == false) updateDistribution();
}

void Korali::Distribution::LogNormal::finalize()
{
  Korali::Distribution::Base::finalize();
}

double Korali::Distribution::LogNormal::getDensity(double x)
{
  return gsl_ran_lognormal_pdf(x, _mu, _sigma);
}

double Korali::Distribution::LogNormal::getLogDensity(double x)
{
  if (x < 0) return -INFINITY;
  double logx = gsl_sf_log(x);
  double d = (logx-_mu)/_sigma;
  return _aux - logx - 0.5*d*d;
}

double Korali::Distribution::LogNormal::getRandomNumber()
{
  return  gsl_ran_lognormal(_range, _mu, _sigma);
}

void Korali::Distribution::LogNormal::getRandomVector(double *x, size_t n)
{
  for (size_t i = 0; i < n; i++) x[i] = getRandomNumber();
}

void Korali::Distribution::LogNormal::getDensityVector(double *x, double* result, size_t n)
{
  for (size_t i = 0; i < n; i++) result[i] = getDensity(x[i]);
}

void Korali::Distribution::LogNormal::getLogDensityVector(double *x, double* result, size_t n)
{
  for (size_t i = 0; i < n; i++)  result[i] = getLogDensity(x[i]);
}

void Korali::Distribution::LogNormal::updateDistribution()
{
  if (_sigma <= 0.0)  Korali::logError("Incorrect Sigma parameter of LogNormal distribution: %f.\n", _sigma);

  _aux = -0.5*gsl_sf_log(2*M_PI) - gsl_sf_log(_sigma);
}

void Korali::Distribution::LogNormal::updateConditionals(const std::vector<double>& sample)
{
  Korali::Distribution::Base::updateConditionals(sample);
  updateDistribution();
}
