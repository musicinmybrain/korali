#include "korali.hpp"

void Korali::Distribution::Uniform::initialize()
{
 Korali::Distribution::Base::initialize();

 // Check for conditional properties

 updateDistribution();
}

void Korali::Distribution::Uniform::finalize()
{
 Korali::Distribution::Base::finalize();
}

double Korali::Distribution::Uniform::getDensity(double x)
{
 return gsl_ran_flat_pdf(x, _minimum, _maximum);
}

double Korali::Distribution::Uniform::getLogDensity(double x)
{
 if (x >= _minimum && x <= _maximum) return _aux; return -INFINITY;
}

double Korali::Distribution::Uniform::getRandomNumber()
{
 return gsl_ran_flat(_range, _minimum, _maximum);
}

void Korali::Distribution::Uniform::updateDistribution()
{
 if (_maximum-_minimum <= 0.0)  koraliError("Maximum (%f) bound must be higher than Minimum (%f) bound in a Uniform distribution.\n", _minimum, _maximum);

 _aux = -gsl_sf_log(_maximum-_minimum);
}

void Korali::Distribution::Uniform::updateConditionals(const std::vector<double>& sample)
{
 Korali::Distribution::Base::updateConditionals(sample);
 updateDistribution();
}
