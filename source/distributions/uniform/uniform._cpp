#include "korali.hpp"

Korali::Distribution::Uniform::Uniform()
{
 _minimum = 1.0;
 _maximum = 2.0;
}


void Korali::Distribution::Uniform::initialize()
{
 Korali::Distribution::Base::initialize();
 bool hasConditionals = false;

 // Check for conditional properties

 if (hasConditionals == false) updateDistribution();
}

void Korali::Distribution::Uniform::finalize()
{
 Korali::Distribution::Base::finalize();
}

double Korali::Distribution::Uniform::getDensity(double x)
{
 return gsl_ran_flat_pdf(x, _minimum, _maximum);
}

double Korali::Distribution::Uniform::getLogDensity(double x)
{
 if (x >= _minimum && x <= _maximum) return _aux; return -INFINITY;
}

double Korali::Distribution::Uniform::getRandomNumber()
{
 return gsl_ran_flat(_range, _minimum, _maximum);
}

void Korali::Distribution::Uniform::getRandomVector(double *x, size_t n)
{
 for (size_t i = 0; i < n; i++)
  x[i] = getRandomNumber();
}

void Korali::Distribution::Uniform::getDensityVector(double *x, double* result, size_t n)
{
 for (size_t i = 0; i < n; i++)
   result[i] = getDensity(x[i]);
}

void Korali::Distribution::Uniform::getLogDensityVector(double *x, double* result, size_t n)
{
 for (size_t i = 0; i < n; i++)
   result[i] = getLogDensity(x[i]);
}

void Korali::Distribution::Uniform::updateDistribution()
{
 if (_maximum-_minimum <= 0.0)  Korali::logError("Maximum (%f) bound must be higher than Minimum (%f) bound in a Uniform distribution.\n", _maximum, _minimum);

 _aux = -gsl_sf_log(_maximum-_minimum);
}

void Korali::Distribution::Uniform::updateConditionals(const std::vector<double>& sample)
{
 Korali::Distribution::Base::updateConditionals(sample);
 updateDistribution();
}
