#ifndef _KORALI_SOLVERS_DEA_HPP_
#define _KORALI_SOLVERS_DEA_HPP_

#include "solvers/base.hpp"
#include "distributions/univariate/normal/normal.hpp"
#include "distributions/univariate/uniform/uniform.hpp"
#include <chrono>
#include <map>

namespace Korali { namespace Solver {

class DEA : public Korali::Solver::Base
{
 private:

 Korali::Distribution::Base* _normalGenerator; /* Normal random number generator */
 Korali::Distribution::Base* _uniformGenerator; /* Uniform random number generator */

 void mutateSingle(size_t sampleIdx); /* sample individual */
 bool isFeasible(size_t sampleIdx) const; /* check if sample inside lower & upper bounds */
 void fixInfeasible(size_t sampleIdx); /* force sample inside lower & upper bounds */
 void updateSolver(); /* update states of DEA */
 void evaluateSamples(); /* evaluate all samples until done */
 void initSamples();
 void prepareGeneration();

 public:

 bool checkTermination() override;
 void initialize() override;
 void finalize() override;
 void runGeneration() override;
 void processSample(size_t sampleId, double fitness) override;
 void setConfiguration(nlohmann::json& js) override;
 void getConfiguration(nlohmann::json& js) override;
 void printGeneration() override;
 std::string getType() override;
};

} } // namespace Korali::Solver

#endif // _KORALI_SOLVERS_DEA_HPP_
