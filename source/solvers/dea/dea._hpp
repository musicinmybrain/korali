#ifndef _KORALI_SOLVERS_DEA_HPP_
#define _KORALI_SOLVERS_DEA_HPP_

#include "solvers/base.hpp"
#include "distributions/univariate/normal/normal.hpp"
#include "distributions/univariate/uniform/uniform.hpp"
#include "problems/evaluation/base.hpp"
#include <vector>

namespace korali { namespace solver {

class DEA : public korali::solver::Base
{
 private:

 korali::distribution::univariate::Normal* _normalGenerator; /* Normal random number generator */
 korali::distribution::univariate::Uniform* _uniformGenerator; /* Uniform random number generator */

 void mutateSingle(size_t sampleIdx); /* sample individual */
 void fixInfeasible(size_t sampleIdx); /* force sample inside lower & upper bounds */
 void updateSolver(); /* update states of DEA */
 void initSamples();
 void prepareGeneration();

 korali::problem::evaluation::Base* _problem;

 public:

 void initialize() override;
 void finalize() override;
 void runGeneration() override;
 void printGenerationBefore() override;
 void printGenerationAfter() override;
};

} } // namespace korali::Solver

#endif // _KORALI_SOLVERS_DEA_HPP_
