#include "engine/engine.hpp"
#include "conduits/base.hpp"
#include "solvers/base.hpp"
#include "problems/base.hpp"
#include "sample/sample.hpp"
#include "conduits/mpi/mpi.hpp"

#include "pybind11/pybind11.h"
#include "pybind11/functional.h"
#include "pybind11/stl.h"

#include <chrono>
#include <sys/types.h>
#include <sys/stat.h>
#include <cstdio>

void Korali::Engine::start(bool isDryRun)
{
 // Setting Run ID
 _runID = Korali::getTimehash();

 // Setting Configuration
 setConfiguration(_js);

 // Initializing Korali and its modules
 initialize();

 // If this is a worker process (not root), there's nothing else to do
 if (_conduit->isRoot() == false) return;

 // If this is a dry run and configuration succeeded, print sucess and return
 if (isDryRun)
 {
  saveState("dry.json");
  Korali::logInfo("Minimal",  "--------------------------------------------------------------------\n");
  Korali::logInfo("Minimal",  "Dry Run Successful.\n");
  Korali::logInfo("Minimal",  "--------------------------------------------------------------------\n");
  return;
 }

 // Saving initial state
 saveState("initial.json");

 auto startTime = std::chrono::system_clock::now();

 // Running Solver by generations until at least one termination criterion is satisfied
 while(isExecutionFinished() == false)
 {
  auto t0 = std::chrono::system_clock::now();

  _solver->runGeneration();

  auto t1 = std::chrono::system_clock::now();

  if (_currentGeneration % _consoleOutputFrequency == 0)
  {
   Korali::logInfo("Minimal",  "--------------------------------------------------------------------\n");
   Korali::logInfo("Minimal",  "Generation: #%zu\n", _currentGeneration);
   Korali::logInfo("Detailed", "Generation Time: %.3fs\n", std::chrono::duration<double>(t1-t0).count());
   _solver->printGeneration();
  }

  if (_currentGeneration % _resultsOutputFrequency == 0) saveState(_currentGeneration);

  _currentGeneration++;
 }

 _currentGeneration--;

 // Saving last generation and final.json
 saveState(_currentGeneration);
 saveState("final.json");

 auto endTime = std::chrono::system_clock::now();

 Korali::logInfo("Minimal", "--------------------------------------------------------------------\n");
 Korali::logInfo("Minimal", "%s finished correctly.\n", _solver->getType().c_str(), _currentGeneration);

 _solver->finalize();
 _problem->finalize();
 _conduit->finalize();

 Korali::logInfo("Minimal", "--------------------------------------------------------------------\n");
 Korali::logInfo("Minimal", "Total Generations: %lu\n", _currentGeneration);
 Korali::logInfo("Minimal", "Total Computational Model Evaluations: %lu\n", _conduit->_modelEvaluationCount);
 Korali::logInfo("Minimal", "Elapsed Time: %.3fs\n", std::chrono::duration<double>(endTime-startTime).count());
 Korali::logInfo("Minimal", "Results saved to folder: '%s'\n", _resultsOutputPath.c_str());
}

void Korali::Engine::initialize()
{
 // Initializing Verbosity
 bool verbosityDefined = false;
 if (_consoleOutputVerbosity == "Silent")   verbosityDefined = true;
 if (_consoleOutputVerbosity == "Minimal")  verbosityDefined = true;
 if (_consoleOutputVerbosity == "Normal")   verbosityDefined = true;
 if (_consoleOutputVerbosity == "Detailed") verbosityDefined = true;
 if (verbosityDefined == false) Korali::logError("Incorrect or undefined Verbosity Level '%s'\n.", _consoleOutputVerbosity.c_str());

 Korali::setVerbosityLevel(_consoleOutputVerbosity);

 // Creating Results directory
 mkdir(_resultsOutputPath.c_str(), S_IRWXU | S_IRWXG | S_IROTH | S_IXOTH);

 // Initializing Modules
 _problem->initialize();
 _solver->initialize();
 _conduit->initialize();
}

Korali::Engine::Engine()
{
 _opt = &_js;
 _k = this;
}

Korali::Engine::Engine(nlohmann::json js) : Korali::Engine::Engine()
{
 _js = js;
 setConfiguration(_js);
}

bool Korali::Engine::isExecutionFinished()
{
  return _solver->checkTermination() || _conduit->checkTermination() || _problem->checkTermination();
}

void Korali::Engine::saveState(std::string fileName)
{
 // Updating run timestamp
 _timestamp = Korali::getTimestamp();

 // Getting configuration
 _js = nlohmann::json();
 this->getConfiguration(_js);

 // Only the root rank saves files
 if (!_conduit->isRoot()) return;
 fileName = "./" + _resultsOutputPath + "/" + fileName;
 Korali::JsonInterface::saveJsonToFile(fileName.c_str(), _js);
}

void Korali::Engine::saveState(int fileId)
{
 if (!_conduit->isRoot()) return;

 char fileName[256];

 sprintf(fileName, "s%05d.json", fileId);

 saveState(fileName);
}

void Korali::Engine::loadState(std::string fileName)
{
 _js = Korali::JsonInterface::loadJsonFromFile(fileName.c_str());
}

void Korali::Engine::setItem(const std::string& key, const std::function<void(Korali::Sample&)> val)
{
 size_t pos = _models.size();
 _models.push_back(val);
 (*_opt)[key] = pos;
 _opt = &_js;
}

void Korali::Engine::setItem(const int& key, const std::function<void(Korali::Sample&)> val)
{
 size_t pos = _models.size();
 _models.push_back(val);
 (*_opt)[key] = pos;
 _opt = &_js;
}

void Korali::Engine::operator=(const std::function<void(Korali::Sample&)> val)
{
 size_t pos = _models.size();
 _models.push_back(val);
 (*_opt) = pos;
 _opt = &_js;
}

double Korali::Engine::getValue()
{
 double val = 0.0;
 if (_opt->is_number()) val = *_opt;
 else Korali::logError("[Korali] Error: Attempted getValue() on non-numeric field.\n");
 _opt = &_js;
 return val;
}

bool Korali::Engine::getBoolean()
{
 bool tf = false;
 if (_opt->is_boolean()) tf = *_opt;
 else Korali::logError("[Korali] Error: Attempted getBoolean() on non-boolean field.\n");
 _opt = &_js;
 return tf;
}

std::string Korali::Engine::getString()
{
 std::string str;
 if (_opt->is_string()) str = *_opt;
 else Korali::logError("[Korali] Error: Attempted getString() on non-string field.\n");
 _opt = &_js;
 return str;
}

std::vector<double> Korali::Engine::getArray()
{
 std::vector<double> vec;
 if (_opt->is_array() && (*_opt)[0].is_number()) vec = _opt->get<std::vector<double>>();
 else Korali::logError("[Korali] Error: Attempted getArray() on non-array field or non-numeric array.\n");
 _opt = &_js;
 return vec;
}

PYBIND11_MODULE(libkorali, m)
{
  #ifdef _KORALI_USE_MPI
   m.def("getKoraliMPIComm", &getKoraliMPICommPointer);
  #endif

  pybind11::class_<Korali::Sample>(m, "Sample")
    .def("__getitem__",     &Korali::Sample::operator[], pybind11::return_value_policy::reference)
    .def("getSampleId",  &Korali::Sample::getSampleId, pybind11::return_value_policy::reference)
    .def("getSampleData",  &Korali::Sample::getSampleData, pybind11::return_value_policy::reference)
    .def("setResult", pybind11::overload_cast<const double&>(&Korali::Sample::setResult), pybind11::return_value_policy::reference)
    .def("setResult", pybind11::overload_cast<const std::vector<double>&>(&Korali::Sample::setResult), pybind11::return_value_policy::reference);

 pybind11::class_<Korali::Engine>(m, "Engine")
   .def(pybind11::init<>())
   .def("getValue", &Korali::Engine::getValue)
   .def("getBoolean", &Korali::Engine::getBoolean)
   .def("getString", &Korali::Engine::getString)
   .def("getArray", &Korali::Engine::getArray)
   .def("__getitem__", pybind11::overload_cast<const std::string&>(&Korali::Engine::getItem), pybind11::return_value_policy::reference)
   .def("__getitem__", pybind11::overload_cast<const unsigned long int&>(&Korali::Engine::getItem), pybind11::return_value_policy::reference)
   .def("__setitem__", pybind11::overload_cast<const std::string&, const std::function<void(Korali::Sample&)>>(&Korali::Engine::setItem), pybind11::return_value_policy::reference)
   .def("__setitem__", pybind11::overload_cast<const std::string&, const std::string&>(&Korali::Engine::setItem), pybind11::return_value_policy::reference)
   .def("__setitem__", pybind11::overload_cast<const std::string&, const double&>(&Korali::Engine::setItem), pybind11::return_value_policy::reference)
   .def("__setitem__", pybind11::overload_cast<const std::string&, const int&>(&Korali::Engine::setItem), pybind11::return_value_policy::reference)
   .def("__setitem__", pybind11::overload_cast<const std::string&, const std::vector<double>&>(&Korali::Engine::setItem), pybind11::return_value_policy::reference)
   .def("__setitem__", pybind11::overload_cast<const int&, const std::function<void(Korali::Sample&)>>(&Korali::Engine::setItem), pybind11::return_value_policy::reference)
   .def("__setitem__", pybind11::overload_cast<const int&, const std::string&>(&Korali::Engine::setItem), pybind11::return_value_policy::reference)
   .def("__setitem__", pybind11::overload_cast<const int&, const double&>(&Korali::Engine::setItem), pybind11::return_value_policy::reference)
   .def("__setitem__", pybind11::overload_cast<const int&, const int&>(&Korali::Engine::setItem), pybind11::return_value_policy::reference)
   .def("run", &Korali::Engine::run)
   .def("dry", &Korali::Engine::dry)
   .def("loadState",     &Korali::Engine::loadState, pybind11::return_value_policy::reference);
}


