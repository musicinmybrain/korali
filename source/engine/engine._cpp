#include "engine/engine.hpp"
#include "conduit/conduit.hpp"
#include "solver/solver.hpp"
#include "problem/problem.hpp"
#include "conduit/MPI/MPI.hpp"
#include "auxiliar/py2json.hpp"

#include <chrono>
#include <sys/types.h>
#include <sys/stat.h>
#include <cstdio>
#include <map>

void korali::Engine::start(bool isDryRun)
{
 // Initializing Profile Information
 _profileInfo["Engine"].startSegment();

 // Setting Run ID
 _runID = korali::getTimehash();

 // Setting Configuration
 setConfiguration(_js.getJson());

 // Initializing Korali and its modules
 initialize();

 // If this is a worker process (not root), there's nothing else to do
 if (_conduit->isRoot() == false) return;

 // If this is a dry run and configuration succeeded, print sucess and return
 if (isDryRun)
 {
  saveState("dry.json");
  korali::logInfo("Minimal",  "--------------------------------------------------------------------\n");
  korali::logInfo("Minimal",  "Dry Run Successful.\n");
  korali::logInfo("Minimal",  "--------------------------------------------------------------------\n");
  return;
 }

 // Saving initial state
 saveState("initial.json");

 auto startTime = std::chrono::system_clock::now();

 // Running Solver by generations until at least one termination criterion is satisfied
 while(isExecutionFinished() == false)
 {
  if (_currentGeneration % _consoleOutputFrequency == 0)
    {
     korali::logInfo("Minimal",  "--------------------------------------------------------------------\n");
     korali::logInfo("Minimal",  "Starting Generation: #%zu\n", _currentGeneration);
     _solver->printGenerationBefore();
    }

  // Timing and Profiling Start
  auto t0 = std::chrono::system_clock::now();

  _profileInfo["Engine"].commitSegment();
  _profileInfo["Solver"].startSegment();
  _solver->runGeneration();
  _profileInfo["Solver"].commitSegment();
  _profileInfo["Engine"].startSegment();

  // Timing and Profiling End
  auto t1 = std::chrono::system_clock::now();

  if (_currentGeneration % _consoleOutputFrequency == 0)
  {
   _solver->printGenerationAfter();
   korali::logInfo("Detailed", "Generation Time: %.3fs\n", std::chrono::duration<double>(t1-t0).count());
  }

  if (_currentGeneration % _resultsOutputFrequency == 0) saveState(_currentGeneration);

  _currentGeneration++;
 }

 _currentGeneration--;

 // Saving last generation and final.json
 saveState(_currentGeneration);
 saveState("final.json");

 auto endTime = std::chrono::system_clock::now();

 korali::logInfo("Minimal", "--------------------------------------------------------------------\n");
 korali::logInfo("Minimal", "%s finished correctly.\n", _solver->getType().c_str(), _currentGeneration);
 for (size_t i = 0; i < _solver->_terminationCriteria.size(); i++) korali::logInfo("Normal", "Termination Criterion Met: %s\n", _solver->_terminationCriteria[i].c_str());
 for (size_t i = 0; i < _problem->_terminationCriteria.size(); i++) korali::logInfo("Normal", "Termination Criterion Met: %s\n", _problem->_terminationCriteria[i].c_str());
 for (size_t i = 0; i < _conduit->_terminationCriteria.size(); i++) korali::logInfo("Normal", "Termination Criterion Met: %s\n", _conduit->_terminationCriteria[i].c_str());

 _solver->finalize();
 _problem->finalize();
 _conduit->finalize();

 korali::logInfo("Normal", "Total Generations: %lu\n", _currentGeneration);
 korali::logInfo("Normal", "Total Computational Model Evaluations: %lu\n", _conduit->_modelEvaluationCount);
 korali::logInfo("Normal", "Elapsed Time: %.3fs\n", std::chrono::duration<double>(endTime-startTime).count());

 _profileInfo["Engine"].commitSegment();
 for (auto& x : korali::_profileInfo)
   korali::logInfo("Detailed", "   [%s] Segments: %lu,  Busy Time: %f\n", x.first.c_str(), x.second._segmentTimes.size(), x.second._workTime);

 korali::logInfo("Normal", "Results saved to folder: '%s'\n", _resultsOutputPath.c_str());
}

void korali::Engine::initialize()
{
 korali::setVerbosityLevel(_consoleOutputVerbosity);

 // Creating Results directory
 mkdir(_resultsOutputPath.c_str(), S_IRWXU | S_IRWXG | S_IROTH | S_IXOTH);

 // Initializing Modules
 for (size_t i = 0; i < _k->_distributions.size(); i++) _k->_distributions[i]->initialize();
 _problem->initialize();
 _solver->initialize();
 _conduit->initialize();
}

korali::Engine::Engine()
{
 _k = this;
}

korali::Engine::Engine(nlohmann::json js) : korali::Engine::Engine()
{
 _js.getJson() = js;
 setConfiguration(_js.getJson());
}

bool korali::Engine::isExecutionFinished()
{
  return _solver->checkTermination() || _conduit->checkTermination() || _problem->checkTermination();
}

void korali::Engine::saveState(std::string fileName)
{
 // Updating run timestamp
 _timestamp = korali::getTimestamp();

 // Getting configuration
 _js.getJson() = nlohmann::json();
 this->getConfiguration(_js.getJson());

 // Only the root rank saves files
 if (!_conduit->isRoot()) return;
 fileName = "./" + _resultsOutputPath + "/" + fileName;
 korali::JsonInterface::saveJsonToFile(fileName.c_str(), _js.getJson());
}

void korali::Engine::saveState(int fileId)
{
 if (!_conduit->isRoot()) return;

 char fileName[256];

 sprintf(fileName, "s%05d.json", fileId);

 saveState(fileName);
}

void korali::Engine::loadState(std::string fileName)
{
 _js.getJson() = korali::JsonInterface::loadJsonFromFile(fileName.c_str());
}

nlohmann::json& korali::Engine::operator[](const std::string& key) { return _js[key]; }
nlohmann::json& korali::Engine::operator[](const unsigned long int& key) { return _js[key]; }
pybind11::object korali::Engine::getItem(pybind11::object key) { return _js.getItem(key); }
void korali::Engine::setItem(pybind11::object key, pybind11::object val) { _js.setItem(key, val); }

#ifdef _KORALI_USE_MPI
long int korali::Engine::getMPICommPointer() { return (long int)(&__KoraliTeamComm); }
#endif

PYBIND11_MODULE(libkorali, m)
{
 pybind11::class_<korali::KoraliJson>(m, "koraliJson")
  .def("__getitem__", pybind11::overload_cast<pybind11::object>(&korali::KoraliJson::getItem), pybind11::return_value_policy::reference)
  .def("__setitem__", pybind11::overload_cast<pybind11::object, pybind11::object>(&korali::KoraliJson::setItem), pybind11::return_value_policy::reference);

 pybind11::class_<korali::Sample>(m, "Sample")
  .def("__getitem__", pybind11::overload_cast<pybind11::object>(&korali::Sample::getItem), pybind11::return_value_policy::reference)
  .def("__setitem__", pybind11::overload_cast<pybind11::object, pybind11::object>(&korali::Sample::setItem), pybind11::return_value_policy::reference);

 pybind11::class_<korali::Engine>(m, "Engine")
   .def(pybind11::init<>())
    #ifdef _KORALI_USE_MPI
   .def("getMPIComm", &korali::Engine::getMPICommPointer)
    #endif
   .def("__getitem__", pybind11::overload_cast<pybind11::object>(&korali::Engine::getItem), pybind11::return_value_policy::reference)
   .def("__setitem__", pybind11::overload_cast<pybind11::object, pybind11::object>(&korali::Engine::setItem), pybind11::return_value_policy::reference)
   .def("run", &korali::Engine::run)
   .def("dry", &korali::Engine::dry)
   .def("loadState",     &korali::Engine::loadState, pybind11::return_value_policy::reference);
}


