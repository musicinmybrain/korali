#include "engine/engine.hpp"
#include "conduit/conduit.hpp"
#include "solver/solver.hpp"
#include "problem/problem.hpp"
#include "conduit/MPI/MPI.hpp"
#include "auxiliar/py2json.hpp"

#include <chrono>
#include <sys/types.h>
#include <sys/stat.h>
#include <cstdio>
#include <map>

void korali::Engine::run(size_t count, bool isDryRun)
{
 // Setting output file to stdout, by default.
 korali::setConsoleOutputFile(stdout);

 // Saving solver count
 _solverCount = count;

 // Initializing Profile Information
 _startTime = std::chrono::high_resolution_clock::now();

 // Setting Run ID
 _runID = korali::getTimehash();

 // Setting Configuration
 setConfiguration(_js.getJson());

 // Initializing Korali and its modules
 initialize();

 // If this is a worker process (not root), there's nothing else to do
 if (_conduit->isRoot() == false) return;

 _thread = co_active();
 auto solvers = std::vector<korali::Solver*>(_solverCount);

 // Creating results directory
 if (_resultsOutputActive == true) mkdir(_resultsOutputPath.c_str(), S_IRWXU | S_IRWXG | S_IROTH | S_IXOTH);

 for (size_t i = 0; i < _solverCount; i++)
 {
  auto js = nlohmann::json();
  getConfiguration(js);

  solvers[i] = dynamic_cast<korali::Solver*>(korali::Module::getModule(js["Solver"]));
  solvers[i]->initialize();
  solvers[i]->_thread = co_create(10240*sizeof(void*), korali::Solver::solverWrapper);
  solvers[i]->_solverId = i;

  // Creating Solver Results directory and logFile
  char dirName[256];
  sprintf(dirName, "solver%05d", i);
  if (_solverCount > 1)
  {
    solvers[i]->_subDirPath = _resultsOutputPath + "/" + dirName;
    mkdir(solvers[i]->_subDirPath.c_str(), S_IRWXU | S_IRWXG | S_IROTH | S_IXOTH);
    std::string fileName = "./" + solvers[i]->_subDirPath + "/log.txt";
    solvers[i]->_logFile = fopen(fileName.c_str(),"w");
  }
  else  solvers[i]->_subDirPath = _resultsOutputPath;

  _currentSolver = solvers[i];
  co_switch(solvers[i]->_thread);
 }

 // If this is a dry run and configuration succeeded, print sucess and return
 if (isDryRun)
 {
  saveState(solvers[0], _resultsOutputPath, "dry.json");
  korali::logInfo("Minimal",  "--------------------------------------------------------------------\n");
  korali::logInfo("Minimal",  "Dry Run Successful.\n");
  korali::logInfo("Minimal",  "--------------------------------------------------------------------\n");
  return;
 }

 while(true)
 {
  bool executed = false;

  for (size_t i = 0; i < _solverCount; i++) if (solvers[i]->_isFinished == false)
  {
   if (_solverCount > 1) korali::setConsoleOutputFile(solvers[i]->_logFile);
   _currentSolver = solvers[i];

   co_switch(solvers[i]->_thread);

   if (_solverCount > 1) korali::setConsoleOutputFile(stdout);
   executed = true;
   if (_solverCount > 1) if (solvers[i]->_isFinished == true) korali::logInfo("Normal", "Job %lu has finished.\n", i);
  }

  if (executed == false) break;
 }

 if (_solverCount > 1)
 {
  korali::logInfo("Minimal", "All %lu jobs have finished correctly.\n", _solverCount);
  korali::logInfo("Normal", "Elapsed Time: %.3fs\n", std::chrono::duration<double>(std::chrono::high_resolution_clock::now()-_startTime).count());
  if (_resultsOutputActive) korali::logInfo("Normal", "Results saved to folder: '%s'\n", _resultsOutputPath.c_str());
 }
}

void korali::Engine::initialize()
{
 korali::setVerbosityLevel(_consoleOutputVerbosity);

 // Initializing Modules
 for (size_t i = 0; i < _k->_distributions.size(); i++) _k->_distributions[i]->initialize();
 _problem->initialize();
 _conduit->initialize();
 _thread = co_active();
}

korali::Engine::Engine()
{
 _k = this;
}

korali::Engine::Engine(nlohmann::json js) : korali::Engine::Engine()
{
 _js.getJson() = js;
 setConfiguration(_js.getJson());
}

void korali::Engine::saveState(korali::Solver* solver, std::string dirName, std::string fileName)
{
 // Updating run timestamp
 _timestamp = korali::getTimestamp();

 // Getting configuration
 _js.getJson() = nlohmann::json();
 this->getConfiguration(_js.getJson());
 solver->getConfiguration(_js.getJson()["Solver"]);

 // Donst save if incative
 if (_resultsOutputActive == false) return;
 
 // Only the root rank saves files
 if (!_conduit->isRoot()) return;
 fileName = "./" + dirName + "/" + fileName;
 korali::JsonInterface::saveJsonToFile(fileName.c_str(), _js.getJson());

 __profiler["Solver Count"] = _solverCount;
 __profiler["Elapsed Time"] = std::chrono::duration<double>(std::chrono::high_resolution_clock::now()-_startTime).count();
 fileName = "./" + _resultsOutputPath + "/profiling.json";
 korali::JsonInterface::saveJsonToFile(fileName.c_str(), __profiler);
}

void korali::Engine::saveState(korali::Solver* solver, std::string dirName, int fileId)
{
 if (!_conduit->isRoot()) return;

 char fileName[256];

 sprintf(fileName, "gen%05d.json", fileId);

 saveState(solver, dirName, fileName);
}

void korali::Engine::loadState(std::string fileName)
{
 _js.getJson() = korali::JsonInterface::loadJsonFromFile(fileName.c_str());
}

nlohmann::json& korali::Engine::operator[](const std::string& key) { return _js[key]; }
nlohmann::json& korali::Engine::operator[](const unsigned long int& key) { return _js[key]; }
pybind11::object korali::Engine::getItem(pybind11::object key) { return _js.getItem(key); }
void korali::Engine::setItem(pybind11::object key, pybind11::object val) { _js.setItem(key, val); }

#ifdef _KORALI_USE_MPI
long int korali::Engine::getMPICommPointer() { return (long int)(&__KoraliTeamComm); }
#endif

PYBIND11_MODULE(libkorali, m)
{
 pybind11::class_<korali::KoraliJson>(m, "koraliJson")
  .def("__getitem__", pybind11::overload_cast<pybind11::object>(&korali::KoraliJson::getItem), pybind11::return_value_policy::reference)
  .def("__setitem__", pybind11::overload_cast<pybind11::object, pybind11::object>(&korali::KoraliJson::setItem), pybind11::return_value_policy::reference);

 pybind11::class_<korali::Sample>(m, "Sample")
  .def("__getitem__", pybind11::overload_cast<pybind11::object>(&korali::Sample::getItem), pybind11::return_value_policy::reference)
  .def("__setitem__", pybind11::overload_cast<pybind11::object, pybind11::object>(&korali::Sample::setItem), pybind11::return_value_policy::reference);

 pybind11::class_<korali::Engine>(m, "Engine")
   .def(pybind11::init<>())
    #ifdef _KORALI_USE_MPI
   .def("getMPIComm", &korali::Engine::getMPICommPointer)
    #endif
   .def("__getitem__", pybind11::overload_cast<pybind11::object>(&korali::Engine::getItem), pybind11::return_value_policy::reference)
   .def("__setitem__", pybind11::overload_cast<pybind11::object, pybind11::object>(&korali::Engine::setItem), pybind11::return_value_policy::reference)
   .def("run", &korali::Engine::runSingle)
   .def("runMultiple", &korali::Engine::runMultiple)
   .def("runDry", &korali::Engine::runDry)
   .def("loadState",     &korali::Engine::loadState, pybind11::return_value_policy::reference);
}
