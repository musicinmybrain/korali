#ifndef _KORALI_ENGINE_HPP_
#define _KORALI_ENGINE_HPP_

#include <vector>
#include <functional>
#include "engine/sample/sample.hpp"
#include "engine/variable/variable.hpp"
#include "auxiliar/py2json.hpp"
#include "module.hpp"

#undef _POSIX_C_SOURCE
#undef _XOPEN_SOURCE

namespace korali
{

class Solver;
class Problem;
class Conduit;

class Engine : public korali::Module {

 public:

 // Start functions
 void initialize() override;
 void start(bool isDryRun);
 void run() { start(false); }
 void dry() { start(true);  }

 // Constructors
 Engine();
 Engine(nlohmann::json js);

 // Model Collection
 std::vector<std::function<void(korali::Sample&)>> _models;

 // JSON-based configuration
 nlohmann::json  _js;

 // Python and Json Configuration Binding Methods
 nlohmann::json*  _opt;

 Engine& getItem(const std::string& key);
 Engine& getItem(const unsigned long int& key);
 Engine& operator[](const std::string& key);
 Engine& operator[](const unsigned long int& key);
 void setItem(const std::string& key, const pybind11::object& val);
 void setItem(const int& key, const pybind11::object& val);

 void operator=(const std::function<void(korali::Sample&)> val);
 void operator=(const std::string& val)         { (*_opt) = val; _opt = &_js; }
 void operator=(const double& val)              { (*_opt) = val; _opt = &_js; }
 void operator=(const int& val)                 { (*_opt) = val; _opt = &_js; }
 void operator=(const std::vector<double>& val) { (*_opt) = val; _opt = &_js; }

 double getValue();
 bool getBoolean();
 std::string getString();
 std::vector<double> getArray();

 // State save/load methods
 bool isExecutionFinished();
 void loadState(std::string fileName);
 void saveState(std::string fileName);
 void saveState(int fileId);

 // Communicator Methods
 long int getMPICommPointer();
};

} // namespace korali

#endif // _KORALI_ENGINE_HPP_
