#ifndef _KORALI_ENGINE_HPP_
#define _KORALI_ENGINE_HPP_

#include <vector>
#include <functional>
#include <chrono>
#include "engine/sample/sample.hpp"
#include "engine/variable/variable.hpp"
#include "auxiliar/koraliJson.hpp"
#include "module.hpp"

namespace korali
{
class Solver;
class Problem;

class Engine : public korali::Module {

 public:

 // Start functions
 void initialize() override;

 // Constructors
 Engine();

 // JSON-based configuration
 korali::KoraliJson  _js;

 // Storing initial launch
 nlohmann::json  _initialConfig;

 // Logging and results
 FILE* _logFile;
 std::string _subDirPath;

 // Multiple Solver Variables/Functions
 size_t _engineId;
 cothread_t _thread;

 pybind11::object getItem(pybind11::object key);
 void setItem(pybind11::object key, pybind11::object val);
 bool loadState(std::string path);
 bool loadState();
 void saveState();
 void run();


 nlohmann::json& operator[](const std::string& key);
 nlohmann::json& operator[](const unsigned long int& key);
};

extern std::vector<korali::Engine*> _engineVector;
extern korali::Engine* _currentEngine;
extern cothread_t _mainThread;

} // namespace korali

#endif // _KORALI_ENGINE_HPP_
