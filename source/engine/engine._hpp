#ifndef _KORALI_ENGINE_HPP_
#define _KORALI_ENGINE_HPP_

#include <vector>
#include <functional>
#include "engine/sample/sample.hpp"
#include "engine/variable/variable.hpp"
#include "auxiliar/koraliJson.hpp"
#include "module.hpp"

#undef _POSIX_C_SOURCE
#undef _XOPEN_SOURCE

namespace korali
{

class Solver;
class Problem;
class Conduit;

class Engine : public korali::Module {

 public:

 // Start functions
 void initialize() override;
 void start(bool isDryRun);
 void run() { start(false); }
 void dry() { start(true);  }

 // Constructors
 Engine();
 Engine(nlohmann::json js);

 // JSON-based configuration
 korali::KoraliJson  _js;

 pybind11::object getItem(pybind11::object key);
 void setItem(pybind11::object key, pybind11::object val);

 nlohmann::json& operator[](const std::string& key);
 nlohmann::json& operator[](const unsigned long int& key);

 // State save/load methods
 bool isExecutionFinished();
 void loadState(std::string fileName);
 void saveState(std::string fileName);
 void saveState(int fileId);

 // Communicator Methods
 long int getMPICommPointer();
};

} // namespace korali

#endif // _KORALI_ENGINE_HPP_
