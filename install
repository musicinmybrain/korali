#!/bin/bash

logFile=$PWD/install.log
echo "" > $logFile

# Help display function
function print_help ()
{
 echo ""
 echo "Syntax: ./install"
 echo "        [--prereqs]"
 echo "        [--rebuild]"
 echo "        [--debug]"
 echo "        [--jobs=N]"
 echo "        [--help]"
 echo ""
 echo "Where:"
 echo " --prereqs Allows Korali to install any missing prerequisites."
 echo " --rebuild Cleans and rebuilds/installs Korali for development purposes."
 echo " --debug builds a non-optimized Korali for debugging purposes."
 echo " --jobs=N Specifies N jobs to use when building Korali."
 echo " --help Displays this help message."
}

# Logging and printing function.
function logEcho ()
{
 echo "$1"
 echo "$1" >> $logFile
}

# Logging function.
function log ()
{
 echo "$1" >> $logFile
}

# Exit with error message.
function exitWithError ()
{
 >&2 echo "[Korali] Installation Error: Check $logFile for more information."
 exit -1
}

function check()
{
 if [ ! $? -eq 0 ]
 then
  exitWithError
 fi 
}

INSTALLREQS=0
NJOBS=4
OPTFLAGS="-O3 -DJSON_NOEXCEPTION"

for i in "$@"
do
case $i in
    --prereqs)
    INSTALLREQS=1
    shift 
    ;;
    --debug)
    OPTFLAGS="-O0"
    shift 
    ;;
    --jobs=*)
    NJOBS="${i#*=}"
    shift
    ;;
    --rebuild)
    logEcho "[Korali] Cleaning Korali for new build..."
    python3 -m pip uninstall -y korali >> $logFile 2>&1
    make -C source clean >> $logFile 2>&1
    shift 
    ;;
    --help)
    print_help
    exit 0 
    shift 
    ;;
    *)
    print_help
    echo ""
    echo "[Korali] Error:  Unknown option $i."       
    exit 1
    ;;
esac
done


######## Start Configuration ######

version=`cat docs/VERSION`
logEcho "[Korali] Installing Korali v${version}..." 
logEcho "[Korali] Determining Configuration..." 
logEcho "[Korali] Using $NJOBS jobs."
log "[Korali] Checking for architecture..."
arch="$(uname -s)"

# Linux Architecture is default
SHAREDLIB_FLAG="-shared"

if [ "$arch" == "Linux" ]; then
 log "[Korali] Linux System Detected."
fi

# If using MacOs, change flags 
if [ "$arch" == "Darwin" ]; then
 log "[Korali] MacOS (Darwin) System Detected."
 SHAREDLIB_FLAG="-dynamiclib"
fi

######## Checking Compiler ########

logEcho "[Korali] Checking Pre-requisites..."

log "Checking for C++ Compiler..."

$CXX --version > /dev/null 2>&1
DETECTED_CXX=$?
c++ --version > /dev/null 2>&1
DETECTED_CPLUSPLUS=$?
g++ --version > /dev/null 2>&1
DETECTED_GXX=$?
clang++ --version > /dev/null 2>&1
DETECTED_CLANG=$?
icpc --version > /dev/null 2>&1
DETECTED_ICPC=$?
CC --help > /dev/null 2>&1
DETECTED_CRAY=$?

USE_CXX=""
if [ $DETECTED_CPLUSPLUS -eq 0 ]; then USE_CXX=c++;     fi;
if [ $DETECTED_GXX       -eq 0 ]; then USE_CXX=g++;     fi;
if [ $DETECTED_ICPC      -eq 0 ]; then USE_CXX=icpc;    fi;
if [ $DETECTED_CRAY      -eq 0 ]; then USE_CXX=CC;      fi;
if [ $DETECTED_CLANG     -eq 0 ]; then USE_CXX=clang++; fi;
if [ $DETECTED_CXX       -eq 0 ]; then USE_CXX=$CXX;    fi;

######## Checking for CMake ########

cmakeFound=0
cMakeVer=0.0

cMakeBin=$PWD/build/cmakeInstall/bin/cmake

if [ ! -f ${cMakeBin} ]; then
 cMakeBin=cmake
fi

$cMakeBin --version > /dev/null 2>&1
if [ $? -eq 0 ]; then
 minCMakeVer=3.0
 cMakeVer=`cmake --version | head -n 1 | cut -d' ' -f 3`
 cmpver=`printf "${cMakeVer}\n${minCMakeVer}" | sort -V | head -n 1`
 
 if [[ "$cmpver" != "$minCMakeVer" ]]; then
    logEcho "[Korali] CMake version found (${cMakeVer}) is smaller than required (${minCMakeVer})."
 else
    cmakeFound=1
 fi
fi

if [ ${cmakeFound} == 0 ]; then

 if [ $INSTALLREQS -eq 0 ]; then
 logEcho "[Korali] Error: CMake not found or older version than 3.0."
 logEcho "         Solution: Have 'cmake' correctly installed and in your PATH environment variable..."
 logEcho "         1. Have 'cmake' version >3.0 correctly installed and in your PATH environment variable"
 logEcho "         2. Run ./install --prereqs to allow Korali."
 logEcho "            to install missing prerequisites automatically.."
 exitWithError
 fi
 
 logEcho "[Korali] Downloading CMake... "
 
 mkdir -p build; check
 CURDIR=$PWD
 
 pushd build >> $logFile 2>&1; check
 
 rm -f cmake-3.17.3.tar.gz >> $logFile 2>&1; check
 rm -rf cmake-3.17.3 >> $logFile 2>&1; check
 rm -rf cmakeInstall >> $logFile 2>&1; check
 
 wget https://github.com/Kitware/CMake/releases/download/v3.17.3/cmake-3.17.3.tar.gz >> $logFile 2>&1; check
 tar -xzvf cmake-3.17.3.tar.gz >> $logFile 2>&1; check
  
 echo "[Korali] Configuring CMake... "
 cd cmake-3.17.3/
 ./configure --prefix=${CURDIR}/build/cmakeInstall --parallel=$NJOBS >> $logFile 2>&1; check
 
 echo "[Korali] Building CMake... "
 make -j$NJOBS >> $logFile 2>&1; check
 
 echo "[Korali] Installing CMake... "
 make install >> $logFile 2>&1; check
 
 popd >> $logFile 2>&1; check
 
 logEcho "[Korali] Finished installing CMake. "
 cMakeBin=${CURDIR}/build/cmakeInstall/bin/cmake
fi

cMakeVer=`$cMakeBin --version | head -n 1 | cut -d' ' -f 3` 
logEcho "[Korali] Found CMake version $cMakeVer"

######## Checking support for GNU Scientific Library ########

log "[Korali] Looking for existing GNU Scientific Library (GSL)..."

mingslver=2.5
foundGSL=0
gslprefix=$PWD/build
gslcfgFile=gsl-config

if [ -f ${gslprefix}/bin/gsl-config ]; then
 gslcfgFile=${gslprefix}/bin/gsl-config
fi

$gslcfgFile --version > /dev/null 2>&1
if [ $? -eq 0 ]; then
 log "[Korali] Running \"$gslcfgFile --version\"..."

 gslver=`$gslcfgFile --version`
 logEcho "[Korali] Found GSL version $gslver."
 foundGSL=1
 cmpver=`printf "${gslver}\n${mingslver}" | sort -V | head -n 1`
 if [[ "$cmpver" != "$mingslver" ]]; then
   logEcho "[Korali] GSL version found (${gslver}) is smaller than required (${mingslver})."
   foundGSL=0
 fi
fi

if [ $foundGSL == 0 ]; then

  if [ $INSTALLREQS -eq 0 ]; then
   logEcho "[Korali] GSL (version > 2.5) not found. Try either of these solutions:"
   logEcho "         1. Configure your system so that the file gsl-config from your."
   logEcho "            GSL (version > 2.5) is accesible by the PATH environment variable"
   logEcho "         2. Run ./install --prereqs to allow Korali."
   logEcho "            to install missing prerequisites automatically.." 
   exitWithError
  fi
  
  logEcho "[Korali] Downloading GNU Scientific Library... "
  mkdir -p build; check
  CURDIR=$PWD
  rm -f gsl-2.5.tar.gz >> $logFile 2>&1; check
  wget 'ftp://ftp.gnu.org/gnu/gsl/gsl-2.5.tar.gz' >> $logFile 2>&1; check 
  tar -xzvf gsl-2.5.tar.gz >> $logFile 2>&1 >> $logFile 2>&1; check
  
  echo "[Korali] Configuring GNU Scientific Library... "
  cd gsl-2.5; check 
  
  logEcho "[Korali] Running ./configure --prefix=$gslprefix ..."
  ./configure --prefix=$gslprefix >> $logFile 2>&1; check
  
  logEcho "[Korali] Compiling GNU Scientific Library... "
  make -j$NJOBS >> $logFile 2>&1; check
  
  logEcho "[Korali] Installing GNU Scientific Library... "
  make install >> $logFile 2>&1; check
  
  cd .. 
  rm -rf gsl-2.5 gsl-2.5.tar.gz >> $logFile 2>&1; check
  
  logEcho "[Korali] Finished installing GNU Scientific Library. "
  gslcfgFile=$gslprefix/bin/gsl-config
fi

######## Checking support for MPI ########

MPIFLAGS=""
log "[Korali] Checking for MPI support..."
log "[Korali] Running \"\$MPICXX --help\"..."
$MPICXX --help > /dev/null 2>&1

if [ ! $? -eq 0 ]
then
 logEcho "[Korali] MPI not found. Installing Korali without support for MPI."
 logEcho "         > To use MPI, define the \$MPICXX environment variable."
 USE_MPI=0
else
 log "[Korali] Found $MPICXX for MPI compiler/wrapper."
 log "[Korali] Use 'export MPICXX=(path)' to use a different MPI wrapper."
 USE_CXX=$MPICXX
 MPIFLAGS="-D_KORALI_USE_MPI"
fi

######## Checking support for oneDNN ########

ONEDNNCFLAGS=""
ONEDNNLDFLAGS=""
oneDnnFound=0

log "[Korali] Checking for oneDNN support..."
if [ -f ${DNNLROOT}/lib64/libdnnl.so ]; then
 log "[Korali] Found openDNN library at ${DNNLROOT}/lib64/libdnnl.so"
 oneDnnFound=1
else
 DNNLROOT=$PWD/build/oneDNNInstall
 if [ -f ${DNNLROOT}/lib64/libdnnl.so ]; then
  log "[Korali] Found openDNN library at ${DNNLROOT}/lib64/libdnnl.so"
  oneDnnFound=1
 fi
fi

if [ $oneDnnFound == 0 ]; then
  
  if [ $INSTALLREQS -eq 0 ]; then
   logEcho "[Korali] oneDNN not found. Try either of these solutions:"
   logEcho "         1. Define the \$DNNLROOT environment variable."
   logEcho "           to indicate the installation folder of oneDNN."
   logEcho "         2. Run ./install --prereqs to allow Korali."
   logEcho "           to install missing prerequisites automatically.." 
   exitWithError
  fi
  
  logEcho "[Korali] Downloading oneDNN... "
  mkdir -p build >> $logFile 2>&1; check
  pushd build >> $logFile 2>&1; check
  
  rm -rf oneDNN >> $logFile 2>&1; check
  git clone https://github.com/oneapi-src/oneDNN.git >> $logFile 2>&1; check
  
  echo "[Korali] Configuring oneDNN... "
  cd oneDNN >> $logFile 2>&1; check
  
  mkdir -p build >> $logFile 2>&1; check
  cd build >> $logFile 2>&1; check
  
  logEcho "[Korali] Running CMake on oneDNN..."
  $cMakeBin .. -DCMAKE_INSTALL_PREFIX=$DNNLROOT >> $logFile 2>&1; check
  
  logEcho "[Korali] Compiling oneDNN... "
  make -j$NJOBS >> $logFile 2>&1; check
  
  logEcho "[Korali] Installing oneDNN... "
  make install >> $logFile 2>&1; check
  
  popd >> $logFile 2>&1; check
  
fi

logEcho "[Korali] Found oneDNN at ${DNNLROOT}"
ONEDNNCFLAGS="-D_KORALI_USE_ONEDNN -I${DNNLROOT}/include"
ONEDNNLDFLAGS="-Wl,-rpath -Wl,${DNNLROOT}/lib64/ -L${DNNLROOT}/lib64/ -ldnnl"
 
######## Checking support for Python3 ########

log "[Korali] Checking for Python3 support using \"python3 --version\"."
pyver=`python3 --version`
if [ $? -eq 0 ]; then
  log "[Korali] Checking for python3-config."
  python3-config --help >> $logFile 2>&1
  if [ $? -ne 0 ]; then
    logEcho "[Korali] Error: python3-config not found."
    logEcho "[Korali] Solution: Please make sure the python3-dev package is correctly installed."
    exitWithError
  fi
else
  logEcho "[Korali] Error: Python3 not found."
  logEcho "[Korali] Solution: Please make sure the python3-config command is accesible in the PATH environment variable."
  exitWithError
fi
log "[Korali] Python3 version $pyver found."

######## Checking support for pip ########

log "[Korali] Checking for pip support using \"python3 -m pip --version\"..."
python3 -m pip --version >> $logFile 2>&1
if [ $? -ne 0 ]; then
  logEcho "[Korali] Error: pip not found among python3 packages."
  logEcho "[Korali] Solution: Make sure python3 and pip are correctly installed in your system."
  exitWithError
fi
# The --user flag should be set only if we are not inside a virtualenv.
PIP_USER=$(python3 -c "import sys; hasattr(sys, 'real_prefix') or print('--user')")

######## Checking support for Pybind11 ########

log "[Korali] Checking for Pybind11 support using \"python3 -m pybind11 -h\"..."
python3 -m pybind11 -h >> $logFile 2>&1
if [ $? -ne 0 ]; then

  if [ $INSTALLREQS -eq 0 ]; then
   logEcho "[Korali] Error: pybind11 not found, trying to install it automatically."
   logEcho "[Korali] Solution: Run \"./install\"."
   exitWithError
  fi
  
  logEcho "[Korali] pybind11 not found, trying to install it automatically."
  python3 -m pip install $PIP_USER pybind11 >> $logFile 2>&1; check
fi

######## Determining Library Flags ########

echo "[Korali] Creating configuration files..."

GSLPREFIX=`$gslcfgFile --prefix`
GSLCFLAGS=`$gslcfgFile --cflags`
GSLLIBS=`$gslcfgFile --libs`
PYBIND11INCLUDES=`python3 -m pybind11 --includes` 
PYBIND11LIBS=`python3-config --ldflags`

CXXARCH="-std=c++14"
which $USE_CXX | grep "cray" >> $logFile 2>&1
if [ $? -eq 0 ]; then
  logEcho "[Korali] Assuming Cray System."
  CC -craype-verbose 2>&1 | grep "driver.CC" >> $logFile 2>&1
  if [ $? -eq 0 ]; then
   logEcho "[Korali] Detected Cray compiler."
   CXXARCH="-hstd=c++14"
   PYBIND11LIBS=`echo $PYBIND11LIBS | sed 's/-Xlinker//g' | sed 's/-export-dynamic//g'`
  fi
fi

######## Checking selected compiler #######

if [[ "$USE_CXX" == "" ]]
then
  logEcho "[Korali] Error:  Did not found any valid C++ or MPI C++ compiler."
  logEcho "[Korali] Solution: Please define a valid C++ compiler in \$CXX or \$MPICXX."
  exitWithError
fi

######## Creating Compilation Config File ########

log "[Korali] Creating Compilation Config File..."

echo CXX=$USE_CXX > source/Makefile.conf
echo CXXARCH=$CXXARCH >> source/Makefile.conf
echo SHAREDLIB_FLAG=$SHAREDLIB_FLAG >> source/Makefile.conf
echo MPIFLAGS=$MPIFLAGS >> source/Makefile.conf
echo ONEDNNCFLAGS=$ONEDNNCFLAGS >> source/Makefile.conf
echo ONEDNNLDFLAGS=$ONEDNNLDFLAGS >> source/Makefile.conf
echo OPTFLAGS=$OPTFLAGS >> source/Makefile.conf
echo MACHINEARCH=$arch >> source/Makefile.conf

echo GSLPREFIX=$GSLPREFIX >> source/Makefile.conf
echo GSLCFLAGS=$GSLCFLAGS >> source/Makefile.conf
echo GSLLIBS=$GSLLIBS  >> source/Makefile.conf
echo PYBIND11INCLUDES=$PYBIND11INCLUDES >> source/Makefile.conf 
echo PYBIND11LIBS=$PYBIND11LIBS >> source/Makefile.conf

######## Compiling Korali C++ Engine #########

logEcho "[Korali] Building Korali Source..."
make -C source build >> $logFile 2>&1
if [ $? -ne 0 ]; then
  logEcho "[Korali] Error building Korali."
  exitWithError
fi

logEcho "[Korali] Compiling Korali..."
make -j$NJOBS -C source all >> $logFile 2>&1
if [ $? -ne 0 ]; then
  logEcho "[Korali] Error compiling Korali."
  exitWithError
fi

######## Installing Korali using pip ########

logEcho "[Korali] Installing Korali..."

cp source/libkorali.so . >> $logFile 2>&1
if [ $? -ne 0 ]; then
  logEcho "[Korali] Error obtaining libkorali.so"
  exitWithError
fi

python3 -m pip install . $PIP_USER --upgrade >> $logFile 2>&1
if [ $? -ne 0 ]; then
  logEcho "[Korali] Error installing Korali's Python module."
  exitWithError
fi

rm -f libkorali.so >> $logFile 2>&1 

echo "------------------------------------------------------------------"
echo "[Korali] Finished installation successfully."
echo "------------------------------------------------------------------"

