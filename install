#!/bin/bash

logFile=$PWD/install.log
echo "" > $logFile

# Help display function
function print_help ()
{
 echo ""
 echo "Syntax: ./install"
 echo "        [--rebuild]"
 echo "        [--help]"
 echo ""
 echo "Where:"
 echo " --rebuild Cleans and rebuilds/installs Korali for development purposes."
 echo " --help Displays this help message."
}

# Logging and printing function.
function logEcho ()
{
 echo "$1"
 echo "$1" >> $logFile
}

# Logging function.
function log ()
{
 echo "$1" >> $logFile
}

# Exit with error message.
function exitWithError ()
{
 >&2 echo "[Korali] Installation Error: Check $logFile for more information."
 exit -1
}

function check()
{
 if [ ! $? -eq 0 ]
 then
  exitWithError
 fi
}

for i in "$@"
do
case $i in
    --rebuild)
    logEcho "[Korali] Cleaning Korali for new build..."
    python3 -m pip uninstall -y korali >> $logFile 2>&1
    make -C source clean >> $logFile 2>&1
    make -C external/libco clean >> $logFile 2>&1
    shift
    ;;
    --help)
    print_help
    exit 0
    shift
    ;;
    *)
    print_help
    echo ""
    echo "[Korali] Error:  Unknown option $i."
    exit 1
    ;;
esac
done

######### Environment Configuration ########

# Loading Intsall Configuration

if [ ! -f install.config ]; then
 cp .install.config.default install.config
fi
source install.config
if [ ! $? == 0 ]; then
 logEcho "[Korali] Error loading configuration from install.config."
 exitWithError
fi

# Detecting Korali Base Directory

baseKoraliDir=$PWD
foundbinVersionFile=0

if [ -f $baseKoraliDir/docs/VERSION ]; then
 foundbinVersionFile=1
fi

if [ $foundbinVersionFile == 0 ]; then
  echo "[Korali] Error: You need to run this file from Korali's base folder."
  exit 1
fi

######## Start Configuration ######

version=`cat docs/VERSION`
logEcho "[Korali] Installing Korali v${version}..."
logEcho "[Korali] Determining Configuration..."
logEcho "[Korali] Using $NJOBS jobs."
log "[Korali] Checking for architecture..."
arch="$(uname -s)"

# Linux Architecture is default
SHAREDLIB_FLAG="-shared"

if [ "$arch" == "Linux" ]; then
 log "[Korali] Linux System Detected."
fi

# If using MacOs, change flags
if [ "$arch" == "Darwin" ]; then
 log "[Korali] MacOS (Darwin) System Detected."
 SHAREDLIB_FLAG="-dynamiclib"
fi

######## Checking Compiler ########

logEcho "[Korali] Checking Pre-requisites..."
log "[Korali] Checking for C++ Compiler..."

USE_CXX=""
STRIPPED_CXX=""
compiler_list=( clang++ CC icc icpc g++ c++)

for compiler in "${compiler_list[@]}"; do
  if [[ "$CXX" == *"$compiler"* ]]; then
    USE_CXX=$CXX
    STRIPPED_CXX=$compiler
    break
  fi
done

if [[ "$USE_CXX" == "" ]]; then
  for compiler in "${compiler_list[@]}"; do
    $compiler --version > /dev/null 2>&1
    if [ $? -eq 0 ]; then
      USE_CXX=$compiler
    STRIPPED_CXX=$compiler
      break
    fi
  done
fi

if [[ "$USE_CXX" == "" ]]; then
  logEcho "[Korali] Error:  Did not found any valid C++ compiler."
  logEcho "[Korali] Solution: Please define a valid C++ compiler in \$CXX."
  exitWithError
else
  logEcho "[Korali] Using compiler $STRIPPED_CXX ($USE_CXX)."
fi


######## Installing Mandatory External Libraries

## Getting libco
CXX=$USE_CXX ./external/install_libco.sh --jobs=$NJOBS
if [ ! $? == 0 ]; then
 logEcho "[Korali] Error: Libco could not be installed."
 exitWithError
fi

## Looking for GSL
CXX=$USE_CXX ./external/install_gsl.sh --jobs=$NJOBS
if [ ! $? == 0 ]; then
 logEcho "[Korali] Error: GSL could not be found/installed or older version than 2.5 found."
 logEcho "         Solution: Have 'gsl-config' version >2.5 correctly installed and in your PATH environment variable"
 exitWithError
fi

######## Installing Optional External Libraries

## Installing rtnorm
if [ $USE_RTNORM == "YES" ]; then
 CXX=$USE_CXX ./external/install_rtnorm.sh --jobs=$NJOBS
 if [ ! $? == 0 ]; then
  logEcho "[Korali] Error: rtnorm could not be installed/found."
  exitWithError
 fi
fi

## Installing Eigen
if [ $USE_EIGEN == "YES" ]; then
 CXX=$USE_CXX ./external/install_eigen.sh --jobs=$NJOBS
 if [ ! $? == 0 ]; then
  logEcho "[Korali] Error: Eigen could not be installed/found."
  exitWithError
 fi
fi

## Installing libGP
if [ $USE_LIBGP == "YES" ]; then
 CXX=$USE_CXX ./external/install_libGP.sh --jobs=$NJOBS
 if [ ! $? == 0 ]; then
  logEcho "[Korali] libGP could not be installed/found."
  exitWithError
 fi
fi

## Installing oneDNN
if [ "$USE_ONEDNN" == "YES" ]; then
 CXX=$USE_CXX ./external/install_oneDNN.sh --jobs=$NJOBS
 if [ ! "$?" == 0 ]; then
  logEcho "[Korali] oneDNN could not be installed/found."
  exitWithError
 fi
fi

## Checking for cuDNN
if [ "$USE_CUDNN" == "YES" ]; then
 if [ -z "$CUDA_ROOT" ]; then
  logEcho "[Korali] The \$CUDA_ROOT environment variable needs to be defined for CUDNN support."
  exitWithError
 fi

 if [ -z "$CUDNN_ROOT" ]; then
  logEcho "[Korali] The \$CUDNN_ROOT environment variable needs to be defined for CUDNN support."
  exitWithError
 fi
fi

######## Checking support for OpenMP ########

# if clang and macos: check if openmp has been installed
if [[ "$USE_CXX" == "clang++" && "$arch" == "Darwin" ]]; then

 brew --version > /dev/null 2>&1
 if [ ! $? == 0 ]; then
  logEcho "[Korali] Error: brew not found."
  logEcho "         Solution: install brew from https://brew.sh"
  exitWithError
 fi

 brew list libomp > /dev/null 2>&1
 if [ ! $? == 0 ]; then
  logEcho "[Korali] Error: OpenMP not found."
  logEcho "         Solution: Run the commands:"
  logEcho "           brew install libomp"
  logEcho "           echo 'export LIBRARY_PATH=\"\$LIBRARY_PATH:\`brew --prefix llvm\`/lib\" ' >> $HOME/.bash_profile "
  logEcho "           source \$HOME/.bash_profile"
  exitWithError
 fi

 llvm-config --version > /dev/null 2>&1
 if [ $? == 0 ]; then # brew version of clang,
  if [[ "$LIBRARY_PATH" != *"llvm"* ]]; then
   logEcho "[Korali] Error: LLVM library path not found in \$LIBRARY_PATH."
   logEcho "         Solution: Run the commands:"
   logEcho "           echo 'export LIBRARY_PATH=\"\$LIBRARY_PATH:\`brew --prefix llvm\`/lib\" ' >> $HOME/.bash_profile "
   logEcho "           source \$HOME/.bash_profile"
   exitWithError
  fi
 fi

fi

######## Checking support for MPI ########

MPIFLAGS=""
log "[Korali] Checking for MPI support..."
log "[Korali] Running \"\$MPICXX --help\"..."
$MPICXX --help > /dev/null 2>&1

if [ ! $? -eq 0 ]
then
 logEcho "[Korali] MPI not found. Installing Korali without support for MPI."
 logEcho "         > To use MPI, define the \$MPICXX environment variable."
 USE_MPI=0
else
 log "[Korali] Found $MPICXX for MPI compiler/wrapper."
 log "[Korali] Use 'export MPICXX=(path)' to use a different MPI wrapper."
 USE_CXX=$MPICXX
 MPIFLAGS="-D_KORALI_USE_MPI"
fi

######## Checking support for Python3 ########

log "[Korali] Checking for Python3 support using \"python3 --version\"."
pyver=`python3 --version`
if [ $? -eq 0 ]; then
  log "[Korali] Checking for python3-config."
  python3-config --help >> $logFile 2>&1
  if [ $? -ne 0 ]; then
    logEcho "[Korali] Error: python3-config not found."
    logEcho "[Korali] Solution: Please make sure the python3-dev package is correctly installed."
    exitWithError
  fi
else
  logEcho "[Korali] Error: Python3 not found."
  logEcho "[Korali] Solution: Please make sure the python3-config command is accesible in the PATH environment variable."
  exitWithError
fi
log "[Korali] Python3 version $pyver found."

######## Checking support for pip ########

log "[Korali] Checking for pip support using \"python3 -m pip --version\"..."
python3 -m pip --version >> $logFile 2>&1
if [ $? -ne 0 ]; then
  logEcho "[Korali] Error: pip not found among python3 packages."
  logEcho "[Korali] Solution: Make sure python3 and pip are correctly installed in your system."
  exitWithError
fi
# The --user flag should be set only if we are not inside a virtualenv.
PIP_USER=$(python3 -c "import sys; hasattr(sys, 'real_prefix') or print('--user')")

######## Checking support for Pybind11 ########

log "[Korali] Checking for Pybind11 support using \"python3 -m pybind11 -h\"..."
python3 -m pybind11 -h >> $logFile 2>&1
if [ $? -ne 0 ]; then
  logEcho "[Korali] pybind11 not found, trying to install it automatically."
  python3 -m pip install $PIP_USER pybind11 >> $logFile 2>&1; check
fi

######## Determining Library Flags ########

if [ "$USE_ONEDNN" == "YES" ]; then
 DNNLROOT=`readlink external/oneDNNlink`; check
 ONEDNNCFLAGS="-D_KORALI_USE_ONEDNN -I${DNNLROOT}/include"
 ONEDNNLIBS="-Wl,-rpath -Wl,${DNNLROOT}/lib64/ -L${DNNLROOT}/lib64/ -Wl,-rpath -Wl,${DNNLROOT}/lib/ -L${DNNLROOT}/lib -ldnnl"
fi

if [ "$USE_CUDNN" == "YES" ]; then
  CUDNNCFLAGS+=" -D_KORALI_USE_CUDNN -I${CUDA_ROOT}/include -I${CUDNN_ROOT}/include"
  CUDNNLIBS+=" -lcudart -lcudnn -lcudnn_ops_infer -lcudnn_ops_train -lcudnn_cnn_infer -lcudnn_cnn_train -lcudnn_adv_infer -lcudnn_adv_train -Wl,-rpath -Wl,${CUDA_ROOT}/lib64/ -L${CUDA_ROOT}/lib64/ -Wl,-rpath -Wl,${CUDA_ROOT}/lib -L${CUDA_ROOT}/lib -Wl,-rpath -Wl,${CUDNN_ROOT}/lib64/ -L${CUDNN_ROOT}/lib64/ -Wl,-rpath -Wl,${CUDNN_ROOT}/lib -L${CUDNN_ROOT}/lib"
  logEcho "[Korali] Using CUDA Libraries located at ${CUDA_ROOT}."
  logEcho "[Korali] Using CUDNN Libraries located at ${CUDNN_ROOT}."
fi

if [ "$USE_LIBGP" == "YES" ]; then
 LIBGPROOT=`readlink external/libGPlink`; check
 LIBGPCFLAGS="-D_KORALI_USE_LIBGP -I${LIBGPROOT}/include"
 LIBGPLIBS="-Wl,-rpath -Wl,${LIBGPROOT}/lib64/ -L${LIBGPROOT}/lib64/ -Wl,-rpath -Wl,${LIBGPROOT}/lib -L${LIBGPROOT}/lib -lgp"
fi

LIBCOROOT=`readlink external/libcolink`; check
LIBCOCFLAGS="-I${LIBCOROOT}"
LIBCOLIBS="${LIBCOROOT}/libco.o"

if [ "$USE_EIGEN" == "YES" ]; then
 EIGENROOT=`readlink external/eigenlink`; check
 EIGENCFLAGS="-D_KORALI_USE_EIGEN -I${EIGENROOT}/include/eigen3"
fi

if [ "$USE_RTNORM" == "YES" ]; then
 RTNORMROOT=`readlink external/rtnormlink`; check
 RTNORMCFLAGS="-D_KORALI_USE_RTNORM -I${RTNORMROOT}"
 RTNORMLIBS="${RTNORMROOT}/rtnorm.o"
fi

GSLPREFIX=`./external/gsl-config --prefix`; check
GSLCFLAGS=`./external/gsl-config --cflags`; check
GSLLIBS=`./external/gsl-config --libs`; check
GSLLIBS="${GSLLIBS} -L${GSLPREFIX}/lib -Wl,-rpath -Wl,${GSLPREFIX}/lib -L${GSLPREFIX}/lib64 -Wl,-rpath -Wl,${GSLPREFIX}/lib64"

PYBIND11INCLUDES=`python3 -m pybind11 --includes` ; check
# try python3.8 first (see ABI changes https://docs.python.org/3/whatsnew/3.8.html)
PYTHONLIBS=`python3-config --ldflags --embed`
if [[ $? -ne 0 ]]; then
    # fallback
    PYTHONLIBS=`python3-config --ldflags`; check
fi

CXXARCH="-std=c++17"
which $USE_CXX | grep "cray" >> $logFile 2>&1
if [ $? -eq 0 ]; then
  logEcho "[Korali] Assuming Cray System."
  CC -craype-verbose 2>&1 | grep "driver.CC" >> $logFile 2>&1
  if [ $? -eq 0 ]; then
   logEcho "[Korali] Detected Cray compiler."
   CXXARCH="-hstd=c++17"
   PYTHONLIBS=`echo $PYTHONLIBS | sed 's/-Xlinker//g' | sed 's/-export-dynamic//g'`
  fi
fi

BLASLIBS="-lblas"
PTHREADFLAGS="-pthread"
OMPFLAGS="-fopenmp"
if [[ "$STRIPPED_CXX" == "icpc" || "$STRIPPED_CXX" == "icc" ]]; then
 OMPFLAGS="-qopenmp"
fi
if [[ "$STRIPPED_CXX" == "clang++" ]]; then
 OMPFLAGS="-lomp"
fi


######## Creating Compilation Config File ########

log "[Korali] Creating Compilation Config File..."

echo CXX=$USE_CXX > source/Makefile.conf
echo CXXARCH=$CXXARCH >> source/Makefile.conf
echo PTHREADFLAGS=$PTHREADFLAGS >> source/Makefile.conf
echo OMPFLAGS=$OMPFLAGS >> source/Makefile.conf
echo SHAREDLIB_FLAG=$SHAREDLIB_FLAG >> source/Makefile.conf
echo MPIFLAGS=$MPIFLAGS >> source/Makefile.conf
echo BLASLIBS=$BLASLIBS >> source/Makefile.conf

echo CUDNNCFLAGS=$CUDNNCFLAGS >> source/Makefile.conf
echo CUDNNLIBS=$CUDNNLIBS >> source/Makefile.conf

echo ONEDNNCFLAGS=$ONEDNNCFLAGS >> source/Makefile.conf
echo ONEDNNLIBS=$ONEDNNLIBS >> source/Makefile.conf

echo LIBGPCFLAGS=$LIBGPCFLAGS >> source/Makefile.conf
echo LIBGPLIBS=$LIBGPLIBS >> source/Makefile.conf

echo LIBCOCFLAGS=$LIBCOCFLAGS >> source/Makefile.conf
echo LIBCOLIBS=$LIBCOLIBS >> source/Makefile.conf

echo RTNORMCFLAGS=$RTNORMCFLAGS >> source/Makefile.conf
echo RTNORMLIBS=$RTNORMLIBS >> source/Makefile.conf

echo EIGENCFLAGS=$EIGENCFLAGS >> source/Makefile.conf

echo GSLPREFIX=$GSLPREFIX >> source/Makefile.conf
echo GSLCFLAGS=$GSLCFLAGS >> source/Makefile.conf
echo GSLLIBS=$GSLLIBS  >> source/Makefile.conf

if [ $DISTRIBUTION == "production" ]; then
  OPTFLAGS="-O3 -DNDEBUG"
  WARNINGFLAGS=""
elif [ $DISTRIBUTION == "debug" ]; then
  OPTFLAGS="-O0 -g"
  WARNINGFLAGS="-Wall"
else
  echo "[Korali] Distribution ($DISTRIBUTION) not recognized."
  echo "[Korali] Exit.."
  exit
fi

echo OPTFLAGS=$OPTFLAGS >> source/Makefile.conf
echo WARNINGFLAGS=$WARNINGFLAGS >> source/Makefile.conf
echo MACHINEARCH=$arch >> source/Makefile.conf

echo PYBIND11INCLUDES=$PYBIND11INCLUDES >> source/Makefile.conf
echo PYTHONLIBS=$PYTHONLIBS >> source/Makefile.conf

######## Compiling Korali C++ Engine #########

logEcho "[Korali] Building Korali Source..."
make -C source build >> $logFile 2>&1
if [ $? -ne 0 ]; then
  logEcho "[Korali] Error building Korali."
  exitWithError
fi

logEcho "[Korali] Compiling Korali..."
make -j$NJOBS -C source all >> $logFile 2>&1
if [ $? -ne 0 ]; then
  logEcho "[Korali] Error compiling Korali."
  exitWithError
fi

# For macOS, adjusting library paths
if [ "$arch" == "Darwin" ]; then
 if [ -f ${LIBGPROOT}/lib64/libgp.dylib ]; then
   install_name_tool -change libgp.dylib ${LIBGPROOT}/lib64/libgp.dylib source/libkorali.so; check
 else
   install_name_tool -change libgp.dylib ${LIBGPROOT}/lib/libgp.dylib source/libkorali.so; check
 fi
fi

######## Installing Korali using pip ########

logEcho "[Korali] Installing Korali..."

rm -rf .setup >> $logFile 2>&1
mkdir -p .setup >> $logFile 2>&1

cp docs/VERSION .setup >> $logFile 2>&1
if [ $? -ne 0 ]; then
  logEcho "[Korali] Error copying version file to install folder"
  exitWithError
fi

cp -r source .setup/source >> $logFile 2>&1
if [ $? -ne 0 ]; then
  logEcho "[Korali] Error copying source files to install folder"
  exitWithError
fi

cp -r tools .setup/tools >> $logFile 2>&1
if [ $? -ne 0 ]; then
  logEcho "[Korali] Error copying tool files to install folder"
  exitWithError
fi

# strip symbols is not debug build
if [ $DISTRIBUTION == "debug" ]; then
    strip .setup/libkorali.so >> $logFile 2>&1
fi

cp source/setup.py .setup
python3 -m pip install .setup $PIP_USER --upgrade >> $logFile 2>&1
if [ $? -ne 0 ]; then
  logEcho "[Korali] Error installing Korali's Python module."
  exitWithError
fi

rm -rf .setup >> $logFile 2>&1

echo "------------------------------------------------------------------"
echo "[Korali] Finished installation successfully."
echo "------------------------------------------------------------------"

